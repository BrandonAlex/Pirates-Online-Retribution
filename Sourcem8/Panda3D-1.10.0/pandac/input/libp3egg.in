1436948489
2 3
8 libp3egg 4 hhEq 11 panda3d.egg 
964
996 11 EggUserData 0 4 1960 24 EggUserData::EggUserData 0 2 1 2 447
////////////////////////////////////////////////////////////////////
//     Function: EggUserData::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggUserData::Copy constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
96
inline EggUserData::EggUserData(void);
inline EggUserData::EggUserData(EggUserData const &copy);

997 10 operator = 0 4 1960 23 EggUserData::operator = 0 1 3 233
////////////////////////////////////////////////////////////////////
//     Function: EggUserData::Copy assignment operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
69
inline EggUserData &EggUserData::operator =(EggUserData const &copy);

998 14 get_class_type 0 4 1960 27 EggUserData::get_class_type 0 1 4 0
52
static TypeHandle EggUserData::get_class_type(void);

999 9 EggObject 0 4 1962 20 EggObject::EggObject 0 2 5 6 449
////////////////////////////////////////////////////////////////////
//     Function: EggObject::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggObject::Copy constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
72
EggObject::EggObject(void);
EggObject::EggObject(EggObject const &copy);

1000 10 operator = 0 4 1962 21 EggObject::operator = 0 1 7 234
////////////////////////////////////////////////////////////////////
//     Function: EggObject::Copy assignment operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
56
EggObject &EggObject::operator =(EggObject const &copy);

1001 13 set_user_data 0 4 1962 24 EggObject::set_user_data 0 1 8 1201
////////////////////////////////////////////////////////////////////
//     Function: EggObject::set_user_data
//       Access: Published
//  Description: Sets the user data associated with this object.  This
//               may be any EggUserData-derived object.  The egg
//               library will do nothing with this pointer, except to
//               hold its reference count and return the pointer on
//               request.
//
//               The EggObject maintains multiple different
//               EggUserData pointers, one for each unique type (as
//               reported by get_type()).  If you know that only one
//               type of EggUserData object will be added in your
//               application, you may use the query functions that
//               accept no parameters, but it is recommended that in
//               general you pass in the type of your particular user
//               data, to allow multiple applications to coexist in
//               the same egg data.
//
//               This pointer is also copied by the copy assignment
//               operator and copy constructor.
////////////////////////////////////////////////////////////////////
54
void EggObject::set_user_data(EggUserData *user_data);

1002 13 get_user_data 0 4 1962 24 EggObject::get_user_data 0 2 9 10 699
////////////////////////////////////////////////////////////////////
//     Function: EggObject::get_user_data
//       Access: Published
//  Description: Returns the user data pointer most recently stored on
//               this object, or NULL if nothing was previously
//               stored.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggObject::get_user_data
//       Access: Published
//  Description: Returns the user data pointer of the indicated type,
//               if it exists, or NULL if it does not.
////////////////////////////////////////////////////////////////////
112
EggUserData *EggObject::get_user_data(void) const;
EggUserData *EggObject::get_user_data(TypeHandle type) const;

1003 13 has_user_data 0 4 1962 24 EggObject::has_user_data 0 2 11 12 694
////////////////////////////////////////////////////////////////////
//     Function: EggObject::has_user_data
//       Access: Published
//  Description: Returns true if a generic user data pointer has
//               recently been set and not yet cleared, false
//               otherwise.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggObject::has_user_data
//       Access: Published
//  Description: Returns true if the user data pointer of the
//               indicated type has been set, false otherwise.
////////////////////////////////////////////////////////////////////
96
bool EggObject::has_user_data(void) const;
bool EggObject::has_user_data(TypeHandle type) const;

1004 15 clear_user_data 0 4 1962 26 EggObject::clear_user_data 0 2 13 14 553
////////////////////////////////////////////////////////////////////
//     Function: EggObject::clear_user_data
//       Access: Published
//  Description: Removes *all* user data pointers from the node.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggObject::clear_user_data
//       Access: Published
//  Description: Removes the user data pointer of the indicated type.
////////////////////////////////////////////////////////////////////
88
void EggObject::clear_user_data(void);
void EggObject::clear_user_data(TypeHandle type);

1005 14 get_class_type 0 4 1962 25 EggObject::get_class_type 0 1 15 0
50
static TypeHandle EggObject::get_class_type(void);

1006 19 upcast_to_EggObject 0 12 1963 35 EggNamedObject::upcast_to_EggObject 0 1 21 39
upcast from EggNamedObject to EggObject
53
EggObject *EggNamedObject::upcast_to_EggObject(void);

1007 26 downcast_to_EggNamedObject 0 12 1962 37 EggObject::downcast_to_EggNamedObject 0 1 22 41
downcast from EggObject to EggNamedObject
60
EggNamedObject *EggObject::downcast_to_EggNamedObject(void);

1008 17 upcast_to_Namable 0 12 1963 33 EggNamedObject::upcast_to_Namable 0 1 23 37
upcast from EggNamedObject to Namable
49
Namable *EggNamedObject::upcast_to_Namable(void);

1009 26 downcast_to_EggNamedObject 0 12 1964 35 Namable::downcast_to_EggNamedObject 0 1 24 39
downcast from Namable to EggNamedObject
58
EggNamedObject *Namable::downcast_to_EggNamedObject(void);

1010 14 EggNamedObject 0 4 1963 30 EggNamedObject::EggNamedObject 0 2 16 17 453
////////////////////////////////////////////////////////////////////
//     Function: EggNamedObject::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggNamedObject::Copy constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
130
inline EggNamedObject::EggNamedObject(string const &name = "");
inline EggNamedObject::EggNamedObject(EggNamedObject const &copy);

1011 10 operator = 0 4 1963 26 EggNamedObject::operator = 0 1 18 236
////////////////////////////////////////////////////////////////////
//     Function: EggNamedObject::Copy assignment operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
78
inline EggNamedObject &EggNamedObject::operator =(EggNamedObject const &copy);

1012 6 output 0 4 1963 22 EggNamedObject::output 0 1 19 219
////////////////////////////////////////////////////////////////////
//     Function: EggNamedObject::output
//       Access: Public
//  Description: 
////////////////////////////////////////////////////////////////////
48
void EggNamedObject::output(ostream &out) const;

1013 14 get_class_type 0 4 1963 30 EggNamedObject::get_class_type 0 1 20 0
55
static TypeHandle EggNamedObject::get_class_type(void);

1014 15 ~EggNamedObject 0 4 1963 31 EggNamedObject::~EggNamedObject 0 0 0
38
EggNamedObject::~EggNamedObject(void);

1015 10 operator = 0 4 1965 19 EggNode::operator = 0 1 25 229
////////////////////////////////////////////////////////////////////
//     Function: EggNode::Copy assignment operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
57
inline EggNode &EggNode::operator =(EggNode const &copy);

1016 10 get_parent 0 4 1965 19 EggNode::get_parent 0 1 26 215
////////////////////////////////////////////////////////////////////
//     Function: EggNode::get_parent
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
53
inline EggGroupNode *EggNode::get_parent(void) const;

1017 9 get_depth 0 4 1965 18 EggNode::get_depth 0 1 27 297
////////////////////////////////////////////////////////////////////
//     Function: EggNode::get_depth
//       Access: Public
//  Description: Returns the number of nodes above this node in the
//               egg hierarchy.
////////////////////////////////////////////////////////////////////
42
inline int EggNode::get_depth(void) const;

1018 17 is_under_instance 0 4 1965 26 EggNode::is_under_instance 0 1 28 366
////////////////////////////////////////////////////////////////////
//     Function: EggNode::is_under_instance
//       Access: Public
//  Description: Returns true if there is an <Instance> node somewhere
//               in the egg tree at or above this node, false
//               otherwise.
////////////////////////////////////////////////////////////////////
51
inline bool EggNode::is_under_instance(void) const;

1019 18 is_under_transform 0 4 1965 27 EggNode::is_under_transform 0 1 29 368
////////////////////////////////////////////////////////////////////
//     Function: EggNode::is_under_transform
//       Access: Public
//  Description: Returns true if there is a <Transform> entry somewhere
//               in the egg tree at or above this node, false
//               otherwise.
////////////////////////////////////////////////////////////////////
52
inline bool EggNode::is_under_transform(void) const;

1020 14 is_local_coord 0 4 1965 23 EggNode::is_local_coord 0 1 30 443
////////////////////////////////////////////////////////////////////
//     Function: EggNode::is_local_coord
//       Access: Public
//  Description: Returns true if this node's vertices are not in the
//               global coordinate space.  This will be the case if
//               there was an <Instance> node under a transform at or
//               above this node.
////////////////////////////////////////////////////////////////////
48
inline bool EggNode::is_local_coord(void) const;

1021 16 get_vertex_frame 0 4 1965 25 EggNode::get_vertex_frame 0 1 31 1112
////////////////////////////////////////////////////////////////////
//     Function: EggNode::get_vertex_frame
//       Access: Public
//  Description: Returns the coordinate frame of the vertices
//               referenced by primitives at or under this node.  This
//               is not the same as get_node_frame().
//
//               Generally, vertices in an egg file are stored in the
//               global coordinate space, regardless of the transforms
//               defined at each node.  Thus, get_vertex_frame() will
//               usually return the identity transform (global
//               coordinate space).  However, primitives under an
//               <Instance> entry reference their vertices in the
//               coordinate system under effect at the time of the
//               <Instance>.  Thus, nodes under an <Instance> entry
//               may return this non-identity matrix.
//
//               Specifically, this may return a non-identity matrix
//               only if is_local_coord() is true.
////////////////////////////////////////////////////////////////////
62
inline LMatrix4d const &EggNode::get_vertex_frame(void) const;

1022 14 get_node_frame 0 4 1965 23 EggNode::get_node_frame 0 1 32 372
////////////////////////////////////////////////////////////////////
//     Function: EggNode::get_node_frame
//       Access: Public
//  Description: Returns the coordinate frame of the node itself.
//               This is simply the net product of all transformations
//               up to the root.
////////////////////////////////////////////////////////////////////
60
inline LMatrix4d const &EggNode::get_node_frame(void) const;

1023 20 get_vertex_frame_inv 0 4 1965 29 EggNode::get_vertex_frame_inv 0 1 33 333
////////////////////////////////////////////////////////////////////
//     Function: EggNode::get_vertex_frame_inv
//       Access: Public
//  Description: Returns the inverse of the matrix returned by
//               get_vertex_frame().  See get_vertex_frame().
////////////////////////////////////////////////////////////////////
66
inline LMatrix4d const &EggNode::get_vertex_frame_inv(void) const;

1024 18 get_node_frame_inv 0 4 1965 27 EggNode::get_node_frame_inv 0 1 34 327
////////////////////////////////////////////////////////////////////
//     Function: EggNode::get_node_frame_inv
//       Access: Public
//  Description: Returns the inverse of the matrix returned by
//               get_node_frame().  See get_node_frame().
////////////////////////////////////////////////////////////////////
64
inline LMatrix4d const &EggNode::get_node_frame_inv(void) const;

1025 18 get_vertex_to_node 0 4 1965 27 EggNode::get_vertex_to_node 0 1 35 503
////////////////////////////////////////////////////////////////////
//     Function: EggNode::get_vertex_to_node
//       Access: Public
//  Description: Returns the transformation matrix suitable for
//               converting the vertices as read from the egg file
//               into the coordinate space of the node.  This is the
//               same thing as:
//
//               get_vertex_frame() * get_node_frame_inv()
//
////////////////////////////////////////////////////////////////////
64
inline LMatrix4d const &EggNode::get_vertex_to_node(void) const;

1026 18 get_node_to_vertex 0 4 1965 27 EggNode::get_node_to_vertex 0 1 36 535
////////////////////////////////////////////////////////////////////
//     Function: EggNode::get_node_to_vertex
//       Access: Public
//  Description: Returns the transformation matrix suitable for
//               converting vertices in the coordinate space of the
//               node to the appropriate coordinate space for storing
//               in the egg file.  This is the same thing as:
//
//               get_node_frame() * get_vertex_frame_inv()
//
////////////////////////////////////////////////////////////////////
64
inline LMatrix4d const &EggNode::get_node_to_vertex(void) const;

1027 20 get_vertex_frame_ptr 0 4 1965 29 EggNode::get_vertex_frame_ptr 0 1 37 366
////////////////////////////////////////////////////////////////////
//     Function: EggNode::get_vertex_frame_ptr
//       Access: Public
//  Description: Returns either a NULL pointer or a unique pointer
//               shared by nodes with the same get_vertex_frame()
//               matrix.
////////////////////////////////////////////////////////////////////
66
inline LMatrix4d const *EggNode::get_vertex_frame_ptr(void) const;

1028 18 get_node_frame_ptr 0 4 1965 27 EggNode::get_node_frame_ptr 0 1 38 362
////////////////////////////////////////////////////////////////////
//     Function: EggNode::get_node_frame_ptr
//       Access: Public
//  Description: Returns either a NULL pointer or a unique pointer
//               shared by nodes with the same get_node_frame()
//               matrix.
////////////////////////////////////////////////////////////////////
64
inline LMatrix4d const *EggNode::get_node_frame_ptr(void) const;

1029 24 get_vertex_frame_inv_ptr 0 4 1965 33 EggNode::get_vertex_frame_inv_ptr 0 1 39 374
////////////////////////////////////////////////////////////////////
//     Function: EggNode::get_vertex_frame_inv_ptr
//       Access: Public
//  Description: Returns either a NULL pointer or a unique pointer
//               shared by nodes with the same get_vertex_frame_inv()
//               matrix.
////////////////////////////////////////////////////////////////////
70
inline LMatrix4d const *EggNode::get_vertex_frame_inv_ptr(void) const;

1030 22 get_node_frame_inv_ptr 0 4 1965 31 EggNode::get_node_frame_inv_ptr 0 1 40 370
////////////////////////////////////////////////////////////////////
//     Function: EggNode::get_node_frame_inv_ptr
//       Access: Public
//  Description: Returns either a NULL pointer or a unique pointer
//               shared by nodes with the same get_node_frame_inv()
//               matrix.
////////////////////////////////////////////////////////////////////
68
inline LMatrix4d const *EggNode::get_node_frame_inv_ptr(void) const;

1031 22 get_vertex_to_node_ptr 0 4 1965 31 EggNode::get_vertex_to_node_ptr 0 1 41 370
////////////////////////////////////////////////////////////////////
//     Function: EggNode::get_vertex_to_node_ptr
//       Access: Public
//  Description: Returns either a NULL pointer or a unique pointer
//               shared by nodes with the same get_vertex_to_node()
//               matrix.
////////////////////////////////////////////////////////////////////
68
inline LMatrix4d const *EggNode::get_vertex_to_node_ptr(void) const;

1032 22 get_node_to_vertex_ptr 0 4 1965 31 EggNode::get_node_to_vertex_ptr 0 1 42 370
////////////////////////////////////////////////////////////////////
//     Function: EggNode::get_node_to_vertex_ptr
//       Access: Public
//  Description: Returns either a NULL pointer or a unique pointer
//               shared by nodes with the same get_node_to_vertex()
//               matrix.
////////////////////////////////////////////////////////////////////
68
inline LMatrix4d const *EggNode::get_node_to_vertex_ptr(void) const;

1033 9 transform 0 4 1965 18 EggNode::transform 0 1 43 308
////////////////////////////////////////////////////////////////////
//     Function: EggNode::transform
//       Access: Public
//  Description: Applies the indicated transformation to the node and
//               all of its descendants.
////////////////////////////////////////////////////////////////////
53
inline void EggNode::transform(LMatrix4d const &mat);

1034 23 transform_vertices_only 0 4 1965 32 EggNode::transform_vertices_only 0 1 44 476
////////////////////////////////////////////////////////////////////
//     Function: EggNode::transform_vertices_only
//       Access: Public
//  Description: Applies the indicated transformation only to vertices
//               that appear in global space within vertex pools at
//               this node and below.  Joints and other transforms are
//               not affected, nor are local vertices.
////////////////////////////////////////////////////////////////////
67
inline void EggNode::transform_vertices_only(LMatrix4d const &mat);

1035 18 flatten_transforms 0 4 1965 27 EggNode::flatten_transforms 0 1 45 699
////////////////////////////////////////////////////////////////////
//     Function: EggNode::flatten_transforms
//       Access: Public
//  Description: Removes any transform and instance records from this
//               node in the scene graph and below.  If an instance
//               node is encountered, removes the instance and applies
//               the transform to its vertices, duplicating vertices
//               if necessary.
//
//               Since this function may result in duplicated
//               vertices, it may be a good idea to call
//               remove_unused_vertices() after calling this.
////////////////////////////////////////////////////////////////////
46
inline void EggNode::flatten_transforms(void);

1036 13 apply_texmats 0 4 1965 22 EggNode::apply_texmats 0 1 46 398
////////////////////////////////////////////////////////////////////
//     Function: EggNode::apply_texmats
//       Access: Public
//  Description: Applies the texture matrices to the UV's of the
//               vertices that reference them, and then removes the
//               texture matrices from the textures themselves.
////////////////////////////////////////////////////////////////////
34
void EggNode::apply_texmats(void);

1037 11 rename_node 0 4 1965 20 EggNode::rename_node 0 1 47 254
////////////////////////////////////////////////////////////////////
//     Function: EggNode::rename_node
//       Access: Published
//  Description: Rename by stripping out the prefix
////////////////////////////////////////////////////////////////////
53
int EggNode::rename_node(vector_string strip_prefix);

1038 8 is_joint 0 6 1965 17 EggNode::is_joint 0 1 48 504
////////////////////////////////////////////////////////////////////
//     Function: EggNode::is_joint
//       Access: Public, Virtual
//  Description: Returns true if this particular node represents a
//               <Joint> entry or not.  This is a handy thing to know
//               since Joints are sorted to the end of their sibling
//               list when writing an egg file.  See
//               EggGroupNode::write().
////////////////////////////////////////////////////////////////////
43
virtual bool EggNode::is_joint(void) const;

1039 14 is_anim_matrix 0 6 1965 23 EggNode::is_anim_matrix 0 1 49 341
////////////////////////////////////////////////////////////////////
//     Function: EggNode::is_anim_matrix
//       Access: Public, Virtual
//  Description: Returns true if this node represents a table of
//               animation transformation data, false otherwise.
////////////////////////////////////////////////////////////////////
49
virtual bool EggNode::is_anim_matrix(void) const;

1040 20 determine_alpha_mode 0 6 1965 29 EggNode::determine_alpha_mode 0 1 50 549
////////////////////////////////////////////////////////////////////
//     Function: EggNode::determine_alpha_mode
//       Access: Public, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               or EggPrimitive or some such object at this level or
//               above this node that has an alpha_mode other than
//               AM_unspecified.  Returns a valid EggRenderMode pointer
//               if one is found, or NULL otherwise.
////////////////////////////////////////////////////////////////////
59
virtual EggRenderMode *EggNode::determine_alpha_mode(void);

1041 26 determine_depth_write_mode 0 6 1965 35 EggNode::determine_depth_write_mode 0 1 51 561
////////////////////////////////////////////////////////////////////
//     Function: EggNode::determine_depth_write_mode
//       Access: Public, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               or EggPrimitive or some such object at this level or
//               above this node that has a depth_write_mode other than
//               DWM_unspecified.  Returns a valid EggRenderMode pointer
//               if one is found, or NULL otherwise.
////////////////////////////////////////////////////////////////////
65
virtual EggRenderMode *EggNode::determine_depth_write_mode(void);

1042 25 determine_depth_test_mode 0 6 1965 34 EggNode::determine_depth_test_mode 0 1 52 559
////////////////////////////////////////////////////////////////////
//     Function: EggNode::determine_depth_test_mode
//       Access: Public, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               or EggPrimitive or some such object at this level or
//               above this node that has a depth_test_mode other than
//               DTM_unspecified.  Returns a valid EggRenderMode pointer
//               if one is found, or NULL otherwise.
////////////////////////////////////////////////////////////////////
64
virtual EggRenderMode *EggNode::determine_depth_test_mode(void);

1043 25 determine_visibility_mode 0 6 1965 34 EggNode::determine_visibility_mode 0 1 53 558
////////////////////////////////////////////////////////////////////
//     Function: EggNode::determine_visibility_mode
//       Access: Public, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               or EggPrimitive or some such object at this level or
//               above this node that has a visibility_mode other than
//               VM_unspecified.  Returns a valid EggRenderMode pointer
//               if one is found, or NULL otherwise.
////////////////////////////////////////////////////////////////////
64
virtual EggRenderMode *EggNode::determine_visibility_mode(void);

1044 22 determine_depth_offset 0 6 1965 31 EggNode::determine_depth_offset 0 1 54 535
////////////////////////////////////////////////////////////////////
//     Function: EggNode::determine_depth_offset
//       Access: Public, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               or EggPrimitive or some such object at this level or
//               above this node that has a depth_offset specified.
//               Returns a valid EggRenderMode pointer if one is found,
//               or NULL otherwise.
////////////////////////////////////////////////////////////////////
61
virtual EggRenderMode *EggNode::determine_depth_offset(void);

1045 20 determine_draw_order 0 6 1965 29 EggNode::determine_draw_order 0 1 55 531
////////////////////////////////////////////////////////////////////
//     Function: EggNode::determine_draw_order
//       Access: Public, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               or EggPrimitive or some such object at this level or
//               above this node that has a draw_order specified.
//               Returns a valid EggRenderMode pointer if one is found,
//               or NULL otherwise.
////////////////////////////////////////////////////////////////////
59
virtual EggRenderMode *EggNode::determine_draw_order(void);

1046 13 determine_bin 0 6 1965 22 EggNode::determine_bin 0 1 56 518
////////////////////////////////////////////////////////////////////
//     Function: EggNode::determine_bin
//       Access: Public, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               or EggPrimitive or some such object at this level or
//               above this node that has a bin specified.  Returns a
//               valid EggRenderMode pointer if one is found, or NULL
//               otherwise.
////////////////////////////////////////////////////////////////////
52
virtual EggRenderMode *EggNode::determine_bin(void);

1047 17 determine_indexed 0 6 1965 26 EggNode::determine_indexed 0 1 57 615
////////////////////////////////////////////////////////////////////
//     Function: EggNode::determine_indexed
//       Access: Public, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               at this level or above that has the "indexed" scalar
//               set.  Returns the value of the indexed scalar if it
//               is found, or false if it is not.
//
//               In other words, returns true if the "indexed" flag is
//               in effect for the indicated node, false otherwise.
////////////////////////////////////////////////////////////////////
46
virtual bool EggNode::determine_indexed(void);

1048 15 determine_decal 0 6 1965 24 EggNode::determine_decal 0 1 58 603
////////////////////////////////////////////////////////////////////
//     Function: EggNode::determine_decal
//       Access: Public, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               at this level or above that has the "decal" flag
//               set.  Returns the value of the decal flag if it
//               is found, or false if it is not.
//
//               In other words, returns true if the "decal" flag is
//               in effect for the indicated node, false otherwise.
////////////////////////////////////////////////////////////////////
44
virtual bool EggNode::determine_decal(void);

1049 5 write 0 6 1965 14 EggNode::write 0 1 59 0
70
virtual void EggNode::write(ostream &out, int indent_level) const = 0;

1050 9 parse_egg 0 4 1965 18 EggNode::parse_egg 0 1 60 575
////////////////////////////////////////////////////////////////////
//     Function: EggNode::parse_egg
//       Access: Public
//  Description: Parses the egg syntax given in the indicate string as
//               if it had been read from the egg file within this
//               object's definition.  Updates the object accordingly.
//               Returns true if successful, false if there was some
//               parse error or if the object does not support this
//               functionality.
////////////////////////////////////////////////////////////////////
50
bool EggNode::parse_egg(string const &egg_syntax);

1051 20 test_under_integrity 0 4 1965 29 EggNode::test_under_integrity 0 1 61 0
47
void EggNode::test_under_integrity(void) const;

1052 14 get_class_type 0 4 1965 23 EggNode::get_class_type 0 1 62 0
48
static TypeHandle EggNode::get_class_type(void);

1053 8 ~EggNode 0 4 1965 17 EggNode::~EggNode 0 0 0
24
EggNode::~EggNode(void);

1054 10 operator = 0 4 1966 23 EggAnimData::operator = 0 1 63 233
////////////////////////////////////////////////////////////////////
//     Function: EggAnimData::Copy assignment operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
69
inline EggAnimData &EggAnimData::operator =(EggAnimData const &copy);

1055 7 set_fps 0 4 1966 20 EggAnimData::set_fps 0 1 64 216
////////////////////////////////////////////////////////////////////
//     Function: EggAnimData::set_fps
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
46
inline void EggAnimData::set_fps(double type);

1056 9 clear_fps 0 4 1966 22 EggAnimData::clear_fps 0 1 65 218
////////////////////////////////////////////////////////////////////
//     Function: EggAnimData::clear_fps
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
41
inline void EggAnimData::clear_fps(void);

1057 7 has_fps 0 4 1966 20 EggAnimData::has_fps 0 1 66 216
////////////////////////////////////////////////////////////////////
//     Function: EggAnimData::has_fps
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
45
inline bool EggAnimData::has_fps(void) const;

1058 7 get_fps 0 4 1966 20 EggAnimData::get_fps 0 1 67 262
////////////////////////////////////////////////////////////////////
//     Function: EggAnimData::get_fps
//       Access: Public
//  Description: This is only valid if has_fps() returns true.
////////////////////////////////////////////////////////////////////
47
inline double EggAnimData::get_fps(void) const;

1059 10 clear_data 0 4 1966 23 EggAnimData::clear_data 0 1 68 259
////////////////////////////////////////////////////////////////////
//     Function: EggAnimData::clear_data
//       Access: Public
//  Description: Removes all data and empties the table.
////////////////////////////////////////////////////////////////////
42
inline void EggAnimData::clear_data(void);

1060 8 add_data 0 4 1966 21 EggAnimData::add_data 0 1 69 253
////////////////////////////////////////////////////////////////////
//     Function: EggAnimData::add_data
//       Access: Public
//  Description: Adds a single element to the table.
////////////////////////////////////////////////////////////////////
48
inline void EggAnimData::add_data(double value);

1061 8 get_size 0 4 1966 21 EggAnimData::get_size 0 1 70 262
////////////////////////////////////////////////////////////////////
//     Function: EggAnimData::get_size
//       Access: Public
//  Description: Returns the number of elements in the table.
////////////////////////////////////////////////////////////////////
45
inline int EggAnimData::get_size(void) const;

1062 8 quantize 0 4 1966 21 EggAnimData::quantize 0 1 71 303
////////////////////////////////////////////////////////////////////
//     Function: EggAnimData::quantize
//       Access: Public
//  Description: Rounds each element of the table to the nearest
//               multiple of quantum.
////////////////////////////////////////////////////////////////////
43
void EggAnimData::quantize(double quantum);

1063 14 get_class_type 0 4 1966 27 EggAnimData::get_class_type 0 1 72 0
52
static TypeHandle EggAnimData::get_class_type(void);

1064 12 ~EggAnimData 0 4 1966 25 EggAnimData::~EggAnimData 0 0 0
32
EggAnimData::~EggAnimData(void);

1065 14 EggAnimPreload 0 4 1967 30 EggAnimPreload::EggAnimPreload 0 2 73 74 453
////////////////////////////////////////////////////////////////////
//     Function: EggAnimPreload::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggAnimPreload::Copy constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
130
inline EggAnimPreload::EggAnimPreload(string const &name = "");
inline EggAnimPreload::EggAnimPreload(EggAnimPreload const &copy);

1066 10 operator = 0 4 1967 26 EggAnimPreload::operator = 0 1 75 236
////////////////////////////////////////////////////////////////////
//     Function: EggAnimPreload::Copy assignment operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
78
inline EggAnimPreload &EggAnimPreload::operator =(EggAnimPreload const &copy);

1067 7 set_fps 0 4 1967 23 EggAnimPreload::set_fps 0 1 76 219
////////////////////////////////////////////////////////////////////
//     Function: EggAnimPreload::set_fps
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
48
inline void EggAnimPreload::set_fps(double fps);

1068 9 clear_fps 0 4 1967 25 EggAnimPreload::clear_fps 0 1 77 221
////////////////////////////////////////////////////////////////////
//     Function: EggAnimPreload::clear_fps
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
44
inline void EggAnimPreload::clear_fps(void);

1069 7 has_fps 0 4 1967 23 EggAnimPreload::has_fps 0 1 78 219
////////////////////////////////////////////////////////////////////
//     Function: EggAnimPreload::has_fps
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
48
inline bool EggAnimPreload::has_fps(void) const;

1070 7 get_fps 0 4 1967 23 EggAnimPreload::get_fps 0 1 79 265
////////////////////////////////////////////////////////////////////
//     Function: EggAnimPreload::get_fps
//       Access: Public
//  Description: This is only valid if has_fps() returns true.
////////////////////////////////////////////////////////////////////
50
inline double EggAnimPreload::get_fps(void) const;

1071 14 set_num_frames 0 4 1967 30 EggAnimPreload::set_num_frames 0 1 80 226
////////////////////////////////////////////////////////////////////
//     Function: EggAnimPreload::set_num_frames
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
59
inline void EggAnimPreload::set_num_frames(int num_frames);

1072 16 clear_num_frames 0 4 1967 32 EggAnimPreload::clear_num_frames 0 1 81 228
////////////////////////////////////////////////////////////////////
//     Function: EggAnimPreload::clear_num_frames
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
51
inline void EggAnimPreload::clear_num_frames(void);

1073 14 has_num_frames 0 4 1967 30 EggAnimPreload::has_num_frames 0 1 82 226
////////////////////////////////////////////////////////////////////
//     Function: EggAnimPreload::has_num_frames
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
55
inline bool EggAnimPreload::has_num_frames(void) const;

1074 14 get_num_frames 0 4 1967 30 EggAnimPreload::get_num_frames 0 1 83 279
////////////////////////////////////////////////////////////////////
//     Function: EggAnimPreload::get_num_frames
//       Access: Public
//  Description: This is only valid if has_num_frames() returns true.
////////////////////////////////////////////////////////////////////
54
inline int EggAnimPreload::get_num_frames(void) const;

1075 14 get_class_type 0 4 1967 30 EggAnimPreload::get_class_type 0 1 84 0
55
static TypeHandle EggAnimPreload::get_class_type(void);

1076 15 ~EggAnimPreload 0 4 1967 31 EggAnimPreload::~EggAnimPreload 0 0 0
38
EggAnimPreload::~EggAnimPreload(void);

1077 20 upcast_to_MemoryBase 0 12 1968 35 EggAttributes::upcast_to_MemoryBase 0 1 105 39
upcast from EggAttributes to MemoryBase
54
MemoryBase *EggAttributes::upcast_to_MemoryBase(void);

1078 25 downcast_to_EggAttributes 0 12 1969 37 MemoryBase::downcast_to_EggAttributes 0 1 106 41
downcast from MemoryBase to EggAttributes
59
EggAttributes *MemoryBase::downcast_to_EggAttributes(void);

1079 13 EggAttributes 0 4 1968 28 EggAttributes::EggAttributes 0 2 85 86 457
////////////////////////////////////////////////////////////////////
//     Function: EggAttributes::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggAttributes::Copy constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
92
EggAttributes::EggAttributes(void);
EggAttributes::EggAttributes(EggAttributes const &copy);

1080 10 operator = 0 4 1968 25 EggAttributes::operator = 0 1 87 238
////////////////////////////////////////////////////////////////////
//     Function: EggAttributes::Copy assignment operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
68
EggAttributes &EggAttributes::operator =(EggAttributes const &copy);

1081 14 ~EggAttributes 0 6 1968 29 EggAttributes::~EggAttributes 0 0 233
////////////////////////////////////////////////////////////////////
//     Function: EggAttributes::Destructor
//       Access: Published, Virtual
//  Description:
////////////////////////////////////////////////////////////////////
44
virtual EggAttributes::~EggAttributes(void);

1082 10 has_normal 0 4 1968 25 EggAttributes::has_normal 0 1 88 224
////////////////////////////////////////////////////////////////////
//     Function: EggAttributes::has_normal
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
50
inline bool EggAttributes::has_normal(void) const;

1083 10 get_normal 0 4 1968 25 EggAttributes::get_normal 0 1 89 224
////////////////////////////////////////////////////////////////////
//     Function: EggAttributes::get_normal
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
61
inline LNormald const &EggAttributes::get_normal(void) const;

1084 10 set_normal 0 4 1968 25 EggAttributes::set_normal 0 1 90 224
////////////////////////////////////////////////////////////////////
//     Function: EggAttributes::set_normal
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
62
inline void EggAttributes::set_normal(LNormald const &normal);

1085 12 clear_normal 0 4 1968 27 EggAttributes::clear_normal 0 1 91 226
////////////////////////////////////////////////////////////////////
//     Function: EggAttributes::clear_normal
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
46
inline void EggAttributes::clear_normal(void);

1086 14 matches_normal 0 4 1968 29 EggAttributes::matches_normal 0 1 92 345
////////////////////////////////////////////////////////////////////
//     Function: EggAttributes::matches_normal
//       Access: Published
//  Description: Returns true if this normal matches that of the other
//               EggAttributes object, include the morph list.
////////////////////////////////////////////////////////////////////
76
inline bool EggAttributes::matches_normal(EggAttributes const &other) const;

1087 11 copy_normal 0 4 1968 26 EggAttributes::copy_normal 0 1 93 376
////////////////////////////////////////////////////////////////////
//     Function: EggAttributes::copy_normal
//       Access: Published
//  Description: Sets this normal to be the same as the other's,
//               include morphs.  If the other has no normal, this
//               clears the normal.
////////////////////////////////////////////////////////////////////
67
inline void EggAttributes::copy_normal(EggAttributes const &other);

1088 9 has_color 0 4 1968 24 EggAttributes::has_color 0 1 94 223
////////////////////////////////////////////////////////////////////
//     Function: EggAttributes::has_color
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
49
inline bool EggAttributes::has_color(void) const;

1089 9 get_color 0 4 1968 24 EggAttributes::get_color 0 1 95 333
////////////////////////////////////////////////////////////////////
//     Function: EggAttributes::get_color
//       Access: Published
//  Description: Returns the color set on this particular attribute.
//               If there is no color set, returns white.
////////////////////////////////////////////////////////////////////
51
inline LColor EggAttributes::get_color(void) const;

1090 9 set_color 0 4 1968 24 EggAttributes::set_color 0 1 96 214
////////////////////////////////////////////////////////////////////
//     Function: EggAttributes::
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
58
inline void EggAttributes::set_color(LColor const &Color);

1091 11 clear_color 0 4 1968 26 EggAttributes::clear_color 0 1 97 214
////////////////////////////////////////////////////////////////////
//     Function: EggAttributes::
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
45
inline void EggAttributes::clear_color(void);

1092 13 matches_color 0 4 1968 28 EggAttributes::matches_color 0 1 98 343
////////////////////////////////////////////////////////////////////
//     Function: EggAttributes::matches_color
//       Access: Published
//  Description: Returns true if this color matches that of the other
//               EggAttributes object, include the morph list.
////////////////////////////////////////////////////////////////////
75
inline bool EggAttributes::matches_color(EggAttributes const &other) const;

1093 10 copy_color 0 4 1968 25 EggAttributes::copy_color 0 1 99 372
////////////////////////////////////////////////////////////////////
//     Function: EggAttributes::copy_color
//       Access: Published
//  Description: Sets this color to be the same as the other's,
//               include morphs.  If the other has no color, this
//               clears the color.
////////////////////////////////////////////////////////////////////
66
inline void EggAttributes::copy_color(EggAttributes const &other);

1094 5 write 0 4 1968 20 EggAttributes::write 0 1 100 304
////////////////////////////////////////////////////////////////////
//     Function: EggAttributes::write
//       Access: Published
//  Description: Writes the attributes to the indicated output stream in
//               Egg format.
////////////////////////////////////////////////////////////////////
64
void EggAttributes::write(ostream &out, int indent_level) const;

1095 15 sorts_less_than 0 4 1968 30 EggAttributes::sorts_less_than 0 1 101 399
////////////////////////////////////////////////////////////////////
//     Function: EggAttributes::sorts_less_than
//       Access: Published
//  Description: An ordering operator to compare two vertices for
//               sorting order.  This imposes an arbitrary ordering
//               useful to identify unique vertices.
////////////////////////////////////////////////////////////////////
77
inline bool EggAttributes::sorts_less_than(EggAttributes const &other) const;

1096 10 compare_to 0 4 1968 25 EggAttributes::compare_to 0 1 102 394
////////////////////////////////////////////////////////////////////
//     Function: EggAttributes::compare_to
//       Access: Published
//  Description: An ordering operator to compare two vertices for
//               sorting order.  This imposes an arbitrary ordering
//               useful to identify unique vertices.
////////////////////////////////////////////////////////////////////
64
int EggAttributes::compare_to(EggAttributes const &other) const;

1097 9 transform 0 4 1968 24 EggAttributes::transform 0 1 103 312
////////////////////////////////////////////////////////////////////
//     Function: EggAttributes::transform
//       Access: Published, Virtual
//  Description: Applies the indicated transformation matrix to the
//               attributes.
////////////////////////////////////////////////////////////////////
52
void EggAttributes::transform(LMatrix4d const &mat);

1098 12 get_dnormals 0 20 1968 27 EggAttributes::get_dnormals 0 1 107 55
getter for EggMorphNormalList EggAttributes::_dnormals;
59
EggMorphNormalList EggAttributes::get_dnormals(void) const;

1099 10 get_drgbas 0 20 1968 25 EggAttributes::get_drgbas 0 1 108 52
getter for EggMorphColorList EggAttributes::_drgbas;
56
EggMorphColorList EggAttributes::get_drgbas(void) const;

1100 14 get_class_type 0 4 1968 29 EggAttributes::get_class_type 0 1 104 0
54
static TypeHandle EggAttributes::get_class_type(void);

1101 11 EggVertexUV 0 4 1974 24 EggVertexUV::EggVertexUV 0 3 109 110 111 678
////////////////////////////////////////////////////////////////////
//     Function: EggVertexUV::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggVertexUV::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggVertexUV::Copy Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
188
EggVertexUV::EggVertexUV(string const &name, LTexCoordd const &uv);
EggVertexUV::EggVertexUV(string const &name, LTexCoord3d const &uvw);
EggVertexUV::EggVertexUV(EggVertexUV const &copy);

1102 10 operator = 0 4 1974 23 EggVertexUV::operator = 0 1 112 236
////////////////////////////////////////////////////////////////////
//     Function: EggVertexUV::Copy Assignment Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
62
EggVertexUV &EggVertexUV::operator =(EggVertexUV const &copy);

1103 11 filter_name 0 4 1974 24 EggVertexUV::filter_name 0 1 113 511
////////////////////////////////////////////////////////////////////
//     Function: EggVertexUV::filter_name
//       Access: Published, Static
//  Description: Returns the actual name that should be set for a
//               given name string.  Usually this is the same string
//               that is input, but for historical reasons the texture
//               coordinate name "default" is mapped to the empty
//               string.
////////////////////////////////////////////////////////////////////
66
static inline string EggVertexUV::filter_name(string const &name);

1104 8 set_name 0 4 1974 21 EggVertexUV::set_name 0 1 114 220
////////////////////////////////////////////////////////////////////
//     Function: EggVertexUV::set_name
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
54
inline void EggVertexUV::set_name(string const &name);

1105 18 get_num_dimensions 0 4 1974 31 EggVertexUV::get_num_dimensions 0 1 115 401
////////////////////////////////////////////////////////////////////
//     Function: EggVertexUV::get_num_dimensions
//       Access: Published
//  Description: Returns the number of components of the texture
//               coordinate set.  This is either 2 (the normal case)
//               or 3 (for a 3-d texture coordinate).
////////////////////////////////////////////////////////////////////
55
inline int EggVertexUV::get_num_dimensions(void) const;

1106 5 has_w 0 4 1974 18 EggVertexUV::has_w 0 1 116 369
////////////////////////////////////////////////////////////////////
//     Function: EggVertexUV::has_w
//       Access: Published
//  Description: Returns true if the texture coordinate has a third, w
//               component, false if it is just a normal 2-d texture
//               coordinate.
////////////////////////////////////////////////////////////////////
43
inline bool EggVertexUV::has_w(void) const;

1107 6 get_uv 0 4 1974 19 EggVertexUV::get_uv 0 1 117 302
////////////////////////////////////////////////////////////////////
//     Function: EggVertexUV::get_uv
//       Access: Published
//  Description: Returns the texture coordinate pair, if
//               get_num_dimensions() is 2.
////////////////////////////////////////////////////////////////////
50
inline LTexCoordd EggVertexUV::get_uv(void) const;

1108 7 get_uvw 0 4 1974 20 EggVertexUV::get_uvw 0 1 118 435
////////////////////////////////////////////////////////////////////
//     Function: EggVertexUV::get_uvw
//       Access: Published
//  Description: Returns the texture coordinate triple, if
//               get_num_dimensions() is 3.  This is also legal to
//               call if get_num_dimensions() is 2 (but the last
//               dimension will be zero).
////////////////////////////////////////////////////////////////////
59
inline LTexCoord3d const &EggVertexUV::get_uvw(void) const;

1109 6 set_uv 0 4 1974 19 EggVertexUV::set_uv 0 1 119 372
////////////////////////////////////////////////////////////////////
//     Function: EggVertexUV::set_uv
//       Access: Published
//  Description: Sets the texture coordinate pair.  This makes the
//               texture coordinate a 2-d texture coordinate, which is
//               the usual case.
////////////////////////////////////////////////////////////////////
60
inline void EggVertexUV::set_uv(LTexCoordd const &texCoord);

1110 7 set_uvw 0 4 1974 20 EggVertexUV::set_uvw 0 1 120 333
////////////////////////////////////////////////////////////////////
//     Function: EggVertexUV::set_uvw
//       Access: Published
//  Description: Sets the texture coordinate triple.  This makes the
//               texture coordinate a 3-d texture coordinate.
////////////////////////////////////////////////////////////////////
62
inline void EggVertexUV::set_uvw(LTexCoord3d const &texCoord);

1111 11 has_tangent 0 4 1974 24 EggVertexUV::has_tangent 0 1 121 223
////////////////////////////////////////////////////////////////////
//     Function: EggVertexUV::has_tangent
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
49
inline bool EggVertexUV::has_tangent(void) const;

1112 11 get_tangent 0 4 1974 24 EggVertexUV::get_tangent 0 1 122 223
////////////////////////////////////////////////////////////////////
//     Function: EggVertexUV::get_tangent
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
60
inline LNormald const &EggVertexUV::get_tangent(void) const;

1113 11 set_tangent 0 4 1974 24 EggVertexUV::set_tangent 0 1 123 223
////////////////////////////////////////////////////////////////////
//     Function: EggVertexUV::set_tangent
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
62
inline void EggVertexUV::set_tangent(LNormald const &tangent);

1114 13 clear_tangent 0 4 1974 26 EggVertexUV::clear_tangent 0 1 124 225
////////////////////////////////////////////////////////////////////
//     Function: EggVertexUV::clear_tangent
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
45
inline void EggVertexUV::clear_tangent(void);

1115 12 has_binormal 0 4 1974 25 EggVertexUV::has_binormal 0 1 125 224
////////////////////////////////////////////////////////////////////
//     Function: EggVertexUV::has_binormal
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
50
inline bool EggVertexUV::has_binormal(void) const;

1116 12 get_binormal 0 4 1974 25 EggVertexUV::get_binormal 0 1 126 224
////////////////////////////////////////////////////////////////////
//     Function: EggVertexUV::get_binormal
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
61
inline LNormald const &EggVertexUV::get_binormal(void) const;

1117 12 set_binormal 0 4 1974 25 EggVertexUV::set_binormal 0 1 127 224
////////////////////////////////////////////////////////////////////
//     Function: EggVertexUV::set_binormal
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
64
inline void EggVertexUV::set_binormal(LNormald const &binormal);

1118 14 clear_binormal 0 4 1974 27 EggVertexUV::clear_binormal 0 1 128 226
////////////////////////////////////////////////////////////////////
//     Function: EggVertexUV::clear_binormal
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
46
inline void EggVertexUV::clear_binormal(void);

1119 12 make_average 0 4 1974 25 EggVertexUV::make_average 0 1 129 401
////////////////////////////////////////////////////////////////////
//     Function: EggVertexUV::make_average
//       Access: Published, Static
//  Description: Creates a new EggVertexUV that contains the
//               averaged values of the two given objects.  It is
//               an error if they don't have the same name.
///////////////////////////////////////////////////////////////////
111
static PointerTo< EggVertexUV > EggVertexUV::make_average(EggVertexUV const *first, EggVertexUV const *second);

1120 9 transform 0 4 1974 22 EggVertexUV::transform 0 1 130 400
////////////////////////////////////////////////////////////////////
//     Function: EggVertexUV::transform
//       Access: Published, Virtual
//  Description: Applies the indicated transformation matrix to the
//               UV's tangent and/or binormal.  This does nothing if
//               there is no tangent or binormal.
////////////////////////////////////////////////////////////////////
50
void EggVertexUV::transform(LMatrix4d const &mat);

1121 5 write 0 4 1974 18 EggVertexUV::write 0 1 131 214
////////////////////////////////////////////////////////////////////
//     Function: EggVertexUV::write
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
62
void EggVertexUV::write(ostream &out, int indent_level) const;

1122 10 compare_to 0 4 1974 23 EggVertexUV::compare_to 0 1 132 389
////////////////////////////////////////////////////////////////////
//     Function: EggVertexUV::compare_to
//       Access: Public
//  Description: An ordering operator to compare two vertices for
//               sorting order.  This imposes an arbitrary ordering
//               useful to identify unique vertices.
////////////////////////////////////////////////////////////////////
60
int EggVertexUV::compare_to(EggVertexUV const &other) const;

1123 8 get_duvs 0 20 1974 21 EggVertexUV::get_duvs 0 1 134 51
getter for EggMorphTexCoordList EggVertexUV::_duvs;
55
EggMorphTexCoordList EggVertexUV::get_duvs(void) const;

1124 14 get_class_type 0 4 1974 27 EggVertexUV::get_class_type 0 1 133 0
52
static TypeHandle EggVertexUV::get_class_type(void);

1125 12 EggVertexAux 0 4 1977 26 EggVertexAux::EggVertexAux 0 2 135 136 455
////////////////////////////////////////////////////////////////////
//     Function: EggVertexAux::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggVertexAux::Copy Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
124
EggVertexAux::EggVertexAux(string const &name, LVecBase4d const &aux);
EggVertexAux::EggVertexAux(EggVertexAux const &copy);

1126 10 operator = 0 4 1977 24 EggVertexAux::operator = 0 1 137 237
////////////////////////////////////////////////////////////////////
//     Function: EggVertexAux::Copy Assignment Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
65
EggVertexAux &EggVertexAux::operator =(EggVertexAux const &copy);

1127 8 set_name 0 4 1977 22 EggVertexAux::set_name 0 1 138 221
////////////////////////////////////////////////////////////////////
//     Function: EggVertexAux::set_name
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
55
inline void EggVertexAux::set_name(string const &name);

1128 7 get_aux 0 4 1977 21 EggVertexAux::get_aux 0 1 139 258
////////////////////////////////////////////////////////////////////
//     Function: EggVertexAux::get_aux
//       Access: Published
//  Description: Returns the auxiliary data quadruple.
////////////////////////////////////////////////////////////////////
59
inline LVecBase4d const &EggVertexAux::get_aux(void) const;

1129 7 set_aux 0 4 1977 21 EggVertexAux::set_aux 0 1 140 255
////////////////////////////////////////////////////////////////////
//     Function: EggVertexAux::set_aux
//       Access: Published
//  Description: Sets the auxiliary data quadruple.
////////////////////////////////////////////////////////////////////
57
inline void EggVertexAux::set_aux(LVecBase4d const &aux);

1130 12 make_average 0 4 1977 26 EggVertexAux::make_average 0 1 141 403
////////////////////////////////////////////////////////////////////
//     Function: EggVertexAux::make_average
//       Access: Published, Static
//  Description: Creates a new EggVertexAux that contains the
//               averaged values of the two given objects.  It is
//               an error if they don't have the same name.
///////////////////////////////////////////////////////////////////
115
static PointerTo< EggVertexAux > EggVertexAux::make_average(EggVertexAux const *first, EggVertexAux const *second);

1131 5 write 0 4 1977 19 EggVertexAux::write 0 1 142 215
////////////////////////////////////////////////////////////////////
//     Function: EggVertexAux::write
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
63
void EggVertexAux::write(ostream &out, int indent_level) const;

1132 10 compare_to 0 4 1977 24 EggVertexAux::compare_to 0 1 143 390
////////////////////////////////////////////////////////////////////
//     Function: EggVertexAux::compare_to
//       Access: Public
//  Description: An ordering operator to compare two vertices for
//               sorting order.  This imposes an arbitrary ordering
//               useful to identify unique vertices.
////////////////////////////////////////////////////////////////////
62
int EggVertexAux::compare_to(EggVertexAux const &other) const;

1133 14 get_class_type 0 4 1977 28 EggVertexAux::get_class_type 0 1 144 0
53
static TypeHandle EggVertexAux::get_class_type(void);

1134 19 upcast_to_EggObject 0 12 1978 30 EggVertex::upcast_to_EggObject 0 1 203 34
upcast from EggVertex to EggObject
48
EggObject *EggVertex::upcast_to_EggObject(void);

1135 21 downcast_to_EggVertex 0 12 1962 32 EggObject::downcast_to_EggVertex 0 1 204 36
downcast from EggObject to EggVertex
50
EggVertex *EggObject::downcast_to_EggVertex(void);

1136 23 upcast_to_EggAttributes 0 12 1978 34 EggVertex::upcast_to_EggAttributes 0 1 205 38
upcast from EggVertex to EggAttributes
56
EggAttributes *EggVertex::upcast_to_EggAttributes(void);

1137 21 downcast_to_EggVertex 0 12 1968 36 EggAttributes::downcast_to_EggVertex 0 1 206 40
downcast from EggAttributes to EggVertex
54
EggVertex *EggAttributes::downcast_to_EggVertex(void);

1138 9 EggVertex 0 4 1978 20 EggVertex::EggVertex 0 2 145 146 562
////////////////////////////////////////////////////////////////////
//     Function: EggVertex::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggVertex::Copy constructor
//       Access: Published
//  Description: Copies all properties of the vertex except its vertex
//               pool, index number, and group membership.
////////////////////////////////////////////////////////////////////
72
EggVertex::EggVertex(void);
EggVertex::EggVertex(EggVertex const &copy);

1139 10 operator = 0 4 1978 21 EggVertex::operator = 0 1 147 347
////////////////////////////////////////////////////////////////////
//     Function: EggVertex::Copy assignment operator
//       Access: Published
//  Description: Copies all properties of the vertex except its vertex
//               pool, index number, and group membership.
////////////////////////////////////////////////////////////////////
56
EggVertex &EggVertex::operator =(EggVertex const &copy);

1140 10 ~EggVertex 0 6 1978 21 EggVertex::~EggVertex 0 0 229
////////////////////////////////////////////////////////////////////
//     Function: EggVertex::Destructor
//       Access: Published, Virtual
//  Description:
////////////////////////////////////////////////////////////////////
36
virtual EggVertex::~EggVertex(void);

1141 8 get_pool 0 4 1978 19 EggVertex::get_pool 0 1 148 362
////////////////////////////////////////////////////////////////////
//     Function: EggVertex::get_pool
//       Access: Published
//  Description: Returns the vertex pool this vertex belongs in.  This
//               may be NULL if the vertex has not been added to a
//               pool.
////////////////////////////////////////////////////////////////////
54
inline EggVertexPool *EggVertex::get_pool(void) const;

1142 20 is_forward_reference 0 4 1978 31 EggVertex::is_forward_reference 0 1 149 710
////////////////////////////////////////////////////////////////////
//     Function: EggVertex::is_forward_reference
//       Access: Published
//  Description: Returns true if the vertex is a forward reference to
//               some vertex that hasn't been defined yet.  In this
//               case, the vertex may not have any properties filled
//               in yet.
//
//               This can only happen if you implicitly create a
//               vertex via EggVertexPool::get_forward_vertex().
//               Presumably, when the vertex pool is later filled in,
//               this vertex will be replaced with real data.
////////////////////////////////////////////////////////////////////
56
inline bool EggVertex::is_forward_reference(void) const;

1143 7 set_pos 0 4 1978 18 EggVertex::set_pos 0 4 150 151 152 153 1365
// The pos might have 1, 2, 3, or 4 dimensions.  That complicates
// things a bit.

////////////////////////////////////////////////////////////////////
//     Function: EggVertex::set_pos
//       Access: Published
//  Description: Sets the vertex position.  This variant sets the
//               vertex to a one-dimensional value.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggVertex::set_pos
//       Access: Published
//  Description: Sets the vertex position.  This variant sets the
//               vertex to a two-dimensional value.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggVertex::set_pos
//       Access: Published
//  Description: Sets the vertex position.  This variant sets the
//               vertex to a three-dimensional value.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggVertex::set_pos
//       Access: Published
//  Description: Sets the vertex position.  This variant sets the
//               vertex to a four-dimensional value.
////////////////////////////////////////////////////////////////////
202
inline void EggVertex::set_pos(double pos);
inline void EggVertex::set_pos(LPoint2d const &pos);
inline void EggVertex::set_pos(LPoint3d const &pos);
inline void EggVertex::set_pos(LPoint4d const &pos);

1144 8 set_pos4 0 4 1978 19 EggVertex::set_pos4 0 1 154 600
////////////////////////////////////////////////////////////////////
//     Function: EggVertex::set_pos4
//       Access: Published
//  Description: This special flavor of set_pos() sets the vertex as a
//               four-component value, but does not change the set
//               number of dimensions.  It's handy for retrieving the
//               vertex position via get_pos4, manipulating it, then
//               storing it back again, without worrying about the
//               number of dimensions it actually had.
////////////////////////////////////////////////////////////////////
53
inline void EggVertex::set_pos4(LPoint4d const &pos);

1145 18 get_num_dimensions 0 4 1978 29 EggVertex::get_num_dimensions 0 1 155 721
// get_pos[123] return the pos as the corresponding type.  It is an
// error to call any of these without first verifying that
// get_num_dimensions() matches the desired type.  However,
// get_pos4() may always be called; it returns the pos as a
// four-component point in homogeneous space (with a 1.0 in the last
// position if the pos has fewer than four components).

////////////////////////////////////////////////////////////////////
//     Function: EggVertex::get_num_dimensions
//       Access: Published
//  Description: Returns the number of dimensions the vertex uses.
//               Usually this will be 3, but it may be 1, 2, 3, or 4.
////////////////////////////////////////////////////////////////////
53
inline int EggVertex::get_num_dimensions(void) const;

1146 8 get_pos1 0 4 1978 19 EggVertex::get_pos1 0 1 156 330
////////////////////////////////////////////////////////////////////
//     Function: EggVertex::get_pos1
//       Access: Published
//  Description: Only valid if get_num_dimensions() returns 1.
//               Returns the position as a one-dimensional value.
////////////////////////////////////////////////////////////////////
46
inline double EggVertex::get_pos1(void) const;

1147 8 get_pos2 0 4 1978 19 EggVertex::get_pos2 0 1 157 330
////////////////////////////////////////////////////////////////////
//     Function: EggVertex::get_pos2
//       Access: Published
//  Description: Only valid if get_num_dimensions() returns 2.
//               Returns the position as a two-dimensional value.
////////////////////////////////////////////////////////////////////
48
inline LPoint2d EggVertex::get_pos2(void) const;

1148 8 get_pos3 0 4 1978 19 EggVertex::get_pos3 0 1 158 332
////////////////////////////////////////////////////////////////////
//     Function: EggVertex::get_pos3
//       Access: Published
//  Description: Valid if get_num_dimensions() returns 3 or 4.
//               Returns the position as a three-dimensional value.
////////////////////////////////////////////////////////////////////
48
inline LVertexd EggVertex::get_pos3(void) const;

1149 8 get_pos4 0 4 1978 19 EggVertex::get_pos4 0 1 159 591
////////////////////////////////////////////////////////////////////
//     Function: EggVertex::get_pos4
//       Access: Published
//  Description: This is always valid, regardless of the value of
//               get_num_dimensions.  It returns the position as a
//               four-dimensional value.  If the pos has fewer than
//               four dimensions, this value represents the pos
//               extended into four-dimensional homogenous space,
//               e.g. by adding 1 as the fourth component.
////////////////////////////////////////////////////////////////////
48
inline LPoint4d EggVertex::get_pos4(void) const;

1150 6 has_uv 0 4 1978 17 EggVertex::has_uv 0 2 160 161 922
////////////////////////////////////////////////////////////////////
//     Function: EggVertex::has_uv
//       Access: Published
//  Description: Returns true if the vertex has an unnamed UV
//               coordinate pair, false otherwise.
//
//               This is the more restrictive interface, and is
//               generally useful only in the absence of
//               multitexturing; see has_uv(name) for the interface
//               that supports multitexturing.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggVertex::has_uv
//       Access: Published
//  Description: Returns true if the vertex has the named UV
//               coordinate pair, and the named UV coordinate pair is
//               2-d, false otherwise.
////////////////////////////////////////////////////////////////////
92
inline bool EggVertex::has_uv(void) const;
bool EggVertex::has_uv(string const &name) const;

1151 6 get_uv 0 4 1978 17 EggVertex::get_uv 0 2 162 163 968
////////////////////////////////////////////////////////////////////
//     Function: EggVertex::get_uv
//       Access: Published
//  Description: Returns the unnamed UV coordinate pair on the
//               vertex.  It is an error to call this if has_uv() has
//               returned false.
//
//               This is the more restrictive interface, and is
//               generally useful only in the absence of
//               multitexturing; see get_uv(name) for the interface
//               that supports multitexturing.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggVertex::get_uv
//       Access: Published
//  Description: Returns the named UV coordinate pair on the vertex.
//               It is an error to call this if has_uv(name)
//               returned false.
////////////////////////////////////////////////////////////////////
104
inline LTexCoordd EggVertex::get_uv(void) const;
LTexCoordd EggVertex::get_uv(string const &name) const;

1152 6 set_uv 0 4 1978 17 EggVertex::set_uv 0 2 164 165 965
////////////////////////////////////////////////////////////////////
//     Function: EggVertex::set_uv
//       Access: Published
//  Description: Replaces the unnamed UV coordinate pair on the vertex
//               with the indicated value.
//
//               This is the more restrictive interface, and is
//               generally useful only in the absence of
//               multitexturing; see set_uv(name, uv) for the
//               interface that supports multitexturing.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggVertex::set_uv
//       Access: Published
//  Description: Sets the indicated UV coordinate pair on the vertex.
//               This replaces any UV coordinate pair with the same
//               name already on the vertex, but preserves UV morphs.
////////////////////////////////////////////////////////////////////
130
inline void EggVertex::set_uv(LTexCoordd const &texCoord);
void EggVertex::set_uv(string const &name, LTexCoordd const &texCoord);

1153 8 clear_uv 0 4 1978 19 EggVertex::clear_uv 0 2 166 167 583
////////////////////////////////////////////////////////////////////
//     Function: EggVertex::clear_uv
//       Access: Published
//  Description: Removes all UV coordinate pairs from the vertex.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggVertex::clear_uv
//       Access: Published
//  Description: Removes the named UV coordinate pair from the vertex,
//               along with any UV morphs.
///////////////////////////////////////////////////////////////////
84
inline void EggVertex::clear_uv(void);
void EggVertex::clear_uv(string const &name);

1154 7 has_uvw 0 4 1978 18 EggVertex::has_uvw 0 1 168 374
////////////////////////////////////////////////////////////////////
//     Function: EggVertex::has_uvw
//       Access: Published
//  Description: Returns true if the vertex has the named UV
//               coordinate triple, and the named UV coordinate triple is
//               3-d, false otherwise.
////////////////////////////////////////////////////////////////////
50
bool EggVertex::has_uvw(string const &name) const;

1155 7 get_uvw 0 4 1978 18 EggVertex::get_uvw 0 1 169 366
////////////////////////////////////////////////////////////////////
//     Function: EggVertex::get_uvw
//       Access: Published
//  Description: Returns the named UV coordinate triple on the vertex.
//               It is an error to call this if has_uvw(name)
//               returned false.
////////////////////////////////////////////////////////////////////
64
LTexCoord3d const &EggVertex::get_uvw(string const &name) const;

1156 7 set_uvw 0 4 1978 18 EggVertex::set_uvw 0 1 170 437
////////////////////////////////////////////////////////////////////
//     Function: EggVertex::set_uvw
//       Access: Published
//  Description: Sets the indicated UV coordinate triple on the vertex.
//               This replaces any UV coordinate pair or triple with
//               the same name already on the vertex, but preserves UV
//               morphs.
////////////////////////////////////////////////////////////////////
73
void EggVertex::set_uvw(string const &name, LTexCoord3d const &texCoord);

1157 10 get_uv_obj 0 4 1978 21 EggVertex::get_uv_obj 0 1 171 584
////////////////////////////////////////////////////////////////////
//     Function: EggVertex::get_uv_obj
//       Access: Published
//  Description: Returns the named EggVertexUV object, which defines
//               both the UV coordinate pair for this name and the UV
//               morphs.  This object might be shared between multiple
//               vertices.  You should not attempt to modify this
//               object; instead, call modify_uv_object to return a
//               modifiable pointer.
////////////////////////////////////////////////////////////////////
67
EggVertexUV const *EggVertex::get_uv_obj(string const &name) const;

1158 13 modify_uv_obj 0 4 1978 24 EggVertex::modify_uv_obj 0 1 172 462
////////////////////////////////////////////////////////////////////
//     Function: EggVertex::modify_uv_obj
//       Access: Published
//  Description: Returns a modifiable pointer to the named EggVertexUV
//               object, which defines both the UV coordinate pair for
//               this name and the UV morphs.  Returns NULL if there
//               is no such named UV object.
////////////////////////////////////////////////////////////////////
58
EggVertexUV *EggVertex::modify_uv_obj(string const &name);

1159 10 set_uv_obj 0 4 1978 21 EggVertex::set_uv_obj 0 1 173 400
////////////////////////////////////////////////////////////////////
//     Function: EggVertex::set_uv_obj
//       Access: Published
//  Description: Sets the indicated EggVertexUV on the vertex.
//               This replaces any UV coordinate pair with the same
//               name already on the vertex, including UV morphs.
////////////////////////////////////////////////////////////////////
51
void EggVertex::set_uv_obj(EggVertexUV *vertex_uv);

1160 7 has_aux 0 4 1978 18 EggVertex::has_aux 0 2 174 175 605
////////////////////////////////////////////////////////////////////
//     Function: EggVertex::has_aux
//       Access: Published
//  Description: Returns true if the vertex has any auxiliary
//               data, false otherwise.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggVertex::has_aux
//       Access: Published
//  Description: Returns true if the vertex has the named
//               auxiliary data quadruple.
////////////////////////////////////////////////////////////////////
94
inline bool EggVertex::has_aux(void) const;
bool EggVertex::has_aux(string const &name) const;

1161 9 clear_aux 0 4 1978 20 EggVertex::clear_aux 0 2 176 177 533
////////////////////////////////////////////////////////////////////
//     Function: EggVertex::clear_aux
//       Access: Published
//  Description: Removes all auxiliary data from the vertex.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggVertex::clear_aux
//       Access: Published
//  Description: Removes the named auxiliary data from the vertex.
///////////////////////////////////////////////////////////////////
86
inline void EggVertex::clear_aux(void);
void EggVertex::clear_aux(string const &name);

1162 7 get_aux 0 4 1978 18 EggVertex::get_aux 0 1 178 370
////////////////////////////////////////////////////////////////////
//     Function: EggVertex::get_aux
//       Access: Published
//  Description: Returns the named auxiliary data quadruple on the
//               vertex. It is an error to call this if has_aux(name)
//               returned false.
////////////////////////////////////////////////////////////////////
63
LVecBase4d const &EggVertex::get_aux(string const &name) const;

1163 7 set_aux 0 4 1978 18 EggVertex::set_aux 0 1 179 385
////////////////////////////////////////////////////////////////////
//     Function: EggVertex::set_aux
//       Access: Published
//  Description: Sets the indicated auxiliary data quadruple on the
//               vertex. This replaces any auxiliary data with the
//               same name already on the vertex.
////////////////////////////////////////////////////////////////////
67
void EggVertex::set_aux(string const &name, LVecBase4d const &aux);

1164 11 get_aux_obj 0 4 1978 22 EggVertex::get_aux_obj 0 1 180 542
////////////////////////////////////////////////////////////////////
//     Function: EggVertex::get_aux_obj
//       Access: Published
//  Description: Returns the named EggVertexAux object, which defines
//               the auxiliary data for this name. This object might
//               be shared between multiple vertices.  You should not
//               attempt to modify this object; instead, call
//               modify_aux_object to return a modifiable pointer.
////////////////////////////////////////////////////////////////////
69
EggVertexAux const *EggVertex::get_aux_obj(string const &name) const;

1165 14 modify_aux_obj 0 4 1978 25 EggVertex::modify_aux_obj 0 1 181 437
////////////////////////////////////////////////////////////////////
//     Function: EggVertex::modify_aux_obj
//       Access: Published
//  Description: Returns a modifiable pointer to the named EggVertexAux
//               object, which defines the auxiliary data for
//               this name.  Returns NULL if there is no such
//               named UV object.
////////////////////////////////////////////////////////////////////
60
EggVertexAux *EggVertex::modify_aux_obj(string const &name);

1166 11 set_aux_obj 0 4 1978 22 EggVertex::set_aux_obj 0 1 182 377
////////////////////////////////////////////////////////////////////
//     Function: EggVertex::set_aux_obj
//       Access: Published
//  Description: Sets the indicated EggVertexAux on the vertex.
//               This replaces any auxiliary data with the same
//               name already on the vertex.
////////////////////////////////////////////////////////////////////
54
void EggVertex::set_aux_obj(EggVertexAux *vertex_aux);

1167 12 make_average 0 4 1978 23 EggVertex::make_average 0 1 183 579
////////////////////////////////////////////////////////////////////
//     Function: EggVertex::make_average
//       Access: Published, Static
//  Description: Creates a new vertex that lies in between the two
//               given vertices.  The attributes for the UV sets
//               they have in common are averaged.
//
//               Both vertices need to be either in no pool, or in
//               the same pool.  In the latter case, the new vertex
//               will be placed in that pool.
///////////////////////////////////////////////////////////////////
103
static PointerTo< EggVertex > EggVertex::make_average(EggVertex const *first, EggVertex const *second);

1168 9 get_index 0 4 1978 20 EggVertex::get_index 0 1 184 292
////////////////////////////////////////////////////////////////////
//     Function: EggVertex::get_index
//       Access: Published
//  Description: Returns the index number of the vertex within its
//               pool.
////////////////////////////////////////////////////////////////////
44
inline int EggVertex::get_index(void) const;

1169 18 set_external_index 0 4 1978 29 EggVertex::set_external_index 0 1 185 822
////////////////////////////////////////////////////////////////////
//     Function: EggVertex::set_external_index
//       Access: Published
//  Description: Sets a special index number that is associated with
//               the EggVertex (but is not written to the egg file).
//               This number is not interpreted by any egg code; it is
//               simply maintained along with the vertex.  It *is*
//               used to differentiate otherwise identical vertices in
//               EggVertexPool::create_unique_vertex(), however.
//
//               The intention of this number is as an aid for file
//               converters, to associate an EggVertex back to the
//               index number of the original source vertex.
////////////////////////////////////////////////////////////////////
62
inline void EggVertex::set_external_index(int external_index);

1170 18 get_external_index 0 4 1978 29 EggVertex::get_external_index 0 1 186 320
////////////////////////////////////////////////////////////////////
//     Function: EggVertex::get_external_index
//       Access: Published
//  Description: Returns the number set by set_external_index().  See
//               set_external_index().
////////////////////////////////////////////////////////////////////
53
inline int EggVertex::get_external_index(void) const;

1171 19 set_external_index2 0 4 1978 30 EggVertex::set_external_index2 0 1 187 506
////////////////////////////////////////////////////////////////////
//     Function: EggVertex::set_external_index2
//       Access: Published
//  Description: Similar to set_external_index(), but this is a
//               different number which may be used for a different
//               purpose by the calling code.  The egg library does
//               not assign any meaning to this number or use it in
//               any way.
////////////////////////////////////////////////////////////////////
64
inline void EggVertex::set_external_index2(int external_index2);

1172 19 get_external_index2 0 4 1978 30 EggVertex::get_external_index2 0 1 188 323
////////////////////////////////////////////////////////////////////
//     Function: EggVertex::get_external_index2
//       Access: Published
//  Description: Returns the number set by set_external_index2().  See
//               set_external_index2().
////////////////////////////////////////////////////////////////////
54
inline int EggVertex::get_external_index2(void) const;

1173 5 write 0 4 1978 16 EggVertex::write 0 1 189 296
////////////////////////////////////////////////////////////////////
//     Function: EggVertex::write
//       Access: Published
//  Description: Writes the vertex to the indicated output stream in
//               Egg format.
////////////////////////////////////////////////////////////////////
60
void EggVertex::write(ostream &out, int indent_level) const;

1174 15 sorts_less_than 0 4 1978 26 EggVertex::sorts_less_than 0 1 190 395
////////////////////////////////////////////////////////////////////
//     Function: EggVertex::sorts_less_than
//       Access: Published
//  Description: An ordering operator to compare two vertices for
//               sorting order.  This imposes an arbitrary ordering
//               useful to identify unique vertices.
////////////////////////////////////////////////////////////////////
69
inline bool EggVertex::sorts_less_than(EggVertex const &other) const;

1175 10 compare_to 0 4 1978 21 EggVertex::compare_to 0 1 191 1165
////////////////////////////////////////////////////////////////////
//     Function: EggVertex::compare_to
//       Access: Published
//  Description: An ordering operator to compare two vertices for
//               sorting order.  This imposes an arbitrary ordering
//               useful to identify unique vertices.
//
//               Group membership is not considered in this
//               comparison.  This is somewhat problematic, but cannot
//               easily be helped, because considering group
//               membership would make it difficult to add and remove
//               groups from vertices.  It also makes it impossible to
//               meaningfully compare with a concrete EggVertex object
//               (which cannot have group memberships).
//
//               However, this is not altogether bad, because two
//               vertices that are identical in all other properties
//               should generally also be identical in group
//               memberships, else the vertices will tend to fly apart
//               when the joints animate.
////////////////////////////////////////////////////////////////////
56
int EggVertex::compare_to(EggVertex const &other) const;

1176 19 get_num_local_coord 0 4 1978 30 EggVertex::get_num_local_coord 0 1 192 384
////////////////////////////////////////////////////////////////////
//     Function: EggVertex::get_num_local_coord
//       Access: Published
//  Description: Returns the number of primitives that own this vertex
//               whose vertices are interpreted to be in a local
//               coordinate system.
////////////////////////////////////////////////////////////////////
47
int EggVertex::get_num_local_coord(void) const;

1177 20 get_num_global_coord 0 4 1978 31 EggVertex::get_num_global_coord 0 1 193 382
////////////////////////////////////////////////////////////////////
//     Function: EggVertex::get_num_global_coord
//       Access: Published
//  Description: Returns the number of primitives that own this vertex
//               whose vertices are interpreted in the global
//               coordinate system.
////////////////////////////////////////////////////////////////////
48
int EggVertex::get_num_global_coord(void) const;

1178 9 transform 0 4 1978 20 EggVertex::transform 0 1 194 304
////////////////////////////////////////////////////////////////////
//     Function: EggVertex::transform
//       Access: Published, Virtual
//  Description: Applies the indicated transformation matrix to the
//               vertex.
////////////////////////////////////////////////////////////////////
48
void EggVertex::transform(LMatrix4d const &mat);

1179 8 has_gref 0 4 1978 19 EggVertex::has_gref 0 1 195 312
////////////////////////////////////////////////////////////////////
//     Function: EggVertex::has_gref
//       Access: Published
//  Description: Returns true if the indicated group references this
//               vertex, false otherwise.
////////////////////////////////////////////////////////////////////
54
bool EggVertex::has_gref(EggGroup const *group) const;

1180 15 copy_grefs_from 0 4 1978 26 EggVertex::copy_grefs_from 0 1 196 725
////////////////////////////////////////////////////////////////////
//     Function: EggVertex::copy_grefs_from
//       Access: Published
//  Description: Copies all the group references from the other vertex
//               onto this one.  This assigns the current vertex to
//               exactly the same groups, with exactly the same
//               memberships, as the given one.
//
//               Warning: only an EggVertex allocated from the free
//               store may have groups assigned to it.  Do not attempt
//               to call this on a temporary concrete EggVertex
//               object; a core dump will certainly result.
////////////////////////////////////////////////////////////////////
56
void EggVertex::copy_grefs_from(EggVertex const &other);

1181 11 clear_grefs 0 4 1978 22 EggVertex::clear_grefs 0 1 197 325
////////////////////////////////////////////////////////////////////
//     Function: EggVertex::clear_grefs
//       Access: Published
//  Description: Removes all group references from the vertex, so that
//               it is not assigned to any group.
////////////////////////////////////////////////////////////////////
34
void EggVertex::clear_grefs(void);

1182 8 has_pref 0 4 1978 19 EggVertex::has_pref 0 1 198 338
////////////////////////////////////////////////////////////////////
//     Function: EggVertex::has_pref
//       Access: Published
//  Description: Returns the number of times the vertex appears in the
//               indicated primitive, or 0 if it does not appear.
////////////////////////////////////////////////////////////////////
56
int EggVertex::has_pref(EggPrimitive const *prim) const;

1183 19 test_gref_integrity 0 4 1978 30 EggVertex::test_gref_integrity 0 1 199 0
48
void EggVertex::test_gref_integrity(void) const;

1184 19 test_pref_integrity 0 4 1978 30 EggVertex::test_pref_integrity 0 1 200 0
48
void EggVertex::test_pref_integrity(void) const;

1185 6 output 0 4 1978 17 EggVertex::output 0 1 201 216
////////////////////////////////////////////////////////////////////
//     Function: EggVertex::output
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
43
void EggVertex::output(ostream &out) const;

1186 9 get_dxyzs 0 20 1978 20 EggVertex::get_dxyzs 0 1 207 48
getter for EggMorphVertexList EggVertex::_dxyzs;
52
EggMorphVertexList EggVertex::get_dxyzs(void) const;

1187 14 get_class_type 0 4 1978 25 EggVertex::get_class_type 0 1 202 0
50
static TypeHandle EggVertex::get_class_type(void);

1188 13 EggVertexPool 0 4 1981 28 EggVertexPool::EggVertexPool 0 2 208 209 683
////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::Copy Constructor
//       Access: Public
//  Description: Copying a vertex pool is of questionable value, since
//               it will copy all of the vertices and assign new
//               pointers to them all. There will be no polygons
//               referring to the new vertices.
////////////////////////////////////////////////////////////////////
106
EggVertexPool::EggVertexPool(string const &name);
EggVertexPool::EggVertexPool(EggVertexPool const &copy);

1189 10 has_vertex 0 4 1981 25 EggVertexPool::has_vertex 0 1 210 389
////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::has_vertex
//       Access: Public
//  Description: Returns true if the indicated vertex has been defined
//               in the vertex pool, false otherwise.  This does not
//               include forward references.
////////////////////////////////////////////////////////////////////
55
inline bool EggVertexPool::has_vertex(int index) const;

1190 20 has_forward_vertices 0 4 1981 35 EggVertexPool::has_forward_vertices 0 1 211 386
////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::has_forward_vertices
//       Access: Published
//  Description: Returns true if any vertices in the pool are
//               undefined forward-reference vertices, false if all
//               vertices are defined.
////////////////////////////////////////////////////////////////////
53
bool EggVertexPool::has_forward_vertices(void) const;

1191 20 has_defined_vertices 0 4 1981 35 EggVertexPool::has_defined_vertices 0 1 212 383
////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::has_defined_vertices
//       Access: Published
//  Description: Returns true if any vertices in the pool are
//               fully defined vertices, false if all vertices are
//               forward references.
////////////////////////////////////////////////////////////////////
53
bool EggVertexPool::has_defined_vertices(void) const;

1192 10 get_vertex 0 4 1981 25 EggVertexPool::get_vertex 0 1 213 411
// Returns NULL if there is no such vertex.

////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::get_vertex
//       Access: Public
//  Description: Returns the vertex in the pool with the indicated
//               index number, or NULL if no vertices have that index
//               number.
////////////////////////////////////////////////////////////////////
54
EggVertex *EggVertexPool::get_vertex(int index) const;

1193 11 operator [] 0 4 1981 26 EggVertexPool::operator [] 0 1 214 373
////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::indexing operator
//       Access: Public
//  Description: Returns the vertex in the pool with the indicated
//               index number, or NULL if no vertices have that index
//               number.
////////////////////////////////////////////////////////////////////
62
inline EggVertex *EggVertexPool::operator [](int index) const;

1194 18 get_forward_vertex 0 4 1981 33 EggVertexPool::get_forward_vertex 0 1 215 679
// Returns a forward reference if there is no such vertex.

////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::get_forward_vertex
//       Access: Public
//  Description: Returns the vertex in the pool with the indicated
//               index number.  If there is not a vertex in the pool
//               with the indicated index number, creates a special
//               forward-reference EggVertex that has no data, on the
//               assumption that the vertex pool has not yet been
//               fully read and more data will be available later.
////////////////////////////////////////////////////////////////////
56
EggVertex *EggVertexPool::get_forward_vertex(int index);

1195 17 get_highest_index 0 4 1981 32 EggVertexPool::get_highest_index 0 1 216 425
// Returns 0 if the pool is empty.

////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::get_highest_index
//       Access: Public
//  Description: Returns the highest index number used by any vertex
//               in the pool (except forward references).  Returns -1
//               if the pool is empty.
////////////////////////////////////////////////////////////////////
49
int EggVertexPool::get_highest_index(void) const;

1196 17 set_highest_index 0 4 1981 32 EggVertexPool::set_highest_index 0 1 217 553
////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::set_highest_index
//       Access: Public
//  Description: Artificially changes the "highest index number", so
//               that a newly created vertex will begin at this number
//               plus 1.  This can be used to default a vertex pool to
//               start counting at 1 (or any other index number),
//               instead of the default of 0.  Use with caution.
////////////////////////////////////////////////////////////////////
57
void EggVertexPool::set_highest_index(int highest_index);

1197 18 get_num_dimensions 0 4 1981 33 EggVertexPool::get_num_dimensions 0 1 218 319
////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::get_num_dimensions
//       Access: Public
//  Description: Returns the maximum number of dimensions used by any
//               vertex in the pool.
////////////////////////////////////////////////////////////////////
50
int EggVertexPool::get_num_dimensions(void) const;

1198 11 has_normals 0 6 1981 26 EggVertexPool::has_normals 0 1 219 326
////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::has_normals
//       Access: Public
//  Description: Returns true if any vertex in the pool has a normal
//               defined, false if none of them do.
////////////////////////////////////////////////////////////////////
52
virtual bool EggVertexPool::has_normals(void) const;

1199 10 has_colors 0 4 1981 25 EggVertexPool::has_colors 0 1 220 324
////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::has_colors
//       Access: Public
//  Description: Returns true if any vertex in the pool has a color
//               defined, false if none of them do.
////////////////////////////////////////////////////////////////////
43
bool EggVertexPool::has_colors(void) const;

1200 19 has_nonwhite_colors 0 4 1981 34 EggVertexPool::has_nonwhite_colors 0 1 221 403
////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::has_nonwhite_colors
//       Access: Public
//  Description: Returns true if any vertex in the pool has a color
//               defined other than white, false if no vertices have
//               colors, or if all colors are white.
////////////////////////////////////////////////////////////////////
52
bool EggVertexPool::has_nonwhite_colors(void) const;

1201 19 check_overall_color 0 4 1981 34 EggVertexPool::check_overall_color 0 0 686
////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::check_overall_color
//       Access: Public
//  Description: Scans the vertex pool for different colors on
//               different vertices.  If all vertices are the same
//               color, sets has_overall_color to true and fills the
//               color into overall_color.  If no vertices have any
//               color, set has_overall_color to true and fills white
//               into overall_color.  If at least two vertices have
//               different colors, sets has_overall_color to false.
////////////////////////////////////////////////////////////////////
94
void EggVertexPool::check_overall_color(bool &has_overall_color, LColor &overall_color) const;

1202 7 has_uvs 0 4 1981 22 EggVertexPool::has_uvs 0 1 222 318
////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::has_uvs
//       Access: Public
//  Description: Returns true if any vertex in the pool has a uv
//               defined, false if none of them do.
////////////////////////////////////////////////////////////////////
40
bool EggVertexPool::has_uvs(void) const;

1203 7 has_aux 0 4 1981 22 EggVertexPool::has_aux 0 1 223 328
////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::has_aux
//       Access: Public
//  Description: Returns true if any vertex in the pool has
//               auxiliary data defined, false if none of them do.
////////////////////////////////////////////////////////////////////
40
bool EggVertexPool::has_aux(void) const;

1204 12 get_uv_names 0 4 1981 27 EggVertexPool::get_uv_names 0 1 224 654
////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::get_uv_names
//       Access: Public
//  Description: Returns the list of UV names that are defined by any
//               vertices in the pool, as well as the subset of UV
//               names that actually define 3-d texture coordinates
//               ("uvw_names").  Also returns the subset of UV/UVW
//               names that define a tangent and binormal.  It is the
//               user's responsibility to clear both vectors before
//               calling this method.
////////////////////////////////////////////////////////////////////
116
void EggVertexPool::get_uv_names(vector_string &uv_names, vector_string &uvw_names, vector_string &tbn_names) const;

1205 13 get_aux_names 0 4 1981 28 EggVertexPool::get_aux_names 0 1 225 328
////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::get_aux_names
//       Access: Public
//  Description: Returns the list of auxiliary data names that are
//               defined by any vertices in the pool.
////////////////////////////////////////////////////////////////////
66
void EggVertexPool::get_aux_names(vector_string &aux_names) const;

1206 4 size 0 4 1981 19 EggVertexPool::size 0 1 226 261
////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::size()
//       Access: Public
//  Description: Returns the number of vertices in the pool.
////////////////////////////////////////////////////////////////////
57
EggVertexPool::size_type EggVertexPool::size(void) const;

1207 10 add_vertex 0 4 1981 25 EggVertexPool::add_vertex 0 1 227 1344
// add_vertex() adds a freshly-allocated vertex.  It is up to the
// user to allocate the vertex.

////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::add_vertex
//       Access: Public
//  Description: Adds the indicated vertex to the pool.  It is an
//               error if the vertex is already a member of this or
//               any other pool.  The vertex must have been allocated
//               from the free store; its pointer will now be owned by
//               the vertex pool.  If the index number is supplied,
//               tries to assign that index number; it is an error if
//               the index number is already in use.
//
//               It is possible that a forward reference to this
//               vertex was requested in the past; if so, the data
//               from the supplied vertex is copied onto the forward
//               reference, which becomes the actual vertex.  In this
//               case, a different pointer is saved (and returned)
//               than the one actually passed in.  In the usual case,
//               however, the vertex pointer passed in is the one that
//               is saved in the vertex pool and returned from this
//               method.
////////////////////////////////////////////////////////////////////
72
EggVertex *EggVertexPool::add_vertex(EggVertex *vertex, int index = -1);

1208 15 make_new_vertex 0 4 1981 30 EggVertexPool::make_new_vertex 0 5 228 229 230 231 232 2695
// make_new_vertex() allocates and returns a new vertex from the
// pool.

////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::make_new_vertex()
//       Access: Public
//  Description: Allocates and returns a new vertex from the pool.
//               This is one of three ways to add new vertices to a
//               vertex pool.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::make_new_vertex()
//       Access: Public
//  Description: Allocates and returns a new vertex from the pool.
//               This is one of three ways to add new vertices to a
//               vertex pool.
//
//               This flavor of make_new_vertex() explicitly sets the
//               vertex position as it is allocated.  It does not
//               attempt to share vertices.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::make_new_vertex()
//       Access: Public
//  Description: Allocates and returns a new vertex from the pool.
//               This is one of three ways to add new vertices to a
//               vertex pool.
//
//               This flavor of make_new_vertex() explicitly sets the
//               vertex position as it is allocated.  It does not
//               attempt to share vertices.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::make_new_vertex()
//       Access: Public
//  Description: Allocates and returns a new vertex from the pool.
//               This is one of three ways to add new vertices to a
//               vertex pool.
//
//               This flavor of make_new_vertex() explicitly sets the
//               vertex position as it is allocated.  It does not
//               attempt to share vertices.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::make_new_vertex()
//       Access: Public
//  Description: Allocates and returns a new vertex from the pool.
//               This is one of three ways to add new vertices to a
//               vertex pool.
//
//               This flavor of make_new_vertex() explicitly sets the
//               vertex position as it is allocated.  It does not
//               attempt to share vertices.
////////////////////////////////////////////////////////////////////
330
inline EggVertex *EggVertexPool::make_new_vertex(void);
inline EggVertex *EggVertexPool::make_new_vertex(double pos);
inline EggVertex *EggVertexPool::make_new_vertex(LPoint2d const &pos);
inline EggVertex *EggVertexPool::make_new_vertex(LPoint3d const &pos);
inline EggVertex *EggVertexPool::make_new_vertex(LPoint4d const &pos);

1209 20 create_unique_vertex 0 4 1981 35 EggVertexPool::create_unique_vertex 0 1 233 616
// create_unique_vertex() creates a new vertex if there is not
// already one identical to the indicated vertex, or returns the
// existing one if there is.

////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::create_unique_vertex
//       Access: Public
//  Description: Creates a new vertex in the pool that is a copy of
//               the indicated one and returns it.  If there is
//               already a vertex in the pool like the indicated one,
//               simply returns that one.
////////////////////////////////////////////////////////////////////
70
EggVertex *EggVertexPool::create_unique_vertex(EggVertex const &copy);

1210 20 find_matching_vertex 0 4 1981 35 EggVertexPool::find_matching_vertex 0 1 234 478
////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::find_matching_vertex
//       Access: Public
//  Description: If the EggVertexPool already has a vertex matching
//               the indicated vertex, returns it; otherwise, returns
//               NULL.  This is similar to create_unique_vertex()
//               except that a new vertex is never created.
////////////////////////////////////////////////////////////////////
70
EggVertex *EggVertexPool::find_matching_vertex(EggVertex const &copy);

1211 13 remove_vertex 0 4 1981 28 EggVertexPool::remove_vertex 0 1 235 342
////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::remove_vertex
//       Access: Public
//  Description: Removes the vertex from the pool.  It is an error if
//               the vertex is not already a member of the pool.
////////////////////////////////////////////////////////////////////
53
void EggVertexPool::remove_vertex(EggVertex *vertex);

1212 22 remove_unused_vertices 0 4 1981 37 EggVertexPool::remove_unused_vertices 0 1 236 591
////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::remove_unused_vertices
//       Access: Public
//  Description: Removes all vertices from the pool that are not
//               referenced by at least one primitive.  Also collapses
//               together equivalent vertices, and renumbers all
//               vertices after the operation so their indices are
//               consecutive, beginning at zero.  Returns the number
//               of vertices removed.
////////////////////////////////////////////////////////////////////
48
int EggVertexPool::remove_unused_vertices(void);

1213 27 add_unused_vertices_to_prim 0 4 1981 42 EggVertexPool::add_unused_vertices_to_prim 0 1 237 355
////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::add_unused_vertices_to_prim
//       Access: Public
//  Description: Adds all of the unused vertices in this vertex pool
//               to the indicated primitive, in ascending order.
////////////////////////////////////////////////////////////////////
68
void EggVertexPool::add_unused_vertices_to_prim(EggPrimitive *prim);

1214 9 transform 0 4 1981 24 EggVertexPool::transform 0 1 238 733
////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::transform
//       Access: Public
//  Description: Applies the indicated transformation matrix to all
//               the vertices.  However, vertices that are attached to
//               primitives that believe their vertices are in a local
//               coordinate system are transformed only by the scale
//               and rotation component.  If a vertex happens to be
//               attached both to a local and a global primitive, and
//               the transformation includes a translation component,
//               the vertex will be split.
////////////////////////////////////////////////////////////////////
52
void EggVertexPool::transform(LMatrix4d const &mat);

1215 22 sort_by_external_index 0 4 1981 37 EggVertexPool::sort_by_external_index 0 1 239 457
////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::sort_by_external_index
//       Access: Published
//  Description: Re-orders (and re-numbers) the vertices in this
//               vertex pool so that they appear in increasing order
//               by the optional external_index that has been assigned
//               to each vertex.
////////////////////////////////////////////////////////////////////
49
void EggVertexPool::sort_by_external_index(void);

1216 14 get_class_type 0 4 1981 29 EggVertexPool::get_class_type 0 1 240 0
54
static TypeHandle EggVertexPool::get_class_type(void);

1217 12 EggGroupNode 0 4 1982 26 EggGroupNode::EggGroupNode 0 2 241 242 229
////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::Copy constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
106
EggGroupNode::EggGroupNode(string const &name = "");
EggGroupNode::EggGroupNode(EggGroupNode const &copy);

1218 10 operator = 0 4 1982 24 EggGroupNode::operator = 0 1 243 237
////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::Copy assignment operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
65
EggGroupNode &EggGroupNode::operator =(EggGroupNode const &copy);

1219 5 empty 0 4 1982 19 EggGroupNode::empty 0 1 244 218
////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::empty
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
37
bool EggGroupNode::empty(void) const;

1220 4 size 0 4 1982 18 EggGroupNode::size 0 1 245 217
////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::size
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
55
EggGroupNode::size_type EggGroupNode::size(void) const;

1221 5 clear 0 4 1982 19 EggGroupNode::clear 0 1 246 218
////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::clear
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
31
void EggGroupNode::clear(void);

1222 15 get_first_child 0 4 1982 29 EggGroupNode::get_first_child 0 1 247 914
// This is an alternate way to traverse the list of children.  It is
// mainly provided for scripting code, which can't use the iterators
// defined above (they don't export through interrogate very well).
// These are, of course, non-thread-safe.

////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::get_first_child
//       Access: Published
//  Description: Returns the first child in the group's list of
//               children, or NULL if the list of children is empty.
//               Can be used with get_next_child() to return the
//               complete list of children without using the iterator
//               class; however, this is non-thread-safe, and so is
//               not recommended except for languages other than C++
//               which cannot use the iterators.
////////////////////////////////////////////////////////////////////
45
EggNode *EggGroupNode::get_first_child(void);

1223 14 get_next_child 0 4 1982 28 EggGroupNode::get_next_child 0 1 248 857
////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::get_next_child
//       Access: Published
//  Description: Returns the next child in the group's list of
//               children since the last call to get_first_child() or
//               get_next_child(), or NULL if the last child has been
//               returned.  Can be used with get_first_child() to
//               return the complete list of children without using
//               the iterator class; however, this is non-thread-safe,
//               and so is not recommended except for languages other
//               than C++ which cannot use the iterators.
//
//               It is an error to call this without previously
//               calling get_first_child().
////////////////////////////////////////////////////////////////////
44
EggNode *EggGroupNode::get_next_child(void);

1224 12 get_children 0 4 1982 26 EggGroupNode::get_children 0 1 249 0
49
PyObject *EggGroupNode::get_children(void) const;

1225 9 add_child 0 4 1982 23 EggGroupNode::add_child 0 1 250 385
////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::add_child
//       Access: Published
//  Description: Adds the indicated child to the group and returns it.
//               If the child node is already a child of some other
//               node, removes it first.
////////////////////////////////////////////////////////////////////
48
EggNode *EggGroupNode::add_child(EggNode *node);

1226 12 remove_child 0 4 1982 26 EggGroupNode::remove_child 0 1 251 398
////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::remove_child
//       Access: Published
//  Description: Removes the indicated child node from the group and
//               returns it.  If the child was not already in the
//               group, does nothing and returns NULL.
////////////////////////////////////////////////////////////////////
63
PointerTo< EggNode > EggGroupNode::remove_child(EggNode *node);

1227 14 steal_children 0 4 1982 28 EggGroupNode::steal_children 0 1 252 416
////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::steal_children
//       Access: Published
//  Description: Moves all the children from the other node to this
//               one.  This is especially useful because the group
//               node copy assignment operator does not copy children.
////////////////////////////////////////////////////////////////////
55
void EggGroupNode::steal_children(EggGroupNode &other);

1228 10 find_child 0 4 1982 24 EggGroupNode::find_child 0 1 253 410
////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::find_child
//       Access: Published
//  Description: Returns the child of this node whose name is the
//               indicated string, or NULL if there is no child of
//               this node by that name.  Does not search recursively.
////////////////////////////////////////////////////////////////////
60
EggNode *EggGroupNode::find_child(string const &name) const;

1229 22 has_absolute_pathnames 0 4 1982 36 EggGroupNode::has_absolute_pathnames 0 1 254 416
////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::has_absolute_pathnames
//       Access: Published
//  Description: Returns true if any nodes at this level and below
//               include a reference to a file via an absolute
//               pathname, or false if all references are relative.
////////////////////////////////////////////////////////////////////
54
bool EggGroupNode::has_absolute_pathnames(void) const;

1230 17 resolve_filenames 0 4 1982 31 EggGroupNode::resolve_filenames 0 1 255 472
////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::resolve_filenames
//       Access: Published
//  Description: Walks the tree and attempts to resolve any filenames
//               encountered.  This looks up filenames along the
//               specified search path; it does not automatically
//               search the model_path for missing files.
////////////////////////////////////////////////////////////////////
68
void EggGroupNode::resolve_filenames(DSearchPath const &searchpath);

1231 15 force_filenames 0 4 1982 29 EggGroupNode::force_filenames 0 1 256 452
////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::force_filenames
//       Access: Published
//  Description: Similar to resolve_filenames, but each non-absolute
//               filename encountered is arbitrarily taken to be in
//               the indicated directory, whether or not the so-named
//               filename exists.
////////////////////////////////////////////////////////////////////
62
void EggGroupNode::force_filenames(Filename const &directory);

1232 23 reverse_vertex_ordering 0 4 1982 37 EggGroupNode::reverse_vertex_ordering 0 1 257 393
////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::reverse_vertex_ordering
//       Access: Published
//  Description: Reverses the vertex ordering of all polygons defined
//               at this node and below.  Does not change the surface
//               normals, if any.
////////////////////////////////////////////////////////////////////
49
void EggGroupNode::reverse_vertex_ordering(void);

1233 24 recompute_vertex_normals 0 4 1982 38 EggGroupNode::recompute_vertex_normals 0 1 258 1132
////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::recompute_vertex_normals
//       Access: Published
//  Description: Recomputes all the vertex normals for polygon
//               geometry at this group node and below so that they
//               accurately reflect the vertex positions.  A shared
//               edge between two polygons (even in different groups)
//               is considered smooth if the angle between the two
//               edges is less than threshold degrees.
//
//               This function also removes degenerate polygons that
//               do not have enough vertices to define a normal.  It
//               does not affect normals for other kinds of primitives
//               like Nurbs or Points.
//
//               This function does not remove or adjust vertices in
//               the vertex pool; it only adds new vertices with the
//               correct normals.  Thus, it is a good idea to call
//               remove_unused_vertices() after calling this.
////////////////////////////////////////////////////////////////////
98
void EggGroupNode::recompute_vertex_normals(double threshold, CoordinateSystem cs = ::CS_default);

1234 25 recompute_polygon_normals 0 4 1982 39 EggGroupNode::recompute_polygon_normals 0 1 259 1077
////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::recompute_polygon_normals
//       Access: Published
//  Description: Recomputes all the polygon normals for polygon
//               geometry at this group node and below so that they
//               accurately reflect the vertex positions.  Normals are
//               removed from the vertices and defined only on
//               polygons, giving the geometry a faceted appearance.
//
//               This function also removes degenerate polygons that
//               do not have enough vertices to define a normal.  It
//               does not affect normals for other kinds of primitives
//               like Nurbs or Points.
//
//               This function does not remove or adjust vertices in
//               the vertex pool; it only adds new vertices with the
//               normals removed.  Thus, it is a good idea to call
//               remove_unused_vertices() after calling this.
////////////////////////////////////////////////////////////////////
81
void EggGroupNode::recompute_polygon_normals(CoordinateSystem cs = ::CS_default);

1235 13 strip_normals 0 4 1982 27 EggGroupNode::strip_normals 0 1 260 606
////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::strip_normals
//       Access: Published
//  Description: Removes all normals from primitives, and the vertices
//               they reference, at this node and below.
//
//               This function does not remove or adjust vertices in
//               the vertex pool; it only adds new vertices with the
//               normal removed.  Thus, it is a good idea to call
//               remove_unused_vertices() after calling this.
////////////////////////////////////////////////////////////////////
39
void EggGroupNode::strip_normals(void);

1236 26 recompute_tangent_binormal 0 4 1982 40 EggGroupNode::recompute_tangent_binormal 0 2 261 262 1603
////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::recompute_tangent_binormal
//       Access: Published
//  Description: This function recomputes the tangent and binormal for
//               the named texture coordinate set for all vertices at
//               this level and below.  Use the empty string for the
//               default texture coordinate set.
//
//               It is necessary for each vertex to already have a
//               normal (or at least a polygon normal), as well as a
//               texture coordinate in the named texture coordinate
//               set, before calling this function.  You might precede
//               this with recompute_vertex_normals() to ensure that
//               the normals exist.
//
//               Like recompute_vertex_normals(), this function does
//               not remove or adjust vertices in the vertex pool; it
//               only adds new vertices with the new tangents and
//               binormals computed.  Thus, it is a good idea to call
//               remove_unused_vertices() after calling this.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::recompute_tangent_binormal
//       Access: Published
//  Description: This function recomputes the tangent and binormal for
//               the named texture coordinate sets.
//               Returns true if anything was done.
////////////////////////////////////////////////////////////////////
149
bool EggGroupNode::recompute_tangent_binormal(GlobPattern const &uv_name);
bool EggGroupNode::recompute_tangent_binormal(vector_string const &names);

1237 31 recompute_tangent_binormal_auto 0 4 1982 45 EggGroupNode::recompute_tangent_binormal_auto 0 1 263 421
////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::recompute_tangent_binormal_auto
//       Access: Published
//  Description: This function recomputes the tangent and binormal for
//               any texture coordinate set that affects a normal map.
//               Returns true if anything was done.
////////////////////////////////////////////////////////////////////
57
bool EggGroupNode::recompute_tangent_binormal_auto(void);

1238 20 triangulate_polygons 0 4 1982 34 EggGroupNode::triangulate_polygons 0 1 264 772
////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::triangulate_polygons
//       Access: Published
//  Description: Replace all higher-order polygons at this point in
//               the scene graph and below with triangles.  Returns
//               the total number of new triangles produced, less
//               degenerate polygons removed.
//
//               If flags contains T_polygon and T_convex, both
//               concave and convex polygons will be subdivided into
//               triangles; with only T_polygon, only concave polygons
//               will be subdivided, and convex polygons will be
//               largely unchanged.
////////////////////////////////////////////////////////////////////
50
int EggGroupNode::triangulate_polygons(int flags);

1239 14 mesh_triangles 0 4 1982 28 EggGroupNode::mesh_triangles 0 1 265 318
////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::mesh_triangles
//       Access: Published
//  Description: Combine triangles together into triangle strips, at
//               this group and below.
////////////////////////////////////////////////////////////////////
45
void EggGroupNode::mesh_triangles(int flags);

1240 21 make_point_primitives 0 4 1982 35 EggGroupNode::make_point_primitives 0 1 266 382
////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::make_point_primitives
//       Access: Published
//  Description: Creates PointLight primitives to reference any
//               otherwise unreferences vertices discovered in this
//               group or below.
////////////////////////////////////////////////////////////////////
47
void EggGroupNode::make_point_primitives(void);

1241 12 rename_nodes 0 4 1982 26 EggGroupNode::rename_nodes 0 1 267 260
////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::rename_nodes
//       Access: Published
//  Description: Rename by stripping out the prefix
////////////////////////////////////////////////////////////////////
73
int EggGroupNode::rename_nodes(vector_string strip_prefix, bool recurse);

1242 22 remove_unused_vertices 0 4 1982 36 EggGroupNode::remove_unused_vertices 0 1 268 1111
////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::remove_unused_vertices
//       Access: Published
//  Description: Removes all vertices from VertexPools within this
//               group or below that are not referenced by at least
//               one primitive.  Also collapses together equivalent
//               vertices, and renumbers all vertices after the
//               operation so their indices are consecutive, beginning
//               at zero.  Returns the total number of vertices
//               removed.
//
//               Note that this operates on the VertexPools within
//               this group level, without respect to primitives that
//               reference these vertices (unlike other functions like
//               strip_normals()).  It is therefore most useful to
//               call this on the EggData root, rather than on a
//               subgroup within the hierarchy, since a VertexPool may
//               appear anywhere in the hierarchy.
////////////////////////////////////////////////////////////////////
55
int EggGroupNode::remove_unused_vertices(bool recurse);

1243 25 remove_invalid_primitives 0 4 1982 39 EggGroupNode::remove_invalid_primitives 0 1 269 453
////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::remove_invalid_primitives
//       Access: Published
//  Description: Removes primitives at this level and below which
//               appear to be degenerate; e.g. polygons with fewer
//               than 3 vertices, etc.  Returns the number of
//               primitives removed.
////////////////////////////////////////////////////////////////////
58
int EggGroupNode::remove_invalid_primitives(bool recurse);

1244 23 clear_connected_shading 0 4 1982 37 EggGroupNode::clear_connected_shading 0 1 270 635
////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::clear_connected_shading
//       Access: Published
//  Description: Resets the connected_shading information on all
//               primitives at this node and below, so that it may be
//               accurately rederived by the next call to
//               get_connected_shading().
//
//               It may be a good idea to call
//               remove_unused_vertices() as well, to establish the
//               correct connectivity between common vertices.
////////////////////////////////////////////////////////////////////
49
void EggGroupNode::clear_connected_shading(void);

1245 21 get_connected_shading 0 4 1982 35 EggGroupNode::get_connected_shading 0 1 271 463
////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::get_connected_shading
//       Access: Published
//  Description: Queries the connected_shading information on all
//               primitives at this node and below, to ensure that it
//               has been completely filled in before we start mucking
//               around with vertices.
////////////////////////////////////////////////////////////////////
47
void EggGroupNode::get_connected_shading(void);

1246 16 unify_attributes 0 4 1982 30 EggGroupNode::unify_attributes 0 1 272 1614
////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::unify_attributes
//       Access: Published
//  Description: Applies per-vertex normal and color to all vertices,
//               if they are in fact per-vertex (and different for
//               each vertex), or moves them to the primitive if they
//               are all the same.
//
//               After this call, either the primitive will have
//               normals or its vertices will, but not both.  Ditto
//               for colors.
//
//               If use_connected_shading is true, each polygon is
//               considered in conjunction with all connected
//               polygons; otherwise, each polygon is considered
//               individually.
//
//               If allow_per_primitive is false, S_per_face or
//               S_overall will treated like S_per_vertex: normals and
//               colors will always be assigned to the vertices.  In
//               this case, there will never be per-primitive colors
//               or normals after this call returns.  On the other
//               hand, if allow_per_primitive is true, then S_per_face
//               means that normals and colors should be assigned to
//               the primitives, and removed from the vertices, as
//               described above.
//
//               This may create redundant vertices in the vertex
//               pool, so it may be a good idea to follow this up with
//               remove_unused_vertices().
////////////////////////////////////////////////////////////////////
104
void EggGroupNode::unify_attributes(bool use_connected_shading, bool allow_per_primitive, bool recurse);

1247 20 apply_last_attribute 0 4 1982 34 EggGroupNode::apply_last_attribute 0 1 273 768
////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::apply_last_attribute
//       Access: Published
//  Description: Sets the last vertex of the triangle (or each
//               component) to the primitive normal and/or color, if
//               the primitive is flat-shaded.  This reflects the
//               OpenGL convention of storing flat-shaded properties on
//               the last vertex, although it is not usually a
//               convention in Egg.
//
//               This may create redundant vertices in the vertex
//               pool, so it may be a good idea to follow this up with
//               remove_unused_vertices().
////////////////////////////////////////////////////////////////////
54
void EggGroupNode::apply_last_attribute(bool recurse);

1248 21 apply_first_attribute 0 4 1982 35 EggGroupNode::apply_first_attribute 0 1 274 772
////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::apply_first_attribute
//       Access: Published
//  Description: Sets the first vertex of the triangle (or each
//               component) to the primitive normal and/or color, if
//               the primitive is flat-shaded.  This reflects the
//               DirectX convention of storing flat-shaded properties on
//               the first vertex, although it is not usually a
//               convention in Egg.
//
//               This may create redundant vertices in the vertex
//               pool, so it may be a good idea to follow this up with
//               remove_unused_vertices().
////////////////////////////////////////////////////////////////////
55
void EggGroupNode::apply_first_attribute(bool recurse);

1249 25 post_apply_flat_attribute 0 4 1982 39 EggGroupNode::post_apply_flat_attribute 0 1 275 490
////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::post_apply_flat_attribute
//       Access: Published
//  Description: Intended as a followup to apply_last_attribute(),
//               this also sets an attribute on the first vertices of
//               the primitive, if they don't already have an
//               attribute set, just so they end up with *something*.
////////////////////////////////////////////////////////////////////
59
void EggGroupNode::post_apply_flat_attribute(bool recurse);

1250 14 has_primitives 0 6 1982 28 EggGroupNode::has_primitives 0 1 276 380
////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::has_primitives
//       Access: Published, Virtual
//  Description: Returns true if there are any primitives
//               (e.g. polygons) defined within this group or below,
//               false otherwise.
////////////////////////////////////////////////////////////////////
54
virtual bool EggGroupNode::has_primitives(void) const;

1251 20 joint_has_primitives 0 6 1982 34 EggGroupNode::joint_has_primitives 0 1 277 416
////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::joint_has_primitives
//       Access: Published, Virtual
//  Description: Returns true if there are any primitives
//               (e.g. polygons) defined within this group or below,
//               but the search does not include nested joints.
////////////////////////////////////////////////////////////////////
60
virtual bool EggGroupNode::joint_has_primitives(void) const;

1252 11 has_normals 0 6 1982 25 EggGroupNode::has_normals 0 1 278 417
////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::has_normals
//       Access: Published, Virtual
//  Description: Returns true if any of the primitives (e.g. polygons)
//               defined within this group or below have either face
//               or vertex normals defined, false otherwise.
////////////////////////////////////////////////////////////////////
51
virtual bool EggGroupNode::has_normals(void) const;

1253 8 is_right 0 4 1982 22 EggGroupNode::is_right 0 1 279 277
////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::is_right
//       Access: Private, Static
//  Description: Returns true if the 2-d v1 is to the right of v2.
////////////////////////////////////////////////////////////////////
84
static inline bool EggGroupNode::is_right(LVector2d const &v1, LVector2d const &v2);

1254 14 get_class_type 0 4 1982 28 EggGroupNode::get_class_type 0 1 280 0
53
static TypeHandle EggGroupNode::get_class_type(void);

1255 13 EggRenderMode 0 4 1984 28 EggRenderMode::EggRenderMode 0 2 281 282 451
////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
99
EggRenderMode::EggRenderMode(void);
inline EggRenderMode::EggRenderMode(EggRenderMode const &copy);

1256 10 operator = 0 4 1984 25 EggRenderMode::operator = 0 1 283 235
////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::Copy assignment operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
68
EggRenderMode &EggRenderMode::operator =(EggRenderMode const &copy);

1257 5 write 0 4 1984 20 EggRenderMode::write 0 1 284 301
////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::write
//       Access: Public
//  Description: Writes the attributes to the indicated output stream in
//               Egg format.
////////////////////////////////////////////////////////////////////
64
void EggRenderMode::write(ostream &out, int indent_level) const;

1258 14 set_alpha_mode 0 4 1984 29 EggRenderMode::set_alpha_mode 0 1 285 849
////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::set_alpha_mode
//       Access: Public
//  Description: Specifies precisely how the transparency for this
//               geometry should be achieved, or if it should be used.
//               The default, AM_unspecified, is to use transparency
//               if the geometry has a color whose alpha value is
//               non-1, or if it has a four-channel texture applied;
//               otherwise, AM_on forces transparency on, and AM_off
//               forces it off.  The other flavors of transparency are
//               specific ways to turn on transparency, which may or
//               may not be supported by a particular rendering
//               backend.
////////////////////////////////////////////////////////////////////
73
inline void EggRenderMode::set_alpha_mode(EggRenderMode::AlphaMode mode);

1259 14 get_alpha_mode 0 4 1984 29 EggRenderMode::get_alpha_mode 0 1 286 357
////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::get_alpha_mode
//       Access: Public
//  Description: Returns the alpha mode that was set, or
//               AM_unspecified if nothing was set.  See
//               set_alpha_mode().
////////////////////////////////////////////////////////////////////
74
inline EggRenderMode::AlphaMode EggRenderMode::get_alpha_mode(void) const;

1260 20 set_depth_write_mode 0 4 1984 35 EggRenderMode::set_depth_write_mode 0 1 287 412
////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::set_depth_write_mode
//       Access: Public
//  Description: Specifies whether writes should be made to the depth
//               buffer (assuming the rendering backend provides a
//               depth buffer) when rendering this geometry.
////////////////////////////////////////////////////////////////////
84
inline void EggRenderMode::set_depth_write_mode(EggRenderMode::DepthWriteMode mode);

1261 20 get_depth_write_mode 0 4 1984 35 EggRenderMode::get_depth_write_mode 0 1 288 376
////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::get_depth_write_mode
//       Access: Public
//  Description: Returns the depth_write mode that was set, or
//               DWM_unspecified if nothing was set.  See
//               set_depth_write_mode().
////////////////////////////////////////////////////////////////////
85
inline EggRenderMode::DepthWriteMode EggRenderMode::get_depth_write_mode(void) const;

1262 19 set_depth_test_mode 0 4 1984 34 EggRenderMode::set_depth_test_mode 0 1 289 521
////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::set_depth_test_mode
//       Access: Public
//  Description: Specifies whether this geometry should be tested
//               against the depth buffer when it is drawn (assuming
//               the rendering backend provides a depth buffer).  Note
//               that this is different, and independent from, the
//               depth_write mode.
////////////////////////////////////////////////////////////////////
82
inline void EggRenderMode::set_depth_test_mode(EggRenderMode::DepthTestMode mode);

1263 19 get_depth_test_mode 0 4 1984 34 EggRenderMode::get_depth_test_mode 0 1 290 373
////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::get_depth_test_mode
//       Access: Public
//  Description: Returns the depth_test mode that was set, or
//               DTM_unspecified if nothing was set.  See
//               set_depth_test_mode().
////////////////////////////////////////////////////////////////////
83
inline EggRenderMode::DepthTestMode EggRenderMode::get_depth_test_mode(void) const;

1264 19 set_visibility_mode 0 4 1984 34 EggRenderMode::set_visibility_mode 0 1 291 530
////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::set_visibility_mode
//       Access: Public
//  Description: Specifies whether this geometry is to be considered
//               normally visible, or hidden.  If it is hidden, it is
//               either not loaded into the scene graph at all, or
//               loaded as a "stashed" node, according to the setting
//               of egg-suppress-hidden.
////////////////////////////////////////////////////////////////////
83
inline void EggRenderMode::set_visibility_mode(EggRenderMode::VisibilityMode mode);

1265 19 get_visibility_mode 0 4 1984 34 EggRenderMode::get_visibility_mode 0 1 292 372
////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::get_visibility_mode
//       Access: Public
//  Description: Returns the visibility mode that was set, or
//               VM_unspecified if nothing was set.  See
//               set_visibility_mode().
////////////////////////////////////////////////////////////////////
84
inline EggRenderMode::VisibilityMode EggRenderMode::get_visibility_mode(void) const;

1266 16 set_depth_offset 0 4 1984 31 EggRenderMode::set_depth_offset 0 1 293 459
////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::set_depth_offset
//       Access: Public
//  Description: Sets the "depth-offset" flag associated with this
//               object.  This adds or subtracts an offset bias
//               into the depth buffer. See also DepthOffsetAttrib
//               and NodePath::set_depth_offset().
////////////////////////////////////////////////////////////////////
54
inline void EggRenderMode::set_depth_offset(int bias);

1267 16 get_depth_offset 0 4 1984 31 EggRenderMode::get_depth_offset 0 1 294 336
////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::get_depth_offset
//       Access: Public
//  Description: Returns the "depth-offset" flag as set for this
//               particular object.  See set_depth_offset().
////////////////////////////////////////////////////////////////////
55
inline int EggRenderMode::get_depth_offset(void) const;

1268 16 has_depth_offset 0 4 1984 31 EggRenderMode::has_depth_offset 0 1 295 348
////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::has_depth_offset
//       Access: Public
//  Description: Returns true if the depth-offset flag has been set for
//               this particular object.  See set_depth_offset().
////////////////////////////////////////////////////////////////////
56
inline bool EggRenderMode::has_depth_offset(void) const;

1269 18 clear_depth_offset 0 4 1984 33 EggRenderMode::clear_depth_offset 0 1 296 330
////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::clear_depth_offset
//       Access: Public
//  Description: Removes the depth-offset flag from this particular
//               object.  See set_depth_offset().
////////////////////////////////////////////////////////////////////
52
inline void EggRenderMode::clear_depth_offset(void);

1270 14 set_draw_order 0 4 1984 29 EggRenderMode::set_draw_order 0 1 297 534
////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::set_draw_order
//       Access: Public
//  Description: Sets the "draw-order" flag associated with this
//               object.  This specifies a particular order in which
//               objects of this type should be drawn, within the
//               specified bin.  If a bin is not explicitly specified,
//               "fixed" is used.  See also set_bin().
////////////////////////////////////////////////////////////////////
53
inline void EggRenderMode::set_draw_order(int order);

1271 14 get_draw_order 0 4 1984 29 EggRenderMode::get_draw_order 0 1 298 330
////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::get_draw_order
//       Access: Public
//  Description: Returns the "draw-order" flag as set for this
//               particular object.  See set_draw_order().
////////////////////////////////////////////////////////////////////
53
inline int EggRenderMode::get_draw_order(void) const;

1272 14 has_draw_order 0 4 1984 29 EggRenderMode::has_draw_order 0 1 299 342
////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::has_draw_order
//       Access: Public
//  Description: Returns true if the draw-order flag has been set for
//               this particular object.  See set_draw_order().
////////////////////////////////////////////////////////////////////
54
inline bool EggRenderMode::has_draw_order(void) const;

1273 16 clear_draw_order 0 4 1984 31 EggRenderMode::clear_draw_order 0 1 300 324
////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::clear_draw_order
//       Access: Public
//  Description: Removes the draw-order flag from this particular
//               object.  See set_draw_order().
////////////////////////////////////////////////////////////////////
50
inline void EggRenderMode::clear_draw_order(void);

1274 7 set_bin 0 4 1984 22 EggRenderMode::set_bin 0 1 301 691
////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::set_bin
//       Access: Public
//  Description: Sets the "bin" string for this particular object.
//               This names a particular bin in which the object
//               should be rendered.  The exact meaning of a bin is
//               implementation defined, but generally a GeomBin
//               matching each bin name must also be specifically
//               added to the rendering engine (e.g. the
//               CullTraverser) in use for this to work.  See also
//               set_draw_order().
////////////////////////////////////////////////////////////////////
54
inline void EggRenderMode::set_bin(string const &bin);

1275 7 get_bin 0 4 1984 22 EggRenderMode::get_bin 0 1 302 326
////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::get_bin
//       Access: Public
//  Description: Returns the bin name that has been set for this
//               particular object, if any.  See set_bin().
////////////////////////////////////////////////////////////////////
49
inline string EggRenderMode::get_bin(void) const;

1276 7 has_bin 0 4 1984 22 EggRenderMode::has_bin 0 1 303 319
////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::has_bin
//       Access: Public
//  Description: Returns true if a bin name has been set for this
//               particular object.  See set_bin().
////////////////////////////////////////////////////////////////////
47
inline bool EggRenderMode::has_bin(void) const;

1277 9 clear_bin 0 4 1984 24 EggRenderMode::clear_bin 0 1 304 315
////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::clear_bin
//       Access: Public
//  Description: Removes the bin name that was set for this particular
//               object.  See set_bin().
////////////////////////////////////////////////////////////////////
43
inline void EggRenderMode::clear_bin(void);

1278 11 operator == 0 4 1984 26 EggRenderMode::operator == 0 1 305 34
// Comparison operators are handy.
66
bool EggRenderMode::operator ==(EggRenderMode const &other) const;

1279 11 operator != 0 4 1984 26 EggRenderMode::operator != 0 1 306 0
73
inline bool EggRenderMode::operator !=(EggRenderMode const &other) const;

1280 10 operator < 0 4 1984 25 EggRenderMode::operator < 0 1 307 0
65
bool EggRenderMode::operator <(EggRenderMode const &other) const;

1281 17 string_alpha_mode 0 4 1984 32 EggRenderMode::string_alpha_mode 0 1 308 413
////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::string_alpha_mode
//       Access: Public
//  Description: Returns the AlphaMode value associated with the given
//               string representation, or AM_unspecified if the string
//               does not match any known AlphaMode value.
////////////////////////////////////////////////////////////////////
87
static EggRenderMode::AlphaMode EggRenderMode::string_alpha_mode(string const &string);

1282 23 string_depth_write_mode 0 4 1984 38 EggRenderMode::string_depth_write_mode 0 1 309 447
////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::string_depth_write_mode
//       Access: Public
//  Description: Returns the DepthWriteMode value associated with the
//               given string representation, or DWM_unspecified if
//               the string does not match any known DepthWriteMode
//               value.
////////////////////////////////////////////////////////////////////
98
static EggRenderMode::DepthWriteMode EggRenderMode::string_depth_write_mode(string const &string);

1283 22 string_depth_test_mode 0 4 1984 37 EggRenderMode::string_depth_test_mode 0 1 310 444
////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::string_depth_test_mode
//       Access: Public
//  Description: Returns the DepthTestMode value associated with the
//               given string representation, or DTM_unspecified if
//               the string does not match any known DepthTestMode
//               value.
////////////////////////////////////////////////////////////////////
96
static EggRenderMode::DepthTestMode EggRenderMode::string_depth_test_mode(string const &string);

1284 22 string_visibility_mode 0 4 1984 37 EggRenderMode::string_visibility_mode 0 1 311 437
////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::string_visibility_mode
//       Access: Public
//  Description: Returns the HiddenMode value associated with the
//               given string representation, or VM_unspecified if
//               the string does not match any known HiddenMode
//               value.
////////////////////////////////////////////////////////////////////
97
static EggRenderMode::VisibilityMode EggRenderMode::string_visibility_mode(string const &string);

1285 14 get_class_type 0 4 1984 29 EggRenderMode::get_class_type 0 1 312 0
54
static TypeHandle EggRenderMode::get_class_type(void);

1286 14 ~EggRenderMode 0 4 1984 29 EggRenderMode::~EggRenderMode 0 0 0
36
EggRenderMode::~EggRenderMode(void);

1287 12 EggTransform 0 4 1989 26 EggTransform::EggTransform 0 2 313 314 449
////////////////////////////////////////////////////////////////////
//     Function: EggTransform::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggTransform::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
87
EggTransform::EggTransform(void);
EggTransform::EggTransform(EggTransform const &copy);

1288 10 operator = 0 4 1989 24 EggTransform::operator = 0 1 315 234
////////////////////////////////////////////////////////////////////
//     Function: EggTransform::Copy assignment operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
65
EggTransform &EggTransform::operator =(EggTransform const &copy);

1289 13 ~EggTransform 0 6 1989 27 EggTransform::~EggTransform 0 0 229
////////////////////////////////////////////////////////////////////
//     Function: EggTransform::Destructor
//       Access: Public, Virtual
//  Description:
////////////////////////////////////////////////////////////////////
42
virtual EggTransform::~EggTransform(void);

1290 15 clear_transform 0 4 1989 29 EggTransform::clear_transform 0 1 316 266
////////////////////////////////////////////////////////////////////
//     Function: EggTransform::clear_transform
//       Access: Public
//  Description: Resets the transform to empty, identity.
////////////////////////////////////////////////////////////////////
48
inline void EggTransform::clear_transform(void);

1291 15 add_translate2d 0 4 1989 29 EggTransform::add_translate2d 0 1 317 304
////////////////////////////////////////////////////////////////////
//     Function: EggTransform::add_translate2d
//       Access: Public
//  Description: Appends a 2-d translation operation to the current
//               transform.
////////////////////////////////////////////////////////////////////
63
void EggTransform::add_translate2d(LVector2d const &translate);

1292 15 add_translate3d 0 4 1989 29 EggTransform::add_translate3d 0 1 318 304
////////////////////////////////////////////////////////////////////
//     Function: EggTransform::add_translate3d
//       Access: Public
//  Description: Appends a 3-d translation operation to the current
//               transform.
////////////////////////////////////////////////////////////////////
63
void EggTransform::add_translate3d(LVector3d const &translate);

1293 12 add_rotate2d 0 4 1989 26 EggTransform::add_rotate2d 0 1 319 384
////////////////////////////////////////////////////////////////////
//     Function: EggTransform::add_rotate2d
//       Access: Public
//  Description: Appends a 2-d rotation to the current transform.  The
//               rotation angle is specified in degrees
//               counterclockwise about the origin.
////////////////////////////////////////////////////////////////////
46
void EggTransform::add_rotate2d(double angle);

1294 8 add_rotx 0 4 1989 22 EggTransform::add_rotx 0 1 320 391
////////////////////////////////////////////////////////////////////
//     Function: EggTransform::add_rotx
//       Access: Public
//  Description: Appends a rotation about the X axis to the current
//               transform.  The rotation angle is specified in
//               degrees counterclockwise about the axis.
////////////////////////////////////////////////////////////////////
42
void EggTransform::add_rotx(double angle);

1295 8 add_roty 0 4 1989 22 EggTransform::add_roty 0 1 321 391
////////////////////////////////////////////////////////////////////
//     Function: EggTransform::add_roty
//       Access: Public
//  Description: Appends a rotation about the Y axis to the current
//               transform.  The rotation angle is specified in
//               degrees counterclockwise about the axis.
////////////////////////////////////////////////////////////////////
42
void EggTransform::add_roty(double angle);

1296 8 add_rotz 0 4 1989 22 EggTransform::add_rotz 0 1 322 391
////////////////////////////////////////////////////////////////////
//     Function: EggTransform::add_rotz
//       Access: Public
//  Description: Appends a rotation about the Z axis to the current
//               transform.  The rotation angle is specified in
//               degrees counterclockwise about the axis.
////////////////////////////////////////////////////////////////////
42
void EggTransform::add_rotz(double angle);

1297 12 add_rotate3d 0 4 1989 26 EggTransform::add_rotate3d 0 2 323 324 811
////////////////////////////////////////////////////////////////////
//     Function: EggTransform::add_rotate3d
//       Access: Public
//  Description: Appends a 3-d rotation about an arbitrary axis to the
//               current transform.  The rotation angle is specified
//               in degrees counterclockwise about the axis.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggTransform::add_rotate3d
//       Access: Public
//  Description: Appends an arbitrary 3-d rotation to the current
//               transform, expressed as a quaternion.  This is
//               converted to axis-angle notation for the egg file.
////////////////////////////////////////////////////////////////////
128
void EggTransform::add_rotate3d(double angle, LVector3d const &axis);
void EggTransform::add_rotate3d(LQuaterniond const &quat);

1298 11 add_scale2d 0 4 1989 25 EggTransform::add_scale2d 0 1 325 301
////////////////////////////////////////////////////////////////////
//     Function: EggTransform::add_scale2d
//       Access: Public
//  Description: Appends a possibly non-uniform scale to the current
//               transform.
////////////////////////////////////////////////////////////////////
56
void EggTransform::add_scale2d(LVecBase2d const &scale);

1299 11 add_scale3d 0 4 1989 25 EggTransform::add_scale3d 0 1 326 301
////////////////////////////////////////////////////////////////////
//     Function: EggTransform::add_scale3d
//       Access: Public
//  Description: Appends a possibly non-uniform scale to the current
//               transform.
////////////////////////////////////////////////////////////////////
56
void EggTransform::add_scale3d(LVecBase3d const &scale);

1300 17 add_uniform_scale 0 4 1989 31 EggTransform::add_uniform_scale 0 1 327 277
////////////////////////////////////////////////////////////////////
//     Function: EggTransform::add_uniform_scale
//       Access: Public
//  Description: Appends a uniform scale to the current transform.
////////////////////////////////////////////////////////////////////
51
void EggTransform::add_uniform_scale(double scale);

1301 11 add_matrix3 0 4 1989 25 EggTransform::add_matrix3 0 1 328 296
////////////////////////////////////////////////////////////////////
//     Function: EggTransform::add_matrix3
//       Access: Public
//  Description: Appends an arbitrary 3x3 matrix to the current
//               transform.
////////////////////////////////////////////////////////////////////
60
inline void EggTransform::add_matrix3(LMatrix3d const &mat);

1302 11 add_matrix4 0 4 1989 25 EggTransform::add_matrix4 0 1 329 296
////////////////////////////////////////////////////////////////////
//     Function: EggTransform::add_matrix4
//       Access: Public
//  Description: Appends an arbitrary 4x4 matrix to the current
//               transform.
////////////////////////////////////////////////////////////////////
60
inline void EggTransform::add_matrix4(LMatrix4d const &mat);

1303 13 has_transform 0 4 1989 27 EggTransform::has_transform 0 1 330 432
////////////////////////////////////////////////////////////////////
//     Function: EggTransform::has_transform
//       Access: Public
//  Description: Returns true if the transform is nonempty, false if
//               it is empty (no transform components have been
//               added).  This is true for either a 2-d or a 3-d
//               transform.
////////////////////////////////////////////////////////////////////
52
inline bool EggTransform::has_transform(void) const;

1304 15 has_transform2d 0 4 1989 29 EggTransform::has_transform2d 0 1 331 632
////////////////////////////////////////////////////////////////////
//     Function: EggTransform::has_transform2d
//       Access: Public
//  Description: Returns true if the transform is specified as a 2-d
//               transform, e.g. with a 3x3 matrix, or false if it is
//               specified as a 3-d transform (with a 4x4 matrix), or
//               not specified at all.
//
//               Normally, EggTextures have a 2-d matrix (but
//               occasionally they use a 3-d matrix), and EggGroups
//               always have a 3-d matrix.
////////////////////////////////////////////////////////////////////
54
inline bool EggTransform::has_transform2d(void) const;

1305 15 set_transform2d 0 4 1989 29 EggTransform::set_transform2d 0 1 332 385
////////////////////////////////////////////////////////////////////
//     Function: EggTransform::set_transform2d
//       Access: Public
//  Description: Sets the overall transform as a 3x3 matrix.  This
//               completely replaces whatever componentwise transform
//               may have been defined.
////////////////////////////////////////////////////////////////////
64
inline void EggTransform::set_transform2d(LMatrix3d const &mat);

1306 15 has_transform3d 0 4 1989 29 EggTransform::has_transform3d 0 1 333 632
////////////////////////////////////////////////////////////////////
//     Function: EggTransform::has_transform3d
//       Access: Public
//  Description: Returns true if the transform is specified as a 3-d
//               transform, e.g. with a 4x4 matrix, or false if it is
//               specified as a 2-d transform (with a 2x2 matrix), or
//               not specified at all.
//
//               Normally, EggTextures have a 3-d matrix (but
//               occasionally they use a 3-d matrix), and EggGroups
//               always have a 3-d matrix.
////////////////////////////////////////////////////////////////////
54
inline bool EggTransform::has_transform3d(void) const;

1307 15 set_transform3d 0 4 1989 29 EggTransform::set_transform3d 0 1 334 385
////////////////////////////////////////////////////////////////////
//     Function: EggTransform::set_transform3d
//       Access: Public
//  Description: Sets the overall transform as a 4x4 matrix.  This
//               completely replaces whatever componentwise transform
//               may have been defined.
////////////////////////////////////////////////////////////////////
64
inline void EggTransform::set_transform3d(LMatrix4d const &mat);

1308 15 get_transform2d 0 4 1989 29 EggTransform::get_transform2d 0 1 335 348
////////////////////////////////////////////////////////////////////
//     Function: EggTransform::get_transform2d
//       Access: Public
//  Description: Returns the overall transform as a 3x3 matrix.  It is
//               an error to call this if has_transform3d() is true.
////////////////////////////////////////////////////////////////////
59
inline LMatrix3d EggTransform::get_transform2d(void) const;

1309 15 get_transform3d 0 4 1989 29 EggTransform::get_transform3d 0 1 336 450
////////////////////////////////////////////////////////////////////
//     Function: EggTransform::get_transform3d
//       Access: Public
//  Description: Returns the overall transform as a 4x4 matrix.  It is
//               valid to call this even if has_transform2d() is true;
//               in this case, the 3x3 transform will be expanded to a
//               4x4 matrix.
////////////////////////////////////////////////////////////////////
66
inline LMatrix4d const &EggTransform::get_transform3d(void) const;

1310 21 transform_is_identity 0 4 1989 35 EggTransform::transform_is_identity 0 1 337 318
////////////////////////////////////////////////////////////////////
//     Function: EggTransform::transform_is_identity
//       Access: Public
//  Description: Returns true if the described transform is identity,
//               false otherwise.
////////////////////////////////////////////////////////////////////
60
inline bool EggTransform::transform_is_identity(void) const;

1311 18 get_num_components 0 4 1989 32 EggTransform::get_num_components 0 1 338 306
////////////////////////////////////////////////////////////////////
//     Function: EggTransform::get_num_components
//       Access: Public
//  Description: Returns the number of components that make up the
//               transform.
////////////////////////////////////////////////////////////////////
56
inline int EggTransform::get_num_components(void) const;

1312 18 get_component_type 0 4 1989 32 EggTransform::get_component_type 0 1 339 267
////////////////////////////////////////////////////////////////////
//     Function: EggTransform::get_component_type
//       Access: Public
//  Description: Returns the type of the nth component.
////////////////////////////////////////////////////////////////////
81
inline EggTransform::ComponentType EggTransform::get_component_type(int n) const;

1313 20 get_component_number 0 4 1989 34 EggTransform::get_component_number 0 1 340 531
////////////////////////////////////////////////////////////////////
//     Function: EggTransform::get_component_number
//       Access: Public
//  Description: Returns the solitary number associated with the nth
//               component.  In the case of a rotation, this is the
//               angle in degrees to rotate; in the case of uniform
//               scale, this is the amount of the scale.  Other types
//               do not use this property.
////////////////////////////////////////////////////////////////////
62
inline double EggTransform::get_component_number(int n) const;

1314 18 get_component_vec2 0 4 1989 32 EggTransform::get_component_vec2 0 1 341 519
////////////////////////////////////////////////////////////////////
//     Function: EggTransform::get_component_vec2
//       Access: Public
//  Description: Returns the 2-component vector associated with the
//               nth component.  This may be the translate vector,
//               rotate axis, or non-uniform scale.  It is an error to
//               call this if the component type does not use a 2-d
//               vector property.
////////////////////////////////////////////////////////////////////
71
inline LVecBase2d const &EggTransform::get_component_vec2(int n) const;

1315 18 get_component_vec3 0 4 1989 32 EggTransform::get_component_vec3 0 1 342 519
////////////////////////////////////////////////////////////////////
//     Function: EggTransform::get_component_vec3
//       Access: Public
//  Description: Returns the 3-component vector associated with the
//               nth component.  This may be the translate vector,
//               rotate axis, or non-uniform scale.  It is an error to
//               call this if the component type does not use a 3-d
//               vector property.
////////////////////////////////////////////////////////////////////
71
inline LVecBase3d const &EggTransform::get_component_vec3(int n) const;

1316 18 get_component_mat3 0 4 1989 32 EggTransform::get_component_mat3 0 1 343 390
////////////////////////////////////////////////////////////////////
//     Function: EggTransform::get_component_mat3
//       Access: Public
//  Description: Returns the 3x3 matrix associated with the nth
//               component.  It is an error to call this if the
//               component type is not CT_matrix3.
////////////////////////////////////////////////////////////////////
70
inline LMatrix3d const &EggTransform::get_component_mat3(int n) const;

1317 18 get_component_mat4 0 4 1989 32 EggTransform::get_component_mat4 0 1 344 390
////////////////////////////////////////////////////////////////////
//     Function: EggTransform::get_component_mat4
//       Access: Public
//  Description: Returns the 4x4 matrix associated with the nth
//               component.  It is an error to call this if the
//               component type is not CT_matrix4.
////////////////////////////////////////////////////////////////////
70
inline LMatrix4d const &EggTransform::get_component_mat4(int n) const;

1318 5 write 0 4 1989 19 EggTransform::write 0 1 345 292
////////////////////////////////////////////////////////////////////
//     Function: EggTransform::write
//       Access: Public
//  Description: Writes the transform to the indicated stream in Egg
//               format.
////////////////////////////////////////////////////////////////////
84
void EggTransform::write(ostream &out, int indent_level, string const &label) const;

1319 9 make_copy 0 6 1991 29 EggSwitchCondition::make_copy 0 1 346 0
74
virtual EggSwitchCondition *EggSwitchCondition::make_copy(void) const = 0;

1320 5 write 0 6 1991 25 EggSwitchCondition::write 0 1 347 0
81
virtual void EggSwitchCondition::write(ostream &out, int indent_level) const = 0;

1321 9 transform 0 6 1991 29 EggSwitchCondition::transform 0 1 348 0
69
virtual void EggSwitchCondition::transform(LMatrix4d const &mat) = 0;

1322 14 get_class_type 0 4 1991 34 EggSwitchCondition::get_class_type 0 1 349 0
59
static TypeHandle EggSwitchCondition::get_class_type(void);

1323 19 ~EggSwitchCondition 0 4 1991 39 EggSwitchCondition::~EggSwitchCondition 0 0 0
46
EggSwitchCondition::~EggSwitchCondition(void);

1324 26 EggSwitchConditionDistance 0 4 1992 54 EggSwitchConditionDistance::EggSwitchConditionDistance 0 1 350 235
////////////////////////////////////////////////////////////////////
//     Function: EggSwitchConditionDistance::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
135
EggSwitchConditionDistance::EggSwitchConditionDistance(double switch_in, double switch_out, LPoint3d const &center, double fade = 0.0);

1325 14 get_class_type 0 4 1992 42 EggSwitchConditionDistance::get_class_type 0 1 351 0
67
static TypeHandle EggSwitchConditionDistance::get_class_type(void);

1326 27 ~EggSwitchConditionDistance 0 4 1992 55 EggSwitchConditionDistance::~EggSwitchConditionDistance 0 0 0
62
EggSwitchConditionDistance::~EggSwitchConditionDistance(void);

1327 22 upcast_to_EggGroupNode 0 12 1993 32 EggGroup::upcast_to_EggGroupNode 0 1 490 36
upcast from EggGroup to EggGroupNode
53
EggGroupNode *EggGroup::upcast_to_EggGroupNode(void);

1328 20 downcast_to_EggGroup 0 12 1982 34 EggGroupNode::downcast_to_EggGroup 0 1 491 38
downcast from EggGroupNode to EggGroup
51
EggGroup *EggGroupNode::downcast_to_EggGroup(void);

1329 23 upcast_to_EggRenderMode 0 12 1993 33 EggGroup::upcast_to_EggRenderMode 0 1 492 37
upcast from EggGroup to EggRenderMode
55
EggRenderMode *EggGroup::upcast_to_EggRenderMode(void);

1330 20 downcast_to_EggGroup 0 12 1984 35 EggRenderMode::downcast_to_EggGroup 0 1 493 39
downcast from EggRenderMode to EggGroup
52
EggGroup *EggRenderMode::downcast_to_EggGroup(void);

1331 22 upcast_to_EggTransform 0 12 1993 32 EggGroup::upcast_to_EggTransform 0 1 494 36
upcast from EggGroup to EggTransform
53
EggTransform *EggGroup::upcast_to_EggTransform(void);

1332 20 downcast_to_EggGroup 0 12 1989 34 EggTransform::downcast_to_EggGroup 0 1 495 38
downcast from EggTransform to EggGroup
51
EggGroup *EggTransform::downcast_to_EggGroup(void);

1333 8 EggGroup 0 4 1993 18 EggGroup::EggGroup 0 2 352 353 447
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggGroup::Copy Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
86
EggGroup::EggGroup(string const &name = "");
EggGroup::EggGroup(EggGroup const &copy);

1334 10 operator = 0 4 1993 20 EggGroup::operator = 0 1 354 233
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::Copy assignment operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
53
EggGroup &EggGroup::operator =(EggGroup const &copy);

1335 9 ~EggGroup 0 6 1993 19 EggGroup::~EggGroup 0 0 219
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::Destructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
34
virtual EggGroup::~EggGroup(void);

1336 5 write 0 6 1993 15 EggGroup::write 0 1 355 327
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::write
//       Access: Published, Virtual
//  Description: Writes the group and all of its children to the
//               indicated output stream in Egg format.
////////////////////////////////////////////////////////////////////
67
virtual void EggGroup::write(ostream &out, int indent_level) const;

1337 21 write_billboard_flags 0 4 1993 31 EggGroup::write_billboard_flags 0 1 356 326
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::write_billboard_flags
//       Access: Published
//  Description: Writes just the <Billboard> entry and related fields to
//               the indicated ostream.
////////////////////////////////////////////////////////////////////
75
void EggGroup::write_billboard_flags(ostream &out, int indent_level) const;

1338 19 write_collide_flags 0 4 1993 29 EggGroup::write_collide_flags 0 1 357 322
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::write_collide_flags
//       Access: Published
//  Description: Writes just the <Collide> entry and related fields to
//               the indicated ostream.
////////////////////////////////////////////////////////////////////
73
void EggGroup::write_collide_flags(ostream &out, int indent_level) const;

1339 17 write_model_flags 0 4 1993 27 EggGroup::write_model_flags 0 1 358 311
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::write_model_flags
//       Access: Published
//  Description: Writes the <Model> flag and related flags to the
//               indicated ostream.
////////////////////////////////////////////////////////////////////
71
void EggGroup::write_model_flags(ostream &out, int indent_level) const;

1340 18 write_switch_flags 0 4 1993 28 EggGroup::write_switch_flags 0 1 359 313
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::write_switch_flags
//       Access: Published
//  Description: Writes the <Switch> flag and related flags to the
//               indicated ostream.
////////////////////////////////////////////////////////////////////
72
void EggGroup::write_switch_flags(ostream &out, int indent_level) const;

1341 18 write_object_types 0 4 1993 28 EggGroup::write_object_types 0 1 360 317
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::write_object_types
//       Access: Published
//  Description: Writes just the <ObjectTypes> entries, if any, to the
//               indicated ostream.
////////////////////////////////////////////////////////////////////
72
void EggGroup::write_object_types(ostream &out, int indent_level) const;

1342 17 write_decal_flags 0 4 1993 27 EggGroup::write_decal_flags 0 1 361 272
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::write_decal_flags
//       Access: Published
//  Description: Writes the flags related to decaling, if any.
////////////////////////////////////////////////////////////////////
71
void EggGroup::write_decal_flags(ostream &out, int indent_level) const;

1343 10 write_tags 0 4 1993 20 EggGroup::write_tags 0 1 362 301
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::write_tags
//       Access: Published
//  Description: Writes just the <Tag> entries, if any, to the
//               indicated ostream.
////////////////////////////////////////////////////////////////////
64
void EggGroup::write_tags(ostream &out, int indent_level) const;

1344 17 write_render_mode 0 4 1993 27 EggGroup::write_render_mode 0 1 363 344
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::write_render_mode
//       Access: Published
//  Description: Writes the flags inherited from EggRenderMode and
//               similar flags that control obscure render effects.
////////////////////////////////////////////////////////////////////
71
void EggGroup::write_render_mode(ostream &out, int indent_level) const;

1345 8 is_joint 0 6 1993 18 EggGroup::is_joint 0 1 364 508
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::is_joint
//       Access: Published, Virtual
//  Description: Returns true if this particular node represents a
//               <Joint> entry or not.  This is a handy thing to know
//               since Joints are sorted to the end of their sibling
//               list when writing an egg file.  See
//               EggGroupNode::write().
////////////////////////////////////////////////////////////////////
44
virtual bool EggGroup::is_joint(void) const;

1346 20 determine_alpha_mode 0 6 1993 30 EggGroup::determine_alpha_mode 0 1 365 554
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::determine_alpha_mode
//       Access: Published, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               or EggPrimitive or some such object at this level or
//               above this group that has an alpha_mode other than
//               AM_unspecified.  Returns a valid EggRenderMode pointer
//               if one is found, or NULL otherwise.
////////////////////////////////////////////////////////////////////
60
virtual EggRenderMode *EggGroup::determine_alpha_mode(void);

1347 26 determine_depth_write_mode 0 6 1993 36 EggGroup::determine_depth_write_mode 0 1 366 566
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::determine_depth_write_mode
//       Access: Published, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               or EggPrimitive or some such object at this level or
//               above this group that has a depth_write_mode other
//               than DWM_unspecified.  Returns a valid EggRenderMode
//               pointer if one is found, or NULL otherwise.
////////////////////////////////////////////////////////////////////
66
virtual EggRenderMode *EggGroup::determine_depth_write_mode(void);

1348 25 determine_depth_test_mode 0 6 1993 35 EggGroup::determine_depth_test_mode 0 1 367 564
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::determine_depth_test_mode
//       Access: Published, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               or EggPrimitive or some such object at this level or
//               above this group that has a depth_test_mode other
//               than DTM_unspecified.  Returns a valid EggRenderMode
//               pointer if one is found, or NULL otherwise.
////////////////////////////////////////////////////////////////////
65
virtual EggRenderMode *EggGroup::determine_depth_test_mode(void);

1349 25 determine_visibility_mode 0 6 1993 35 EggGroup::determine_visibility_mode 0 1 368 563
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::determine_visibility_mode
//       Access: Published, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               or EggPrimitive or some such object at this level or
//               above this group that has a visibility_mode other
//               than VM_unspecified.  Returns a valid EggRenderMode
//               pointer if one is found, or NULL otherwise.
////////////////////////////////////////////////////////////////////
65
virtual EggRenderMode *EggGroup::determine_visibility_mode(void);

1350 22 determine_depth_offset 0 6 1993 32 EggGroup::determine_depth_offset 0 1 369 540
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::determine_depth_offset
//       Access: Published, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               or EggPrimitive or some such object at this level or
//               above this group that has a depth_offset specified.
//               Returns a valid EggRenderMode pointer if one is found,
//               or NULL otherwise.
////////////////////////////////////////////////////////////////////
62
virtual EggRenderMode *EggGroup::determine_depth_offset(void);

1351 20 determine_draw_order 0 6 1993 30 EggGroup::determine_draw_order 0 1 370 536
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::determine_draw_order
//       Access: Published, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               or EggPrimitive or some such object at this level or
//               above this group that has a draw_order specified.
//               Returns a valid EggRenderMode pointer if one is found,
//               or NULL otherwise.
////////////////////////////////////////////////////////////////////
60
virtual EggRenderMode *EggGroup::determine_draw_order(void);

1352 13 determine_bin 0 6 1993 23 EggGroup::determine_bin 0 1 371 523
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::determine_bin
//       Access: Published, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               or EggPrimitive or some such object at this level or
//               above this group that has a bin specified.  Returns a
//               valid EggRenderMode pointer if one is found, or NULL
//               otherwise.
////////////////////////////////////////////////////////////////////
53
virtual EggRenderMode *EggGroup::determine_bin(void);

1353 17 determine_indexed 0 6 1993 27 EggGroup::determine_indexed 0 1 372 619
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::determine_indexed
//       Access: Published, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               at this level or above that has the "indexed" scalar
//               set.  Returns the value of the indexed scalar if it
//               is found, or false if it is not.
//
//               In other words, returns true if the "indexed" flag is
//               in effect for the indicated node, false otherwise.
////////////////////////////////////////////////////////////////////
47
virtual bool EggGroup::determine_indexed(void);

1354 15 determine_decal 0 6 1993 25 EggGroup::determine_decal 0 1 373 607
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::determine_decal
//       Access: Published, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               at this level or above that has the "decal" flag
//               set.  Returns the value of the decal flag if it
//               is found, or false if it is not.
//
//               In other words, returns true if the "decal" flag is
//               in effect for the indicated node, false otherwise.
////////////////////////////////////////////////////////////////////
45
virtual bool EggGroup::determine_decal(void);

1355 14 set_group_type 0 4 1993 24 EggGroup::set_group_type 0 1 374 223
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_group_type
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
56
void EggGroup::set_group_type(EggGroup::GroupType type);

1356 14 get_group_type 0 4 1993 24 EggGroup::get_group_type 0 1 375 223
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_group_type
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
64
inline EggGroup::GroupType EggGroup::get_group_type(void) const;

1357 16 is_instance_type 0 4 1993 26 EggGroup::is_instance_type 0 1 376 668
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::is_instance_type
//       Access: Published
//  Description: Returns true if this group is an instance type node;
//               i.e. it begins the root of a local coordinate space.
//               This is not related to instancing (multiple copies of
//               a node in a scene graph).
//
//               This also includes the case of the node including a
//               billboard flag without an explicit center, which
//               implicitly makes the node behave like an instance.
////////////////////////////////////////////////////////////////////
51
inline bool EggGroup::is_instance_type(void) const;

1358 18 set_billboard_type 0 4 1993 28 EggGroup::set_billboard_type 0 1 377 227
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_billboard_type
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
71
inline void EggGroup::set_billboard_type(EggGroup::BillboardType type);

1359 18 get_billboard_type 0 4 1993 28 EggGroup::get_billboard_type 0 1 378 227
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_billboard_type
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
72
inline EggGroup::BillboardType EggGroup::get_billboard_type(void) const;

1360 20 set_billboard_center 0 4 1993 30 EggGroup::set_billboard_center 0 1 379 1120
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_billboard_center
//       Access: Published
//  Description: Sets the point around which the billboard will
//               rotate, if this node contains a billboard
//               specification.
//
//               If a billboard type is given but no billboard_center
//               is specified, then the group node is treated as an
//               <Instance>, and the billboard rotates around the
//               origin.  If, however, a billboard_center is
//               specified, then the group node is *not* treated as an
//               <Instance>, and the billboard rotates around the
//               specified point.
//
//               The point is in the same coordinate system as the
//               vertices of this node: usually global, but possibly
//               local if there is an <Instance> somewhere above.
//               Specifically, this is the coordinate system defined
//               by get_vertex_frame().
////////////////////////////////////////////////////////////////////
77
inline void EggGroup::set_billboard_center(LPoint3d const &billboard_center);

1361 22 clear_billboard_center 0 4 1993 32 EggGroup::clear_billboard_center 0 1 380 231
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::clear_billboard_center
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
51
inline void EggGroup::clear_billboard_center(void);

1362 20 has_billboard_center 0 4 1993 30 EggGroup::has_billboard_center 0 1 381 229
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::has_billboard_center
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
55
inline bool EggGroup::has_billboard_center(void) const;

1363 20 get_billboard_center 0 4 1993 30 EggGroup::get_billboard_center 0 1 382 229
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_billboard_center
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
66
inline LPoint3d const &EggGroup::get_billboard_center(void) const;

1364 11 set_cs_type 0 4 1993 21 EggGroup::set_cs_type 0 1 383 220
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_cs_type
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
69
inline void EggGroup::set_cs_type(EggGroup::CollisionSolidType type);

1365 11 get_cs_type 0 4 1993 21 EggGroup::get_cs_type 0 1 384 220
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_cs_type
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
70
inline EggGroup::CollisionSolidType EggGroup::get_cs_type(void) const;

1366 17 set_collide_flags 0 4 1993 27 EggGroup::set_collide_flags 0 1 385 226
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_collide_flags
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
51
inline void EggGroup::set_collide_flags(int flags);

1367 17 get_collide_flags 0 4 1993 27 EggGroup::get_collide_flags 0 1 386 226
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_collide_flags
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
70
inline EggGroup::CollideFlags EggGroup::get_collide_flags(void) const;

1368 18 set_collision_name 0 4 1993 28 EggGroup::set_collision_name 0 1 387 227
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_collision_name
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
71
inline void EggGroup::set_collision_name(string const &collision_name);

1369 20 clear_collision_name 0 4 1993 30 EggGroup::clear_collision_name 0 1 388 229
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::clear_collision_name
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
49
inline void EggGroup::clear_collision_name(void);

1370 18 has_collision_name 0 4 1993 28 EggGroup::has_collision_name 0 1 389 227
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::has_collision_name
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
53
inline bool EggGroup::has_collision_name(void) const;

1371 18 get_collision_name 0 4 1993 28 EggGroup::get_collision_name 0 1 390 227
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_collision_name
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
62
inline string const &EggGroup::get_collision_name(void) const;

1372 12 set_dcs_type 0 4 1993 22 EggGroup::set_dcs_type 0 1 391 221
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_dcs_type
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
59
inline void EggGroup::set_dcs_type(EggGroup::DCSType type);

1373 12 get_dcs_type 0 4 1993 22 EggGroup::get_dcs_type 0 1 392 221
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_dcs_type
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
60
inline EggGroup::DCSType EggGroup::get_dcs_type(void) const;

1374 12 has_dcs_type 0 4 1993 22 EggGroup::has_dcs_type 0 1 393 316
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::has_dcs_type
//       Access: Published
//  Description: Returns true if the specified DCS type is not
//               DC_none and not DC_unspecified.
////////////////////////////////////////////////////////////////////
47
inline bool EggGroup::has_dcs_type(void) const;

1375 13 set_dart_type 0 4 1993 23 EggGroup::set_dart_type 0 1 394 222
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_dart_type
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
61
inline void EggGroup::set_dart_type(EggGroup::DartType type);

1376 13 get_dart_type 0 4 1993 23 EggGroup::get_dart_type 0 1 395 222
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_dart_type
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
62
inline EggGroup::DartType EggGroup::get_dart_type(void) const;

1377 15 set_switch_flag 0 4 1993 25 EggGroup::set_switch_flag 0 1 396 224
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_switch_flag
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
49
inline void EggGroup::set_switch_flag(bool flag);

1378 15 get_switch_flag 0 4 1993 25 EggGroup::get_switch_flag 0 1 397 224
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_switch_flag
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
50
inline bool EggGroup::get_switch_flag(void) const;

1379 14 set_switch_fps 0 4 1993 24 EggGroup::set_switch_fps 0 1 398 223
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_switch_fps
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
49
inline void EggGroup::set_switch_fps(double fps);

1380 14 get_switch_fps 0 4 1993 24 EggGroup::get_switch_fps 0 1 399 223
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_switch_fps
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
51
inline double EggGroup::get_switch_fps(void) const;

1381 15 add_object_type 0 4 1993 25 EggGroup::add_object_type 0 1 400 224
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::add_object_type
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
65
inline void EggGroup::add_object_type(string const &object_type);

1382 18 clear_object_types 0 4 1993 28 EggGroup::clear_object_types 0 1 401 227
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::clear_object_types
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
47
inline void EggGroup::clear_object_types(void);

1383 20 get_num_object_types 0 4 1993 30 EggGroup::get_num_object_types 0 1 402 229
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_num_object_types
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
54
inline int EggGroup::get_num_object_types(void) const;

1384 15 get_object_type 0 4 1993 25 EggGroup::get_object_type 0 1 403 224
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_object_type
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
57
inline string EggGroup::get_object_type(int index) const;

1385 15 has_object_type 0 4 1993 25 EggGroup::has_object_type 0 1 404 332
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::has_object_type
//       Access: Published
//  Description: Returns true if the indicated object type has been
//               added to the group, or false otherwise.
////////////////////////////////////////////////////////////////////
64
bool EggGroup::has_object_type(string const &object_type) const;

1386 18 remove_object_type 0 4 1993 28 EggGroup::remove_object_type 0 1 405 440
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::remove_object_type
//       Access: Published
//  Description: Removes the first instance of the indicated object
//               type from the group if it is present.  Returns true
//               if the object type was found and removed, false
//               otherwise.
////////////////////////////////////////////////////////////////////
61
bool EggGroup::remove_object_type(string const &object_type);

1387 14 set_model_flag 0 4 1993 24 EggGroup::set_model_flag 0 1 406 223
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_model_flag
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
48
inline void EggGroup::set_model_flag(bool flag);

1388 14 get_model_flag 0 4 1993 24 EggGroup::get_model_flag 0 1 407 223
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_model_flag
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
49
inline bool EggGroup::get_model_flag(void) const;

1389 16 set_texlist_flag 0 4 1993 26 EggGroup::set_texlist_flag 0 1 408 225
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_texlist_flag
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
50
inline void EggGroup::set_texlist_flag(bool flag);

1390 16 get_texlist_flag 0 4 1993 26 EggGroup::get_texlist_flag 0 1 409 225
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_texlist_flag
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
51
inline bool EggGroup::get_texlist_flag(void) const;

1391 14 set_nofog_flag 0 4 1993 24 EggGroup::set_nofog_flag 0 1 410 223
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_nofog_flag
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
48
inline void EggGroup::set_nofog_flag(bool flag);

1392 14 get_nofog_flag 0 4 1993 24 EggGroup::get_nofog_flag 0 1 411 223
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_nofog_flag
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
49
inline bool EggGroup::get_nofog_flag(void) const;

1393 14 set_decal_flag 0 4 1993 24 EggGroup::set_decal_flag 0 1 412 223
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_decal_flag
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
48
inline void EggGroup::set_decal_flag(bool flag);

1394 14 get_decal_flag 0 4 1993 24 EggGroup::get_decal_flag 0 1 413 223
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_decal_flag
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
49
inline bool EggGroup::get_decal_flag(void) const;

1395 15 set_direct_flag 0 4 1993 25 EggGroup::set_direct_flag 0 1 414 224
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_direct_flag
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
49
inline void EggGroup::set_direct_flag(bool flag);

1396 15 get_direct_flag 0 4 1993 25 EggGroup::get_direct_flag 0 1 415 224
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_direct_flag
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
50
inline bool EggGroup::get_direct_flag(void) const;

1397 15 set_portal_flag 0 4 1993 25 EggGroup::set_portal_flag 0 1 416 224
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_portal_flag
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
49
inline void EggGroup::set_portal_flag(bool flag);

1398 15 get_portal_flag 0 4 1993 25 EggGroup::get_portal_flag 0 1 417 224
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_portal_flag
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
50
inline bool EggGroup::get_portal_flag(void) const;

1399 17 set_occluder_flag 0 4 1993 27 EggGroup::set_occluder_flag 0 1 418 226
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_occluder_flag
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
51
inline void EggGroup::set_occluder_flag(bool flag);

1400 17 get_occluder_flag 0 4 1993 27 EggGroup::get_occluder_flag 0 1 419 226
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_occluder_flag
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
52
inline bool EggGroup::get_occluder_flag(void) const;

1401 18 set_polylight_flag 0 4 1993 28 EggGroup::set_polylight_flag 0 1 420 227
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_polylight_flag
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
52
inline void EggGroup::set_polylight_flag(bool flag);

1402 18 get_polylight_flag 0 4 1993 28 EggGroup::get_polylight_flag 0 1 421 227
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_polylight_flag
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
53
inline bool EggGroup::get_polylight_flag(void) const;

1403 16 set_indexed_flag 0 4 1993 26 EggGroup::set_indexed_flag 0 1 422 335
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_indexed_flag
//       Access: Published
//  Description: If this flag is true, geometry at this node and below
//               will be generated as indexed geometry.
////////////////////////////////////////////////////////////////////
50
inline void EggGroup::set_indexed_flag(bool flag);

1404 18 clear_indexed_flag 0 4 1993 28 EggGroup::clear_indexed_flag 0 1 423 227
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::clear_indexed_flag
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
47
inline void EggGroup::clear_indexed_flag(void);

1405 16 has_indexed_flag 0 4 1993 26 EggGroup::has_indexed_flag 0 1 424 225
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::has_indexed_flag
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
51
inline bool EggGroup::has_indexed_flag(void) const;

1406 16 get_indexed_flag 0 4 1993 26 EggGroup::get_indexed_flag 0 1 425 225
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_indexed_flag
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
51
inline bool EggGroup::get_indexed_flag(void) const;

1407 16 set_collide_mask 0 4 1993 26 EggGroup::set_collide_mask 0 1 426 225
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_collide_mask
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
57
inline void EggGroup::set_collide_mask(CollideMask mask);

1408 18 clear_collide_mask 0 4 1993 28 EggGroup::clear_collide_mask 0 1 427 227
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::clear_collide_mask
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
47
inline void EggGroup::clear_collide_mask(void);

1409 16 has_collide_mask 0 4 1993 26 EggGroup::has_collide_mask 0 1 428 225
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::has_collide_mask
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
51
inline bool EggGroup::has_collide_mask(void) const;

1410 16 get_collide_mask 0 4 1993 26 EggGroup::get_collide_mask 0 1 429 225
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_collide_mask
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
58
inline CollideMask EggGroup::get_collide_mask(void) const;

1411 21 set_from_collide_mask 0 4 1993 31 EggGroup::set_from_collide_mask 0 1 430 230
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_from_collide_mask
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
62
inline void EggGroup::set_from_collide_mask(CollideMask mask);

1412 23 clear_from_collide_mask 0 4 1993 33 EggGroup::clear_from_collide_mask 0 1 431 232
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::clear_from_collide_mask
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
52
inline void EggGroup::clear_from_collide_mask(void);

1413 21 has_from_collide_mask 0 4 1993 31 EggGroup::has_from_collide_mask 0 1 432 230
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::has_from_collide_mask
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
56
inline bool EggGroup::has_from_collide_mask(void) const;

1414 21 get_from_collide_mask 0 4 1993 31 EggGroup::get_from_collide_mask 0 1 433 230
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_from_collide_mask
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
63
inline CollideMask EggGroup::get_from_collide_mask(void) const;

1415 21 set_into_collide_mask 0 4 1993 31 EggGroup::set_into_collide_mask 0 1 434 230
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_into_collide_mask
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
62
inline void EggGroup::set_into_collide_mask(CollideMask mask);

1416 23 clear_into_collide_mask 0 4 1993 33 EggGroup::clear_into_collide_mask 0 1 435 232
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::clear_into_collide_mask
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
52
inline void EggGroup::clear_into_collide_mask(void);

1417 21 has_into_collide_mask 0 4 1993 31 EggGroup::has_into_collide_mask 0 1 436 230
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::has_into_collide_mask
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
56
inline bool EggGroup::has_into_collide_mask(void) const;

1418 21 get_into_collide_mask 0 4 1993 31 EggGroup::get_into_collide_mask 0 1 437 230
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_into_collide_mask
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
63
inline CollideMask EggGroup::get_into_collide_mask(void) const;

1419 14 set_blend_mode 0 4 1993 24 EggGroup::set_blend_mode 0 1 438 223
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_blend_mode
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
69
inline void EggGroup::set_blend_mode(EggGroup::BlendMode blend_mode);

1420 14 get_blend_mode 0 4 1993 24 EggGroup::get_blend_mode 0 1 439 223
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_blend_mode
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
64
inline EggGroup::BlendMode EggGroup::get_blend_mode(void) const;

1421 19 set_blend_operand_a 0 4 1993 29 EggGroup::set_blend_operand_a 0 1 440 228
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_blend_operand_a
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
82
inline void EggGroup::set_blend_operand_a(EggGroup::BlendOperand blend_operand_a);

1422 19 get_blend_operand_a 0 4 1993 29 EggGroup::get_blend_operand_a 0 1 441 228
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_blend_operand_a
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
72
inline EggGroup::BlendOperand EggGroup::get_blend_operand_a(void) const;

1423 19 set_blend_operand_b 0 4 1993 29 EggGroup::set_blend_operand_b 0 1 442 228
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_blend_operand_b
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
82
inline void EggGroup::set_blend_operand_b(EggGroup::BlendOperand blend_operand_b);

1424 19 get_blend_operand_b 0 4 1993 29 EggGroup::get_blend_operand_b 0 1 443 228
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_blend_operand_b
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
72
inline EggGroup::BlendOperand EggGroup::get_blend_operand_b(void) const;

1425 15 set_blend_color 0 4 1993 25 EggGroup::set_blend_color 0 1 444 224
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_blend_color
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
65
inline void EggGroup::set_blend_color(LColor const &blend_color);

1426 17 clear_blend_color 0 4 1993 27 EggGroup::clear_blend_color 0 1 445 265
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::clear_blend_color
//       Access: Published
//  Description: Removes the blend color specification.
////////////////////////////////////////////////////////////////////
46
inline void EggGroup::clear_blend_color(void);

1427 15 has_blend_color 0 4 1993 25 EggGroup::has_blend_color 0 1 446 310
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::has_blend_color
//       Access: Published
//  Description: Returns true if the blend color has been specified,
//               false otherwise.
////////////////////////////////////////////////////////////////////
50
inline bool EggGroup::has_blend_color(void) const;

1428 15 get_blend_color 0 4 1993 25 EggGroup::get_blend_color 0 1 447 324
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_blend_color
//       Access: Published
//  Description: Returns the blend color if one has been specified, or
//               (0, 0, 0, 0) if one has not.
////////////////////////////////////////////////////////////////////
59
inline LColor const &EggGroup::get_blend_color(void) const;

1429 7 set_lod 0 4 1993 17 EggGroup::set_lod 0 1 448 216
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_lod
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
61
inline void EggGroup::set_lod(EggSwitchCondition const &lod);

1430 9 clear_lod 0 4 1993 19 EggGroup::clear_lod 0 1 449 218
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::clear_lod
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
38
inline void EggGroup::clear_lod(void);

1431 7 has_lod 0 4 1993 17 EggGroup::has_lod 0 1 450 216
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::has_lod
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
42
inline bool EggGroup::has_lod(void) const;

1432 7 get_lod 0 4 1993 17 EggGroup::get_lod 0 1 451 216
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_lod
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
63
inline EggSwitchCondition const &EggGroup::get_lod(void) const;

1433 7 set_tag 0 4 1993 17 EggGroup::set_tag 0 1 452 878
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_tag
//       Access: Published
//  Description: Associates a user-defined value with a user-defined
//               key which is stored on the node.  This value has no
//               meaning to Panda; but it is stored indefinitely on
//               the node until it is requested again.  This value
//               will be copied to the PandaNode that is created for
//               this particular EggGroup if the egg file is loaded as
//               a scene.
//
//               Each unique key stores a different string value.
//               There is no effective limit on the number of
//               different keys that may be stored or on the length of
//               any one key's value.
////////////////////////////////////////////////////////////////////
70
inline void EggGroup::set_tag(string const &key, string const &value);

1434 7 get_tag 0 4 1993 17 EggGroup::get_tag 0 1 453 433
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_tag
//       Access: Published
//  Description: Retrieves the user-defined value that was previously
//               set on this node for the particular key, if any.  If
//               no value has been previously set, returns the empty
//               string.
////////////////////////////////////////////////////////////////////
57
inline string EggGroup::get_tag(string const &key) const;

1435 7 has_tag 0 4 1993 17 EggGroup::has_tag 0 1 454 404
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::has_tag
//       Access: Published
//  Description: Returns true if a value has been defined on this node
//               for the particular key (even if that value is the
//               empty string), or false if no value has been set.
////////////////////////////////////////////////////////////////////
55
inline bool EggGroup::has_tag(string const &key) const;

1436 9 clear_tag 0 4 1993 19 EggGroup::clear_tag 0 1 455 397
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::clear_tag
//       Access: Published
//  Description: Removes the value defined for this key on this
//               particular node.  After a call to clear_tag(),
//               has_tag() will return false for the indicated key.
////////////////////////////////////////////////////////////////////
51
inline void EggGroup::clear_tag(string const &key);

1437 16 get_default_pose 0 4 1993 26 EggGroup::get_default_pose 0 1 456 603
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_default_pose
//       Access: Published
//  Description: Returns a read-only accessor to the initial pose
//               transform.  This is the <DefaultPose> entry for a
//               Joint, and defines only the initial transform pose
//               for the unanimated joint; it has nothing to do with
//               the group's <Transform> entry, which defines the
//               (eventual) space of the group's vertices.
////////////////////////////////////////////////////////////////////
66
inline EggTransform const &EggGroup::get_default_pose(void) const;

1438 19 modify_default_pose 0 4 1993 29 EggGroup::modify_default_pose 0 1 457 605
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::modify_default_pose
//       Access: Published
//  Description: Returns a writable accessor to the initial pose
//               transform.  This is the <DefaultPose> entry for a
//               Joint, and defines only the initial transform pose
//               for the unanimated joint; it has nothing to do with
//               the group's <Transform> entry, which defines the
//               (eventual) space of the group's vertices.
////////////////////////////////////////////////////////////////////
57
inline EggTransform &EggGroup::modify_default_pose(void);

1439 16 set_default_pose 0 4 1993 26 EggGroup::set_default_pose 0 1 458 580
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_default_pose
//       Access: Published
//  Description: Replaces the initial pose transform.  This is the
//               <DefaultPose> entry for a Joint, and defines only the
//               initial transform pose for the unanimated joint; it
//               has nothing to do with the group's <Transform> entry,
//               which defines the (eventual) space of the group's
//               vertices.
////////////////////////////////////////////////////////////////////
70
inline void EggGroup::set_default_pose(EggTransform const &transform);

1440 18 clear_default_pose 0 4 1993 28 EggGroup::clear_default_pose 0 1 459 305
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::clear_default_pose
//       Access: Published
//  Description: Removes the initial pose transform.  See
//               set_default_pose().
////////////////////////////////////////////////////////////////////
47
inline void EggGroup::clear_default_pose(void);

1441 12 set_scroll_u 0 4 1993 22 EggGroup::set_scroll_u 0 1 460 0
57
inline void EggGroup::set_scroll_u(double const u_speed);

1442 12 set_scroll_v 0 4 1993 22 EggGroup::set_scroll_v 0 1 461 0
57
inline void EggGroup::set_scroll_v(double const v_speed);

1443 12 set_scroll_w 0 4 1993 22 EggGroup::set_scroll_w 0 1 462 0
57
inline void EggGroup::set_scroll_w(double const w_speed);

1444 12 set_scroll_r 0 4 1993 22 EggGroup::set_scroll_r 0 1 463 0
57
inline void EggGroup::set_scroll_r(double const r_speed);

1445 12 get_scroll_u 0 4 1993 22 EggGroup::get_scroll_u 0 1 464 0
49
inline double EggGroup::get_scroll_u(void) const;

1446 12 get_scroll_v 0 4 1993 22 EggGroup::get_scroll_v 0 1 465 0
49
inline double EggGroup::get_scroll_v(void) const;

1447 12 get_scroll_w 0 4 1993 22 EggGroup::get_scroll_w 0 1 466 0
49
inline double EggGroup::get_scroll_w(void) const;

1448 12 get_scroll_r 0 4 1993 22 EggGroup::get_scroll_r 0 1 467 0
49
inline double EggGroup::get_scroll_r(void) const;

1449 17 has_scrolling_uvs 0 4 1993 27 EggGroup::has_scrolling_uvs 0 1 468 0
46
inline bool EggGroup::has_scrolling_uvs(void);

1450 10 ref_vertex 0 4 1993 20 EggGroup::ref_vertex 0 1 469 467
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::ref_vertex
//       Access: Published
//  Description: Adds the vertex to the set of those referenced by the
//               group, at the indicated membership level.  If the
//               vertex is already being referenced, increases the
//               membership amount by the indicated amount.
////////////////////////////////////////////////////////////////////
68
void EggGroup::ref_vertex(EggVertex *vert, double membership = 1.0);

1451 12 unref_vertex 0 4 1993 22 EggGroup::unref_vertex 0 1 470 372
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::unref_vertex
//       Access: Published
//  Description: Removes the vertex from the set of those referenced
//               by the group.  Does nothing if the vertex is not
//               already reffed.
////////////////////////////////////////////////////////////////////
45
void EggGroup::unref_vertex(EggVertex *vert);

1452 18 unref_all_vertices 0 4 1993 28 EggGroup::unref_all_vertices 0 1 471 273
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::unref_all_vertices
//       Access: Published
//  Description: Removes all vertices from the reference list.
////////////////////////////////////////////////////////////////////
40
void EggGroup::unref_all_vertices(void);

1453 21 get_vertex_membership 0 4 1993 31 EggGroup::get_vertex_membership 0 1 472 390
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_vertex_membership
//       Access: Published
//  Description: Returns the amount of membership of the indicated
//               vertex in this group.  If the vertex is not reffed by
//               the group, returns 0.
////////////////////////////////////////////////////////////////////
68
double EggGroup::get_vertex_membership(EggVertex const *vert) const;

1454 21 set_vertex_membership 0 4 1993 31 EggGroup::set_vertex_membership 0 1 473 340
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_vertex_membership
//       Access: Published
//  Description: Explicitly sets the net membership of the indicated
//               vertex in this group to the given value.
////////////////////////////////////////////////////////////////////
73
void EggGroup::set_vertex_membership(EggVertex *vert, double membership);

1455 11 steal_vrefs 0 4 1993 21 EggGroup::steal_vrefs 0 1 474 450
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::steal_vrefs
//       Access: Published
//  Description: Moves all of the vertex references from the indicated
//               other group into this one.  If a given vertex was
//               previously shared by both groups, the relative
//               memberships will be summed.
////////////////////////////////////////////////////////////////////
44
void EggGroup::steal_vrefs(EggGroup *other);

1456 19 test_vref_integrity 0 4 1993 29 EggGroup::test_vref_integrity 0 1 475 0
47
void EggGroup::test_vref_integrity(void) const;

1457 13 add_group_ref 0 4 1993 23 EggGroup::add_group_ref 0 1 476 464
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::add_group_ref
//       Access: Published
//  Description: Adds a new <Ref> entry to the group.  This declares
//               an internal reference to another node, and is used to
//               implement scene-graph instancing; it is only valid if
//               the group_type is GT_instance.
////////////////////////////////////////////////////////////////////
46
void EggGroup::add_group_ref(EggGroup *group);

1458 18 get_num_group_refs 0 4 1993 28 EggGroup::get_num_group_refs 0 1 477 321
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_num_group_refs
//       Access: Published
//  Description: Returns the number of <Ref> entries within this
//               group.  See add_group_ref().
////////////////////////////////////////////////////////////////////
45
int EggGroup::get_num_group_refs(void) const;

1459 13 get_group_ref 0 4 1993 23 EggGroup::get_group_ref 0 1 478 308
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_group_ref
//       Access: Published
//  Description: Returns the nth <Ref> entry within this group.  See
//               add_group_ref().
////////////////////////////////////////////////////////////////////
47
EggGroup *EggGroup::get_group_ref(int n) const;

1460 16 remove_group_ref 0 4 1993 26 EggGroup::remove_group_ref 0 1 479 311
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::remove_group_ref
//       Access: Published
//  Description: Removes the nth <Ref> entry within this group.  See
//               add_group_ref().
////////////////////////////////////////////////////////////////////
39
void EggGroup::remove_group_ref(int n);

1461 16 clear_group_refs 0 4 1993 26 EggGroup::clear_group_refs 0 1 480 315
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::clear_group_refs
//       Access: Published
//  Description: Removes all of the <Ref> entries within this group.
//               See add_group_ref().
////////////////////////////////////////////////////////////////////
38
void EggGroup::clear_group_refs(void);

1462 17 string_group_type 0 4 1993 27 EggGroup::string_group_type 0 1 481 415
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::string_group_type
//       Access: Published, Static
//  Description: Returns the GroupType value associated with the given
//               string representation, or GT_invalid if the string
//               does not match any known GroupType value.
////////////////////////////////////////////////////////////////////
77
static EggGroup::GroupType EggGroup::string_group_type(string const &strval);

1463 16 string_dart_type 0 4 1993 26 EggGroup::string_dart_type 0 1 482 409
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::string_dart_type
//       Access: Published, Static
//  Description: Returns the DartType value associated with the given
//               string representation, or DT_none if the string
//               does not match any known DartType value.
////////////////////////////////////////////////////////////////////
75
static EggGroup::DartType EggGroup::string_dart_type(string const &strval);

1464 15 string_dcs_type 0 4 1993 25 EggGroup::string_dcs_type 0 1 483 413
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::string_dcs_type
//       Access: Published, Static
//  Description: Returns the DCSType value associated with the given
//               string representation, or DC_unspecified if the
//               string does not match any known DCSType value.
////////////////////////////////////////////////////////////////////
73
static EggGroup::DCSType EggGroup::string_dcs_type(string const &strval);

1465 21 string_billboard_type 0 4 1993 31 EggGroup::string_billboard_type 0 1 484 424
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::string_billboard_type
//       Access: Published, Static
//  Description: Returns the BillboardType value associated with the
//               given string representation, or BT_none if the string
//               does not match any known BillboardType value.
////////////////////////////////////////////////////////////////////
85
static EggGroup::BillboardType EggGroup::string_billboard_type(string const &strval);

1466 14 string_cs_type 0 4 1993 24 EggGroup::string_cs_type 0 1 485 428
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::string_cs_type
//       Access: Published, Static
//  Description: Returns the CollisionSolidType value associated with the
//               given string representation, or CST_none if the string
//               does not match any known CollisionSolidType value.
////////////////////////////////////////////////////////////////////
83
static EggGroup::CollisionSolidType EggGroup::string_cs_type(string const &strval);

1467 20 string_collide_flags 0 4 1993 30 EggGroup::string_collide_flags 0 1 486 546
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::string_collide_flags
//       Access: Published, Static
//  Description: Returns the CollideFlags value associated with the
//               given string representation, or CF_none if the string
//               does not match any known CollideFlags value.  This
//               only recognizes a single keyword; it does not attempt
//               to parse a string of keywords.
////////////////////////////////////////////////////////////////////
83
static EggGroup::CollideFlags EggGroup::string_collide_flags(string const &strval);

1468 17 string_blend_mode 0 4 1993 27 EggGroup::string_blend_mode 0 1 487 406
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::string_blend_mode
//       Access: Published, Static
//  Description: Returns the BlendMode value associated with the
//               given string representation, or BM_none if the string
//               does not match any known BlendMode.
////////////////////////////////////////////////////////////////////
77
static EggGroup::BlendMode EggGroup::string_blend_mode(string const &strval);

1469 20 string_blend_operand 0 4 1993 30 EggGroup::string_blend_operand 0 1 488 415
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::string_blend_operand
//       Access: Published, Static
//  Description: Returns the BlendOperand value associated with the
//               given string representation, or BO_none if the string
//               does not match any known BlendOperand.
////////////////////////////////////////////////////////////////////
83
static EggGroup::BlendOperand EggGroup::string_blend_operand(string const &strval);

1470 14 get_class_type 0 4 1993 24 EggGroup::get_class_type 0 1 489 0
49
static TypeHandle EggGroup::get_class_type(void);

1471 6 EggBin 0 4 2006 14 EggBin::EggBin 0 3 496 497 498 668
////////////////////////////////////////////////////////////////////
//     Function: EggBin::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggBin::EggGroup copy constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggBin::Copy constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
114
EggBin::EggBin(string const &name = "");
EggBin::EggBin(EggGroup const &copy);
EggBin::EggBin(EggBin const &copy);

1472 14 set_bin_number 0 4 2006 22 EggBin::set_bin_number 0 1 499 218
////////////////////////////////////////////////////////////////////
//     Function: EggBin::set_bin_number
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
44
void EggBin::set_bin_number(int bin_number);

1473 14 get_bin_number 0 4 2006 22 EggBin::get_bin_number 0 1 500 218
////////////////////////////////////////////////////////////////////
//     Function: EggBin::get_bin_number
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
39
int EggBin::get_bin_number(void) const;

1474 14 get_class_type 0 4 2006 22 EggBin::get_class_type 0 1 501 0
47
static TypeHandle EggBin::get_class_type(void);

1475 7 ~EggBin 0 4 2006 15 EggBin::~EggBin 0 0 0
22
EggBin::~EggBin(void);

1476 9 make_bins 0 4 2007 22 EggBinMaker::make_bins 0 1 502 460
////////////////////////////////////////////////////////////////////
//     Function: EggBinMaker::make_bins
//       Access: Public
//  Description: The main entry point to EggBinMaker.  Walks the egg
//               scene graph beginning at the indicated root node, and
//               moves all binnable nodes into EggBin objects.
//               Returns the number of EggBins created.
////////////////////////////////////////////////////////////////////
53
int EggBinMaker::make_bins(EggGroupNode *root_group);

1477 12 prepare_node 0 6 2007 25 EggBinMaker::prepare_node 0 1 503 419
////////////////////////////////////////////////////////////////////
//     Function: EggBinMaker::prepare_node
//       Access: Public, Virtual
//  Description: May be overridden in derived classes to perform some
//               setup work as each node is encountered.  This will be
//               called once for each node in the egg hierarchy.
////////////////////////////////////////////////////////////////////
54
virtual void EggBinMaker::prepare_node(EggNode *node);

1478 14 get_bin_number 0 6 2007 27 EggBinMaker::get_bin_number 0 1 504 0
65
virtual int EggBinMaker::get_bin_number(EggNode const *node) = 0;

1479 10 sorts_less 0 6 2007 23 EggBinMaker::sorts_less 0 1 505 669
////////////////////////////////////////////////////////////////////
//     Function: EggBinMaker::sorts_less
//       Access: Public, Virtual
//  Description: May be overridden in derived classes to create
//               additional bins within a particular bin number, based
//               on some arbitrary property of nodes.  This function
//               establishes an arbitrary but fixed ordering between
//               nodes; if two nodes do not sort to the same position,
//               different bins are created for each one (with the
//               same bin number on each bin).
////////////////////////////////////////////////////////////////////
89
virtual bool EggBinMaker::sorts_less(int bin_number, EggNode const *a, EggNode const *b);

1480 14 collapse_group 0 6 2007 27 EggBinMaker::collapse_group 0 1 506 398
////////////////////////////////////////////////////////////////////
//     Function: EggBinMaker::collapse_group
//       Access: Public, Virtual
//  Description: May be overridden in derived classes to specify
//               whether a particular group node, apparently
//               redundant, may be safely collapsed out.
////////////////////////////////////////////////////////////////////
80
virtual bool EggBinMaker::collapse_group(EggGroup const *group, int bin_number);

1481 12 get_bin_name 0 6 2007 25 EggBinMaker::get_bin_name 0 1 507 381
////////////////////////////////////////////////////////////////////
//     Function: EggBinMaker::get_bin_name
//       Access: Public, Virtual
//  Description: May be overridden in derived classes to define a name
//               for each new bin, based on its bin number, and a
//               sample child.
////////////////////////////////////////////////////////////////////
79
virtual string EggBinMaker::get_bin_name(int bin_number, EggNode const *child);

1482 8 make_bin 0 6 2007 21 EggBinMaker::make_bin 0 1 508 655
////////////////////////////////////////////////////////////////////
//     Function: EggBinMaker::make_bin
//       Access: Public, Virtual
//  Description: May be overridden in derived classes to construct a
//               new EggBin object (or some derived class, if needed),
//               and preload some initial data into as required.
//
//               child is an arbitrary child of the bin, and
//               collapse_from is the group the bin is being collapsed
//               with, if any (implying collapse_group() returned
//               true), or NULL if not.
////////////////////////////////////////////////////////////////////
113
virtual PointerTo< EggBin > EggBinMaker::make_bin(int bin_number, EggNode const *child, EggGroup *collapse_from);

1483 14 get_class_type 0 4 2007 27 EggBinMaker::get_class_type 0 1 509 0
52
static TypeHandle EggBinMaker::get_class_type(void);

1484 10 EggComment 0 4 2008 22 EggComment::EggComment 0 2 510 511 445
////////////////////////////////////////////////////////////////////
//     Function: EggComment::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggComment::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
133
inline EggComment::EggComment(string const &node_name, string const &comment);
inline EggComment::EggComment(EggComment const &copy);

1485 10 operator = 0 4 2008 22 EggComment::operator = 0 2 512 513 461
////////////////////////////////////////////////////////////////////
//     Function: EggComment::Assignment operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggComment::Copy assignment operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
132
inline EggComment &EggComment::operator =(string const &comment);
inline EggComment &EggComment::operator =(EggComment const &copy);

1486 17 operator typecast 0 132 2008 29 EggComment::operator typecast 0 1 517 0
63
inline string const &EggComment::operator typecast(void) const;

1487 11 set_comment 0 4 2008 23 EggComment::set_comment 0 1 514 219
////////////////////////////////////////////////////////////////////
//     Function: EggComment::set_comment
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
59
inline void EggComment::set_comment(string const &comment);

1488 11 get_comment 0 4 2008 23 EggComment::get_comment 0 1 515 219
////////////////////////////////////////////////////////////////////
//     Function: EggComment::set_comment
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
50
inline string EggComment::get_comment(void) const;

1489 14 get_class_type 0 4 2008 26 EggComment::get_class_type 0 1 516 0
51
static TypeHandle EggComment::get_class_type(void);

1490 11 ~EggComment 0 4 2008 23 EggComment::~EggComment 0 0 0
30
EggComment::~EggComment(void);

1491 10 operator = 0 4 2009 27 EggFilenameNode::operator = 0 1 518 237
////////////////////////////////////////////////////////////////////
//     Function: EggFilenameNode::Copy assignment operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
81
inline EggFilenameNode &EggFilenameNode::operator =(EggFilenameNode const &copy);

1492 21 get_default_extension 0 6 2009 38 EggFilenameNode::get_default_extension 0 1 519 297
////////////////////////////////////////////////////////////////////
//     Function: EggFilenameNode::get_default_extension
//       Access: Public, Virtual
//  Description: Returns the default extension for this filename type.
////////////////////////////////////////////////////////////////////
66
virtual string EggFilenameNode::get_default_extension(void) const;

1493 12 get_filename 0 4 2009 29 EggFilenameNode::get_filename 0 1 520 276
////////////////////////////////////////////////////////////////////
//     Function: EggFilenameNode::get_filename
//       Access: Public
//  Description: Returns a nonmodifiable reference to the filename.
////////////////////////////////////////////////////////////////////
65
inline Filename const &EggFilenameNode::get_filename(void) const;

1494 12 set_filename 0 4 2009 29 EggFilenameNode::set_filename 0 1 521 225
////////////////////////////////////////////////////////////////////
//     Function: EggFilenameNode::set_filename
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
68
inline void EggFilenameNode::set_filename(Filename const &filename);

1495 12 get_fullpath 0 4 2009 29 EggFilenameNode::get_fullpath 0 1 522 822
////////////////////////////////////////////////////////////////////
//     Function: EggFilenameNode::get_fullpath
//       Access: Public
//  Description: Returns the full pathname to the file, if it is
//               known; otherwise, returns the same thing as
//               get_filename().
//
//               This function simply returns whatever was set by the
//               last call to set_fullpath().  This string is not
//               written to the egg file; its main purpose is to
//               record the full path to a filename (for instance, a
//               texture filename) if it is known, for egg structures
//               that are generated in-memory and then immediately
//               converted to a scene graph.
////////////////////////////////////////////////////////////////////
65
inline Filename const &EggFilenameNode::get_fullpath(void) const;

1496 12 set_fullpath 0 4 2009 29 EggFilenameNode::set_fullpath 0 1 523 316
////////////////////////////////////////////////////////////////////
//     Function: EggFilenameNode::set_fullpath
//       Access: Public
//  Description: Records the full pathname to the file, for the
//               benefit of get_fullpath().
////////////////////////////////////////////////////////////////////
68
inline void EggFilenameNode::set_fullpath(Filename const &fullpath);

1497 14 get_class_type 0 4 2009 31 EggFilenameNode::get_class_type 0 1 524 0
56
static TypeHandle EggFilenameNode::get_class_type(void);

1498 16 ~EggFilenameNode 0 4 2009 33 EggFilenameNode::~EggFilenameNode 0 0 0
40
EggFilenameNode::~EggFilenameNode(void);

1499 25 upcast_to_EggFilenameNode 0 12 2010 37 EggTexture::upcast_to_EggFilenameNode 0 1 645 41
upcast from EggTexture to EggFilenameNode
61
EggFilenameNode *EggTexture::upcast_to_EggFilenameNode(void);

1500 22 downcast_to_EggTexture 0 12 2009 39 EggFilenameNode::downcast_to_EggTexture 0 1 646 43
downcast from EggFilenameNode to EggTexture
58
EggTexture *EggFilenameNode::downcast_to_EggTexture(void);

1501 23 upcast_to_EggRenderMode 0 12 2010 35 EggTexture::upcast_to_EggRenderMode 0 1 647 39
upcast from EggTexture to EggRenderMode
57
EggRenderMode *EggTexture::upcast_to_EggRenderMode(void);

1502 22 downcast_to_EggTexture 0 12 1984 37 EggRenderMode::downcast_to_EggTexture 0 1 648 41
downcast from EggRenderMode to EggTexture
56
EggTexture *EggRenderMode::downcast_to_EggTexture(void);

1503 22 upcast_to_EggTransform 0 12 2010 34 EggTexture::upcast_to_EggTransform 0 1 649 38
upcast from EggTexture to EggTransform
55
EggTransform *EggTexture::upcast_to_EggTransform(void);

1504 22 downcast_to_EggTexture 0 12 1989 36 EggTransform::downcast_to_EggTexture 0 1 650 40
downcast from EggTransform to EggTexture
55
EggTexture *EggTransform::downcast_to_EggTexture(void);

1505 10 EggTexture 0 4 2010 22 EggTexture::EggTexture 0 2 525 526 451
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggTexture::Copy constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
122
EggTexture::EggTexture(string const &tref_name, Filename const &filename);
EggTexture::EggTexture(EggTexture const &copy);

1506 10 operator = 0 4 2010 22 EggTexture::operator = 0 1 527 235
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::Copy assignment operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
59
EggTexture &EggTexture::operator =(EggTexture const &copy);

1507 11 ~EggTexture 0 6 2010 23 EggTexture::~EggTexture 0 0 230
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::Destructor
//       Access: Published, Virtual
//  Description:
////////////////////////////////////////////////////////////////////
38
virtual EggTexture::~EggTexture(void);

1508 5 write 0 6 2010 17 EggTexture::write 0 1 528 315
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::write
//       Access: Public, Virtual
//  Description: Writes the texture definition to the indicated output
//               stream in Egg format.
////////////////////////////////////////////////////////////////////
69
virtual void EggTexture::write(ostream &out, int indent_level) const;

1509 16 is_equivalent_to 0 4 2010 28 EggTexture::is_equivalent_to 0 1 529 1471
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::is_equivalent_to
//       Access: Published
//  Description: Returns true if the two textures are equivalent in
//               all relevant properties (according to eq), false
//               otherwise.
//
//               The Equivalence parameter, eq, should be set to the
//               bitwise OR of the following properties, according to
//               what you consider relevant:
//
//               EggTexture::E_basename:
//                 The basename part of the texture filename, without
//                 the directory prefix *or* the filename extension.
//
//               EggTexture::E_extension:
//                 The extension part of the texture filename.
//
//               EggTexture::E_dirname:
//                 The directory prefix of the texture filename.
//
//               EggTexture::E_complete_filename:
//                 The union of the above three; that is, the complete
//                 filename, with directory, basename, and extension.
//
//               EggTexture::E_transform:
//                 The texture matrix.
//
//               EggTexture::E_attributes:
//                 All remaining texture attributes (mode, mipmap,
//                 etc.) except TRef name.
//
//               EggTexture::E_tref_name:
//                 The TRef name.
////////////////////////////////////////////////////////////////////
73
bool EggTexture::is_equivalent_to(EggTexture const &other, int eq) const;

1510 15 sorts_less_than 0 4 2010 27 EggTexture::sorts_less_than 0 1 530 502
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::sorts_less_than
//       Access: Published
//  Description: An ordering operator to compare two textures for
//               sorting order.  This imposes an arbitrary ordering
//               useful to identify unique textures, according to the
//               indicated Equivalence factor.  See
//               is_equivalent_to().
////////////////////////////////////////////////////////////////////
72
bool EggTexture::sorts_less_than(EggTexture const &other, int eq) const;

1511 17 has_alpha_channel 0 4 2010 29 EggTexture::has_alpha_channel 0 1 531 537
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::has_alpha_channel
//       Access: Published
//  Description: Given the number of color components (channels) in
//               the image file as actually read from the disk, return
//               true if this texture seems to have an alpha channel
//               or not.  This depends on the EggTexture's format as
//               well as the number of channels.
////////////////////////////////////////////////////////////////////
61
bool EggTexture::has_alpha_channel(int num_components) const;

1512 16 set_texture_type 0 4 2010 28 EggTexture::set_texture_type 0 1 532 227
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_texture_type
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
79
inline void EggTexture::set_texture_type(EggTexture::TextureType texture_type);

1513 16 get_texture_type 0 4 2010 28 EggTexture::get_texture_type 0 1 533 227
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_texture_type
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
72
inline EggTexture::TextureType EggTexture::get_texture_type(void) const;

1514 10 set_format 0 4 2010 22 EggTexture::set_format 0 1 534 221
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_format
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
62
inline void EggTexture::set_format(EggTexture::Format format);

1515 10 get_format 0 4 2010 22 EggTexture::get_format 0 1 535 221
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_format
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
61
inline EggTexture::Format EggTexture::get_format(void) const;

1516 20 set_compression_mode 0 4 2010 32 EggTexture::set_compression_mode 0 1 536 231
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_compression_mode
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
79
inline void EggTexture::set_compression_mode(EggTexture::CompressionMode mode);

1517 20 get_compression_mode 0 4 2010 32 EggTexture::get_compression_mode 0 1 537 231
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_compression_mode
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
80
inline EggTexture::CompressionMode EggTexture::get_compression_mode(void) const;

1518 13 set_wrap_mode 0 4 2010 25 EggTexture::set_wrap_mode 0 1 538 224
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_wrap_mode
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
65
inline void EggTexture::set_wrap_mode(EggTexture::WrapMode mode);

1519 13 get_wrap_mode 0 4 2010 25 EggTexture::get_wrap_mode 0 1 539 224
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_wrap_mode
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
66
inline EggTexture::WrapMode EggTexture::get_wrap_mode(void) const;

1520 10 set_wrap_u 0 4 2010 22 EggTexture::set_wrap_u 0 1 540 221
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_wrap_u
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
62
inline void EggTexture::set_wrap_u(EggTexture::WrapMode mode);

1521 10 get_wrap_u 0 4 2010 22 EggTexture::get_wrap_u 0 1 541 345
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_wrap_u
//       Access: Published
//  Description: Returns the amount specified for U wrap.  This may be
//               unspecified, even if there is an overall wrap value.
////////////////////////////////////////////////////////////////////
63
inline EggTexture::WrapMode EggTexture::get_wrap_u(void) const;

1522 16 determine_wrap_u 0 4 2010 28 EggTexture::determine_wrap_u 0 1 542 439
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::determine_wrap_u
//       Access: Published
//  Description: Determines the appropriate wrap in the U direction.
//               This is different from get_wrap_u() in that if the U
//               wrap is unspecified, it returns the overall wrap
//               value.
////////////////////////////////////////////////////////////////////
69
inline EggTexture::WrapMode EggTexture::determine_wrap_u(void) const;

1523 10 set_wrap_v 0 4 2010 22 EggTexture::set_wrap_v 0 1 543 221
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_wrap_v
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
62
inline void EggTexture::set_wrap_v(EggTexture::WrapMode mode);

1524 10 get_wrap_v 0 4 2010 22 EggTexture::get_wrap_v 0 1 544 345
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_wrap_v
//       Access: Published
//  Description: Returns the amount specified for V wrap.  This may be
//               unspecified, even if there is an overall wrap value.
////////////////////////////////////////////////////////////////////
63
inline EggTexture::WrapMode EggTexture::get_wrap_v(void) const;

1525 16 determine_wrap_v 0 4 2010 28 EggTexture::determine_wrap_v 0 1 545 439
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::determine_wrap_v
//       Access: Published
//  Description: Determines the appropriate wrap in the V direction.
//               This is different from get_wrap_v() in that if the V
//               wrap is unspecified, it returns the overall wrap
//               value.
////////////////////////////////////////////////////////////////////
69
inline EggTexture::WrapMode EggTexture::determine_wrap_v(void) const;

1526 10 set_wrap_w 0 4 2010 22 EggTexture::set_wrap_w 0 1 546 221
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_wrap_w
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
62
inline void EggTexture::set_wrap_w(EggTexture::WrapMode mode);

1527 10 get_wrap_w 0 4 2010 22 EggTexture::get_wrap_w 0 1 547 345
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_wrap_w
//       Access: Published
//  Description: Returns the amount specified for W wrap.  This may be
//               unspecified, even if there is an overall wrap value.
////////////////////////////////////////////////////////////////////
63
inline EggTexture::WrapMode EggTexture::get_wrap_w(void) const;

1528 16 determine_wrap_w 0 4 2010 28 EggTexture::determine_wrap_w 0 1 548 439
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::determine_wrap_w
//       Access: Published
//  Description: Determines the appropriate wrap in the W direction.
//               This is different from get_wrap_w() in that if the W
//               wrap is unspecified, it returns the overall wrap
//               value.
////////////////////////////////////////////////////////////////////
69
inline EggTexture::WrapMode EggTexture::determine_wrap_w(void) const;

1529 13 set_minfilter 0 4 2010 25 EggTexture::set_minfilter 0 1 549 224
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_minfilter
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
67
inline void EggTexture::set_minfilter(EggTexture::FilterType type);

1530 13 get_minfilter 0 4 2010 25 EggTexture::get_minfilter 0 1 550 224
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_minfilter
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
68
inline EggTexture::FilterType EggTexture::get_minfilter(void) const;

1531 13 set_magfilter 0 4 2010 25 EggTexture::set_magfilter 0 1 551 224
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_magfilter
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
67
inline void EggTexture::set_magfilter(EggTexture::FilterType type);

1532 13 get_magfilter 0 4 2010 25 EggTexture::get_magfilter 0 1 552 224
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_magfilter
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
68
inline EggTexture::FilterType EggTexture::get_magfilter(void) const;

1533 22 set_anisotropic_degree 0 4 2010 34 EggTexture::set_anisotropic_degree 0 1 553 381
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_anisotropic_degree
//       Access: Published
//  Description: Sets the degree of anisotropic filtering for this
//               texture.  1 is off; higher levels indicate filtering
//               in effect.
////////////////////////////////////////////////////////////////////
71
inline void EggTexture::set_anisotropic_degree(int anisotropic_degree);

1534 24 clear_anisotropic_degree 0 4 2010 36 EggTexture::clear_anisotropic_degree 0 1 554 321
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::clear_anisotropic_degree
//       Access: Published
//  Description: Removes the specification of anisotropic filtering
//               from the texture.
////////////////////////////////////////////////////////////////////
55
inline void EggTexture::clear_anisotropic_degree(void);

1535 22 has_anisotropic_degree 0 4 2010 34 EggTexture::has_anisotropic_degree 0 1 555 382
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::has_anisotropic_degree
//       Access: Published
//  Description: Returns true if a value for the anisotropic filtering
//               degree has been specified for this texture, false
//               otherwise.
////////////////////////////////////////////////////////////////////
59
inline bool EggTexture::has_anisotropic_degree(void) const;

1536 22 get_anisotropic_degree 0 4 2010 34 EggTexture::get_anisotropic_degree 0 1 556 386
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_anisotropic_degree
//       Access: Published
//  Description: Returns the anisotropic filtering degree that has
//               been specified for this texture, or 0 if nothing has
//               been specified.
////////////////////////////////////////////////////////////////////
58
inline int EggTexture::get_anisotropic_degree(void) const;

1537 12 set_env_type 0 4 2010 24 EggTexture::set_env_type 0 1 557 223
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_env_type
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
63
inline void EggTexture::set_env_type(EggTexture::EnvType type);

1538 12 get_env_type 0 4 2010 24 EggTexture::get_env_type 0 1 558 223
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_env_type
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
64
inline EggTexture::EnvType EggTexture::get_env_type(void) const;

1539 21 affects_polygon_alpha 0 4 2010 33 EggTexture::affects_polygon_alpha 0 1 559 415
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::affects_polygon_alpha
//       Access: Published
//  Description: Returns true if this texture's environment type or
//               combine mode allows the texture to have an effect on
//               the polygon's alpha values, false otherwise.
////////////////////////////////////////////////////////////////////
51
bool EggTexture::affects_polygon_alpha(void) const;

1540 16 set_combine_mode 0 4 2010 28 EggTexture::set_combine_mode 0 1 560 227
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_combine_mode
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
105
inline void EggTexture::set_combine_mode(EggTexture::CombineChannel channel, EggTexture::CombineMode cm);

1541 16 get_combine_mode 0 4 2010 28 EggTexture::get_combine_mode 0 1 561 227
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_combine_mode
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
102
inline EggTexture::CombineMode EggTexture::get_combine_mode(EggTexture::CombineChannel channel) const;

1542 18 set_combine_source 0 4 2010 30 EggTexture::set_combine_source 0 1 562 229
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_combine_source
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
116
inline void EggTexture::set_combine_source(EggTexture::CombineChannel channel, int n, EggTexture::CombineSource cs);

1543 18 get_combine_source 0 4 2010 30 EggTexture::get_combine_source 0 1 563 229
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_combine_source
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
113
inline EggTexture::CombineSource EggTexture::get_combine_source(EggTexture::CombineChannel channel, int n) const;

1544 19 set_combine_operand 0 4 2010 31 EggTexture::set_combine_operand 0 1 564 230
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_combine_operand
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
118
inline void EggTexture::set_combine_operand(EggTexture::CombineChannel channel, int n, EggTexture::CombineOperand co);

1545 19 get_combine_operand 0 4 2010 31 EggTexture::get_combine_operand 0 1 565 230
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_combine_operand
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
115
inline EggTexture::CombineOperand EggTexture::get_combine_operand(EggTexture::CombineChannel channel, int n) const;

1546 16 set_saved_result 0 4 2010 28 EggTexture::set_saved_result 0 1 566 1011
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_saved_result
//       Access: Published
//  Description: Sets the saved_result flag.  When this is true, the
//               output of this stage is not part of the normal
//               pipeline--that is, it will not be supplied as the
//               "previous" source for the next texture stage--but it
//               will instead be supplied as the "last_saved_result"
//               source for any future stages, until the next
//               TextureStage with a saved_result set true is
//               encountered.
//
//               This can be used to reuse the results of this texture
//               stage as input to more than one stage later in the
//               pipeline.
//
//               The last texture in the pipeline (the one with the
//               highest sort value) should not have this flag set.
////////////////////////////////////////////////////////////////////
60
inline void EggTexture::set_saved_result(bool saved_result);

1547 16 get_saved_result 0 4 2010 28 EggTexture::get_saved_result 0 1 567 322
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_saved_result
//       Access: Published
//  Description: Returns the current setting of the saved_result flag.
//               See set_saved_result().
////////////////////////////////////////////////////////////////////
53
inline bool EggTexture::get_saved_result(void) const;

1548 11 set_tex_gen 0 4 2010 23 EggTexture::set_tex_gen 0 1 568 222
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_tex_gen
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
64
inline void EggTexture::set_tex_gen(EggTexture::TexGen tex_gen);

1549 11 get_tex_gen 0 4 2010 23 EggTexture::get_tex_gen 0 1 569 222
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_tex_gen
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
62
inline EggTexture::TexGen EggTexture::get_tex_gen(void) const;

1550 17 set_quality_level 0 4 2010 29 EggTexture::set_quality_level 0 1 570 228
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_quality_level
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
82
inline void EggTexture::set_quality_level(EggTexture::QualityLevel quality_level);

1551 17 get_quality_level 0 4 2010 29 EggTexture::get_quality_level 0 1 571 228
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_quality_level
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
74
inline EggTexture::QualityLevel EggTexture::get_quality_level(void) const;

1552 14 set_stage_name 0 4 2010 26 EggTexture::set_stage_name 0 1 572 778
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_stage_name
//       Access: Published
//  Description: Specifies the particular TextureStage this texture
//               will be rendered on by name.  If this is omitted, the
//               texture will be rendered on the default TextureStage,
//               unless some other stage-specific property is
//               specificied, in which case the texture will be
//               rendered on a TextureStage with the same name as the
//               tref.  This is in support of multitexturing.
//
//               Each different TextureStage in the world must be
//               uniquely named.
////////////////////////////////////////////////////////////////////
65
inline void EggTexture::set_stage_name(string const &stage_name);

1553 16 clear_stage_name 0 4 2010 28 EggTexture::clear_stage_name 0 1 573 273
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::clear_stage_name
//       Access: Published
//  Description: Removes the named TextureStage specification.
////////////////////////////////////////////////////////////////////
47
inline void EggTexture::clear_stage_name(void);

1554 14 has_stage_name 0 4 2010 26 EggTexture::has_stage_name 0 1 574 336
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::has_stage_name
//       Access: Published
//  Description: Returns true if a stage name has been explicitly
//               specified for this texture, false otherwise.
////////////////////////////////////////////////////////////////////
51
inline bool EggTexture::has_stage_name(void) const;

1555 14 get_stage_name 0 4 2010 26 EggTexture::get_stage_name 0 1 575 392
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_stage_name
//       Access: Published
//  Description: Returns the stage name that has been specified for
//               this texture, or the tref name if no texture stage
//               has explicitly been specified.
////////////////////////////////////////////////////////////////////
60
inline string const &EggTexture::get_stage_name(void) const;

1556 12 set_priority 0 4 2010 24 EggTexture::set_priority 0 1 576 435
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_priority
//       Access: Published
//  Description: Sets the importance of this texture with respect to
//               other textures also applied on the same geometry.
//               This is only meaningful in the presence of
//               multitexturing.
////////////////////////////////////////////////////////////////////
51
inline void EggTexture::set_priority(int priority);

1557 14 clear_priority 0 4 2010 26 EggTexture::clear_priority 0 1 577 345
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::clear_priority
//       Access: Published
//  Description: Removes the specification of multitexture priority
//               from the texture.  The default priority value is 0.
////////////////////////////////////////////////////////////////////
45
inline void EggTexture::clear_priority(void);

1558 12 has_priority 0 4 2010 24 EggTexture::has_priority 0 1 578 371
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::has_priority
//       Access: Published
//  Description: Returns true if a priority value for multitexture
//               importance has been specified for the texture, false
//               otherwise.
////////////////////////////////////////////////////////////////////
49
inline bool EggTexture::has_priority(void) const;

1559 12 get_priority 0 4 2010 24 EggTexture::get_priority 0 1 579 386
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_priority
//       Access: Published
//  Description: Returns the multitexture importance value that has been
//               specified for the texture, or 0 if no priority value has
//               been specified.
////////////////////////////////////////////////////////////////////
48
inline int EggTexture::get_priority(void) const;

1560 9 set_color 0 4 2010 21 EggTexture::set_color 0 1 580 220
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_color
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
55
inline void EggTexture::set_color(LColor const &color);

1561 11 clear_color 0 4 2010 23 EggTexture::clear_color 0 1 581 222
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::clear_color
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
42
inline void EggTexture::clear_color(void);

1562 9 has_color 0 4 2010 21 EggTexture::has_color 0 1 582 303
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::has_color
//       Access: Published
//  Description: Returns true if a blend color has been
//               specified for the texture.
////////////////////////////////////////////////////////////////////
46
inline bool EggTexture::has_color(void) const;

1563 9 get_color 0 4 2010 21 EggTexture::get_color 0 1 583 315
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_color
//       Access: Published
//  Description: Returns the blend color if one has been
//               specified, or (0, 0, 0, 1) otherwise.
////////////////////////////////////////////////////////////////////
55
inline LColor const &EggTexture::get_color(void) const;

1564 16 set_border_color 0 4 2010 28 EggTexture::set_border_color 0 1 584 227
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_border_color
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
69
inline void EggTexture::set_border_color(LColor const &border_color);

1565 18 clear_border_color 0 4 2010 30 EggTexture::clear_border_color 0 1 585 229
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::clear_border_color
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
49
inline void EggTexture::clear_border_color(void);

1566 16 has_border_color 0 4 2010 28 EggTexture::has_border_color 0 1 586 311
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::has_border_color
//       Access: Published
//  Description: Returns true if a border color has been
//               specified for the texture.
////////////////////////////////////////////////////////////////////
53
inline bool EggTexture::has_border_color(void) const;

1567 16 get_border_color 0 4 2010 28 EggTexture::get_border_color 0 1 587 323
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_border_color
//       Access: Published
//  Description: Returns the border color if one has been
//               specified, or (0, 0, 0, 1) otherwise.
////////////////////////////////////////////////////////////////////
62
inline LColor const &EggTexture::get_border_color(void) const;

1568 11 set_uv_name 0 4 2010 23 EggTexture::set_uv_name 0 1 588 593
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_uv_name
//       Access: Published
//  Description: Specifies the named set of texture coordinates that
//               this texture will use when it is applied to geometry.
//               Geometry may have multiple sets of texture
//               coordinates defined, by name.
//
//               If this is not specified for a particular texture,
//               the default set of texture coordinates will be used.
////////////////////////////////////////////////////////////////////
59
inline void EggTexture::set_uv_name(string const &uv_name);

1569 13 clear_uv_name 0 4 2010 25 EggTexture::clear_uv_name 0 1 589 398
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::clear_uv_name
//       Access: Published
//  Description: Removes the restriction to a particular named set of
//               texture coordinates and restores the texture to using
//               the default texture coordinates.
////////////////////////////////////////////////////////////////////
44
inline void EggTexture::clear_uv_name(void);

1570 11 has_uv_name 0 4 2010 23 EggTexture::has_uv_name 0 1 590 336
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::has_uv_name
//       Access: Published
//  Description: Returns true if a texcoord name has been explicitly
//               specified for this texture, false otherwise.
////////////////////////////////////////////////////////////////////
48
inline bool EggTexture::has_uv_name(void) const;

1571 11 get_uv_name 0 4 2010 23 EggTexture::get_uv_name 0 1 591 395
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_uv_name
//       Access: Published
//  Description: Returns the texcoord name that has been specified for
//               this texture, or the empty string if no texcoord name
//               has explicitly been specified.
////////////////////////////////////////////////////////////////////
57
inline string const &EggTexture::get_uv_name(void) const;

1572 13 set_rgb_scale 0 4 2010 25 EggTexture::set_rgb_scale 0 1 592 493
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_rgb_scale
//       Access: Published
//  Description: Sets an additional factor that will scale all three
//               r, g, b components after the texture has been
//               applied.  This is used only when a combine mode is in
//               effect.
//
//               The only legal values are 1, 2, or 4.
////////////////////////////////////////////////////////////////////
53
inline void EggTexture::set_rgb_scale(int rgb_scale);

1573 15 clear_rgb_scale 0 4 2010 27 EggTexture::clear_rgb_scale 0 1 593 325
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::clear_rgb_scale
//       Access: Published
//  Description: Removes the rgb_scale from the texture and restores
//               it to the default value of 1.
////////////////////////////////////////////////////////////////////
46
inline void EggTexture::clear_rgb_scale(void);

1574 13 has_rgb_scale 0 4 2010 25 EggTexture::has_rgb_scale 0 1 594 323
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::has_rgb_scale
//       Access: Published
//  Description: Returns true if an rgb_scale has been specified for
//               the texture, false otherwise.
////////////////////////////////////////////////////////////////////
50
inline bool EggTexture::has_rgb_scale(void) const;

1575 13 get_rgb_scale 0 4 2010 25 EggTexture::get_rgb_scale 0 1 595 374
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_rgb_scale
//       Access: Published
//  Description: Returns the rgb_scale value that has been
//               specified for the texture, or 1 if no rgb_scale value
//               has been specified.
////////////////////////////////////////////////////////////////////
49
inline int EggTexture::get_rgb_scale(void) const;

1576 15 set_alpha_scale 0 4 2010 27 EggTexture::set_alpha_scale 0 1 596 468
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_alpha_scale
//       Access: Published
//  Description: Sets an additional factor that will scale the
//               alpha component after the texture has been applied.
//               This is used only when a combine mode is in effect.
//
//               The only legal values are 1, 2, or 4.
////////////////////////////////////////////////////////////////////
57
inline void EggTexture::set_alpha_scale(int alpha_scale);

1577 17 clear_alpha_scale 0 4 2010 29 EggTexture::clear_alpha_scale 0 1 597 329
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::clear_alpha_scale
//       Access: Published
//  Description: Removes the alpha_scale from the texture and restores
//               it to the default value of 1.
////////////////////////////////////////////////////////////////////
48
inline void EggTexture::clear_alpha_scale(void);

1578 15 has_alpha_scale 0 4 2010 27 EggTexture::has_alpha_scale 0 1 598 327
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::has_alpha_scale
//       Access: Published
//  Description: Returns true if an alpha_scale has been specified for
//               the texture, false otherwise.
////////////////////////////////////////////////////////////////////
52
inline bool EggTexture::has_alpha_scale(void) const;

1579 15 get_alpha_scale 0 4 2010 27 EggTexture::get_alpha_scale 0 1 599 380
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_alpha_scale
//       Access: Published
//  Description: Returns the alpha_scale value that has been
//               specified for the texture, or 1 if no alpha_scale
//               value has been specified.
////////////////////////////////////////////////////////////////////
51
inline int EggTexture::get_alpha_scale(void) const;

1580 18 set_alpha_filename 0 4 2010 30 EggTexture::set_alpha_filename 0 1 600 516
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_alpha_filename
//       Access: Published
//  Description: Specifies a separate file that will be loaded in with
//               the 1- or 3-component texture and applied as the
//               alpha channel.  This is useful when loading textures
//               from file formats that do not support alpha, for
//               instance jpg.
////////////////////////////////////////////////////////////////////
69
inline void EggTexture::set_alpha_filename(Filename const &filename);

1581 20 clear_alpha_filename 0 4 2010 32 EggTexture::clear_alpha_filename 0 1 601 231
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::clear_alpha_filename
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
51
inline void EggTexture::clear_alpha_filename(void);

1582 18 has_alpha_filename 0 4 2010 30 EggTexture::has_alpha_filename 0 1 602 381
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::has_alpha_filename
//       Access: Published
//  Description: Returns true if a separate file for the alpha
//               component has been applied, false otherwise.  See
//               set_alpha_filename().
////////////////////////////////////////////////////////////////////
55
inline bool EggTexture::has_alpha_filename(void) const;

1583 18 get_alpha_filename 0 4 2010 30 EggTexture::get_alpha_filename 0 1 603 419
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_alpha_filename
//       Access: Published
//  Description: Returns the separate file assigned for the alpha
//               channel.  It is an error to call this unless
//               has_alpha_filename() returns true.  See set_alpha_filename().
////////////////////////////////////////////////////////////////////
66
inline Filename const &EggTexture::get_alpha_filename(void) const;

1584 18 set_alpha_fullpath 0 4 2010 30 EggTexture::set_alpha_fullpath 0 1 604 326
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_alpha_fullpath
//       Access: Published
//  Description: Records the full pathname to the file, for the
//               benefit of get_alpha_fullpath().
////////////////////////////////////////////////////////////////////
69
inline void EggTexture::set_alpha_fullpath(Filename const &fullpath);

1585 18 get_alpha_fullpath 0 4 2010 30 EggTexture::get_alpha_fullpath 0 1 605 817
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_alpha_fullpath
//       Access: Published
//  Description: Returns the full pathname to the alpha file, if it is
//               known; otherwise, returns the same thing as
//               get_alpha_filename().
//
//               This function simply returns whatever was set by the
//               last call to set_alpha_fullpath().  This string is
//               not written to the egg file; its main purpose is to
//               record the full path to the alpha filename if it is
//               known, for egg structures that are generated
//               in-memory and then immediately converted to a scene
//               graph.
////////////////////////////////////////////////////////////////////
66
inline Filename const &EggTexture::get_alpha_fullpath(void) const;

1586 22 set_alpha_file_channel 0 4 2010 34 EggTexture::set_alpha_file_channel 0 1 606 742
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_alpha_file_channel
//       Access: Published
//  Description: If a separate alpha-file is specified, this indicates
//               which channel number should be extracted from this
//               file to derive the alpha channel for the final image.
//               The default is 0, which means the grayscale
//               combination of r, g, b.  Otherwise, this should be
//               the 1-based channel number, for instance 1, 2, or 3
//               for r, g, or b, respectively, or 4 for the alpha
//               channel of a four-component image.
////////////////////////////////////////////////////////////////////
71
inline void EggTexture::set_alpha_file_channel(int alpha_file_channel);

1587 24 clear_alpha_file_channel 0 4 2010 36 EggTexture::clear_alpha_file_channel 0 1 607 336
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::clear_alpha_file_channel
//       Access: Published
//  Description: Removes the specification of a particular channel to
//               use from the alpha-file image.
////////////////////////////////////////////////////////////////////
55
inline void EggTexture::clear_alpha_file_channel(void);

1588 22 has_alpha_file_channel 0 4 2010 34 EggTexture::has_alpha_file_channel 0 1 608 349
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::has_alpha_file_channel
//       Access: Published
//  Description: Returns true if a particular channel has been
//               specified for the alpha-file image, false otherwise.
////////////////////////////////////////////////////////////////////
59
inline bool EggTexture::has_alpha_file_channel(void) const;

1589 22 get_alpha_file_channel 0 4 2010 34 EggTexture::get_alpha_file_channel 0 1 609 435
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_alpha_file_channel
//       Access: Published
//  Description: Returns the particular channel that has been
//               specified for the alpha-file image, or 0 if no
//               channel has been specified.  See
//               set_alpha_file_channel().
////////////////////////////////////////////////////////////////////
58
inline int EggTexture::get_alpha_file_channel(void) const;

1590 13 set_multiview 0 4 2010 25 EggTexture::set_multiview 0 1 610 698
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_multiview
//       Access: Published
//  Description: Sets the multiview flag.
//
//               If multiview is true, the filename should contain a
//               hash mark ('#'), which will be filled in with the
//               view number; and a multiview texture will be defined
//               with a series of images, one for each view.
//
//               A multiview texture is most often used for stereo
//               textures, but other uses are also possible, such as
//               for texture animation.
////////////////////////////////////////////////////////////////////
54
inline void EggTexture::set_multiview(bool multiview);

1591 13 get_multiview 0 4 2010 25 EggTexture::get_multiview 0 1 611 313
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_multiview
//       Access: Published
//  Description: Returns the current setting of the multiview flag.
//               See set_multiview().
////////////////////////////////////////////////////////////////////
50
inline bool EggTexture::get_multiview(void) const;

1592 13 set_num_views 0 4 2010 25 EggTexture::set_num_views 0 1 612 456
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_num_views
//       Access: Published
//  Description: When loading a 3-D multiview texture, this parameter
//               is necessary to specify how many views will be
//               expected.  The z size is determined implicitly from
//               the number of images loaded.
////////////////////////////////////////////////////////////////////
53
inline void EggTexture::set_num_views(int num_views);

1593 15 clear_num_views 0 4 2010 27 EggTexture::clear_num_views 0 1 613 321
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::clear_num_views
//       Access: Published
//  Description: Removes the specification of the number of views
//               for a 3-D multiview texture.
////////////////////////////////////////////////////////////////////
46
inline void EggTexture::clear_num_views(void);

1594 13 has_num_views 0 4 2010 25 EggTexture::has_num_views 0 1 614 361
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::has_num_views
//       Access: Published
//  Description: Returns true if the number of views has been
//               specified for the 3-D multiview texture, false
//               otherwise.
////////////////////////////////////////////////////////////////////
50
inline bool EggTexture::has_num_views(void) const;

1595 13 get_num_views 0 4 2010 25 EggTexture::get_num_views 0 1 615 342
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_num_views
//       Access: Published
//  Description: Returns the specified number of views specified for
//               the 3-D multiview texture.  See set_num_views().
////////////////////////////////////////////////////////////////////
49
inline int EggTexture::get_num_views(void) const;

1596 16 set_read_mipmaps 0 4 2010 28 EggTexture::set_read_mipmaps 0 1 616 912
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_read_mipmaps
//       Access: Published
//  Description: Sets the read_mipmaps flag.
//
//               If read_mipmaps is true, the filename should contain
//               a hash mark ('#'), which will be filled in with the
//               mipmap level number; and the texture will be defined
//               with a series of images, one for each mipmap level.
//
//               If the filename is of a type that already requires a
//               hash mark, such as a cube map or a 3-d texture, then
//               the filename should now require two hash marks, and
//               the first one indicates the mipmap level number,
//               while the second indicates the face number or 3-d
//               level number.
////////////////////////////////////////////////////////////////////
60
inline void EggTexture::set_read_mipmaps(bool read_mipmaps);

1597 16 get_read_mipmaps 0 4 2010 28 EggTexture::get_read_mipmaps 0 1 617 322
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_read_mipmaps
//       Access: Published
//  Description: Returns the current setting of the read_mipmaps flag.
//               See set_read_mipmaps().
////////////////////////////////////////////////////////////////////
53
inline bool EggTexture::get_read_mipmaps(void) const;

1598 11 set_min_lod 0 4 2010 23 EggTexture::set_min_lod 0 1 618 273
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_min_lod
//       Access: Published
//  Description: Sets the minimum mipmap level that may be sampled.
////////////////////////////////////////////////////////////////////
52
inline void EggTexture::set_min_lod(double min_lod);

1599 13 clear_min_lod 0 4 2010 25 EggTexture::clear_min_lod 0 1 619 311
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::clear_min_lod
//       Access: Published
//  Description: Removes the specification of a minimum mipmap level
//               from the texture.
////////////////////////////////////////////////////////////////////
44
inline void EggTexture::clear_min_lod(void);

1600 11 has_min_lod 0 4 2010 23 EggTexture::has_min_lod 0 1 620 346
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::has_min_lod
//       Access: Published
//  Description: Returns true if a value for the minimum mipmap level
//               has been specified for this texture, false otherwise.
////////////////////////////////////////////////////////////////////
48
inline bool EggTexture::has_min_lod(void) const;

1601 11 get_min_lod 0 4 2010 23 EggTexture::get_min_lod 0 1 621 314
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_min_lod
//       Access: Published
//  Description: Returns the minimum mipmap level that has been
//               specified for this texture.
////////////////////////////////////////////////////////////////////
50
inline double EggTexture::get_min_lod(void) const;

1602 11 set_max_lod 0 4 2010 23 EggTexture::set_max_lod 0 1 622 273
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_max_lod
//       Access: Published
//  Description: Sets the maximum mipmap level that may be sampled.
////////////////////////////////////////////////////////////////////
52
inline void EggTexture::set_max_lod(double max_lod);

1603 13 clear_max_lod 0 4 2010 25 EggTexture::clear_max_lod 0 1 623 311
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::clear_max_lod
//       Access: Published
//  Description: Removes the specification of a maximum mipmap level
//               from the texture.
////////////////////////////////////////////////////////////////////
44
inline void EggTexture::clear_max_lod(void);

1604 11 has_max_lod 0 4 2010 23 EggTexture::has_max_lod 0 1 624 346
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::has_max_lod
//       Access: Published
//  Description: Returns true if a value for the maximum mipmap level
//               has been specified for this texture, false otherwise.
////////////////////////////////////////////////////////////////////
48
inline bool EggTexture::has_max_lod(void) const;

1605 11 get_max_lod 0 4 2010 23 EggTexture::get_max_lod 0 1 625 314
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_max_lod
//       Access: Published
//  Description: Returns the maximum mipmap level that has been
//               specified for this texture.
////////////////////////////////////////////////////////////////////
50
inline double EggTexture::get_max_lod(void) const;

1606 12 set_lod_bias 0 4 2010 24 EggTexture::set_lod_bias 0 1 626 316
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_lod_bias
//       Access: Published
//  Description: Sets the mipmap level bias that is added to the
//               mipmap level to be sampled.
////////////////////////////////////////////////////////////////////
54
inline void EggTexture::set_lod_bias(double lod_bias);

1607 14 clear_lod_bias 0 4 2010 26 EggTexture::clear_lod_bias 0 1 627 312
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::clear_lod_bias
//       Access: Published
//  Description: Removes the specification of a maximum mipmap level
//               from the texture.
////////////////////////////////////////////////////////////////////
45
inline void EggTexture::clear_lod_bias(void);

1608 12 has_lod_bias 0 4 2010 24 EggTexture::has_lod_bias 0 1 628 347
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::has_lod_bias
//       Access: Published
//  Description: Returns true if a value for the maximum mipmap level
//               has been specified for this texture, false otherwise.
////////////////////////////////////////////////////////////////////
49
inline bool EggTexture::has_lod_bias(void) const;

1609 12 get_lod_bias 0 4 2010 24 EggTexture::get_lod_bias 0 1 629 315
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_lod_bias
//       Access: Published
//  Description: Returns the maximum mipmap level that has been
//               specified for this texture.
////////////////////////////////////////////////////////////////////
51
inline double EggTexture::get_lod_bias(void) const;

1610 18 clear_multitexture 0 4 2010 30 EggTexture::clear_multitexture 0 1 630 437
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::clear_multitexture
//       Access: Published
//  Description: Resets the multitexture flags set by
//               multitexture_over().  After this call,
//               get_multitexture() will return false, and
//               get_multitexture_sort() will return 0.
////////////////////////////////////////////////////////////////////
42
void EggTexture::clear_multitexture(void);

1611 17 multitexture_over 0 4 2010 29 EggTexture::multitexture_over 0 1 631 771
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::multitexture_over
//       Access: Published
//  Description: Indicates that this texture should be layered on top
//               of the other texture.  This will guarantee that
//               this->get_multitexture_sort() >
//               other->get_multitexture_sort(), at least until
//               clear_multitexture() is called on either one.
//
//               The return value is true if successful, or false if
//               there is a failure because the other texture was
//               already layered on top of this one (or there is a
//               three- or more-way cycle).
////////////////////////////////////////////////////////////////////
54
bool EggTexture::multitexture_over(EggTexture *other);

1612 21 get_multitexture_sort 0 4 2010 33 EggTexture::get_multitexture_sort 0 1 632 628
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_multitexture_sort
//       Access: Published
//  Description: Returns an integer that represents the depth to which
//               this texture is layered on all other textures in the
//               egg file.  In general, if texture A is layered over
//               texture B, then sort(A) > sort(B).  If texture A is
//               never layered over any other texture, then sort(A) ==
//               0.  More than that is difficult to guarantee.
////////////////////////////////////////////////////////////////////
57
inline int EggTexture::get_multitexture_sort(void) const;

1613 19 string_texture_type 0 4 2010 31 EggTexture::string_texture_type 0 1 633 427
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::string_texture_type
//       Access: Published, Static
//  Description: Returns the Texture_ype value associated with the given
//               string representation, or TT_unspecified if the string
//               does not match any known TextureType value.
////////////////////////////////////////////////////////////////////
85
static EggTexture::TextureType EggTexture::string_texture_type(string const &string);

1614 13 string_format 0 4 2010 25 EggTexture::string_format 0 1 634 410
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::string_format
//       Access: Published, Static
//  Description: Returns the Format value associated with the given
//               string representation, or F_unspecified if the string
//               does not match any known Format value.
////////////////////////////////////////////////////////////////////
74
static EggTexture::Format EggTexture::string_format(string const &string);

1615 23 string_compression_mode 0 4 2010 35 EggTexture::string_compression_mode 0 1 635 435
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::string_compression_mode
//       Access: Published, Static
//  Description: Returns the CompressionMode value associated with the given
//               string representation, or CM_default if the string
//               does not match any known CompressionMode value.
////////////////////////////////////////////////////////////////////
93
static EggTexture::CompressionMode EggTexture::string_compression_mode(string const &string);

1616 16 string_wrap_mode 0 4 2010 28 EggTexture::string_wrap_mode 0 1 636 418
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::string_wrap_mode
//       Access: Published, Static
//  Description: Returns the WrapMode value associated with the given
//               string representation, or WM_unspecified if the string
//               does not match any known WrapMode value.
////////////////////////////////////////////////////////////////////
79
static EggTexture::WrapMode EggTexture::string_wrap_mode(string const &string);

1617 18 string_filter_type 0 4 2010 30 EggTexture::string_filter_type 0 1 637 424
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::string_filter_type
//       Access: Published, Static
//  Description: Returns the FilterType value associated with the given
//               string representation, or FT_unspecified if the string
//               does not match any known FilterType value.
////////////////////////////////////////////////////////////////////
83
static EggTexture::FilterType EggTexture::string_filter_type(string const &string);

1618 15 string_env_type 0 4 2010 27 EggTexture::string_env_type 0 1 638 415
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::string_env_type
//       Access: Published, Static
//  Description: Returns the EnvType value associated with the given
//               string representation, or ET_unspecified if the string
//               does not match any known EnvType value.
////////////////////////////////////////////////////////////////////
77
static EggTexture::EnvType EggTexture::string_env_type(string const &string);

1619 19 string_combine_mode 0 4 2010 31 EggTexture::string_combine_mode 0 1 639 427
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::string_combine_mode
//       Access: Published, Static
//  Description: Returns the CombineMode value associated with the given
//               string representation, or CM_unspecified if the string
//               does not match any known CombineMode value.
////////////////////////////////////////////////////////////////////
85
static EggTexture::CombineMode EggTexture::string_combine_mode(string const &string);

1620 21 string_combine_source 0 4 2010 33 EggTexture::string_combine_source 0 1 640 433
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::string_combine_source
//       Access: Published, Static
//  Description: Returns the CombineSource value associated with the given
//               string representation, or CS_unspecified if the string
//               does not match any known CombineSource value.
////////////////////////////////////////////////////////////////////
89
static EggTexture::CombineSource EggTexture::string_combine_source(string const &string);

1621 22 string_combine_operand 0 4 2010 34 EggTexture::string_combine_operand 0 1 641 436
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::string_combine_operand
//       Access: Published, Static
//  Description: Returns the CombineOperand value associated with the given
//               string representation, or CO_unspecified if the string
//               does not match any known CombineOperand value.
////////////////////////////////////////////////////////////////////
91
static EggTexture::CombineOperand EggTexture::string_combine_operand(string const &string);

1622 14 string_tex_gen 0 4 2010 26 EggTexture::string_tex_gen 0 1 642 412
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::string_tex_gen
//       Access: Published, Static
//  Description: Returns the TexGen value associated with the given
//               string representation, or ET_unspecified if the string
//               does not match any known TexGen value.
////////////////////////////////////////////////////////////////////
75
static EggTexture::TexGen EggTexture::string_tex_gen(string const &string);

1623 20 string_quality_level 0 4 2010 32 EggTexture::string_quality_level 0 1 643 418
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::string_quality_level
//       Access: Published, Static
//  Description: Returns the TexGen value associated with the given
//               string representation, or ET_unspecified if the string
//               does not match any known TexGen value.
////////////////////////////////////////////////////////////////////
87
static EggTexture::QualityLevel EggTexture::string_quality_level(string const &string);

1624 14 get_class_type 0 4 2010 26 EggTexture::get_class_type 0 1 644 0
51
static TypeHandle EggTexture::get_class_type(void);

1625 11 EggMaterial 0 4 2025 24 EggMaterial::EggMaterial 0 2 651 652 447
////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
101
EggMaterial::EggMaterial(string const &mref_name);
EggMaterial::EggMaterial(EggMaterial const &copy);

1626 16 is_equivalent_to 0 4 2025 29 EggMaterial::is_equivalent_to 0 1 653 784
////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::is_equivalent_to
//       Access: Public
//  Description: Returns true if the two materials are equivalent in
//               all relevant properties (according to eq), false
//               otherwise.
//
//               The Equivalence parameter, eq, should be set to the
//               bitwise OR of the following properties, according to
//               what you consider relevant:
//
//               EggMaterial::E_attributes:
//                 All material attributes (diff, spec,
//                 etc.) except MRef name.
//
//               EggMaterial::E_mref_name:
//                 The MRef name.
////////////////////////////////////////////////////////////////////
75
bool EggMaterial::is_equivalent_to(EggMaterial const &other, int eq) const;

1627 15 sorts_less_than 0 4 2025 28 EggMaterial::sorts_less_than 0 1 654 502
////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::sorts_less_than
//       Access: Public
//  Description: An ordering operator to compare two materials for
//               sorting order.  This imposes an arbitrary ordering
//               useful to identify unique materials, according to the
//               indicated Equivalence factor.  See
//               is_equivalent_to().
////////////////////////////////////////////////////////////////////
74
bool EggMaterial::sorts_less_than(EggMaterial const &other, int eq) const;

1628 8 set_diff 0 4 2025 21 EggMaterial::set_diff 0 1 655 217
////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::set_diff
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
54
inline void EggMaterial::set_diff(LColor const &diff);

1629 10 clear_diff 0 4 2025 23 EggMaterial::clear_diff 0 1 656 219
////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::clear_diff
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
42
inline void EggMaterial::clear_diff(void);

1630 8 has_diff 0 4 2025 21 EggMaterial::has_diff 0 1 657 217
////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::has_diff
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
46
inline bool EggMaterial::has_diff(void) const;

1631 8 get_diff 0 4 2025 21 EggMaterial::get_diff 0 1 658 360
////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::get_diff
//       Access: Public
//  Description: It is legal to call this even if has_diff() returns
//               false.  If so, it simply returns the default diff
//               color.
////////////////////////////////////////////////////////////////////
48
inline LColor EggMaterial::get_diff(void) const;

1632 7 set_amb 0 4 2025 20 EggMaterial::set_amb 0 1 659 216
////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::set_amb
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
52
inline void EggMaterial::set_amb(LColor const &amb);

1633 9 clear_amb 0 4 2025 22 EggMaterial::clear_amb 0 1 660 218
////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::clear_amb
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
41
inline void EggMaterial::clear_amb(void);

1634 7 has_amb 0 4 2025 20 EggMaterial::has_amb 0 1 661 216
////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::has_amb
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
45
inline bool EggMaterial::has_amb(void) const;

1635 7 get_amb 0 4 2025 20 EggMaterial::get_amb 0 1 662 357
////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::get_amb
//       Access: Public
//  Description: It is legal to call this even if has_amb() returns
//               false.  If so, it simply returns the default amb
//               color.
////////////////////////////////////////////////////////////////////
47
inline LColor EggMaterial::get_amb(void) const;

1636 8 set_emit 0 4 2025 21 EggMaterial::set_emit 0 1 663 217
////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::set_emit
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
54
inline void EggMaterial::set_emit(LColor const &emit);

1637 10 clear_emit 0 4 2025 23 EggMaterial::clear_emit 0 1 664 219
////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::clear_emit
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
42
inline void EggMaterial::clear_emit(void);

1638 8 has_emit 0 4 2025 21 EggMaterial::has_emit 0 1 665 217
////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::has_emit
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
46
inline bool EggMaterial::has_emit(void) const;

1639 8 get_emit 0 4 2025 21 EggMaterial::get_emit 0 1 666 360
////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::get_emit
//       Access: Public
//  Description: It is legal to call this even if has_emit() returns
//               false.  If so, it simply returns the default emit
//               color.
////////////////////////////////////////////////////////////////////
48
inline LColor EggMaterial::get_emit(void) const;

1640 8 set_spec 0 4 2025 21 EggMaterial::set_spec 0 1 667 217
////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::set_spec
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
54
inline void EggMaterial::set_spec(LColor const &spec);

1641 10 clear_spec 0 4 2025 23 EggMaterial::clear_spec 0 1 668 219
////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::clear_spec
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
42
inline void EggMaterial::clear_spec(void);

1642 8 has_spec 0 4 2025 21 EggMaterial::has_spec 0 1 669 217
////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::has_spec
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
46
inline bool EggMaterial::has_spec(void) const;

1643 8 get_spec 0 4 2025 21 EggMaterial::get_spec 0 1 670 360
////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::get_spec
//       Access: Public
//  Description: It is legal to call this even if has_spec() returns
//               false.  If so, it simply returns the default spec
//               color.
////////////////////////////////////////////////////////////////////
48
inline LColor EggMaterial::get_spec(void) const;

1644 13 set_shininess 0 4 2025 26 EggMaterial::set_shininess 0 1 671 222
////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::set_shininess
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
57
inline void EggMaterial::set_shininess(double shininess);

1645 15 clear_shininess 0 4 2025 28 EggMaterial::clear_shininess 0 1 672 224
////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::clear_shininess
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
47
inline void EggMaterial::clear_shininess(void);

1646 13 has_shininess 0 4 2025 26 EggMaterial::has_shininess 0 1 673 222
////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::has_shininess
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
51
inline bool EggMaterial::has_shininess(void) const;

1647 13 get_shininess 0 4 2025 26 EggMaterial::get_shininess 0 1 674 222
////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::get_shininess
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
53
inline double EggMaterial::get_shininess(void) const;

1648 9 set_local 0 4 2025 22 EggMaterial::set_local 0 1 675 218
////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::set_local
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
47
inline void EggMaterial::set_local(bool local);

1649 11 clear_local 0 4 2025 24 EggMaterial::clear_local 0 1 676 220
////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::clear_local
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
43
inline void EggMaterial::clear_local(void);

1650 9 has_local 0 4 2025 22 EggMaterial::has_local 0 1 677 218
////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::has_local
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
47
inline bool EggMaterial::has_local(void) const;

1651 9 get_local 0 4 2025 22 EggMaterial::get_local 0 1 678 218
////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::get_local
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
47
inline bool EggMaterial::get_local(void) const;

1652 14 get_class_type 0 4 2025 27 EggMaterial::get_class_type 0 1 679 0
52
static TypeHandle EggMaterial::get_class_type(void);

1653 12 ~EggMaterial 0 4 2025 25 EggMaterial::~EggMaterial 0 0 0
32
EggMaterial::~EggMaterial(void);

1654 17 upcast_to_EggNode 0 12 2027 31 EggPrimitive::upcast_to_EggNode 0 1 732 35
upcast from EggPrimitive to EggNode
47
EggNode *EggPrimitive::upcast_to_EggNode(void);

1655 24 downcast_to_EggPrimitive 0 12 1965 33 EggNode::downcast_to_EggPrimitive 0 1 733 37
downcast from EggNode to EggPrimitive
54
EggPrimitive *EggNode::downcast_to_EggPrimitive(void);

1656 23 upcast_to_EggAttributes 0 12 2027 37 EggPrimitive::upcast_to_EggAttributes 0 1 734 41
upcast from EggPrimitive to EggAttributes
59
EggAttributes *EggPrimitive::upcast_to_EggAttributes(void);

1657 24 downcast_to_EggPrimitive 0 12 1968 39 EggAttributes::downcast_to_EggPrimitive 0 1 735 43
downcast from EggAttributes to EggPrimitive
60
EggPrimitive *EggAttributes::downcast_to_EggPrimitive(void);

1658 23 upcast_to_EggRenderMode 0 12 2027 37 EggPrimitive::upcast_to_EggRenderMode 0 1 736 41
upcast from EggPrimitive to EggRenderMode
59
EggRenderMode *EggPrimitive::upcast_to_EggRenderMode(void);

1659 24 downcast_to_EggPrimitive 0 12 1984 39 EggRenderMode::downcast_to_EggPrimitive 0 1 737 43
downcast from EggRenderMode to EggPrimitive
60
EggPrimitive *EggRenderMode::downcast_to_EggPrimitive(void);

1660 10 operator = 0 4 2027 24 EggPrimitive::operator = 0 1 680 237
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::Copy assignment operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
72
inline EggPrimitive &EggPrimitive::operator =(EggPrimitive const &copy);

1661 13 ~EggPrimitive 0 6 2027 27 EggPrimitive::~EggPrimitive 0 0 223
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::Destructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
49
virtual inline EggPrimitive::~EggPrimitive(void);

1662 20 determine_alpha_mode 0 6 2027 34 EggPrimitive::determine_alpha_mode 0 1 681 562
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::determine_alpha_mode
//       Access: Published, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               or EggPrimitive or some such object at this level or
//               above this primitive that has an alpha_mode other than
//               AM_unspecified.  Returns a valid EggRenderMode pointer
//               if one is found, or NULL otherwise.
////////////////////////////////////////////////////////////////////
64
virtual EggRenderMode *EggPrimitive::determine_alpha_mode(void);

1663 26 determine_depth_write_mode 0 6 2027 40 EggPrimitive::determine_depth_write_mode 0 1 682 569
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::determine_depth_write_mode
//       Access: Published, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               or EggPrimitive or some such object at this level or
//               above this node that has a depth_write_mode other than
//               DWM_unspecified.  Returns a valid EggRenderMode pointer
//               if one is found, or NULL otherwise.
////////////////////////////////////////////////////////////////////
70
virtual EggRenderMode *EggPrimitive::determine_depth_write_mode(void);

1664 25 determine_depth_test_mode 0 6 2027 39 EggPrimitive::determine_depth_test_mode 0 1 683 567
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::determine_depth_test_mode
//       Access: Published, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               or EggPrimitive or some such object at this level or
//               above this node that has a depth_test_mode other than
//               DTM_unspecified.  Returns a valid EggRenderMode pointer
//               if one is found, or NULL otherwise.
////////////////////////////////////////////////////////////////////
69
virtual EggRenderMode *EggPrimitive::determine_depth_test_mode(void);

1665 25 determine_visibility_mode 0 6 2027 39 EggPrimitive::determine_visibility_mode 0 1 684 566
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::determine_visibility_mode
//       Access: Published, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               or EggPrimitive or some such object at this level or
//               above this node that has a visibility_mode other than
//               VM_unspecified.  Returns a valid EggRenderMode pointer
//               if one is found, or NULL otherwise.
////////////////////////////////////////////////////////////////////
69
virtual EggRenderMode *EggPrimitive::determine_visibility_mode(void);

1666 22 determine_depth_offset 0 6 2027 36 EggPrimitive::determine_depth_offset 0 1 685 548
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::determine_depth_offset
//       Access: Published, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               or EggPrimitive or some such object at this level or
//               above this primitive that has a depth_offset specified.
//               Returns a valid EggRenderMode pointer if one is found,
//               or NULL otherwise.
////////////////////////////////////////////////////////////////////
66
virtual EggRenderMode *EggPrimitive::determine_depth_offset(void);

1667 20 determine_draw_order 0 6 2027 34 EggPrimitive::determine_draw_order 0 1 686 544
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::determine_draw_order
//       Access: Published, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               or EggPrimitive or some such object at this level or
//               above this primitive that has a draw_order specified.
//               Returns a valid EggRenderMode pointer if one is found,
//               or NULL otherwise.
////////////////////////////////////////////////////////////////////
64
virtual EggRenderMode *EggPrimitive::determine_draw_order(void);

1668 13 determine_bin 0 6 2027 27 EggPrimitive::determine_bin 0 1 687 531
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::determine_bin
//       Access: Published, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               or EggPrimitive or some such object at this level or
//               above this primitive that has a bin specified.  Returns a
//               valid EggRenderMode pointer if one is found, or NULL
//               otherwise.
////////////////////////////////////////////////////////////////////
57
virtual EggRenderMode *EggPrimitive::determine_bin(void);

1669 13 get_sort_name 0 4 2027 27 EggPrimitive::get_sort_name 0 1 688 498
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::get_sort_name
//       Access: Published
//  Description: Returns the name of the primitive for the purposes of
//               sorting primitives into different groups, if there is
//               one.
//
//               Presently, this is defined as the primitive name
//               itself, unless it begins with a digit.
////////////////////////////////////////////////////////////////////
54
inline string EggPrimitive::get_sort_name(void) const;

1670 11 get_shading 0 6 2027 25 EggPrimitive::get_shading 0 1 689 1114
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::get_shading
//       Access: Published, Virtual
//  Description: Returns the shading properties apparent on this
//               particular primitive.  This returns S_per_vertex if
//               the vertices have colors or normals (and they are not
//               all the same values), or for a simple primitive,
//               S_overall otherwise.  A composite primitive may also
//               return S_per_face if the individual component
//               primitives have colors or normals that are not all
//               the same values.
//
//               To get the most accurate results, you should call
//               clear_shading() on all connected primitives (or on
//               all primitives in the egg file), followed by
//               get_shading() on each primitive.  You may find it
//               easiest to call these methods on the EggData root
//               node (they are defined on EggGroupNode).
////////////////////////////////////////////////////////////////////
68
virtual EggPrimitive::Shading EggPrimitive::get_shading(void) const;

1671 23 clear_connected_shading 0 4 2027 37 EggPrimitive::clear_connected_shading 0 1 690 385
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::clear_connected_shading
//       Access: Published
//  Description: Resets the connected_shading member in this
//               primitive, so that get_connected_shading() will
//               recompute a new value.
////////////////////////////////////////////////////////////////////
56
inline void EggPrimitive::clear_connected_shading(void);

1672 21 get_connected_shading 0 4 2027 35 EggPrimitive::get_connected_shading 0 1 691 852
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::get_connected_shading
//       Access: Published
//  Description: Determines what sort of shading properties this
//               primitive's connected neighbors have.
//
//               To get the most accurate results, you should first
//               call clear_connected_shading() on all connected
//               primitives (or on all primitives in the egg file).
//               It might also be a good idea to call
//               remove_unused_vertices() to ensure proper
//               connectivity.
//
//               You may find it easiest to call these other methods
//               on the EggData root node (they are defined on
//               EggGroupNode).
////////////////////////////////////////////////////////////////////
77
inline EggPrimitive::Shading EggPrimitive::get_connected_shading(void) const;

1673 11 set_texture 0 4 2027 25 EggPrimitive::set_texture 0 1 692 494
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::set_texture
//       Access: Published
//  Description: Replaces the current list of textures with the
//               indicated texture.
//
//               This method is deprecated and is used in support of
//               single-texturing only.  Please use the multitexture
//               variant add_texture instead.
////////////////////////////////////////////////////////////////////
59
inline void EggPrimitive::set_texture(EggTexture *texture);

1674 11 has_texture 0 4 2027 25 EggPrimitive::has_texture 0 2 693 694 843
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::has_texture
//       Access: Published
//  Description: Returns true if the primitive has any textures
//               specified, false otherwise.
//
//               This method is deprecated and is used in support of
//               single-texturing only.  New code should be written to
//               use the multitexture variants instead.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::has_texture
//       Access: Published
//  Description: Returns true if the primitive has the particular
//               indicated texture, false otherwise.
////////////////////////////////////////////////////////////////////
116
inline bool EggPrimitive::has_texture(void) const;
inline bool EggPrimitive::has_texture(EggTexture *texture) const;

1675 11 get_texture 0 4 2027 25 EggPrimitive::get_texture 0 2 695 696 850
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::get_texture
//       Access: Published
//  Description: Returns the first texture on the primitive, if any,
//               or NULL if there are no textures on the primitive.
//
//               This method is deprecated and is used in support of
//               single-texturing only.  New code should be written to
//               use the multitexture variants instead.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::get_texture
//       Access: Published
//  Description: Returns the nth texture that has been applied to the
//               primitive.
////////////////////////////////////////////////////////////////////
116
inline EggTexture *EggPrimitive::get_texture(void) const;
inline EggTexture *EggPrimitive::get_texture(int n) const;

1676 11 add_texture 0 4 2027 25 EggPrimitive::add_texture 0 1 697 549
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::add_texture
//       Access: Published
//  Description: Applies the indicated texture to the primitive.
//
//               Note that, in the case of multiple textures being
//               applied to a single primitive, the order in which the
//               textures are applied does not affect the rendering
//               order; use EggTexture::set_sort() to specify that.
////////////////////////////////////////////////////////////////////
59
inline void EggPrimitive::add_texture(EggTexture *texture);

1677 13 clear_texture 0 4 2027 27 EggPrimitive::clear_texture 0 1 698 268
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::clear_texture
//       Access: Published
//  Description: Removes any texturing from the primitive.
////////////////////////////////////////////////////////////////////
46
inline void EggPrimitive::clear_texture(void);

1678 16 get_num_textures 0 4 2027 30 EggPrimitive::get_num_textures 0 1 699 303
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::get_num_textures
//       Access: Published
//  Description: Returns the number of textures applied to the
//               primitive.
////////////////////////////////////////////////////////////////////
54
inline int EggPrimitive::get_num_textures(void) const;

1679 12 set_material 0 4 2027 26 EggPrimitive::set_material 0 1 700 274
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::set_material
//       Access: Published
//  Description: Applies the indicated material to the primitive.
////////////////////////////////////////////////////////////////////
62
inline void EggPrimitive::set_material(EggMaterial *material);

1680 14 clear_material 0 4 2027 28 EggPrimitive::clear_material 0 1 701 268
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::clear_material
//       Access: Published
//  Description: Removes any material from the primitive.
////////////////////////////////////////////////////////////////////
47
inline void EggPrimitive::clear_material(void);

1681 12 get_material 0 4 2027 26 EggPrimitive::get_material 0 1 702 326
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::get_material
//       Access: Published
//  Description: Returns a pointer to the applied material, or NULL if
//               there is no material applied.
////////////////////////////////////////////////////////////////////
59
inline EggMaterial *EggPrimitive::get_material(void) const;

1682 12 has_material 0 4 2027 26 EggPrimitive::has_material 0 1 703 406
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::has_material
//       Access: Published
//  Description: Returns true if the primitive is materiald (and
//               get_material() will return a real pointer), false
//               otherwise (and get_material() will return NULL).
////////////////////////////////////////////////////////////////////
51
inline bool EggPrimitive::has_material(void) const;

1683 14 set_bface_flag 0 4 2027 28 EggPrimitive::set_bface_flag 0 1 704 466
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::set_bface_flag
//       Access: Published
//  Description: Sets the backfacing flag of the polygon.  If this is
//               true, the polygon will be rendered so that both faces
//               are visible; if it is false, only the front face of
//               the polygon will be visible.
////////////////////////////////////////////////////////////////////
52
inline void EggPrimitive::set_bface_flag(bool flag);

1684 14 get_bface_flag 0 4 2027 28 EggPrimitive::get_bface_flag 0 1 705 313
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::get_bface_flag
//       Access: Published
//  Description: Retrieves the backfacing flag of the polygon.  See
//               set_bface_flag().
////////////////////////////////////////////////////////////////////
53
inline bool EggPrimitive::get_bface_flag(void) const;

1685 15 copy_attributes 0 4 2027 29 EggPrimitive::copy_attributes 0 2 706 707 616
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::copy_attributes
//       Access: Published
//  Description: Copies the rendering attributes from the indicated
//               primitive.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::copy_attributes
//       Access: Published
//  Description: Copies the rendering attributes from the indicated
//               primitive.
////////////////////////////////////////////////////////////////////
126
void EggPrimitive::copy_attributes(EggAttributes const &other);
void EggPrimitive::copy_attributes(EggPrimitive const &other);

1686 17 has_vertex_normal 0 4 2027 31 EggPrimitive::has_vertex_normal 0 1 708 588
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::has_vertex_normal
//       Access: Published
//  Description: Returns true if any vertex on the primitive has a
//               specific normal set, false otherwise.
//
//               If you call unify_attributes() first, this will also
//               return false even if all the vertices were set to the
//               same value (since unify_attributes() removes
//               redundant vertex properties).
////////////////////////////////////////////////////////////////////
49
bool EggPrimitive::has_vertex_normal(void) const;

1687 16 has_vertex_color 0 4 2027 30 EggPrimitive::has_vertex_color 0 1 709 586
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::has_vertex_color
//       Access: Published
//  Description: Returns true if any vertex on the primitive has a
//               specific color set, false otherwise.
//
//               If you call unify_attributes() first, this will also
//               return false even if all the vertices were set to the
//               same value (since unify_attributes() removes
//               redundant vertex properties).
////////////////////////////////////////////////////////////////////
48
bool EggPrimitive::has_vertex_color(void) const;

1688 16 unify_attributes 0 6 2027 30 EggPrimitive::unify_attributes 0 1 710 1216
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::unify_attributes
//       Access: Published, Virtual
//  Description: If the shading property is S_per_vertex, ensures that
//               all vertices have a normal and a color, and the
//               overall primitive does not.
//
//               If the shading property is S_per_face, and this is a
//               composite primitive, ensures that all components have
//               a normal and a color, and the vertices and overall
//               primitive do not.  (If this is a simple primitive,
//               S_per_face works the same as S_overall, below).
//
//               If the shading property is S_overall, ensures that no
//               vertices or components have a normal or a color, and
//               the overall primitive does (if any exists at all).
//
//               After this call, either the primitive will have
//               normals or its vertices will, but not both.  Ditto
//               for colors.
//
//               This may create redundant vertices in the vertex
//               pool.
////////////////////////////////////////////////////////////////////
75
virtual void EggPrimitive::unify_attributes(EggPrimitive::Shading shading);

1689 20 apply_last_attribute 0 6 2027 34 EggPrimitive::apply_last_attribute 0 1 711 689
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::apply_last_attribute
//       Access: Published, Virtual
//  Description: Sets the last vertex of the triangle (or each
//               component) to the primitive normal and/or color, if
//               the primitive is flat-shaded.  This reflects the
//               OpenGL convention of storing flat-shaded properties on
//               the last vertex, although it is not usually a
//               convention in Egg.
//
//               This may introduce redundant vertices to the vertex
//               pool.
////////////////////////////////////////////////////////////////////
54
virtual void EggPrimitive::apply_last_attribute(void);

1690 21 apply_first_attribute 0 6 2027 35 EggPrimitive::apply_first_attribute 0 1 712 693
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::apply_first_attribute
//       Access: Published, Virtual
//  Description: Sets the first vertex of the triangle (or each
//               component) to the primitive normal and/or color, if
//               the primitive is flat-shaded.  This reflects the
//               DirectX convention of storing flat-shaded properties on
//               the first vertex, although it is not usually a
//               convention in Egg.
//
//               This may introduce redundant vertices to the vertex
//               pool.
////////////////////////////////////////////////////////////////////
55
virtual void EggPrimitive::apply_first_attribute(void);

1691 25 post_apply_flat_attribute 0 6 2027 39 EggPrimitive::post_apply_flat_attribute 0 1 713 499
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::post_apply_flat_attribute
//       Access: Published, Virtual
//  Description: Intended as a followup to apply_last_attribute(),
//               this also sets an attribute on the first vertices of
//               the primitive, if they don't already have an
//               attribute set, just so they end up with *something*.
////////////////////////////////////////////////////////////////////
59
virtual void EggPrimitive::post_apply_flat_attribute(void);

1692 23 reverse_vertex_ordering 0 6 2027 37 EggPrimitive::reverse_vertex_ordering 0 1 714 481
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::reverse_vertex_ordering
//       Access: Published, Virtual
//  Description: Reverses the ordering of the vertices in this
//               primitive, if appropriate, in order to change the
//               direction the polygon appears to be facing.  Does not
//               adjust the surface normal, if any.
////////////////////////////////////////////////////////////////////
57
virtual void EggPrimitive::reverse_vertex_ordering(void);

1693 7 cleanup 0 6 2027 21 EggPrimitive::cleanup 0 1 715 550
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::cleanup
//       Access: Published, Virtual
//  Description: Cleans up modeling errors in whatever context this
//               makes sense.  For instance, for a polygon, this calls
//               remove_doubled_verts(true).  For a point, it calls
//               remove_nonunique_verts().  Returns true if the
//               primitive is valid, or false if it is degenerate.
////////////////////////////////////////////////////////////////////
41
virtual bool EggPrimitive::cleanup(void);

1694 20 remove_doubled_verts 0 4 2027 34 EggPrimitive::remove_doubled_verts 0 1 716 945
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::remove_doubled_verts
//       Access: Published
//  Description: Certain kinds of primitives, particularly polygons,
//               don't like to have the same vertex repeated
//               consecutively.  Unfortunately, some modeling programs
//               (like MultiGen) make this an easy mistake to make.
//
//               It's handy to have a function to remove these
//               redundant vertices.  If closed is true, it also
//               checks that the first and last vertices are not the
//               same.
//
//               This function identifies repeated vertices by
//               position only; it does not consider any other
//               properties, such as color or UV, significant in
//               differentiating vertices.
////////////////////////////////////////////////////////////////////
53
void EggPrimitive::remove_doubled_verts(bool closed);

1695 22 remove_nonunique_verts 0 4 2027 36 EggPrimitive::remove_nonunique_verts 0 1 717 541
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::remove_nonunique_verts
//       Access: Published
//  Description: Removes any multiple appearances of the same vertex
//               from the primitive.  This primarily makes sense for a
//               point primitive, which is really a collection of
//               points and which doesn't make sense to include the
//               same point twice, in any order.
////////////////////////////////////////////////////////////////////
48
void EggPrimitive::remove_nonunique_verts(void);

1696 14 has_primitives 0 6 2027 28 EggPrimitive::has_primitives 0 1 718 380
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::has_primitives
//       Access: Published, Virtual
//  Description: Returns true if there are any primitives
//               (e.g. polygons) defined within this group or below,
//               false otherwise.
////////////////////////////////////////////////////////////////////
54
virtual bool EggPrimitive::has_primitives(void) const;

1697 20 joint_has_primitives 0 6 2027 34 EggPrimitive::joint_has_primitives 0 1 719 416
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::joint_has_primitives
//       Access: Published, Virtual
//  Description: Returns true if there are any primitives
//               (e.g. polygons) defined within this group or below,
//               but the search does not include nested joints.
////////////////////////////////////////////////////////////////////
60
virtual bool EggPrimitive::joint_has_primitives(void) const;

1698 11 has_normals 0 6 2027 25 EggPrimitive::has_normals 0 1 720 417
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::has_normals
//       Access: Published, Virtual
//  Description: Returns true if any of the primitives (e.g. polygons)
//               defined within this group or below have either face
//               or vertex normals defined, false otherwise.
////////////////////////////////////////////////////////////////////
51
virtual bool EggPrimitive::has_normals(void) const;

1699 5 clear 0 4 2027 19 EggPrimitive::clear 0 1 721 266
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::clear
//       Access: Published
//  Description: Removes all of the vertices from the primitive.
////////////////////////////////////////////////////////////////////
38
inline void EggPrimitive::clear(void);

1700 10 add_vertex 0 4 2027 24 EggPrimitive::add_vertex 0 1 722 330
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::add_vertex
//       Access: Published
//  Description: Adds the indicated vertex to the end of the
//               primitive's list of vertices, and returns it.
////////////////////////////////////////////////////////////////////
55
EggVertex *EggPrimitive::add_vertex(EggVertex *vertex);

1701 13 remove_vertex 0 4 2027 27 EggPrimitive::remove_vertex 0 1 723 421
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::remove_vertex
//       Access: Published
//  Description: Removes the indicated vertex from the
//               primitive and returns it.  If the vertex was not
//               already in the primitive, does nothing and returns
//               NULL.
////////////////////////////////////////////////////////////////////
58
EggVertex *EggPrimitive::remove_vertex(EggVertex *vertex);

1702 13 copy_vertices 0 4 2027 27 EggPrimitive::copy_vertices 0 1 724 370
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::copy_vertices
//       Access: Published
//  Description: Replaces the current primitive's list of vertices
//               with a copy of the list of vertices on the other
//               primitive.
////////////////////////////////////////////////////////////////////
60
void EggPrimitive::copy_vertices(EggPrimitive const &other);

1703 16 get_num_vertices 0 4 2027 30 EggPrimitive::get_num_vertices 0 1 725 295
// These are shorthands if you don't want to use the iterators.

////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::get_num_vertices
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
54
inline int EggPrimitive::get_num_vertices(void) const;

1704 10 set_vertex 0 4 2027 24 EggPrimitive::set_vertex 0 1 726 445
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::set_vertex
//       Access: Published
//  Description: Replaces a particular vertex based on its index
//               number in the list of vertices.  This is just a
//               convenience function for people who don't want to
//               mess with the iterators.
////////////////////////////////////////////////////////////////////
67
inline void EggPrimitive::set_vertex(int index, EggVertex *vertex);

1705 10 get_vertex 0 4 2027 24 EggPrimitive::get_vertex 0 1 727 277
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::get_vertex
//       Access: Published
//  Description: Returns a particular index based on its index number.
////////////////////////////////////////////////////////////////////
60
inline EggVertex *EggPrimitive::get_vertex(int index) const;

1706 8 get_pool 0 4 2027 22 EggPrimitive::get_pool 0 1 728 368
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::get_pool
//       Access: Published
//  Description: Returns the vertex pool associated with the vertices
//               of the primitive, or NULL if the primitive has no
//               vertices.
////////////////////////////////////////////////////////////////////
57
inline EggVertexPool *EggPrimitive::get_pool(void) const;

1707 5 write 0 6 2027 19 EggPrimitive::write 0 1 729 0
75
virtual void EggPrimitive::write(ostream &out, int indent_level) const = 0;

1708 19 test_vref_integrity 0 4 2027 33 EggPrimitive::test_vref_integrity 0 1 730 0
51
void EggPrimitive::test_vref_integrity(void) const;

1709 14 get_class_type 0 4 2027 28 EggPrimitive::get_class_type 0 1 731 0
53
static TypeHandle EggPrimitive::get_class_type(void);

1710 10 operator = 0 4 2029 33 EggCompositePrimitive::operator = 0 1 738 246
////////////////////////////////////////////////////////////////////
//     Function: EggCompositePrimitive::Copy assignment operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
99
inline EggCompositePrimitive &EggCompositePrimitive::operator =(EggCompositePrimitive const &copy);

1711 18 get_num_components 0 4 2029 41 EggCompositePrimitive::get_num_components 0 1 739 410
////////////////////////////////////////////////////////////////////
//     Function: EggCompositePrimitive::get_num_components
//       Access: Published
//  Description: Returns the number of individual component triangles
//               within the composite.  Each one of these might have a
//               different set of attributes.
////////////////////////////////////////////////////////////////////
65
inline int EggCompositePrimitive::get_num_components(void) const;

1712 13 get_component 0 4 2029 36 EggCompositePrimitive::get_component 0 2 740 741 616
////////////////////////////////////////////////////////////////////
//     Function: EggCompositePrimitive::get_component
//       Access: Published
//  Description: Returns the attributes for the nth component
//               triangle.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggCompositePrimitive::get_component
//       Access: Published
//  Description: Returns the attributes for the nth component
//               triangle.
////////////////////////////////////////////////////////////////////
145
inline EggAttributes const *EggCompositePrimitive::get_component(int i) const;
inline EggAttributes *EggCompositePrimitive::get_component(int i);

1713 13 set_component 0 4 2029 36 EggCompositePrimitive::set_component 0 1 742 307
////////////////////////////////////////////////////////////////////
//     Function: EggCompositePrimitive::set_component
//       Access: Published
//  Description: Changes the attributes for the nth component
//               triangle.
////////////////////////////////////////////////////////////////////
85
inline void EggCompositePrimitive::set_component(int i, EggAttributes const *attrib);

1714 16 triangulate_into 0 4 2029 39 EggCompositePrimitive::triangulate_into 0 1 743 678
////////////////////////////////////////////////////////////////////
//     Function: EggCompositePrimitive::triangulate_into
//       Access: Published
//  Description: Subdivides the composite primitive into triangles and
//               adds those triangles to the indicated container.
//               Does not remove the primitive from its existing
//               parent or modify it in any way.
//
//               Returns true if the triangulation is successful, or
//               false if there was some error (in which case the
//               container may contain some partial triangulation).
////////////////////////////////////////////////////////////////////
83
inline bool EggCompositePrimitive::triangulate_into(EggGroupNode *container) const;

1715 20 triangulate_in_place 0 4 2029 43 EggCompositePrimitive::triangulate_in_place 0 1 744 830
////////////////////////////////////////////////////////////////////
//     Function: EggCompositePrimitive::triangulate_in_place
//       Access: Published
//  Description: Subdivides the composite primitive into triangles and
//               adds those triangles to the parent group node in
//               place of the original primitive.  Returns a pointer
//               to the original primitive, which is likely about to
//               be destructed.
//
//               If convex_also is true, both concave and convex
//               polygons will be subdivided into triangles;
//               otherwise, only concave polygons will be subdivided,
//               and convex polygons will be copied unchanged into the
//               container.
////////////////////////////////////////////////////////////////////
85
PointerTo< EggCompositePrimitive > EggCompositePrimitive::triangulate_in_place(void);

1716 14 get_class_type 0 4 2029 37 EggCompositePrimitive::get_class_type 0 1 745 0
62
static TypeHandle EggCompositePrimitive::get_class_type(void);

1717 7 EggData 0 4 2030 16 EggData::EggData 0 2 746 747 439
////////////////////////////////////////////////////////////////////
//     Function: EggData::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggData::Copy constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
76
inline EggData::EggData(void);
inline EggData::EggData(EggData const &copy);

1718 10 operator = 0 4 2030 19 EggData::operator = 0 1 748 229
////////////////////////////////////////////////////////////////////
//     Function: EggData::Copy assignment operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
57
inline EggData &EggData::operator =(EggData const &copy);

1719 20 resolve_egg_filename 0 4 2030 29 EggData::resolve_egg_filename 0 1 749 479
////////////////////////////////////////////////////////////////////
//     Function: EggData::resolve_egg_filename
//       Access: Public, Static
//  Description: Looks for the indicated filename, first along the
//               indicated searchpath, and then along the model_path.
//               If found, updates the filename to the full path and
//               returns true; otherwise, returns false.
////////////////////////////////////////////////////////////////////
113
static bool EggData::resolve_egg_filename(Filename &egg_filename, DSearchPath const &searchpath = DSearchPath());

1720 4 read 0 4 2030 13 EggData::read 0 2 750 751 1348
////////////////////////////////////////////////////////////////////
//     Function: EggData::read
//       Access: Public
//  Description: Opens the indicated filename and reads the egg data
//               contents from it.  Returns true if the file was
//               successfully opened and read, false if there were
//               some errors, in which case the data may be partially
//               read.
//
//               error is the output stream to which to write error
//               messages.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggData::read
//       Access: Public
//  Description: Parses the egg syntax contained in the indicated
//               input stream.  Returns true if the stream was a
//               completely valid egg file, false if there were some
//               errors, in which case the data may be partially read.
//
//               Before you call this routine, you should probably
//               call set_egg_filename() to set the name of the egg
//               file we're processing, if at all possible.  If there
//               is no such filename, you may set it to the empty
//               string.
////////////////////////////////////////////////////////////////////
103
bool EggData::read(Filename filename, string display_name = string());
bool EggData::read(istream &in);

1721 5 merge 0 4 2030 14 EggData::merge 0 1 752 324
////////////////////////////////////////////////////////////////////
//     Function: EggData::merge
//       Access: Public
//  Description: Appends the other egg structure to the end of this
//               one.  The other egg structure is invalidated.
////////////////////////////////////////////////////////////////////
36
void EggData::merge(EggData &other);

1722 14 load_externals 0 4 2030 23 EggData::load_externals 0 2 753 754 1314
////////////////////////////////////////////////////////////////////
//     Function: EggData::load_externals
//       Access: Public
//  Description: Loads up all the egg files referenced by <File>
//               entries within the egg structure, and inserts their
//               contents in place of the <File> entries.  Searches
//               for files in the searchpath, if not found directly,
//               and writes error messages to the indicated output
//               stream.  Returns true if all externals were loaded
//               successfully, false otherwise.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggData::load_externals
//       Access: Public
//  Description: Loads up all the egg files referenced by <File>
//               entries within the egg structure, and inserts their
//               contents in place of the <File> entries.  Searches
//               for files in the searchpath, if not found directly,
//               and writes error messages to the indicated output
//               stream.  Returns true if all externals were loaded
//               successfully, false otherwise.
////////////////////////////////////////////////////////////////////
161
bool EggData::load_externals(DSearchPath const &searchpath = DSearchPath());
bool EggData::load_externals(DSearchPath const &searchpath, BamCacheRecord *record);

1723 28 collapse_equivalent_textures 0 4 2030 37 EggData::collapse_equivalent_textures 0 1 755 608
////////////////////////////////////////////////////////////////////
//     Function: EggData::collapse_equivalent_textures
//       Access: Public
//  Description: Removes duplicate references to the same texture
//               image with the same properties.  Considers two
//               texture references with identical properties, but
//               different tref names, to be equivalent, and collapses
//               them, choosing one tref name to keep arbitrarily.
//               Returns the number of textures removed.
////////////////////////////////////////////////////////////////////
48
int EggData::collapse_equivalent_textures(void);

1724 29 collapse_equivalent_materials 0 4 2030 38 EggData::collapse_equivalent_materials 0 1 756 607
////////////////////////////////////////////////////////////////////
//     Function: EggData::collapse_equivalent_materials
//       Access: Public
//  Description: Removes duplicate references to the same material
//               with the same properties.  Considers two material
//               references with identical properties, but different
//               mref names, to be equivalent, and collapses them,
//               choosing one mref name to keep arbitrarily.  Returns
//               the number of materials removed.
////////////////////////////////////////////////////////////////////
49
int EggData::collapse_equivalent_materials(void);

1725 9 write_egg 0 4 2030 18 EggData::write_egg 0 2 757 758 532
////////////////////////////////////////////////////////////////////
//     Function: EggData::write_egg
//       Access: Public
//  Description: The main interface for writing complete egg files.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggData::write_egg
//       Access: Public
//  Description: The main interface for writing complete egg files.
////////////////////////////////////////////////////////////////////
82
bool EggData::write_egg(Filename filename);
bool EggData::write_egg(ostream &out);

1726 26 set_auto_resolve_externals 0 4 2030 35 EggData::set_auto_resolve_externals 0 1 759 399
////////////////////////////////////////////////////////////////////
//     Function: EggData::set_auto_resolve_externals
//       Access: Public
//  Description: Indicates whether the EggData object will
//               automatically resolve any external references when
//               read() is called.  The default is false.
////////////////////////////////////////////////////////////////////
62
inline void EggData::set_auto_resolve_externals(bool resolve);

1727 26 get_auto_resolve_externals 0 4 2030 35 EggData::get_auto_resolve_externals 0 1 760 399
////////////////////////////////////////////////////////////////////
//     Function: EggData::get_auto_resolve_externals
//       Access: Public
//  Description: Indicates whether the EggData object will
//               automatically resolve any external references when
//               read() is called.  The default is false.
////////////////////////////////////////////////////////////////////
60
inline bool EggData::get_auto_resolve_externals(void) const;

1728 31 original_had_absolute_pathnames 0 4 2030 40 EggData::original_had_absolute_pathnames 0 1 761 741
////////////////////////////////////////////////////////////////////
//     Function: EggData::original_had_absolute_pathnames
//       Access: Public
//  Description: Returns true if the data processed in the last call
//               to read() contained absolute pathnames, or false if
//               those pathnames were all relative.
//
//               This method is necessary because if
//               auto_resolve_externals() is in effect, it may modify
//               the pathnames to be absolute whether or not they were
//               as loaded from disk.  This method can be used to
//               query the state of the original egg file from disk.
////////////////////////////////////////////////////////////////////
65
inline bool EggData::original_had_absolute_pathnames(void) const;

1729 21 set_coordinate_system 0 4 2030 30 EggData::set_coordinate_system 0 1 762 403
////////////////////////////////////////////////////////////////////
//     Function: EggData::set_coordinate_system
//       Access: Public
//  Description: Changes the coordinate system of the EggData.  If the
//               coordinate system was previously different, this may
//               result in a conversion of the data.
////////////////////////////////////////////////////////////////////
63
void EggData::set_coordinate_system(CoordinateSystem coordsys);

1730 21 get_coordinate_system 0 4 2030 30 EggData::get_coordinate_system 0 1 763 307
////////////////////////////////////////////////////////////////////
//     Function: EggData::get_coordinate_system
//       Access: Public
//  Description: Returns the coordinate system in which the egg file
//               is defined.
////////////////////////////////////////////////////////////////////
67
inline CoordinateSystem EggData::get_coordinate_system(void) const;

1731 16 set_egg_filename 0 4 2030 25 EggData::set_egg_filename 0 1 764 392
////////////////////////////////////////////////////////////////////
//     Function: EggData::set_egg_filename
//       Access: Public
//  Description: Sets the filename--especially the directory part--in
//               which the egg file is considered to reside.  This is
//               also implicitly set by read().
////////////////////////////////////////////////////////////////////
68
inline void EggData::set_egg_filename(Filename const &egg_filename);

1732 16 get_egg_filename 0 4 2030 25 EggData::get_egg_filename 0 1 765 307
////////////////////////////////////////////////////////////////////
//     Function: EggData::get_egg_filename
//       Access: Public
//  Description: Returns the directory in which the egg file is
//               considered to reside.
////////////////////////////////////////////////////////////////////
61
inline Filename const &EggData::get_egg_filename(void) const;

1733 17 set_egg_timestamp 0 4 2030 26 EggData::set_egg_timestamp 0 1 766 379
////////////////////////////////////////////////////////////////////
//     Function: EggData::set_egg_timestamp
//       Access: Public
//  Description: Sets the timestamp of the egg file on disk, at the
//               time it was opened for reading.  This is also
//               implicitly set by read().
////////////////////////////////////////////////////////////////////
61
inline void EggData::set_egg_timestamp(time_t egg_timestamp);

1734 17 get_egg_timestamp 0 4 2030 26 EggData::get_egg_timestamp 0 1 767 385
////////////////////////////////////////////////////////////////////
//     Function: EggData::get_egg_timestamp
//       Access: Public
//  Description: Returns the timestamp of the egg file on disk, at the
//               time it was opened for reading, or 0 if this
//               information is not available.
////////////////////////////////////////////////////////////////////
53
inline time_t EggData::get_egg_timestamp(void) const;

1735 24 recompute_vertex_normals 0 4 2030 33 EggData::recompute_vertex_normals 0 1 768 1124
////////////////////////////////////////////////////////////////////
//     Function: EggData::recompute_vertex_normals
//       Access: Public
//  Description: Recomputes all the vertex normals for polygon
//               geometry at this group node and below so that they
//               accurately reflect the vertex positions.  A shared
//               edge between two polygons (even in different groups)
//               is considered smooth if the angle between the two
//               edges is less than threshold degrees.
//
//               This function also removes degenerate polygons that
//               do not have enough vertices to define a normal.  It
//               does not affect normals for other kinds of primitives
//               like Nurbs or Points.
//
//               This function does not remove or adjust vertices in
//               the vertex pool; it only adds new vertices with the
//               correct normals.  Thus, it is a good idea to call
//               remove_unused_vertices() after calling this.
////////////////////////////////////////////////////////////////////
64
inline void EggData::recompute_vertex_normals(double threshold);

1736 25 recompute_polygon_normals 0 4 2030 34 EggData::recompute_polygon_normals 0 1 769 1069
////////////////////////////////////////////////////////////////////
//     Function: EggData::recompute_polygon_normals
//       Access: Public
//  Description: Recomputes all the polygon normals for polygon
//               geometry at this group node and below so that they
//               accurately reflect the vertex positions.  Normals are
//               removed from the vertices and defined only on
//               polygons, giving the geometry a faceted appearance.
//
//               This function also removes degenerate polygons that
//               do not have enough vertices to define a normal.  It
//               does not affect normals for other kinds of primitives
//               like Nurbs or Points.
//
//               This function does not remove or adjust vertices in
//               the vertex pool; it only adds new vertices with the
//               normals removed.  Thus, it is a good idea to call
//               remove_unused_vertices() after calling this.
////////////////////////////////////////////////////////////////////
53
inline void EggData::recompute_polygon_normals(void);

1737 13 strip_normals 0 4 2030 22 EggData::strip_normals 0 1 770 598
////////////////////////////////////////////////////////////////////
//     Function: EggData::strip_normals
//       Access: Public
//  Description: Removes all normals from primitives, and the vertices
//               they reference, at this node and below.
//
//               This function does not remove or adjust vertices in
//               the vertex pool; it only adds new vertices with the
//               normal removed.  Thus, it is a good idea to call
//               remove_unused_vertices() after calling this.
////////////////////////////////////////////////////////////////////
41
inline void EggData::strip_normals(void);

1738 14 get_class_type 0 4 2030 23 EggData::get_class_type 0 1 771 0
48
static TypeHandle EggData::get_class_type(void);

1739 8 ~EggData 0 4 2030 17 EggData::~EggData 0 0 0
24
EggData::~EggData(void);

1740 19 EggCoordinateSystem 0 4 2031 40 EggCoordinateSystem::EggCoordinateSystem 0 2 772 773 463
////////////////////////////////////////////////////////////////////
//     Function: EggCoordinateSystem::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggCoordinateSystem::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
169
inline EggCoordinateSystem::EggCoordinateSystem(CoordinateSystem value = ::CS_default);
inline EggCoordinateSystem::EggCoordinateSystem(EggCoordinateSystem const &copy);

1741 9 set_value 0 4 2031 30 EggCoordinateSystem::set_value 0 1 774 226
////////////////////////////////////////////////////////////////////
//     Function: EggCoordinateSystem::set_value
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
67
inline void EggCoordinateSystem::set_value(CoordinateSystem value);

1742 9 get_value 0 4 2031 30 EggCoordinateSystem::get_value 0 1 775 226
////////////////////////////////////////////////////////////////////
//     Function: EggCoordinateSystem::set_value
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
67
inline CoordinateSystem EggCoordinateSystem::get_value(void) const;

1743 14 get_class_type 0 4 2031 35 EggCoordinateSystem::get_class_type 0 1 776 0
60
static TypeHandle EggCoordinateSystem::get_class_type(void);

1744 20 ~EggCoordinateSystem 0 4 2031 41 EggCoordinateSystem::~EggCoordinateSystem 0 0 0
48
EggCoordinateSystem::~EggCoordinateSystem(void);

1745 10 operator = 0 4 2032 20 EggCurve::operator = 0 1 777 230
////////////////////////////////////////////////////////////////////
//     Function: EggCurve::Copy assignment operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
60
inline EggCurve &EggCurve::operator =(EggCurve const &copy);

1746 10 set_subdiv 0 4 2032 20 EggCurve::set_subdiv 0 1 778 559
////////////////////////////////////////////////////////////////////
//     Function: EggCurve::set_subdiv
//       Access: Public
//  Description: Sets the number of subdivisions that will be
//               requested across the curve.  (This doesn't necessary
//               guarantee that this number of subdivisions will be
//               made; it's just a hint to any curve renderer or quick
//               tesselator.)  Set the number to 0 to disable the
//               hint.
////////////////////////////////////////////////////////////////////
45
inline void EggCurve::set_subdiv(int subdiv);

1747 10 get_subdiv 0 4 2032 20 EggCurve::get_subdiv 0 1 779 335
////////////////////////////////////////////////////////////////////
//     Function: EggCurve::get_subdiv
//       Access: Public
//  Description: Returns the requested number of subdivisions, or 0 if
//               no particular subdivisions have been requested.
////////////////////////////////////////////////////////////////////
44
inline int EggCurve::get_subdiv(void) const;

1748 14 set_curve_type 0 4 2032 24 EggCurve::set_curve_type 0 1 780 367
////////////////////////////////////////////////////////////////////
//     Function: EggCurve::set_curve_type
//       Access: Public
//  Description: Sets the type of the curve.  This is primarily used
//               as a hint to any code that may need to deal with this
//               curve.
////////////////////////////////////////////////////////////////////
63
inline void EggCurve::set_curve_type(EggCurve::CurveType type);

1749 14 get_curve_type 0 4 2032 24 EggCurve::get_curve_type 0 1 781 261
////////////////////////////////////////////////////////////////////
//     Function: EggCurve::get_curve_type
//       Access: Public
//  Description: Returns the indicated type of the curve.
////////////////////////////////////////////////////////////////////
64
inline EggCurve::CurveType EggCurve::get_curve_type(void) const;

1750 17 string_curve_type 0 4 2032 27 EggCurve::string_curve_type 0 1 782 412
////////////////////////////////////////////////////////////////////
//     Function: EggCurve::string_curve_type
//       Access: Public, Static
//  Description: Returns the CurveType value associated with the given
//               string representation, or CT_invalid if the string
//               does not match any known CurveType value.
////////////////////////////////////////////////////////////////////
77
static EggCurve::CurveType EggCurve::string_curve_type(string const &string);

1751 14 get_class_type 0 4 2032 24 EggCurve::get_class_type 0 1 783 0
49
static TypeHandle EggCurve::get_class_type(void);

1752 9 ~EggCurve 0 4 2032 19 EggCurve::~EggCurve 0 0 0
26
EggCurve::~EggCurve(void);

1753 20 EggExternalReference 0 4 2034 42 EggExternalReference::EggExternalReference 0 2 784 785 465
////////////////////////////////////////////////////////////////////
//     Function: EggExternalReference::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggExternalReference::Copy constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
170
EggExternalReference::EggExternalReference(string const &node_name, string const &filename);
EggExternalReference::EggExternalReference(EggExternalReference const &copy);

1754 10 operator = 0 4 2034 32 EggExternalReference::operator = 0 1 786 242
////////////////////////////////////////////////////////////////////
//     Function: EggExternalReference::Copy assignment operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
89
EggExternalReference &EggExternalReference::operator =(EggExternalReference const &copy);

1755 14 get_class_type 0 4 2034 36 EggExternalReference::get_class_type 0 1 787 0
61
static TypeHandle EggExternalReference::get_class_type(void);

1756 21 ~EggExternalReference 0 4 2034 43 EggExternalReference::~EggExternalReference 0 0 0
50
EggExternalReference::~EggExternalReference(void);

1757 5 clear 0 4 2035 24 EggNameUniquifier::clear 0 1 788 313
////////////////////////////////////////////////////////////////////
//     Function: EggNameUniquifier::clear
//       Access: Public
//  Description: Empties the table of used named and prepares the
//               Uniquifier for a new tree.
////////////////////////////////////////////////////////////////////
36
void EggNameUniquifier::clear(void);

1758 8 uniquify 0 4 2035 27 EggNameUniquifier::uniquify 0 1 789 269
////////////////////////////////////////////////////////////////////
//     Function: EggNameUniquifier::uniquify
//       Access: Public
//  Description: Begins the traversal from the indicated node.
////////////////////////////////////////////////////////////////////
48
void EggNameUniquifier::uniquify(EggNode *node);

1759 8 get_node 0 4 2035 27 EggNameUniquifier::get_node 0 1 790 341
////////////////////////////////////////////////////////////////////
//     Function: EggNameUniquifier::get_node
//       Access: Public
//  Description: Returns the node associated with the given category
//               and name, or NULL if the name has not been used.
////////////////////////////////////////////////////////////////////
87
EggNode *EggNameUniquifier::get_node(string const &category, string const &name) const;

1760 8 has_name 0 4 2035 27 EggNameUniquifier::has_name 0 1 791 332
////////////////////////////////////////////////////////////////////
//     Function: EggNameUniquifier::has_name
//       Access: Public
//  Description: Returns true if the name has been used for the
//               indicated category already, false otherwise.
////////////////////////////////////////////////////////////////////
83
bool EggNameUniquifier::has_name(string const &category, string const &name) const;

1761 8 add_name 0 4 2035 27 EggNameUniquifier::add_name 0 1 792 477
////////////////////////////////////////////////////////////////////
//     Function: EggNameUniquifier::add_name
//       Access: Public
//  Description: Adds the name to the indicated category.  This name
//               will not be used for any other egg node within this
//               category.  Returns true if the name was added, or
//               false if it was already in use for the category.
////////////////////////////////////////////////////////////////////
96
bool EggNameUniquifier::add_name(string const &category, string const &name, EggNode *node = 0);

1762 12 get_category 0 6 2035 31 EggNameUniquifier::get_category 0 1 793 0
66
virtual string EggNameUniquifier::get_category(EggNode *node) = 0;

1763 11 filter_name 0 6 2035 30 EggNameUniquifier::filter_name 0 1 794 487
////////////////////////////////////////////////////////////////////
//     Function: EggNameUniquifier::filter_name
//       Access: Public, Virtual
//  Description: Returns the name of the given node, or at least the
//               name it should be.  This provides a hook to adjust
//               the name before attempting to uniquify it, if
//               desired, for instance to remove invalid characters.
////////////////////////////////////////////////////////////////////
61
virtual string EggNameUniquifier::filter_name(EggNode *node);

1764 13 generate_name 0 6 2035 32 EggNameUniquifier::generate_name 0 1 795 682
////////////////////////////////////////////////////////////////////
//     Function: EggNameUniquifier::generate_name
//       Access: Public, Virtual
//  Description: Generates a new name for the given node when its
//               existing name clashes with some other node.  This
//               function will be called repeatedly, if necessary,
//               until it returns a name that actually is unique.
//
//               The category is the string returned by
//               get_category(), and index is a uniquely-generated
//               number that may be useful for synthesizing the name.
////////////////////////////////////////////////////////////////////
98
virtual string EggNameUniquifier::generate_name(EggNode *node, string const &category, int index);

1765 14 get_class_type 0 4 2035 33 EggNameUniquifier::get_class_type 0 1 796 0
58
static TypeHandle EggNameUniquifier::get_class_type(void);

1766 18 EggGroupUniquifier 0 4 2036 38 EggGroupUniquifier::EggGroupUniquifier 0 1 797 530
////////////////////////////////////////////////////////////////////
//     Function: EggGroupUniquifier::Constructor
//       Access: Public
//  Description: If filter_names is true, then the group names will be
//               coerced into a fairly safe, standard convention that
//               uses no characters other than a-z, A-Z, 0-9, and
//               underscore.  If filter_names is false, the group
//               names will be left unchanged.
////////////////////////////////////////////////////////////////////
62
EggGroupUniquifier::EggGroupUniquifier(bool filter_names = 1);

1767 14 get_class_type 0 4 2036 34 EggGroupUniquifier::get_class_type 0 1 798 0
59
static TypeHandle EggGroupUniquifier::get_class_type(void);

1768 19 ~EggGroupUniquifier 0 4 2036 39 EggGroupUniquifier::~EggGroupUniquifier 0 0 0
46
EggGroupUniquifier::~EggGroupUniquifier(void);

1769 7 EggLine 0 4 2037 16 EggLine::EggLine 0 2 799 800 439
////////////////////////////////////////////////////////////////////
//     Function: EggLine::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggLine::Copy constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
95
inline EggLine::EggLine(string const &name = "");
inline EggLine::EggLine(EggLine const &copy);

1770 10 operator = 0 4 2037 19 EggLine::operator = 0 1 801 229
////////////////////////////////////////////////////////////////////
//     Function: EggLine::Copy assignment operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
57
inline EggLine &EggLine::operator =(EggLine const &copy);

1771 9 has_thick 0 4 2037 18 EggLine::has_thick 0 1 802 217
////////////////////////////////////////////////////////////////////
//     Function: EggLine::has_thick
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
43
inline bool EggLine::has_thick(void) const;

1772 9 get_thick 0 4 2037 18 EggLine::get_thick 0 1 803 328
////////////////////////////////////////////////////////////////////
//     Function: EggLine::get_thick
//       Access: Published
//  Description: Returns the thickness set on this particular line.
//               If there is no thickness set, returns 1.0.
////////////////////////////////////////////////////////////////////
45
inline double EggLine::get_thick(void) const;

1773 9 set_thick 0 4 2037 18 EggLine::set_thick 0 1 804 217
////////////////////////////////////////////////////////////////////
//     Function: EggLine::set_thick
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
45
inline void EggLine::set_thick(double thick);

1774 11 clear_thick 0 4 2037 20 EggLine::clear_thick 0 1 805 219
////////////////////////////////////////////////////////////////////
//     Function: EggLine::clear_thick
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
39
inline void EggLine::clear_thick(void);

1775 14 get_class_type 0 4 2037 23 EggLine::get_class_type 0 1 806 0
48
static TypeHandle EggLine::get_class_type(void);

1776 21 EggMaterialCollection 0 4 2038 44 EggMaterialCollection::EggMaterialCollection 0 2 807 808 467
////////////////////////////////////////////////////////////////////
//     Function: EggMaterialCollection::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggMaterialCollection::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
132
EggMaterialCollection::EggMaterialCollection(void);
EggMaterialCollection::EggMaterialCollection(EggMaterialCollection const &copy);

1777 10 operator = 0 4 2038 33 EggMaterialCollection::operator = 0 1 809 243
////////////////////////////////////////////////////////////////////
//     Function: EggMaterialCollection::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
92
EggMaterialCollection &EggMaterialCollection::operator =(EggMaterialCollection const &copy);

1778 22 ~EggMaterialCollection 0 4 2038 45 EggMaterialCollection::~EggMaterialCollection 0 0 229
////////////////////////////////////////////////////////////////////
//     Function: EggMaterialCollection::Destructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
52
EggMaterialCollection::~EggMaterialCollection(void);

1779 5 clear 0 4 2038 28 EggMaterialCollection::clear 0 1 810 267
////////////////////////////////////////////////////////////////////
//     Function: EggMaterialCollection::clear
//       Access: Public
//  Description: Removes all materials from the collection.
////////////////////////////////////////////////////////////////////
40
void EggMaterialCollection::clear(void);

1780 17 extract_materials 0 4 2038 40 EggMaterialCollection::extract_materials 0 1 811 483
////////////////////////////////////////////////////////////////////
//     Function: EggMaterialCollection::extract_materials
//       Access: Public
//  Description: Walks the egg hierarchy beginning at the indicated
//               node, and removes any EggMaterials encountered in the
//               hierarchy, adding them to the collection.  Returns
//               the number of EggMaterials encountered.
////////////////////////////////////////////////////////////////////
65
int EggMaterialCollection::extract_materials(EggGroupNode *node);

1781 19 find_used_materials 0 4 2038 42 EggMaterialCollection::find_used_materials 0 1 812 1402
////////////////////////////////////////////////////////////////////
//     Function: EggMaterialCollection::find_used_materials
//       Access: Public
//  Description: Walks the egg hierarchy beginning at the indicated
//               node, looking for materials that are referenced by
//               primitives but are not already members of the
//               collection, adding them to the collection.
//
//               If this is called following extract_materials(), it
//               can be used to pick up any additional material
//               references that appeared in the egg hierarchy (but
//               whose EggMaterial node was not actually part of the
//               hierarchy).
//
//               If this is called in lieu of extract_materials(), it
//               will fill up the collection with all of the
//               referenced materials (and only the referenced
//               materials), without destructively removing the
//               EggMaterials from the hierarchy.
//
//               This also has the side effect of incrementing the
//               internal usage count for a material in the collection
//               each time a material reference is encountered.  This
//               side effect is taken advantage of by
//               remove_unused_materials().
////////////////////////////////////////////////////////////////////
62
int EggMaterialCollection::find_used_materials(EggNode *node);

1782 23 remove_unused_materials 0 4 2038 46 EggMaterialCollection::remove_unused_materials 0 1 813 574
////////////////////////////////////////////////////////////////////
//     Function: EggMaterialCollection::remove_unused_materials
//       Access: Public
//  Description: Removes any materials from the collection that aren't
//               referenced by any primitives in the indicated egg
//               hierarchy.  This also, incidentally, adds materials to
//               the collection that had been referenced by primitives
//               but had not previously appeared in the collection.
////////////////////////////////////////////////////////////////////
67
void EggMaterialCollection::remove_unused_materials(EggNode *node);

1783 29 collapse_equivalent_materials 0 4 2038 52 EggMaterialCollection::collapse_equivalent_materials 0 2 814 815 1793
////////////////////////////////////////////////////////////////////
//     Function: EggMaterialCollection::collapse_equivalent_materials
//       Access: Public
//  Description: Walks through the collection and collapses together
//               any separate materials that are equivalent according
//               to the indicated equivalence factor, eq (see
//               EggMaterial::is_equivalent_to()).  The return value is
//               the number of materials removed.
//
//               This flavor of collapse_equivalent_materials()
//               automatically adjusts all the primitives in the egg
//               hierarchy to refer to the new material pointers.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggMaterialCollection::collapse_equivalent_materials
//       Access: Public
//  Description: Walks through the collection and collapses together
//               any separate materials that are equivalent according
//               to the indicated equivalence factor, eq (see
//               EggMaterial::is_equivalent_to()).  The return value is
//               the number of materials removed.
//
//               This flavor of collapse_equivalent_materials() does
//               not adjust any primitives in the egg hierarchy;
//               instead, it fills up the 'removed' map with an entry
//               for each removed material, mapping it back to the
//               equivalent retained material.  It's up to the user to
//               then call replace_materials() with this map, if
//               desired, to apply these changes to the egg hierarchy.
////////////////////////////////////////////////////////////////////
204
int EggMaterialCollection::collapse_equivalent_materials(int eq, EggGroupNode *node);
int EggMaterialCollection::collapse_equivalent_materials(int eq, EggMaterialCollection::MaterialReplacement &removed);

1784 17 replace_materials 0 4 2038 40 EggMaterialCollection::replace_materials 0 1 816 606
////////////////////////////////////////////////////////////////////
//     Function: EggMaterialCollection::replace_materials
//       Access: Public, Static
//  Description: Walks the egg hierarchy, changing out any reference
//               to a material appearing on the left side of the map
//               with its corresponding material on the right side.
//               This is most often done following a call to
//               collapse_equivalent_materials().  It does not directly
//               affect the Collection.
////////////////////////////////////////////////////////////////////
132
static void EggMaterialCollection::replace_materials(EggGroupNode *node, EggMaterialCollection::MaterialReplacement const &replace);

1785 14 uniquify_mrefs 0 4 2038 37 EggMaterialCollection::uniquify_mrefs 0 1 817 386
////////////////////////////////////////////////////////////////////
//     Function: EggMaterialCollection::uniquify_mrefs
//       Access: Public
//  Description: Guarantees that each material in the collection has a
//               unique MRef name.  This is essential before writing
//               an egg file.
////////////////////////////////////////////////////////////////////
49
void EggMaterialCollection::uniquify_mrefs(void);

1786 12 sort_by_mref 0 4 2038 35 EggMaterialCollection::sort_by_mref 0 1 818 406
////////////////////////////////////////////////////////////////////
//     Function: EggMaterialCollection::sort_by_mref
//       Access: Public
//  Description: Sorts all the materials into alphabetical order by
//               MRef name.  Subsequent operations using begin()/end()
//               will traverse in this sorted order.
////////////////////////////////////////////////////////////////////
47
void EggMaterialCollection::sort_by_mref(void);

1787 12 add_material 0 4 2038 35 EggMaterialCollection::add_material 0 1 819 413
////////////////////////////////////////////////////////////////////
//     Function: EggMaterialCollection::add_material
//       Access: Public
//  Description: Explicitly adds a new material to the collection.
//               Returns true if the material was added, false if it
//               was already there or if there was some error.
////////////////////////////////////////////////////////////////////
64
bool EggMaterialCollection::add_material(EggMaterial *material);

1788 15 remove_material 0 4 2038 38 EggMaterialCollection::remove_material 0 1 820 414
////////////////////////////////////////////////////////////////////
//     Function: EggMaterialCollection::remove_material
//       Access: Public
//  Description: Explicitly removes a material from the collection.
//               Returns true if the material was removed, false if it
//               wasn't there or if there was some error.
////////////////////////////////////////////////////////////////////
67
bool EggMaterialCollection::remove_material(EggMaterial *material);

1789 22 create_unique_material 0 4 2038 45 EggMaterialCollection::create_unique_material 0 1 821 700
// create_unique_material() creates a new material if there is not
// already one equivalent (according to eq, see
// EggMaterial::is_equivalent_to()) to the indicated material, or
// returns the existing one if there is.

////////////////////////////////////////////////////////////////////
//     Function: EggMaterialCollection::create_unique_material
//       Access: Public
//  Description: Creates a new material if there is not already one
//               equivalent (according to eq, see
//               EggMaterial::is_equivalent_to()) to the indicated
//               material, or returns the existing one if there is.
////////////////////////////////////////////////////////////////////
92
EggMaterial *EggMaterialCollection::create_unique_material(EggMaterial const &copy, int eq);

1790 9 find_mref 0 4 2038 32 EggMaterialCollection::find_mref 0 1 822 377
// Find a material with a particular MRef name.

////////////////////////////////////////////////////////////////////
//     Function: EggMaterialCollection::find_mref
//       Access: Public
//  Description: Returns the material with the indicated MRef name, or
//               NULL if no material matches.
////////////////////////////////////////////////////////////////////
77
EggMaterial *EggMaterialCollection::find_mref(string const &mref_name) const;

1791 10 EggPolygon 0 4 2039 22 EggPolygon::EggPolygon 0 2 823 824 451
////////////////////////////////////////////////////////////////////
//     Function: EggPolygon::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggPolygon::Copy constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
110
inline EggPolygon::EggPolygon(string const &name = "");
inline EggPolygon::EggPolygon(EggPolygon const &copy);

1792 10 operator = 0 4 2039 22 EggPolygon::operator = 0 1 825 235
////////////////////////////////////////////////////////////////////
//     Function: EggPolygon::Copy assignment operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
66
inline EggPolygon &EggPolygon::operator =(EggPolygon const &copy);

1793 16 calculate_normal 0 4 2039 28 EggPolygon::calculate_normal 0 1 826 678
////////////////////////////////////////////////////////////////////
//     Function: EggPolygon::calculate_normal
//       Access: Published
//  Description: Calculates the true polygon normal--the vector
//               pointing out of the front of the polygon--based on
//               the vertices.  This does not return or change the
//               polygon's normal as set via set_normal().
//
//               The return value is true if the normal is computed
//               correctly, or false if the polygon is degenerate and
//               does not have at least three noncollinear vertices.
////////////////////////////////////////////////////////////////////
94
bool EggPolygon::calculate_normal(LNormald &result, CoordinateSystem cs = ::CS_default) const;

1794 9 is_planar 0 4 2039 21 EggPolygon::is_planar 0 1 827 327
////////////////////////////////////////////////////////////////////
//     Function: EggPolygon::is_planar
//       Access: Published
//  Description: Returns true if all of the polygon's vertices lie
//               within the same plane, false otherwise.
////////////////////////////////////////////////////////////////////
39
bool EggPolygon::is_planar(void) const;

1795 24 recompute_polygon_normal 0 4 2039 36 EggPolygon::recompute_polygon_normal 0 1 828 480
////////////////////////////////////////////////////////////////////
//     Function: EggPolygon::recompute_polygon_normal
//       Access: Published
//  Description: Recalculates the normal according to the order of the
//               vertices, and sets it.  Returns true if the normal is
//               computed correctly, or false if the polygon is
//               degenerate and does not have a normal.
////////////////////////////////////////////////////////////////////
85
inline bool EggPolygon::recompute_polygon_normal(CoordinateSystem cs = ::CS_default);

1796 16 triangulate_into 0 4 2039 28 EggPolygon::triangulate_into 0 1 829 1053
////////////////////////////////////////////////////////////////////
//     Function: EggPolygon::triangulate_into
//       Access: Published
//  Description: Subdivides the polygon into triangles and adds each
//               one to the indicated container.  If the polygon is
//               already a triangle, adds an exact copy of the polygon
//               to the container.  Does not remove the polygon from
//               its existing parent or modify it in any way.
//
//               Returns true if the triangulation is successful, or
//               false if there was some error (in which case the
//               container may contain some partial triangulation).
//
//               If convex_also is true, both concave and convex
//               polygons will be subdivided into triangles;
//               otherwise, only concave polygons will be subdivided,
//               and convex polygons will be copied unchanged into the
//               container.
////////////////////////////////////////////////////////////////////
90
inline bool EggPolygon::triangulate_into(EggGroupNode *container, bool convex_also) const;

1797 20 triangulate_in_place 0 4 2039 32 EggPolygon::triangulate_in_place 0 1 830 786
////////////////////////////////////////////////////////////////////
//     Function: EggPolygon::triangulate_in_place
//       Access: Published
//  Description: Subdivides the polygon into triangles and adds those
//               triangles to the parent group node in place of the
//               original polygon.  Returns a pointer to the original
//               polygon, which is likely about to be destructed.
//
//               If convex_also is true, both concave and convex
//               polygons will be subdivided into triangles;
//               otherwise, only concave polygons will be subdivided,
//               and convex polygons will be copied unchanged into the
//               container.
////////////////////////////////////////////////////////////////////
75
PointerTo< EggPolygon > EggPolygon::triangulate_in_place(bool convex_also);

1798 14 get_class_type 0 4 2039 26 EggPolygon::get_class_type 0 1 831 0
51
static TypeHandle EggPolygon::get_class_type(void);

1799 11 ~EggPolygon 0 4 2039 23 EggPolygon::~EggPolygon 0 0 0
30
EggPolygon::~EggPolygon(void);

1800 13 EggNurbsCurve 0 4 2040 28 EggNurbsCurve::EggNurbsCurve 0 2 832 833 451
////////////////////////////////////////////////////////////////////
//     Function: EggNurbsCurve::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggNurbsCurve::Copy constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
125
inline EggNurbsCurve::EggNurbsCurve(string const &name = "");
inline EggNurbsCurve::EggNurbsCurve(EggNurbsCurve const &copy);

1801 10 operator = 0 4 2040 25 EggNurbsCurve::operator = 0 1 834 235
////////////////////////////////////////////////////////////////////
//     Function: EggNurbsCurve::Copy assignment operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
75
inline EggNurbsCurve &EggNurbsCurve::operator =(EggNurbsCurve const &copy);

1802 5 setup 0 4 2040 20 EggNurbsCurve::setup 0 1 835 588
////////////////////////////////////////////////////////////////////
//     Function: EggNurbsCurve::setup
//       Access: Public
//  Description: Prepares a new curve definition with the indicated
//               order and number of knots.  This also implies a
//               particular number of vertices as well (the number of
//               knots minus the order), but it is up to the user to
//               add the correct number of vertices to the curve by
//               repeatedly calling push_back().
////////////////////////////////////////////////////////////////////
52
void EggNurbsCurve::setup(int order, int num_knots);

1803 9 set_order 0 4 2040 24 EggNurbsCurve::set_order 0 1 836 542
////////////////////////////////////////////////////////////////////
//     Function: EggNurbsCurve::set_order
//       Access: Public
//  Description: Directly changes the order to the indicated value
//               (which must be an integer in the range 1 <= order <=
//               4).  If possible, it is preferable to use the setup()
//               method instead of this method, since changing the
//               order directly may result in an invalid curve.
////////////////////////////////////////////////////////////////////
48
inline void EggNurbsCurve::set_order(int order);

1804 13 set_num_knots 0 4 2040 28 EggNurbsCurve::set_num_knots 0 1 837 665
////////////////////////////////////////////////////////////////////
//     Function: EggNurbsCurve::set_num_knots
//       Access: Public
//  Description: Directly changes the number of knots.  This will
//               either add zero-valued knots onto the end, or
//               truncate knot values from the end, depending on
//               whether the list is being increased or decreased.  If
//               possible, it is preferable to use the setup() method
//               instead of directly setting the number of knots, as
//               this may result in an invalid curve.
////////////////////////////////////////////////////////////////////
43
void EggNurbsCurve::set_num_knots(int num);

1805 8 set_knot 0 4 2040 23 EggNurbsCurve::set_knot 0 1 838 452
////////////////////////////////////////////////////////////////////
//     Function: EggNurbsCurve::set_knot
//       Access: Public
//  Description: Resets the value of the indicated knot as indicated.
//               k must be in the range 0 <= k < get_num_knots(),
//               and the value must be in the range get_knot(k - 1)
//               <= value <= get_knot(k + 1).
////////////////////////////////////////////////////////////////////
57
inline void EggNurbsCurve::set_knot(int k, double value);

1806 8 is_valid 0 4 2040 23 EggNurbsCurve::is_valid 0 1 839 458
////////////////////////////////////////////////////////////////////
//     Function: EggNurbsCurve::is_valid
//       Access: Public
//  Description: Returns true if the NURBS parameters are all
//               internally consistent (e.g. it has the right number
//               of vertices to match its number of knots and order in
//               each dimension), or false otherwise.
////////////////////////////////////////////////////////////////////
41
bool EggNurbsCurve::is_valid(void) const;

1807 9 get_order 0 4 2040 24 EggNurbsCurve::get_order 0 1 840 470
////////////////////////////////////////////////////////////////////
//     Function: EggNurbsCurve::get_order
//       Access: Public
//  Description: Returns the order of the curve.  The order is the
//               degree of the NURBS equation plus 1; for a typical
//               NURBS, the order is 4.  With this implementation of
//               NURBS, the order must be in the range [1, 4].
////////////////////////////////////////////////////////////////////
48
inline int EggNurbsCurve::get_order(void) const;

1808 10 get_degree 0 4 2040 25 EggNurbsCurve::get_degree 0 1 841 310
////////////////////////////////////////////////////////////////////
//     Function: EggNurbsCurve::get_degree
//       Access: Public
//  Description: Returns the degree of the curve.  For a typical
//               NURBS, the degree is 3.
////////////////////////////////////////////////////////////////////
49
inline int EggNurbsCurve::get_degree(void) const;

1809 13 get_num_knots 0 4 2040 28 EggNurbsCurve::get_num_knots 0 1 842 253
////////////////////////////////////////////////////////////////////
//     Function: EggNurbsCurve::get_num_knots
//       Access: Public
//  Description: Returns the number of knots.
////////////////////////////////////////////////////////////////////
52
inline int EggNurbsCurve::get_num_knots(void) const;

1810 11 get_num_cvs 0 4 2040 26 EggNurbsCurve::get_num_cvs 0 1 843 669
////////////////////////////////////////////////////////////////////
//     Function: EggNurbsCurve::get_num_cvs
//       Access: Public
//  Description: Returns the total number of control vertices that
//               *should* be defined for the curve.  This is
//               determined by the number of knots and the order, in
//               each direction; it does not necessarily reflect the
//               number of vertices that have actually been added to
//               the curve.  (However, if the number of vertices in
//               the curve are wrong, the curve is invalid.)
////////////////////////////////////////////////////////////////////
50
inline int EggNurbsCurve::get_num_cvs(void) const;

1811 9 is_closed 0 4 2040 24 EggNurbsCurve::is_closed 0 1 844 458
////////////////////////////////////////////////////////////////////
//     Function: EggNurbsCurve::is_closed
//       Access: Public
//  Description: Returns true if the curve appears to be closed.
//               Since the Egg syntax does not provide a means for
//               explicit indication of closure, this has to be
//               guessed at by examining the curve itself.
////////////////////////////////////////////////////////////////////
42
bool EggNurbsCurve::is_closed(void) const;

1812 8 get_knot 0 4 2040 23 EggNurbsCurve::get_knot 0 1 845 255
////////////////////////////////////////////////////////////////////
//     Function: EggNurbsCurve::get_knot
//       Access: Public
//  Description: Returns the nth knot value defined.
////////////////////////////////////////////////////////////////////
51
inline double EggNurbsCurve::get_knot(int k) const;

1813 14 get_class_type 0 4 2040 29 EggNurbsCurve::get_class_type 0 1 846 0
54
static TypeHandle EggNurbsCurve::get_class_type(void);

1814 14 ~EggNurbsCurve 0 4 2040 29 EggNurbsCurve::~EggNurbsCurve 0 0 0
36
EggNurbsCurve::~EggNurbsCurve(void);

1815 10 operator = 0 4 2041 22 EggSurface::operator = 0 1 847 232
////////////////////////////////////////////////////////////////////
//     Function: EggSurface::Copy assignment operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
66
inline EggSurface &EggSurface::operator =(EggSurface const &copy);

1816 12 set_u_subdiv 0 4 2041 24 EggSurface::set_u_subdiv 0 1 848 586
////////////////////////////////////////////////////////////////////
//     Function: EggSurface::set_u_subdiv
//       Access: Public
//  Description: Sets the number of subdivisions in the U direction
//               that will be requested across the surface.  (This
//               doesn't necessary guarantee that this number of
//               subdivisions will be made; it's just a hint to any
//               surface renderer or quick tesselator.)  Set the
//               number to 0 to disable the hint.
////////////////////////////////////////////////////////////////////
49
inline void EggSurface::set_u_subdiv(int subdiv);

1817 12 get_u_subdiv 0 4 2041 24 EggSurface::get_u_subdiv 0 1 849 375
////////////////////////////////////////////////////////////////////
//     Function: EggSurface::get_u_subdiv
//       Access: Public
//  Description: Returns the requested number of subdivisions in the U
//               direction, or 0 if no particular subdivisions have
//               been requested.
////////////////////////////////////////////////////////////////////
48
inline int EggSurface::get_u_subdiv(void) const;

1818 12 set_v_subdiv 0 4 2041 24 EggSurface::set_v_subdiv 0 1 850 586
////////////////////////////////////////////////////////////////////
//     Function: EggSurface::set_v_subdiv
//       Access: Public
//  Description: Sets the number of subdivisions in the U direction
//               that will be requested across the surface.  (This
//               doesn't necessary guarantee that this number of
//               subdivisions will be made; it's just a hint to any
//               surface renderer or quick tesselator.)  Set the
//               number to 0 to disable the hint.
////////////////////////////////////////////////////////////////////
49
inline void EggSurface::set_v_subdiv(int subdiv);

1819 12 get_v_subdiv 0 4 2041 24 EggSurface::get_v_subdiv 0 1 851 375
////////////////////////////////////////////////////////////////////
//     Function: EggSurface::get_v_subdiv
//       Access: Public
//  Description: Returns the requested number of subdivisions in the U
//               direction, or 0 if no particular subdivisions have
//               been requested.
////////////////////////////////////////////////////////////////////
48
inline int EggSurface::get_v_subdiv(void) const;

1820 14 get_class_type 0 4 2041 26 EggSurface::get_class_type 0 1 852 0
51
static TypeHandle EggSurface::get_class_type(void);

1821 11 ~EggSurface 0 4 2041 23 EggSurface::~EggSurface 0 0 0
30
EggSurface::~EggSurface(void);

1822 15 EggNurbsSurface 0 4 2042 32 EggNurbsSurface::EggNurbsSurface 0 2 853 854 455
////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::Copy constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
135
inline EggNurbsSurface::EggNurbsSurface(string const &name = "");
inline EggNurbsSurface::EggNurbsSurface(EggNurbsSurface const &copy);

1823 10 operator = 0 4 2042 27 EggNurbsSurface::operator = 0 1 855 237
////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::Copy assignment operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
81
inline EggNurbsSurface &EggNurbsSurface::operator =(EggNurbsSurface const &copy);

1824 5 setup 0 4 2042 22 EggNurbsSurface::setup 0 1 856 647
////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::setup
//       Access: Public
//  Description: Prepares a new surface definition with the indicated
//               order and number of knots in each dimension.  This
//               also implies a particular number of vertices in each
//               dimension as well (the number of knots minus the
//               order), but it is up to the user to add the correct
//               number of vertices to the surface by repeatedly
//               calling push_back().
////////////////////////////////////////////////////////////////////
88
void EggNurbsSurface::setup(int u_order, int v_order, int num_u_knots, int num_v_knots);

1825 11 set_u_order 0 4 2042 28 EggNurbsSurface::set_u_order 0 1 857 586
////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::set_u_order
//       Access: Public
//  Description: Directly changes the order in the U direction to the
//               indicated value (which must be an integer in the
//               range 1 <= u_order <= 4).  If possible, it is
//               preferable to use the setup() method instead of this
//               method, since changing the order directly may result
//               in an invalid surface.
////////////////////////////////////////////////////////////////////
54
inline void EggNurbsSurface::set_u_order(int u_order);

1826 11 set_v_order 0 4 2042 28 EggNurbsSurface::set_v_order 0 1 858 586
////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::set_v_order
//       Access: Public
//  Description: Directly changes the order in the V direction to the
//               indicated value (which must be an integer in the
//               range 1 <= v_order <= 4).  If possible, it is
//               preferable to use the setup() method instead of this
//               method, since changing the order directly may result
//               in an invalid surface.
////////////////////////////////////////////////////////////////////
54
inline void EggNurbsSurface::set_v_order(int v_order);

1827 15 set_num_u_knots 0 4 2042 32 EggNurbsSurface::set_num_u_knots 0 1 859 690
////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::set_num_u_knots
//       Access: Public
//  Description: Directly changes the number of knots in the U
//               direction.  This will either add zero-valued knots
//               onto the end, or truncate knot values from the end,
//               depending on whether the list is being increased or
//               decreased.  If possible, it is preferable to use the
//               setup() method instead of directly setting the number
//               of knots, as this may result in an invalid surface.
////////////////////////////////////////////////////////////////////
47
void EggNurbsSurface::set_num_u_knots(int num);

1828 15 set_num_v_knots 0 4 2042 32 EggNurbsSurface::set_num_v_knots 0 1 860 690
////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::set_num_v_knots
//       Access: Public
//  Description: Directly changes the number of knots in the V
//               direction.  This will either add zero-valued knots
//               onto the end, or truncate knot values from the end,
//               depending on whether the list is being increased or
//               decreased.  If possible, it is preferable to use the
//               setup() method instead of directly setting the number
//               of knots, as this may result in an invalid surface.
////////////////////////////////////////////////////////////////////
47
void EggNurbsSurface::set_num_v_knots(int num);

1829 10 set_u_knot 0 4 2042 27 EggNurbsSurface::set_u_knot 0 1 861 462
////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::set_u_knot
//       Access: Public
//  Description: Resets the value of the indicated knot as indicated.
//               k must be in the range 0 <= k < get_num_u_knots(),
//               and the value must be in the range get_u_knot(k - 1)
//               <= value <= get_u_knot(k + 1).
////////////////////////////////////////////////////////////////////
61
inline void EggNurbsSurface::set_u_knot(int k, double value);

1830 10 set_v_knot 0 4 2042 27 EggNurbsSurface::set_v_knot 0 1 862 462
////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::set_v_knot
//       Access: Public
//  Description: Resets the value of the indicated knot as indicated.
//               k must be in the range 0 <= k < get_num_v_knots(),
//               and the value must be in the range get_v_knot(k - 1)
//               <= value <= get_v_knot(k + 1).
////////////////////////////////////////////////////////////////////
61
inline void EggNurbsSurface::set_v_knot(int k, double value);

1831 6 set_cv 0 4 2042 23 EggNurbsSurface::set_cv 0 1 863 456
////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::set_cv
//       Access: Public
//  Description: Redefines the control vertex associated with a
//               particular u, v coordinate pair.  This is just a
//               shorthand to access the EggPrimitive's normal vertex
//               assignment for a 2-d control vertex.
////////////////////////////////////////////////////////////////////
71
inline void EggNurbsSurface::set_cv(int ui, int vi, EggVertex *vertex);

1832 8 is_valid 0 4 2042 25 EggNurbsSurface::is_valid 0 1 864 460
////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::is_valid
//       Access: Public
//  Description: Returns true if the NURBS parameters are all
//               internally consistent (e.g. it has the right number
//               of vertices to match its number of knots and order in
//               each dimension), or false otherwise.
////////////////////////////////////////////////////////////////////
43
bool EggNurbsSurface::is_valid(void) const;

1833 11 get_u_order 0 4 2042 28 EggNurbsSurface::get_u_order 0 1 865 511
////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::get_u_order
//       Access: Public
//  Description: Returns the order of the surface in the U direction.
//               The order is the degree of the NURBS equation plus 1;
//               for a typical NURBS, the order is 4.  With this
//               implementation of NURBS, the order must be in the
//               range [1, 4].
////////////////////////////////////////////////////////////////////
52
inline int EggNurbsSurface::get_u_order(void) const;

1834 11 get_v_order 0 4 2042 28 EggNurbsSurface::get_v_order 0 1 866 511
////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::get_v_order
//       Access: Public
//  Description: Returns the order of the surface in the V direction.
//               The order is the degree of the NURBS equation plus 1;
//               for a typical NURBS, the order is 4.  With this
//               implementation of NURBS, the order must be in the
//               range [1, 4].
////////////////////////////////////////////////////////////////////
52
inline int EggNurbsSurface::get_v_order(void) const;

1835 12 get_u_degree 0 4 2042 29 EggNurbsSurface::get_u_degree 0 1 867 334
////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::get_u_degree
//       Access: Public
//  Description: Returns the degree of the surface in the U direction.
//               For a typical NURBS, the degree is 3.
////////////////////////////////////////////////////////////////////
53
inline int EggNurbsSurface::get_u_degree(void) const;

1836 12 get_v_degree 0 4 2042 29 EggNurbsSurface::get_v_degree 0 1 868 334
////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::get_v_degree
//       Access: Public
//  Description: Returns the degree of the surface in the V direction.
//               for a typical NURBS, the degree is 3.
////////////////////////////////////////////////////////////////////
53
inline int EggNurbsSurface::get_v_degree(void) const;

1837 15 get_num_u_knots 0 4 2042 32 EggNurbsSurface::get_num_u_knots 0 1 869 276
////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::get_num_u_knots
//       Access: Public
//  Description: Returns the number of knots in the U direction.
////////////////////////////////////////////////////////////////////
56
inline int EggNurbsSurface::get_num_u_knots(void) const;

1838 15 get_num_v_knots 0 4 2042 32 EggNurbsSurface::get_num_v_knots 0 1 870 276
////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::get_num_v_knots
//       Access: Public
//  Description: Returns the number of knots in the V direction.
////////////////////////////////////////////////////////////////////
56
inline int EggNurbsSurface::get_num_v_knots(void) const;

1839 13 get_num_u_cvs 0 4 2042 30 EggNurbsSurface::get_num_u_cvs 0 1 871 657
////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::get_num_u_cvs
//       Access: Public
//  Description: Returns the number of control vertices that should be
//               present in the U direction.  This is determined by
//               the number of knots and the order; it does not
//               necessarily reflect the number of vertices that have
//               actually been added to the surface.  (However, if the
//               number of vertices in the surface are wrong, the
//               surface is invalid.)
////////////////////////////////////////////////////////////////////
54
inline int EggNurbsSurface::get_num_u_cvs(void) const;

1840 13 get_num_v_cvs 0 4 2042 30 EggNurbsSurface::get_num_v_cvs 0 1 872 657
////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::get_num_v_cvs
//       Access: Public
//  Description: Returns the number of control vertices that should be
//               present in the V direction.  This is determined by
//               the number of knots and the order; it does not
//               necessarily reflect the number of vertices that have
//               actually been added to the surface.  (However, if the
//               number of vertices in the surface are wrong, the
//               surface is invalid.)
////////////////////////////////////////////////////////////////////
54
inline int EggNurbsSurface::get_num_v_cvs(void) const;

1841 11 get_num_cvs 0 4 2042 28 EggNurbsSurface::get_num_cvs 0 1 873 679
////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::get_num_cvs
//       Access: Public
//  Description: Returns the total number of control vertices that
//               *should* be defined for the surface.  This is
//               determined by the number of knots and the order, in
//               each direction; it does not necessarily reflect the
//               number of vertices that have actually been added to
//               the surface.  (However, if the number of vertices in
//               the surface are wrong, the surface is invalid.)
////////////////////////////////////////////////////////////////////
52
inline int EggNurbsSurface::get_num_cvs(void) const;

1842 11 get_u_index 0 4 2042 28 EggNurbsSurface::get_u_index 0 1 874 538
////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::get_u_index
//       Access: Public
//  Description: Returns the U index number of the given vertex within
//               the EggPrimitive's linear list of vertices.  An
//               EggNurbsSurface maps a linear list of vertices to its
//               2-d mesh; this returns the U index number that
//               corresponds to the nth vertex in the list.
////////////////////////////////////////////////////////////////////
64
inline int EggNurbsSurface::get_u_index(int vertex_index) const;

1843 11 get_v_index 0 4 2042 28 EggNurbsSurface::get_v_index 0 1 875 538
////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::get_v_index
//       Access: Public
//  Description: Returns the V index number of the given vertex within
//               the EggPrimitive's linear list of vertices.  An
//               EggNurbsSurface maps a linear list of vertices to its
//               2-d mesh; this returns the V index number that
//               corresponds to the nth vertex in the list.
////////////////////////////////////////////////////////////////////
64
inline int EggNurbsSurface::get_v_index(int vertex_index) const;

1844 16 get_vertex_index 0 4 2042 33 EggNurbsSurface::get_vertex_index 0 1 876 344
////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::get_vertex_index
//       Access: Public
//  Description: Returns the index number within the EggPrimitive's
//               list of the control vertex at position ui, vi.
////////////////////////////////////////////////////////////////////
67
inline int EggNurbsSurface::get_vertex_index(int ui, int vi) const;

1845 11 is_closed_u 0 4 2042 28 EggNurbsSurface::is_closed_u 0 1 877 503
////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::is_closed_u
//       Access: Public
//  Description: Returns true if the surface appears to be closed in
//               the U direction.  Since the Egg syntax does not
//               provide a means for explicit indication of closure,
//               this has to be guessed at by examining the surface
//               itself.
////////////////////////////////////////////////////////////////////
46
bool EggNurbsSurface::is_closed_u(void) const;

1846 11 is_closed_v 0 4 2042 28 EggNurbsSurface::is_closed_v 0 1 878 503
////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::is_closed_v
//       Access: Public
//  Description: Returns true if the surface appears to be closed in
//               the V direction.  Since the Egg syntax does not
//               provide a means for explicit indication of closure,
//               this has to be guessed at by examining the surface
//               itself.
////////////////////////////////////////////////////////////////////
46
bool EggNurbsSurface::is_closed_v(void) const;

1847 10 get_u_knot 0 4 2042 27 EggNurbsSurface::get_u_knot 0 1 879 295
////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::get_u_knot
//       Access: Public
//  Description: Returns the nth knot value defined in the U
//               direction.
////////////////////////////////////////////////////////////////////
55
inline double EggNurbsSurface::get_u_knot(int k) const;

1848 10 get_v_knot 0 4 2042 27 EggNurbsSurface::get_v_knot 0 1 880 295
////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::get_v_knot
//       Access: Public
//  Description: Returns the nth knot value defined in the V
//               direction.
////////////////////////////////////////////////////////////////////
55
inline double EggNurbsSurface::get_v_knot(int k) const;

1849 6 get_cv 0 4 2042 23 EggNurbsSurface::get_cv 0 1 881 294
////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::get_cv
//       Access: Public
//  Description: Returns the control vertex at the indicate U, V
//               position.
////////////////////////////////////////////////////////////////////
64
inline EggVertex *EggNurbsSurface::get_cv(int ui, int vi) const;

1850 14 get_class_type 0 4 2042 31 EggNurbsSurface::get_class_type 0 1 882 0
56
static TypeHandle EggNurbsSurface::get_class_type(void);

1851 16 ~EggNurbsSurface 0 4 2042 33 EggNurbsSurface::~EggNurbsSurface 0 0 0
40
EggNurbsSurface::~EggNurbsSurface(void);

1852 8 EggPatch 0 4 2051 18 EggPatch::EggPatch 0 2 883 884 447
////////////////////////////////////////////////////////////////////
//     Function: EggPatch::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggPatch::Copy constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
100
inline EggPatch::EggPatch(string const &name = "");
inline EggPatch::EggPatch(EggPatch const &copy);

1853 10 operator = 0 4 2051 20 EggPatch::operator = 0 1 885 233
////////////////////////////////////////////////////////////////////
//     Function: EggPatch::Copy assignment operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
60
inline EggPatch &EggPatch::operator =(EggPatch const &copy);

1854 14 get_class_type 0 4 2051 24 EggPatch::get_class_type 0 1 886 0
49
static TypeHandle EggPatch::get_class_type(void);

1855 9 ~EggPatch 0 4 2051 19 EggPatch::~EggPatch 0 0 0
26
EggPatch::~EggPatch(void);

1856 8 EggPoint 0 4 2052 18 EggPoint::EggPoint 0 2 887 888 441
////////////////////////////////////////////////////////////////////
//     Function: EggPoint::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggPoint::Copy constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
100
inline EggPoint::EggPoint(string const &name = "");
inline EggPoint::EggPoint(EggPoint const &copy);

1857 10 operator = 0 4 2052 20 EggPoint::operator = 0 1 889 230
////////////////////////////////////////////////////////////////////
//     Function: EggPoint::Copy assignment operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
60
inline EggPoint &EggPoint::operator =(EggPoint const &copy);

1858 9 has_thick 0 4 2052 19 EggPoint::has_thick 0 1 890 218
////////////////////////////////////////////////////////////////////
//     Function: EggPoint::has_thick
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
44
inline bool EggPoint::has_thick(void) const;

1859 9 get_thick 0 4 2052 19 EggPoint::get_thick 0 1 891 330
////////////////////////////////////////////////////////////////////
//     Function: EggPoint::get_thick
//       Access: Published
//  Description: Returns the thickness set on this particular point.
//               If there is no thickness set, returns 1.0.
////////////////////////////////////////////////////////////////////
46
inline double EggPoint::get_thick(void) const;

1860 9 set_thick 0 4 2052 19 EggPoint::set_thick 0 1 892 218
////////////////////////////////////////////////////////////////////
//     Function: EggPoint::set_thick
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
46
inline void EggPoint::set_thick(double thick);

1861 11 clear_thick 0 4 2052 21 EggPoint::clear_thick 0 1 893 220
////////////////////////////////////////////////////////////////////
//     Function: EggPoint::clear_thick
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
40
inline void EggPoint::clear_thick(void);

1862 15 has_perspective 0 4 2052 25 EggPoint::has_perspective 0 1 894 224
////////////////////////////////////////////////////////////////////
//     Function: EggPoint::has_perspective
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
50
inline bool EggPoint::has_perspective(void) const;

1863 15 get_perspective 0 4 2052 25 EggPoint::get_perspective 0 1 895 370
////////////////////////////////////////////////////////////////////
//     Function: EggPoint::get_perspective
//       Access: Published
//  Description: Returns the perspective flag set on this particular
//               point.  If there is no perspective flag set, returns
//               false.
////////////////////////////////////////////////////////////////////
50
inline bool EggPoint::get_perspective(void) const;

1864 15 set_perspective 0 4 2052 25 EggPoint::set_perspective 0 1 896 224
////////////////////////////////////////////////////////////////////
//     Function: EggPoint::set_perspective
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
56
inline void EggPoint::set_perspective(bool perspective);

1865 17 clear_perspective 0 4 2052 27 EggPoint::clear_perspective 0 1 897 226
////////////////////////////////////////////////////////////////////
//     Function: EggPoint::clear_perspective
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
46
inline void EggPoint::clear_perspective(void);

1866 14 get_class_type 0 4 2052 24 EggPoint::get_class_type 0 1 898 0
49
static TypeHandle EggPoint::get_class_type(void);

1867 9 ~EggPoint 0 4 2052 19 EggPoint::~EggPoint 0 0 0
26
EggPoint::~EggPoint(void);

1868 15 EggPolysetMaker 0 4 2053 32 EggPolysetMaker::EggPolysetMaker 0 1 899 225
////////////////////////////////////////////////////////////////////
//     Function: EggPolysetMaker::Constructor
//       Access: Public
//  Description: 
////////////////////////////////////////////////////////////////////
39
EggPolysetMaker::EggPolysetMaker(void);

1869 14 set_properties 0 4 2053 31 EggPolysetMaker::set_properties 0 1 900 609
////////////////////////////////////////////////////////////////////
//     Function: EggPolysetMaker::set_properties
//       Access: Public
//  Description: Sets the set of properties that determines which
//               polygons are allowed to be grouped together into a
//               single polyset.  This is the bitwise 'or' of all the
//               properties that matter.  If this is 0, all polygons
//               (within a given group) will be lumped into a common
//               polyset regardless of their properties.
////////////////////////////////////////////////////////////////////
53
void EggPolysetMaker::set_properties(int properties);

1870 14 get_class_type 0 4 2053 31 EggPolysetMaker::get_class_type 0 1 901 0
56
static TypeHandle EggPolysetMaker::get_class_type(void);

1871 16 ~EggPolysetMaker 0 4 2053 33 EggPolysetMaker::~EggPolysetMaker 0 0 0
40
EggPolysetMaker::~EggPolysetMaker(void);

1872 17 EggPoolUniquifier 0 4 2056 36 EggPoolUniquifier::EggPoolUniquifier 0 1 902 226
////////////////////////////////////////////////////////////////////
//     Function: EggPoolUniquifier::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
43
EggPoolUniquifier::EggPoolUniquifier(void);

1873 14 get_class_type 0 4 2056 33 EggPoolUniquifier::get_class_type 0 1 903 0
58
static TypeHandle EggPoolUniquifier::get_class_type(void);

1874 18 ~EggPoolUniquifier 0 4 2056 37 EggPoolUniquifier::~EggPoolUniquifier 0 0 0
44
EggPoolUniquifier::~EggPoolUniquifier(void);

1875 12 EggSAnimData 0 4 2057 26 EggSAnimData::EggSAnimData 0 2 904 905 449
////////////////////////////////////////////////////////////////////
//     Function: EggSAnimData::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggSAnimData::Copy constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
120
inline EggSAnimData::EggSAnimData(string const &name = "");
inline EggSAnimData::EggSAnimData(EggSAnimData const &copy);

1876 10 operator = 0 4 2057 24 EggSAnimData::operator = 0 1 906 234
////////////////////////////////////////////////////////////////////
//     Function: EggSAnimData::Copy assignment operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
72
inline EggSAnimData &EggSAnimData::operator =(EggSAnimData const &copy);

1877 12 get_num_rows 0 4 2057 26 EggSAnimData::get_num_rows 0 1 907 326
////////////////////////////////////////////////////////////////////
//     Function: EggSAnimData::get_num_rows
//       Access: Public
//  Description: Returns the number of rows in the table.  For an
//               SAnim table, each row has one column.
////////////////////////////////////////////////////////////////////
50
inline int EggSAnimData::get_num_rows(void) const;

1878 9 get_value 0 4 2057 23 EggSAnimData::get_value 0 1 908 329
////////////////////////////////////////////////////////////////////
//     Function: EggSAnimData::get_value
//       Access: Public
//  Description: Returns the value at the indicated row.  Row must be
//               in the range 0 <= row < get_num_rows().
////////////////////////////////////////////////////////////////////
53
inline double EggSAnimData::get_value(int row) const;

1879 9 set_value 0 4 2057 23 EggSAnimData::set_value 0 1 909 329
////////////////////////////////////////////////////////////////////
//     Function: EggSAnimData::set_value
//       Access: Public
//  Description: Changes the value at the indicated row.  Row must be
//               in the range 0 <= row < get_num_rows().
////////////////////////////////////////////////////////////////////
59
inline void EggSAnimData::set_value(int row, double value);

1880 8 optimize 0 4 2057 22 EggSAnimData::optimize 0 1 910 322
////////////////////////////////////////////////////////////////////
//     Function: EggSAnimData::optimize
//       Access: Public
//  Description: Optimizes the data by collapsing a long table of
//               duplicate values into a single value.
////////////////////////////////////////////////////////////////////
34
void EggSAnimData::optimize(void);

1881 14 get_class_type 0 4 2057 28 EggSAnimData::get_class_type 0 1 911 0
53
static TypeHandle EggSAnimData::get_class_type(void);

1882 13 ~EggSAnimData 0 4 2057 27 EggSAnimData::~EggSAnimData 0 0 0
34
EggSAnimData::~EggSAnimData(void);

1883 8 EggTable 0 4 2058 18 EggTable::EggTable 0 2 912 913 441
////////////////////////////////////////////////////////////////////
//     Function: EggTable::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggTable::Copy constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
100
inline EggTable::EggTable(string const &name = "");
inline EggTable::EggTable(EggTable const &copy);

1884 10 operator = 0 4 2058 20 EggTable::operator = 0 1 914 230
////////////////////////////////////////////////////////////////////
//     Function: EggTable::Copy assignment operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
60
inline EggTable &EggTable::operator =(EggTable const &copy);

1885 14 set_table_type 0 4 2058 24 EggTable::set_table_type 0 1 915 220
////////////////////////////////////////////////////////////////////
//     Function: EggTable::set_table_type
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
63
inline void EggTable::set_table_type(EggTable::TableType type);

1886 14 get_table_type 0 4 2058 24 EggTable::get_table_type 0 1 916 220
////////////////////////////////////////////////////////////////////
//     Function: EggTable::get_table_type
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
64
inline EggTable::TableType EggTable::get_table_type(void) const;

1887 13 has_transform 0 4 2058 23 EggTable::has_transform 0 1 917 313
////////////////////////////////////////////////////////////////////
//     Function: EggTable::has_transform
//       Access: Public
//  Description: Returns true if the table contains a transform
//               description, false otherwise.
////////////////////////////////////////////////////////////////////
41
bool EggTable::has_transform(void) const;

1888 17 string_table_type 0 4 2058 27 EggTable::string_table_type 0 1 918 412
////////////////////////////////////////////////////////////////////
//     Function: EggTable::string_table_type
//       Access: Public, Static
//  Description: Returns the TableType value associated with the given
//               string representation, or TT_invalid if the string
//               does not match any known TableType value.
////////////////////////////////////////////////////////////////////
77
static EggTable::TableType EggTable::string_table_type(string const &string);

1889 14 get_class_type 0 4 2058 24 EggTable::get_class_type 0 1 919 0
49
static TypeHandle EggTable::get_class_type(void);

1890 9 ~EggTable 0 4 2058 19 EggTable::~EggTable 0 0 0
26
EggTable::~EggTable(void);

1891 20 EggTextureCollection 0 4 2060 42 EggTextureCollection::EggTextureCollection 0 2 920 921 465
////////////////////////////////////////////////////////////////////
//     Function: EggTextureCollection::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggTextureCollection::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
127
EggTextureCollection::EggTextureCollection(void);
EggTextureCollection::EggTextureCollection(EggTextureCollection const &copy);

1892 10 operator = 0 4 2060 32 EggTextureCollection::operator = 0 1 922 242
////////////////////////////////////////////////////////////////////
//     Function: EggTextureCollection::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
89
EggTextureCollection &EggTextureCollection::operator =(EggTextureCollection const &copy);

1893 21 ~EggTextureCollection 0 4 2060 43 EggTextureCollection::~EggTextureCollection 0 0 228
////////////////////////////////////////////////////////////////////
//     Function: EggTextureCollection::Destructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
50
EggTextureCollection::~EggTextureCollection(void);

1894 5 clear 0 4 2060 27 EggTextureCollection::clear 0 1 923 265
////////////////////////////////////////////////////////////////////
//     Function: EggTextureCollection::clear
//       Access: Public
//  Description: Removes all textures from the collection.
////////////////////////////////////////////////////////////////////
39
void EggTextureCollection::clear(void);

1895 16 extract_textures 0 4 2060 38 EggTextureCollection::extract_textures 0 1 924 479
////////////////////////////////////////////////////////////////////
//     Function: EggTextureCollection::extract_textures
//       Access: Public
//  Description: Walks the egg hierarchy beginning at the indicated
//               node, and removes any EggTextures encountered in the
//               hierarchy, adding them to the collection.  Returns
//               the number of EggTextures encountered.
////////////////////////////////////////////////////////////////////
63
int EggTextureCollection::extract_textures(EggGroupNode *node);

1896 8 is_empty 0 4 2060 30 EggTextureCollection::is_empty 0 1 925 322
////////////////////////////////////////////////////////////////////
//     Function: EggTextureCollection::is_empty
//       Access: Published
//  Description: Returns true if there are no EggTexures in the
//               collection, false otherwise.
////////////////////////////////////////////////////////////////////
48
bool EggTextureCollection::is_empty(void) const;

1897 16 get_num_textures 0 4 2060 38 EggTextureCollection::get_num_textures 0 1 926 290
////////////////////////////////////////////////////////////////////
//     Function: EggTextureCollection::get_num_textures
//       Access: Published
//  Description: Returns the number of EggTextures in the collection.
////////////////////////////////////////////////////////////////////
55
int EggTextureCollection::get_num_textures(void) const;

1898 11 get_texture 0 4 2060 33 EggTextureCollection::get_texture 0 1 927 278
////////////////////////////////////////////////////////////////////
//     Function: EggTextureCollection::get_texture
//       Access: Published
//  Description: Returns the nth EggTexture in the collection.
////////////////////////////////////////////////////////////////////
63
EggTexture *EggTextureCollection::get_texture(int index) const;

1899 18 find_used_textures 0 4 2060 40 EggTextureCollection::find_used_textures 0 1 928 1765
////////////////////////////////////////////////////////////////////
//     Function: EggTextureCollection::find_used_textures
//       Access: Public
//  Description: Walks the egg hierarchy beginning at the indicated
//               node, looking for textures that are referenced by
//               primitives but are not already members of the
//               collection, adding them to the collection.
//
//               If this is called following extract_textures(), it
//               can be used to pick up any additional texture
//               references that appeared in the egg hierarchy (but
//               whose EggTexture node was not actually part of the
//               hierarchy).
//
//               If this is called in lieu of extract_textures(), it
//               will fill up the collection with all of the
//               referenced textures (and only the referenced
//               textures), without destructively removing the
//               EggTextures from the hierarchy.
//
//               This also has the side effect of incrementing the
//               internal usage count for a texture in the collection
//               each time a texture reference is encountered.  This
//               side effect is taken advantage of by
//               remove_unused_textures().
//
//               And one more side effect: this function identifies
//               the presence of multitexturing in the egg file, and
//               calls multitexture_over() on each texture
//               appropriately so that, after this call, you may
//               expect get_multitexture_sort() to return a reasonable
//               value for each texture.
////////////////////////////////////////////////////////////////////
60
int EggTextureCollection::find_used_textures(EggNode *node);

1900 22 remove_unused_textures 0 4 2060 44 EggTextureCollection::remove_unused_textures 0 1 929 570
////////////////////////////////////////////////////////////////////
//     Function: EggTextureCollection::remove_unused_textures
//       Access: Public
//  Description: Removes any textures from the collection that aren't
//               referenced by any primitives in the indicated egg
//               hierarchy.  This also, incidentally, adds textures to
//               the collection that had been referenced by primitives
//               but had not previously appeared in the collection.
////////////////////////////////////////////////////////////////////
65
void EggTextureCollection::remove_unused_textures(EggNode *node);

1901 28 collapse_equivalent_textures 0 4 2060 50 EggTextureCollection::collapse_equivalent_textures 0 2 930 931 1777
////////////////////////////////////////////////////////////////////
//     Function: EggTextureCollection::collapse_equivalent_textures
//       Access: Public
//  Description: Walks through the collection and collapses together
//               any separate textures that are equivalent according
//               to the indicated equivalence factor, eq (see
//               EggTexture::is_equivalent_to()).  The return value is
//               the number of textures removed.
//
//               This flavor of collapse_equivalent_textures()
//               automatically adjusts all the primitives in the egg
//               hierarchy to refer to the new texture pointers.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggTextureCollection::collapse_equivalent_textures
//       Access: Public
//  Description: Walks through the collection and collapses together
//               any separate textures that are equivalent according
//               to the indicated equivalence factor, eq (see
//               EggTexture::is_equivalent_to()).  The return value is
//               the number of textures removed.
//
//               This flavor of collapse_equivalent_textures() does
//               not adjust any primitives in the egg hierarchy;
//               instead, it fills up the 'removed' map with an entry
//               for each removed texture, mapping it back to the
//               equivalent retained texture.  It's up to the user to
//               then call replace_textures() with this map, if
//               desired, to apply these changes to the egg hierarchy.
////////////////////////////////////////////////////////////////////
198
int EggTextureCollection::collapse_equivalent_textures(int eq, EggGroupNode *node);
int EggTextureCollection::collapse_equivalent_textures(int eq, EggTextureCollection::TextureReplacement &removed);

1902 16 replace_textures 0 4 2060 38 EggTextureCollection::replace_textures 0 1 932 601
////////////////////////////////////////////////////////////////////
//     Function: EggTextureCollection::replace_textures
//       Access: Public, Static
//  Description: Walks the egg hierarchy, changing out any reference
//               to a texture appearing on the left side of the map
//               with its corresponding texture on the right side.
//               This is most often done following a call to
//               collapse_equivalent_textures().  It does not directly
//               affect the Collection.
////////////////////////////////////////////////////////////////////
128
static void EggTextureCollection::replace_textures(EggGroupNode *node, EggTextureCollection::TextureReplacement const &replace);

1903 14 uniquify_trefs 0 4 2060 36 EggTextureCollection::uniquify_trefs 0 1 933 384
////////////////////////////////////////////////////////////////////
//     Function: EggTextureCollection::uniquify_trefs
//       Access: Public
//  Description: Guarantees that each texture in the collection has a
//               unique TRef name.  This is essential before writing
//               an egg file.
////////////////////////////////////////////////////////////////////
48
void EggTextureCollection::uniquify_trefs(void);

1904 12 sort_by_tref 0 4 2060 34 EggTextureCollection::sort_by_tref 0 1 934 404
////////////////////////////////////////////////////////////////////
//     Function: EggTextureCollection::sort_by_tref
//       Access: Public
//  Description: Sorts all the textures into alphabetical order by
//               TRef name.  Subsequent operations using begin()/end()
//               will traverse in this sorted order.
////////////////////////////////////////////////////////////////////
46
void EggTextureCollection::sort_by_tref(void);

1905 16 sort_by_basename 0 4 2060 38 EggTextureCollection::sort_by_basename 0 1 935 471
////////////////////////////////////////////////////////////////////
//     Function: EggTextureCollection::sort_by_basename
//       Access: Public
//  Description: Sorts all the textures into alphabetical order by
//               the basename part (including extension) of the
//               filename.  Subsequent operations using begin()/end()
//               will traverse in this sorted order.
////////////////////////////////////////////////////////////////////
50
void EggTextureCollection::sort_by_basename(void);

1906 11 operator [] 0 4 2060 33 EggTextureCollection::operator [] 0 1 936 278
////////////////////////////////////////////////////////////////////
//     Function: EggTextureCollection::operator []
//       Access: Published
//  Description: Returns the nth EggTexture in the collection.
////////////////////////////////////////////////////////////////////
94
inline EggTexture *EggTextureCollection::operator [](EggTextureCollection::size_type n) const;

1907 4 size 0 4 2060 26 EggTextureCollection::size 0 1 937 278
////////////////////////////////////////////////////////////////////
//     Function: EggTextureCollection::size
//       Access: Published
//  Description: Returns the number of EggTextures in the collection.
////////////////////////////////////////////////////////////////////
78
inline EggTextureCollection::size_type EggTextureCollection::size(void) const;

1908 11 add_texture 0 4 2060 33 EggTextureCollection::add_texture 0 1 938 409
////////////////////////////////////////////////////////////////////
//     Function: EggTextureCollection::add_texture
//       Access: Public
//  Description: Explicitly adds a new texture to the collection.
//               Returns true if the texture was added, false if it
//               was already there or if there was some error.
////////////////////////////////////////////////////////////////////
60
bool EggTextureCollection::add_texture(EggTexture *texture);

1909 14 remove_texture 0 4 2060 36 EggTextureCollection::remove_texture 0 1 939 410
////////////////////////////////////////////////////////////////////
//     Function: EggTextureCollection::remove_texture
//       Access: Public
//  Description: Explicitly removes a texture from the collection.
//               Returns true if the texture was removed, false if it
//               wasn't there or if there was some error.
////////////////////////////////////////////////////////////////////
63
bool EggTextureCollection::remove_texture(EggTexture *texture);

1910 21 create_unique_texture 0 4 2060 43 EggTextureCollection::create_unique_texture 0 1 940 691
// create_unique_texture() creates a new texture if there is not
// already one equivalent (according to eq, see
// EggTexture::is_equivalent_to()) to the indicated texture, or
// returns the existing one if there is.

////////////////////////////////////////////////////////////////////
//     Function: EggTextureCollection::create_unique_texture
//       Access: Public
//  Description: Creates a new texture if there is not already one
//               equivalent (according to eq, see
//               EggTexture::is_equivalent_to()) to the indicated
//               texture, or returns the existing one if there is.
////////////////////////////////////////////////////////////////////
88
EggTexture *EggTextureCollection::create_unique_texture(EggTexture const &copy, int eq);

1911 9 find_tref 0 4 2060 31 EggTextureCollection::find_tref 0 1 941 373
// Find a texture with a particular TRef name.

////////////////////////////////////////////////////////////////////
//     Function: EggTextureCollection::find_tref
//       Access: Public
//  Description: Returns the texture with the indicated TRef name, or
//               NULL if no texture matches.
////////////////////////////////////////////////////////////////////
75
EggTexture *EggTextureCollection::find_tref(string const &tref_name) const;

1912 13 find_filename 0 4 2060 35 EggTextureCollection::find_filename 0 1 942 375
// Find a texture with a particular filename.

////////////////////////////////////////////////////////////////////
//     Function: EggTextureCollection::find_filename
//       Access: Public
//  Description: Returns the texture with the indicated filename, or
//               NULL if no texture matches.
////////////////////////////////////////////////////////////////////
80
EggTexture *EggTextureCollection::find_filename(Filename const &filename) const;

1913 14 EggTriangleFan 0 4 2061 30 EggTriangleFan::EggTriangleFan 0 2 943 944 459
////////////////////////////////////////////////////////////////////
//     Function: EggTriangleFan::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggTriangleFan::Copy constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
130
inline EggTriangleFan::EggTriangleFan(string const &name = "");
inline EggTriangleFan::EggTriangleFan(EggTriangleFan const &copy);

1914 10 operator = 0 4 2061 26 EggTriangleFan::operator = 0 1 945 239
////////////////////////////////////////////////////////////////////
//     Function: EggTriangleFan::Copy assignment operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
78
inline EggTriangleFan &EggTriangleFan::operator =(EggTriangleFan const &copy);

1915 14 get_class_type 0 4 2061 30 EggTriangleFan::get_class_type 0 1 946 0
55
static TypeHandle EggTriangleFan::get_class_type(void);

1916 16 EggTriangleStrip 0 4 2062 34 EggTriangleStrip::EggTriangleStrip 0 2 947 948 463
////////////////////////////////////////////////////////////////////
//     Function: EggTriangleStrip::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggTriangleStrip::Copy constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
140
inline EggTriangleStrip::EggTriangleStrip(string const &name = "");
inline EggTriangleStrip::EggTriangleStrip(EggTriangleStrip const &copy);

1917 10 operator = 0 4 2062 28 EggTriangleStrip::operator = 0 1 949 241
////////////////////////////////////////////////////////////////////
//     Function: EggTriangleStrip::Copy assignment operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
84
inline EggTriangleStrip &EggTriangleStrip::operator =(EggTriangleStrip const &copy);

1918 14 get_class_type 0 4 2062 32 EggTriangleStrip::get_class_type 0 1 950 0
57
static TypeHandle EggTriangleStrip::get_class_type(void);

1919 11 EggXfmSAnim 0 4 2063 24 EggXfmSAnim::EggXfmSAnim 0 3 951 952 953 771
////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::Copy constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::Conversion constructor
//       Access: Public
//  Description: Converts the older-style XfmAnim table to the
//               newer-style XfmSAnim table.
////////////////////////////////////////////////////////////////////
213
inline EggXfmSAnim::EggXfmSAnim(string const &name = "", CoordinateSystem cs = ::CS_default);
EggXfmSAnim::EggXfmSAnim(EggXfmAnimData const &convert_from);
inline EggXfmSAnim::EggXfmSAnim(EggXfmSAnim const &copy);

1920 10 operator = 0 4 2063 23 EggXfmSAnim::operator = 0 1 954 233
////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::Copy assignment operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
69
inline EggXfmSAnim &EggXfmSAnim::operator =(EggXfmSAnim const &copy);

1921 7 set_fps 0 4 2063 20 EggXfmSAnim::set_fps 0 1 955 216
////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::set_fps
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
45
inline void EggXfmSAnim::set_fps(double fps);

1922 9 clear_fps 0 4 2063 22 EggXfmSAnim::clear_fps 0 1 956 218
////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::clear_fps
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
41
inline void EggXfmSAnim::clear_fps(void);

1923 7 has_fps 0 4 2063 20 EggXfmSAnim::has_fps 0 1 957 216
////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::has_fps
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
45
inline bool EggXfmSAnim::has_fps(void) const;

1924 7 get_fps 0 4 2063 20 EggXfmSAnim::get_fps 0 1 958 262
////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::get_fps
//       Access: Public
//  Description: This is only valid if has_fps() returns true.
////////////////////////////////////////////////////////////////////
47
inline double EggXfmSAnim::get_fps(void) const;

1925 9 set_order 0 4 2063 22 EggXfmSAnim::set_order 0 1 959 218
////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::set_order
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
56
inline void EggXfmSAnim::set_order(string const &order);

1926 11 clear_order 0 4 2063 24 EggXfmSAnim::clear_order 0 1 960 220
////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::clear_order
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
43
inline void EggXfmSAnim::clear_order(void);

1927 9 has_order 0 4 2063 22 EggXfmSAnim::has_order 0 1 961 218
////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::has_order
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
47
inline bool EggXfmSAnim::has_order(void) const;

1928 9 get_order 0 4 2063 22 EggXfmSAnim::get_order 0 1 962 218
////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::get_order
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
56
inline string const &EggXfmSAnim::get_order(void) const;

1929 18 get_standard_order 0 4 2063 31 EggXfmSAnim::get_standard_order 0 1 963 448
////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::get_standard_order
//       Access: Public, Static
//  Description: Returns the standard order of matrix component
//               composition.  This is what the order string must be
//               set to in order to use set_value() or add_data()
//               successfully.
////////////////////////////////////////////////////////////////////
66
static inline string const &EggXfmSAnim::get_standard_order(void);

1930 21 get_coordinate_system 0 4 2063 34 EggXfmSAnim::get_coordinate_system 0 1 964 589
////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::get_coordinate_system
//       Access: Public
//  Description: Returns the coordinate system this table believes it
//               is defined within.  This should always match the
//               coordinate system of the EggData structure that owns
//               it.  It is necessary to store it here because the
//               meaning of the h, p, and r columns depends on the
//               coordinate system.
////////////////////////////////////////////////////////////////////
71
inline CoordinateSystem EggXfmSAnim::get_coordinate_system(void) const;

1931 8 optimize 0 4 2063 21 EggXfmSAnim::optimize 0 1 965 290
////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::optimize
//       Access: Public
//  Description: Optimizes the table by collapsing redundant
//               sub-tables.
////////////////////////////////////////////////////////////////////
33
void EggXfmSAnim::optimize(void);

1932 26 optimize_to_standard_order 0 4 2063 39 EggXfmSAnim::optimize_to_standard_order 0 1 966 512
////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::optimize_to_standard_order
//       Access: Public
//  Description: Optimizes the table by collapsing redundant
//               sub-tables, and simultaneously ensures that the order
//               string is the standard order (which is the same as
//               that supported by compose_matrix() and
//               decompose_matrix()).
////////////////////////////////////////////////////////////////////
51
void EggXfmSAnim::optimize_to_standard_order(void);

1933 9 normalize 0 4 2063 22 EggXfmSAnim::normalize 0 1 967 508
////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::normalize
//       Access: Public
//  Description: The inverse operation of optimize(), this ensures
//               that all the sub-tables have the same length by
//               duplicating rows as necessary.  This is needed before
//               doing operations like add_data() or set_value() on an
//               existing table.
////////////////////////////////////////////////////////////////////
34
void EggXfmSAnim::normalize(void);

1934 12 get_num_rows 0 4 2063 25 EggXfmSAnim::get_num_rows 0 1 968 528
////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::get_num_rows
//       Access: Public
//  Description: Returns the effective number of rows in the table.
//               This is actually the number of rows of the smallest
//               subtable larger than one row.  This is a convenience
//               function that treats the table of tables as if it
//               were a single table of matrices.
////////////////////////////////////////////////////////////////////
42
int EggXfmSAnim::get_num_rows(void) const;

1935 9 get_value 0 4 2063 22 EggXfmSAnim::get_value 0 1 969 639
////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::get_value
//       Access: Public
//  Description: Returns the value of the aggregate row of the table
//               as a matrix.  This is a convenience function that
//               treats the table of tables as if it were a single
//               table of matrices.  It is an error to call this if
//               any SAnimData children of this node have an improper
//               name (e.g. not a single letter, or not one of
//               "ijkabchprxyz").
////////////////////////////////////////////////////////////////////
59
void EggXfmSAnim::get_value(int row, LMatrix4d &mat) const;

1936 9 set_value 0 4 2063 22 EggXfmSAnim::set_value 0 1 970 716
////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::set_value
//       Access: Public
//  Description: Replaces the indicated row of the table with the
//               given matrix.
//
//               This function can only be called if all the
//               constraints of add_data(), below, are met.  Call
//               normalize() first if you are not sure.
//
//               The return value is true if the matrix can be
//               decomposed and stored as scale, shear, rotate, and
//               translate, or false otherwise.  The data is set in
//               either case.
////////////////////////////////////////////////////////////////////
59
bool EggXfmSAnim::set_value(int row, LMatrix4d const &mat);

1937 10 clear_data 0 4 2063 23 EggXfmSAnim::clear_data 0 1 971 316
////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::clear_data
//       Access: Public
//  Description: Removes all data from the table.  It does this by
//               removing all of its children.
////////////////////////////////////////////////////////////////////
42
inline void EggXfmSAnim::clear_data(void);

1938 8 add_data 0 4 2063 21 EggXfmSAnim::add_data 0 1 972 1669
////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::add_data
//       Access: Public
//  Description: Adds a new matrix to the table, by adding a new row
//               to each of the subtables.
//
//               This is a convenience function that
//               treats the table of tables as if it were a single
//               table of matrices.  It is an error to call this if
//               any SAnimData children of this node have an improper
//               name (e.g. not a single letter, or not one of
//               "ijkabchprxyz").
//
//               This function has the further requirement that all
//               nine of the subtables must exist and be of the same
//               length.  Furthermore, the order string must be the
//               standard order string, which matches the system
//               compose_matrix() and decompose_matrix() functions.
//
//               Thus, you probably cannot take an existing
//               EggXfmSAnim object and start adding matrices to the
//               end; you must clear out the original data first.  (As
//               a special exception, if no tables exist, they will be
//               created.)  The method normalize() will do this for
//               you on an existing EggXfmSAnim.
//
//               This function may fail silently if the matrix cannot
//               be decomposed into scale, shear, rotate, and
//               translate.  In this case, the closest approximation
//               is added to the table, and false is returned.
////////////////////////////////////////////////////////////////////
49
bool EggXfmSAnim::add_data(LMatrix4d const &mat);

1939 18 add_component_data 0 4 2063 31 EggXfmSAnim::add_component_data 0 2 973 974 639
////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::add_component_data
//       Access: Public
//  Description: Adds a new row to the named component (one of
//               matrix_component_letters) of the table.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::add_component_data
//       Access: Public
//  Description: Adds a new row to the indicated component (0-12) of
//               the table.
////////////////////////////////////////////////////////////////////
148
void EggXfmSAnim::add_component_data(string const &component_name, double value);
void EggXfmSAnim::add_component_data(int component, double value);

1940 18 compose_with_order 0 4 2063 31 EggXfmSAnim::compose_with_order 0 1 975 442
////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::compose_with_order
//       Access: Public, Static
//  Description: Composes a matrix out of the nine individual
//               components, respecting the order string.  The
//               components will be applied in the order indicated by
//               the string.
////////////////////////////////////////////////////////////////////
200
static void EggXfmSAnim::compose_with_order(LMatrix4d &mat, LVecBase3d const &scale, LVecBase3d const &shear, LVecBase3d const &hpr, LVecBase3d const &trans, string const &order, CoordinateSystem cs);

1941 14 get_class_type 0 4 2063 27 EggXfmSAnim::get_class_type 0 1 976 0
52
static TypeHandle EggXfmSAnim::get_class_type(void);

1942 12 ~EggXfmSAnim 0 4 2063 25 EggXfmSAnim::~EggXfmSAnim 0 0 0
32
EggXfmSAnim::~EggXfmSAnim(void);

1943 14 EggXfmAnimData 0 4 2064 30 EggXfmAnimData::EggXfmAnimData 0 3 977 978 979 780
////////////////////////////////////////////////////////////////////
//     Function: EggXfmAnimData::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggXfmAnimData::Copy constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggXfmAnimData::Conversion constructor
//       Access: Public
//  Description: Converts the newer-style XfmSAnim table to the
//               older-style XfmAnim table.
////////////////////////////////////////////////////////////////////
231
inline EggXfmAnimData::EggXfmAnimData(string const &name = "", CoordinateSystem cs = ::CS_default);
EggXfmAnimData::EggXfmAnimData(EggXfmSAnim const &convert_from);
inline EggXfmAnimData::EggXfmAnimData(EggXfmAnimData const &copy);

1944 10 operator = 0 4 2064 26 EggXfmAnimData::operator = 0 1 980 236
////////////////////////////////////////////////////////////////////
//     Function: EggXfmAnimData::Copy assignment operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
78
inline EggXfmAnimData &EggXfmAnimData::operator =(EggXfmAnimData const &copy);

1945 9 set_order 0 4 2064 25 EggXfmAnimData::set_order 0 1 981 221
////////////////////////////////////////////////////////////////////
//     Function: EggXfmAnimData::set_order
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
59
inline void EggXfmAnimData::set_order(string const &order);

1946 11 clear_order 0 4 2064 27 EggXfmAnimData::clear_order 0 1 982 223
////////////////////////////////////////////////////////////////////
//     Function: EggXfmAnimData::clear_order
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
46
inline void EggXfmAnimData::clear_order(void);

1947 9 has_order 0 4 2064 25 EggXfmAnimData::has_order 0 1 983 221
////////////////////////////////////////////////////////////////////
//     Function: EggXfmAnimData::has_order
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
50
inline bool EggXfmAnimData::has_order(void) const;

1948 9 get_order 0 4 2064 25 EggXfmAnimData::get_order 0 1 984 221
////////////////////////////////////////////////////////////////////
//     Function: EggXfmAnimData::get_order
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
59
inline string const &EggXfmAnimData::get_order(void) const;

1949 18 get_standard_order 0 4 2064 34 EggXfmAnimData::get_standard_order 0 1 985 451
////////////////////////////////////////////////////////////////////
//     Function: EggXfmAnimData::get_standard_order
//       Access: Public, Static
//  Description: Returns the standard order of matrix component
//               composition.  This is what the order string must be
//               set to in order to use set_value() or add_data()
//               successfully.
////////////////////////////////////////////////////////////////////
69
static inline string const &EggXfmAnimData::get_standard_order(void);

1950 12 set_contents 0 4 2064 28 EggXfmAnimData::set_contents 0 1 986 224
////////////////////////////////////////////////////////////////////
//     Function: EggXfmAnimData::set_contents
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
65
inline void EggXfmAnimData::set_contents(string const &contents);

1951 14 clear_contents 0 4 2064 30 EggXfmAnimData::clear_contents 0 1 987 226
////////////////////////////////////////////////////////////////////
//     Function: EggXfmAnimData::clear_contents
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
49
inline void EggXfmAnimData::clear_contents(void);

1952 12 has_contents 0 4 2064 28 EggXfmAnimData::has_contents 0 1 988 224
////////////////////////////////////////////////////////////////////
//     Function: EggXfmAnimData::has_contents
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
53
inline bool EggXfmAnimData::has_contents(void) const;

1953 12 get_contents 0 4 2064 28 EggXfmAnimData::get_contents 0 1 989 224
////////////////////////////////////////////////////////////////////
//     Function: EggXfmAnimData::get_contents
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
62
inline string const &EggXfmAnimData::get_contents(void) const;

1954 21 get_coordinate_system 0 4 2064 37 EggXfmAnimData::get_coordinate_system 0 1 990 592
////////////////////////////////////////////////////////////////////
//     Function: EggXfmAnimData::get_coordinate_system
//       Access: Public
//  Description: Returns the coordinate system this table believes it
//               is defined within.  This should always match the
//               coordinate system of the EggData structure that owns
//               it.  It is necessary to store it here because the
//               meaning of the h, p, and r columns depends on the
//               coordinate system.
////////////////////////////////////////////////////////////////////
74
inline CoordinateSystem EggXfmAnimData::get_coordinate_system(void) const;

1955 12 get_num_rows 0 4 2064 28 EggXfmAnimData::get_num_rows 0 1 991 265
////////////////////////////////////////////////////////////////////
//     Function: EggXfmAnimData::get_num_rows
//       Access: Public
//  Description: Returns the number of rows in the table.
////////////////////////////////////////////////////////////////////
52
inline int EggXfmAnimData::get_num_rows(void) const;

1956 12 get_num_cols 0 4 2064 28 EggXfmAnimData::get_num_cols 0 1 992 393
////////////////////////////////////////////////////////////////////
//     Function: EggXfmAnimData::get_num_cols
//       Access: Public
//  Description: Returns the number of columns in the table.  This is
//               set according to the "contents" string, which defines
//               the meaning of each column.
////////////////////////////////////////////////////////////////////
52
inline int EggXfmAnimData::get_num_cols(void) const;

1957 9 get_value 0 4 2064 25 EggXfmAnimData::get_value 0 2 993 994 839
////////////////////////////////////////////////////////////////////
//     Function: EggXfmAnimData::get_value
//       Access: Public
//  Description: Returns the value at the indicated row.  Row must be
//               in the range 0 <= row < get_num_rows(); col must be
//               in the range 0 <= col < get_num_cols().
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggXfmAnimData::get_value
//       Access: Public
//  Description: Returns the value of the aggregate row of the table
//               as a matrix.  This is a convenience function that
//               treats the 2-d table as if it were a single table of
//               matrices.
////////////////////////////////////////////////////////////////////
127
inline double EggXfmAnimData::get_value(int row, int col) const;
void EggXfmAnimData::get_value(int row, LMatrix4d &mat) const;

1958 14 get_class_type 0 4 2064 30 EggXfmAnimData::get_class_type 0 1 995 0
55
static TypeHandle EggXfmAnimData::get_class_type(void);

1959 15 ~EggXfmAnimData 0 4 2064 31 EggXfmAnimData::~EggXfmAnimData 0 0 0
38
EggXfmAnimData::~EggXfmAnimData(void);

995
1 0 0 7 3 2065 0 0 220 ////////////////////////////////////////////////////////////////////
//     Function: EggUserData::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
2 0 0 7 3 2065 0 0 225 ////////////////////////////////////////////////////////////////////
//     Function: EggUserData::Copy constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2066  
3 0 0 7 4 2065 0 0 233 ////////////////////////////////////////////////////////////////////
//     Function: EggUserData::Copy assignment operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2065  4 copy 1 2066  
4 0 0 7 5 2069 0 0 0 0 
5 0 0 7 7 2070 0 0 221 ////////////////////////////////////////////////////////////////////
//     Function: EggObject::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
6 0 0 7 7 2070 0 0 226 ////////////////////////////////////////////////////////////////////
//     Function: EggObject::Copy constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2071  
7 0 0 7 8 2070 0 0 234 ////////////////////////////////////////////////////////////////////
//     Function: EggObject::Copy assignment operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2070  4 copy 1 2071  
8 0 0 4 9 2073 0 0 1201 ////////////////////////////////////////////////////////////////////
//     Function: EggObject::set_user_data
//       Access: Published
//  Description: Sets the user data associated with this object.  This
//               may be any EggUserData-derived object.  The egg
//               library will do nothing with this pointer, except to
//               hold its reference count and return the pointer on
//               request.
//
//               The EggObject maintains multiple different
//               EggUserData pointers, one for each unique type (as
//               reported by get_type()).  If you know that only one
//               type of EggUserData object will be added in your
//               application, you may use the query functions that
//               accept no parameters, but it is recommended that in
//               general you pass in the type of your particular user
//               data, to allow multiple applications to coexist in
//               the same egg data.
//
//               This pointer is also copied by the copy assignment
//               operator and copy constructor.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2070  9 user_data 1 2065  
9 0 0 7 10 2065 0 0 366 ////////////////////////////////////////////////////////////////////
//     Function: EggObject::get_user_data
//       Access: Published
//  Description: Returns the user data pointer most recently stored on
//               this object, or NULL if nothing was previously
//               stored.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2071  
10 0 0 7 10 2065 0 0 331 ////////////////////////////////////////////////////////////////////
//     Function: EggObject::get_user_data
//       Access: Published
//  Description: Returns the user data pointer of the indicated type,
//               if it exists, or NULL if it does not.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2071  4 type 1 2069  
11 0 0 6 11 2074 0 0 361 ////////////////////////////////////////////////////////////////////
//     Function: EggObject::has_user_data
//       Access: Published
//  Description: Returns true if a generic user data pointer has
//               recently been set and not yet cleared, false
//               otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2071  
12 0 0 6 11 2074 0 0 331 ////////////////////////////////////////////////////////////////////
//     Function: EggObject::has_user_data
//       Access: Published
//  Description: Returns true if the user data pointer of the
//               indicated type has been set, false otherwise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2071  4 type 1 2069  
13 0 0 4 12 2073 0 0 273 ////////////////////////////////////////////////////////////////////
//     Function: EggObject::clear_user_data
//       Access: Published
//  Description: Removes *all* user data pointers from the node.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2070  
14 0 0 4 12 2073 0 0 278 ////////////////////////////////////////////////////////////////////
//     Function: EggObject::clear_user_data
//       Access: Published
//  Description: Removes the user data pointer of the indicated type.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2070  4 type 1 2069  
15 0 0 7 13 2069 0 0 0 0 
16 0 0 7 20 2077 1014 0 228 ////////////////////////////////////////////////////////////////////
//     Function: EggNamedObject::Copy constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2075  
17 0 0 7 20 2077 1014 0 223 ////////////////////////////////////////////////////////////////////
//     Function: EggNamedObject::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 name 1 2078  
18 0 0 7 21 2077 1014 0 236 ////////////////////////////////////////////////////////////////////
//     Function: EggNamedObject::Copy assignment operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2077  4 copy 1 2075  
19 0 0 4 22 2073 0 0 219 ////////////////////////////////////////////////////////////////////
//     Function: EggNamedObject::output
//       Access: Public
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 2075  3 out 1 2079  
20 0 0 7 23 2069 0 0 0 0 
21 0 0 7 15 2070 0 0 0 1 4 this 3 2077  
22 0 0 7 16 2077 1014 0 0 1 4 this 3 2070  
23 0 0 6 18 2081 0 0 0 1 4 this 3 2077  
24 0 0 7 19 2077 1014 0 0 1 4 this 3 2081  
25 0 0 7 26 2082 1053 0 229 ////////////////////////////////////////////////////////////////////
//     Function: EggNode::Copy assignment operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2082  4 copy 1 2083  
26 0 0 7 27 2085 1053 0 215 ////////////////////////////////////////////////////////////////////
//     Function: EggNode::get_parent
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2083  
27 0 0 6 28 2086 0 0 297 ////////////////////////////////////////////////////////////////////
//     Function: EggNode::get_depth
//       Access: Public
//  Description: Returns the number of nodes above this node in the
//               egg hierarchy.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2083  
28 0 0 6 29 2074 0 0 366 ////////////////////////////////////////////////////////////////////
//     Function: EggNode::is_under_instance
//       Access: Public
//  Description: Returns true if there is an <Instance> node somewhere
//               in the egg tree at or above this node, false
//               otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2083  
29 0 0 6 30 2074 0 0 368 ////////////////////////////////////////////////////////////////////
//     Function: EggNode::is_under_transform
//       Access: Public
//  Description: Returns true if there is a <Transform> entry somewhere
//               in the egg tree at or above this node, false
//               otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2083  
30 0 0 6 31 2074 0 0 443 ////////////////////////////////////////////////////////////////////
//     Function: EggNode::is_local_coord
//       Access: Public
//  Description: Returns true if this node's vertices are not in the
//               global coordinate space.  This will be the case if
//               there was an <Instance> node under a transform at or
//               above this node.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2083  
31 0 0 6 32 2087 0 0 1112 ////////////////////////////////////////////////////////////////////
//     Function: EggNode::get_vertex_frame
//       Access: Public
//  Description: Returns the coordinate frame of the vertices
//               referenced by primitives at or under this node.  This
//               is not the same as get_node_frame().
//
//               Generally, vertices in an egg file are stored in the
//               global coordinate space, regardless of the transforms
//               defined at each node.  Thus, get_vertex_frame() will
//               usually return the identity transform (global
//               coordinate space).  However, primitives under an
//               <Instance> entry reference their vertices in the
//               coordinate system under effect at the time of the
//               <Instance>.  Thus, nodes under an <Instance> entry
//               may return this non-identity matrix.
//
//               Specifically, this may return a non-identity matrix
//               only if is_local_coord() is true.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2083  
32 0 0 6 33 2087 0 0 372 ////////////////////////////////////////////////////////////////////
//     Function: EggNode::get_node_frame
//       Access: Public
//  Description: Returns the coordinate frame of the node itself.
//               This is simply the net product of all transformations
//               up to the root.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2083  
33 0 0 6 34 2087 0 0 333 ////////////////////////////////////////////////////////////////////
//     Function: EggNode::get_vertex_frame_inv
//       Access: Public
//  Description: Returns the inverse of the matrix returned by
//               get_vertex_frame().  See get_vertex_frame().
//////////////////////////////////////////////////////////////////// 1 4 this 3 2083  
34 0 0 6 35 2087 0 0 327 ////////////////////////////////////////////////////////////////////
//     Function: EggNode::get_node_frame_inv
//       Access: Public
//  Description: Returns the inverse of the matrix returned by
//               get_node_frame().  See get_node_frame().
//////////////////////////////////////////////////////////////////// 1 4 this 3 2083  
35 0 0 6 36 2087 0 0 503 ////////////////////////////////////////////////////////////////////
//     Function: EggNode::get_vertex_to_node
//       Access: Public
//  Description: Returns the transformation matrix suitable for
//               converting the vertices as read from the egg file
//               into the coordinate space of the node.  This is the
//               same thing as:
//
//               get_vertex_frame() * get_node_frame_inv()
//
//////////////////////////////////////////////////////////////////// 1 4 this 3 2083  
36 0 0 6 37 2087 0 0 535 ////////////////////////////////////////////////////////////////////
//     Function: EggNode::get_node_to_vertex
//       Access: Public
//  Description: Returns the transformation matrix suitable for
//               converting vertices in the coordinate space of the
//               node to the appropriate coordinate space for storing
//               in the egg file.  This is the same thing as:
//
//               get_node_frame() * get_vertex_frame_inv()
//
//////////////////////////////////////////////////////////////////// 1 4 this 3 2083  
37 0 0 6 38 2087 0 0 366 ////////////////////////////////////////////////////////////////////
//     Function: EggNode::get_vertex_frame_ptr
//       Access: Public
//  Description: Returns either a NULL pointer or a unique pointer
//               shared by nodes with the same get_vertex_frame()
//               matrix.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2083  
38 0 0 6 39 2087 0 0 362 ////////////////////////////////////////////////////////////////////
//     Function: EggNode::get_node_frame_ptr
//       Access: Public
//  Description: Returns either a NULL pointer or a unique pointer
//               shared by nodes with the same get_node_frame()
//               matrix.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2083  
39 0 0 6 40 2087 0 0 374 ////////////////////////////////////////////////////////////////////
//     Function: EggNode::get_vertex_frame_inv_ptr
//       Access: Public
//  Description: Returns either a NULL pointer or a unique pointer
//               shared by nodes with the same get_vertex_frame_inv()
//               matrix.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2083  
40 0 0 6 41 2087 0 0 370 ////////////////////////////////////////////////////////////////////
//     Function: EggNode::get_node_frame_inv_ptr
//       Access: Public
//  Description: Returns either a NULL pointer or a unique pointer
//               shared by nodes with the same get_node_frame_inv()
//               matrix.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2083  
41 0 0 6 42 2087 0 0 370 ////////////////////////////////////////////////////////////////////
//     Function: EggNode::get_vertex_to_node_ptr
//       Access: Public
//  Description: Returns either a NULL pointer or a unique pointer
//               shared by nodes with the same get_vertex_to_node()
//               matrix.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2083  
42 0 0 6 43 2087 0 0 370 ////////////////////////////////////////////////////////////////////
//     Function: EggNode::get_node_to_vertex_ptr
//       Access: Public
//  Description: Returns either a NULL pointer or a unique pointer
//               shared by nodes with the same get_node_to_vertex()
//               matrix.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2083  
43 0 0 4 44 2073 0 0 308 ////////////////////////////////////////////////////////////////////
//     Function: EggNode::transform
//       Access: Public
//  Description: Applies the indicated transformation to the node and
//               all of its descendants.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2082  3 mat 1 2087  
44 0 0 4 45 2073 0 0 476 ////////////////////////////////////////////////////////////////////
//     Function: EggNode::transform_vertices_only
//       Access: Public
//  Description: Applies the indicated transformation only to vertices
//               that appear in global space within vertex pools at
//               this node and below.  Joints and other transforms are
//               not affected, nor are local vertices.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2082  3 mat 1 2087  
45 0 0 4 46 2073 0 0 699 ////////////////////////////////////////////////////////////////////
//     Function: EggNode::flatten_transforms
//       Access: Public
//  Description: Removes any transform and instance records from this
//               node in the scene graph and below.  If an instance
//               node is encountered, removes the instance and applies
//               the transform to its vertices, duplicating vertices
//               if necessary.
//
//               Since this function may result in duplicated
//               vertices, it may be a good idea to call
//               remove_unused_vertices() after calling this.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2082  
46 0 0 4 47 2073 0 0 398 ////////////////////////////////////////////////////////////////////
//     Function: EggNode::apply_texmats
//       Access: Public
//  Description: Applies the texture matrices to the UV's of the
//               vertices that reference them, and then removes the
//               texture matrices from the textures themselves.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2082  
47 0 0 6 48 2086 0 0 254 ////////////////////////////////////////////////////////////////////
//     Function: EggNode::rename_node
//       Access: Published
//  Description: Rename by stripping out the prefix
//////////////////////////////////////////////////////////////////// 2 4 this 3 2082  12 strip_prefix 1 2090  
48 0 0 6 49 2074 0 0 504 ////////////////////////////////////////////////////////////////////
//     Function: EggNode::is_joint
//       Access: Public, Virtual
//  Description: Returns true if this particular node represents a
//               <Joint> entry or not.  This is a handy thing to know
//               since Joints are sorted to the end of their sibling
//               list when writing an egg file.  See
//               EggGroupNode::write().
//////////////////////////////////////////////////////////////////// 1 4 this 3 2083  
49 0 0 6 50 2074 0 0 341 ////////////////////////////////////////////////////////////////////
//     Function: EggNode::is_anim_matrix
//       Access: Public, Virtual
//  Description: Returns true if this node represents a table of
//               animation transformation data, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2083  
50 0 0 6 51 2093 0 0 549 ////////////////////////////////////////////////////////////////////
//     Function: EggNode::determine_alpha_mode
//       Access: Public, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               or EggPrimitive or some such object at this level or
//               above this node that has an alpha_mode other than
//               AM_unspecified.  Returns a valid EggRenderMode pointer
//               if one is found, or NULL otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2082  
51 0 0 6 52 2093 0 0 561 ////////////////////////////////////////////////////////////////////
//     Function: EggNode::determine_depth_write_mode
//       Access: Public, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               or EggPrimitive or some such object at this level or
//               above this node that has a depth_write_mode other than
//               DWM_unspecified.  Returns a valid EggRenderMode pointer
//               if one is found, or NULL otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2082  
52 0 0 6 53 2093 0 0 559 ////////////////////////////////////////////////////////////////////
//     Function: EggNode::determine_depth_test_mode
//       Access: Public, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               or EggPrimitive or some such object at this level or
//               above this node that has a depth_test_mode other than
//               DTM_unspecified.  Returns a valid EggRenderMode pointer
//               if one is found, or NULL otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2082  
53 0 0 6 54 2093 0 0 558 ////////////////////////////////////////////////////////////////////
//     Function: EggNode::determine_visibility_mode
//       Access: Public, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               or EggPrimitive or some such object at this level or
//               above this node that has a visibility_mode other than
//               VM_unspecified.  Returns a valid EggRenderMode pointer
//               if one is found, or NULL otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2082  
54 0 0 6 55 2093 0 0 535 ////////////////////////////////////////////////////////////////////
//     Function: EggNode::determine_depth_offset
//       Access: Public, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               or EggPrimitive or some such object at this level or
//               above this node that has a depth_offset specified.
//               Returns a valid EggRenderMode pointer if one is found,
//               or NULL otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2082  
55 0 0 6 56 2093 0 0 531 ////////////////////////////////////////////////////////////////////
//     Function: EggNode::determine_draw_order
//       Access: Public, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               or EggPrimitive or some such object at this level or
//               above this node that has a draw_order specified.
//               Returns a valid EggRenderMode pointer if one is found,
//               or NULL otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2082  
56 0 0 6 57 2093 0 0 518 ////////////////////////////////////////////////////////////////////
//     Function: EggNode::determine_bin
//       Access: Public, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               or EggPrimitive or some such object at this level or
//               above this node that has a bin specified.  Returns a
//               valid EggRenderMode pointer if one is found, or NULL
//               otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2082  
57 0 0 6 58 2074 0 0 615 ////////////////////////////////////////////////////////////////////
//     Function: EggNode::determine_indexed
//       Access: Public, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               at this level or above that has the "indexed" scalar
//               set.  Returns the value of the indexed scalar if it
//               is found, or false if it is not.
//
//               In other words, returns true if the "indexed" flag is
//               in effect for the indicated node, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2082  
58 0 0 6 59 2074 0 0 603 ////////////////////////////////////////////////////////////////////
//     Function: EggNode::determine_decal
//       Access: Public, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               at this level or above that has the "decal" flag
//               set.  Returns the value of the decal flag if it
//               is found, or false if it is not.
//
//               In other words, returns true if the "decal" flag is
//               in effect for the indicated node, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2082  
59 0 0 4 60 2073 0 0 0 3 4 this 3 2083  3 out 1 2079  12 indent_level 1 2086  
60 0 0 6 61 2074 0 0 575 ////////////////////////////////////////////////////////////////////
//     Function: EggNode::parse_egg
//       Access: Public
//  Description: Parses the egg syntax given in the indicate string as
//               if it had been read from the egg file within this
//               object's definition.  Updates the object accordingly.
//               Returns true if successful, false if there was some
//               parse error or if the object does not support this
//               functionality.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2082  10 egg_syntax 1 2078  
61 0 0 4 62 2073 0 0 0 1 4 this 3 2083  
62 0 0 7 63 2069 0 0 0 0 
63 0 0 7 66 2094 1064 0 233 ////////////////////////////////////////////////////////////////////
//     Function: EggAnimData::Copy assignment operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2094  4 copy 1 2095  
64 0 0 4 67 2073 0 0 216 ////////////////////////////////////////////////////////////////////
//     Function: EggAnimData::set_fps
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2094  4 type 1 2097  
65 0 0 4 68 2073 0 0 218 ////////////////////////////////////////////////////////////////////
//     Function: EggAnimData::clear_fps
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2094  
66 0 0 6 69 2074 0 0 216 ////////////////////////////////////////////////////////////////////
//     Function: EggAnimData::has_fps
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2095  
67 0 0 6 70 2097 0 0 262 ////////////////////////////////////////////////////////////////////
//     Function: EggAnimData::get_fps
//       Access: Public
//  Description: This is only valid if has_fps() returns true.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2095  
68 0 0 4 71 2073 0 0 259 ////////////////////////////////////////////////////////////////////
//     Function: EggAnimData::clear_data
//       Access: Public
//  Description: Removes all data and empties the table.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2094  
69 0 0 4 72 2073 0 0 253 ////////////////////////////////////////////////////////////////////
//     Function: EggAnimData::add_data
//       Access: Public
//  Description: Adds a single element to the table.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2094  5 value 1 2097  
70 0 0 6 73 2086 0 0 262 ////////////////////////////////////////////////////////////////////
//     Function: EggAnimData::get_size
//       Access: Public
//  Description: Returns the number of elements in the table.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2095  
71 0 0 4 74 2073 0 0 303 ////////////////////////////////////////////////////////////////////
//     Function: EggAnimData::quantize
//       Access: Public
//  Description: Rounds each element of the table to the nearest
//               multiple of quantum.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2094  7 quantum 1 2097  
72 0 0 7 75 2069 0 0 0 0 
73 0 0 7 78 2100 1076 0 228 ////////////////////////////////////////////////////////////////////
//     Function: EggAnimPreload::Copy constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2098  
74 0 0 7 78 2100 1076 0 223 ////////////////////////////////////////////////////////////////////
//     Function: EggAnimPreload::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 name 1 2078  
75 0 0 7 79 2100 1076 0 236 ////////////////////////////////////////////////////////////////////
//     Function: EggAnimPreload::Copy assignment operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2100  4 copy 1 2098  
76 0 0 4 80 2073 0 0 219 ////////////////////////////////////////////////////////////////////
//     Function: EggAnimPreload::set_fps
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2100  3 fps 1 2097  
77 0 0 4 81 2073 0 0 221 ////////////////////////////////////////////////////////////////////
//     Function: EggAnimPreload::clear_fps
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2100  
78 0 0 6 82 2074 0 0 219 ////////////////////////////////////////////////////////////////////
//     Function: EggAnimPreload::has_fps
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2098  
79 0 0 6 83 2097 0 0 265 ////////////////////////////////////////////////////////////////////
//     Function: EggAnimPreload::get_fps
//       Access: Public
//  Description: This is only valid if has_fps() returns true.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2098  
80 0 0 4 84 2073 0 0 226 ////////////////////////////////////////////////////////////////////
//     Function: EggAnimPreload::set_num_frames
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2100  10 num_frames 1 2086  
81 0 0 4 85 2073 0 0 228 ////////////////////////////////////////////////////////////////////
//     Function: EggAnimPreload::clear_num_frames
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2100  
82 0 0 6 86 2074 0 0 226 ////////////////////////////////////////////////////////////////////
//     Function: EggAnimPreload::has_num_frames
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2098  
83 0 0 6 87 2086 0 0 279 ////////////////////////////////////////////////////////////////////
//     Function: EggAnimPreload::get_num_frames
//       Access: Public
//  Description: This is only valid if has_num_frames() returns true.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2098  
84 0 0 7 88 2069 0 0 0 0 
85 0 0 7 94 2101 1081 0 225 ////////////////////////////////////////////////////////////////////
//     Function: EggAttributes::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
86 0 0 7 94 2101 1081 0 230 ////////////////////////////////////////////////////////////////////
//     Function: EggAttributes::Copy constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2102  
87 0 0 6 95 2101 0 0 238 ////////////////////////////////////////////////////////////////////
//     Function: EggAttributes::Copy assignment operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2101  4 copy 1 2102  
88 0 0 6 97 2074 0 0 224 ////////////////////////////////////////////////////////////////////
//     Function: EggAttributes::has_normal
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2102  
89 0 0 6 98 2104 0 0 224 ////////////////////////////////////////////////////////////////////
//     Function: EggAttributes::get_normal
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2102  
90 0 0 4 99 2073 0 0 224 ////////////////////////////////////////////////////////////////////
//     Function: EggAttributes::set_normal
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2101  6 normal 1 2104  
91 0 0 4 100 2073 0 0 226 ////////////////////////////////////////////////////////////////////
//     Function: EggAttributes::clear_normal
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2101  
92 0 0 6 101 2074 0 0 345 ////////////////////////////////////////////////////////////////////
//     Function: EggAttributes::matches_normal
//       Access: Published
//  Description: Returns true if this normal matches that of the other
//               EggAttributes object, include the morph list.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2102  5 other 1 2102  
93 0 0 4 102 2073 0 0 376 ////////////////////////////////////////////////////////////////////
//     Function: EggAttributes::copy_normal
//       Access: Published
//  Description: Sets this normal to be the same as the other's,
//               include morphs.  If the other has no normal, this
//               clears the normal.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2101  5 other 1 2102  
94 0 0 6 103 2074 0 0 223 ////////////////////////////////////////////////////////////////////
//     Function: EggAttributes::has_color
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2102  
95 0 0 7 104 2111 0 0 333 ////////////////////////////////////////////////////////////////////
//     Function: EggAttributes::get_color
//       Access: Published
//  Description: Returns the color set on this particular attribute.
//               If there is no color set, returns white.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2102  
96 0 0 4 105 2073 0 0 214 ////////////////////////////////////////////////////////////////////
//     Function: EggAttributes::
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2101  5 Color 1 2112  
97 0 0 4 106 2073 0 0 214 ////////////////////////////////////////////////////////////////////
//     Function: EggAttributes::
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2101  
98 0 0 6 107 2074 0 0 343 ////////////////////////////////////////////////////////////////////
//     Function: EggAttributes::matches_color
//       Access: Published
//  Description: Returns true if this color matches that of the other
//               EggAttributes object, include the morph list.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2102  5 other 1 2102  
99 0 0 4 108 2073 0 0 372 ////////////////////////////////////////////////////////////////////
//     Function: EggAttributes::copy_color
//       Access: Published
//  Description: Sets this color to be the same as the other's,
//               include morphs.  If the other has no color, this
//               clears the color.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2101  5 other 1 2102  
100 0 0 4 109 2073 0 0 304 ////////////////////////////////////////////////////////////////////
//     Function: EggAttributes::write
//       Access: Published
//  Description: Writes the attributes to the indicated output stream in
//               Egg format.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2102  3 out 1 2079  12 indent_level 1 2086  
101 0 0 6 110 2074 0 0 399 ////////////////////////////////////////////////////////////////////
//     Function: EggAttributes::sorts_less_than
//       Access: Published
//  Description: An ordering operator to compare two vertices for
//               sorting order.  This imposes an arbitrary ordering
//               useful to identify unique vertices.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2102  5 other 1 2102  
102 0 0 6 111 2086 0 0 394 ////////////////////////////////////////////////////////////////////
//     Function: EggAttributes::compare_to
//       Access: Published
//  Description: An ordering operator to compare two vertices for
//               sorting order.  This imposes an arbitrary ordering
//               useful to identify unique vertices.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2102  5 other 1 2102  
103 0 0 4 112 2073 0 0 312 ////////////////////////////////////////////////////////////////////
//     Function: EggAttributes::transform
//       Access: Published, Virtual
//  Description: Applies the indicated transformation matrix to the
//               attributes.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2101  3 mat 1 2087  
104 0 0 7 121 2069 0 0 0 0 
105 0 0 6 92 2114 0 0 0 1 4 this 3 2101  
106 0 0 6 93 2101 0 0 0 1 4 this 3 2114  
107 0 0 7 115 2115 0 0 0 1 4 this 3 2102  
108 0 0 7 119 2116 0 0 0 1 4 this 3 2102  
109 0 0 7 123 2119 1014 0 228 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexUV::Copy Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2117  
110 0 0 7 123 2119 1014 0 223 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexUV::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 name 1 2078  3 uvw 1 2120  
111 0 0 7 123 2119 1014 0 223 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexUV::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 name 1 2078  2 uv 1 2124  
112 0 0 7 124 2119 1014 0 236 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexUV::Copy Assignment Operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2119  4 copy 1 2117  
113 0 0 6 125 2078 0 0 511 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexUV::filter_name
//       Access: Published, Static
//  Description: Returns the actual name that should be set for a
//               given name string.  Usually this is the same string
//               that is input, but for historical reasons the texture
//               coordinate name "default" is mapped to the empty
//               string.
//////////////////////////////////////////////////////////////////// 1 4 name 1 2078  
114 0 0 4 126 2073 0 0 220 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexUV::set_name
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2119  4 name 1 2078  
115 0 0 6 127 2086 0 0 401 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexUV::get_num_dimensions
//       Access: Published
//  Description: Returns the number of components of the texture
//               coordinate set.  This is either 2 (the normal case)
//               or 3 (for a 3-d texture coordinate).
//////////////////////////////////////////////////////////////////// 1 4 this 3 2117  
116 0 0 6 128 2074 0 0 369 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexUV::has_w
//       Access: Published
//  Description: Returns true if the texture coordinate has a third, w
//               component, false if it is just a normal 2-d texture
//               coordinate.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2117  
117 0 0 7 129 2128 0 0 302 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexUV::get_uv
//       Access: Published
//  Description: Returns the texture coordinate pair, if
//               get_num_dimensions() is 2.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2117  
118 0 0 6 130 2120 0 0 435 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexUV::get_uvw
//       Access: Published
//  Description: Returns the texture coordinate triple, if
//               get_num_dimensions() is 3.  This is also legal to
//               call if get_num_dimensions() is 2 (but the last
//               dimension will be zero).
//////////////////////////////////////////////////////////////////// 1 4 this 3 2117  
119 0 0 4 131 2073 0 0 372 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexUV::set_uv
//       Access: Published
//  Description: Sets the texture coordinate pair.  This makes the
//               texture coordinate a 2-d texture coordinate, which is
//               the usual case.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2119  8 texCoord 1 2124  
120 0 0 4 132 2073 0 0 333 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexUV::set_uvw
//       Access: Published
//  Description: Sets the texture coordinate triple.  This makes the
//               texture coordinate a 3-d texture coordinate.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2119  8 texCoord 1 2120  
121 0 0 6 133 2074 0 0 223 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexUV::has_tangent
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2117  
122 0 0 6 134 2104 0 0 223 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexUV::get_tangent
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2117  
123 0 0 4 135 2073 0 0 223 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexUV::set_tangent
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2119  7 tangent 1 2104  
124 0 0 4 136 2073 0 0 225 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexUV::clear_tangent
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2119  
125 0 0 6 137 2074 0 0 224 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexUV::has_binormal
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2117  
126 0 0 6 138 2104 0 0 224 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexUV::get_binormal
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2117  
127 0 0 4 139 2073 0 0 224 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexUV::set_binormal
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2119  8 binormal 1 2104  
128 0 0 4 140 2073 0 0 226 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexUV::clear_binormal
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2119  
129 0 0 7 141 2119 1014 0 401 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexUV::make_average
//       Access: Published, Static
//  Description: Creates a new EggVertexUV that contains the
//               averaged values of the two given objects.  It is
//               an error if they don't have the same name.
/////////////////////////////////////////////////////////////////// 2 5 first 1 2117  6 second 1 2117  
130 0 0 4 142 2073 0 0 400 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexUV::transform
//       Access: Published, Virtual
//  Description: Applies the indicated transformation matrix to the
//               UV's tangent and/or binormal.  This does nothing if
//               there is no tangent or binormal.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2119  3 mat 1 2087  
131 0 0 4 143 2073 0 0 214 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexUV::write
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 2117  3 out 1 2079  12 indent_level 1 2086  
132 0 0 6 144 2086 0 0 389 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexUV::compare_to
//       Access: Public
//  Description: An ordering operator to compare two vertices for
//               sorting order.  This imposes an arbitrary ordering
//               useful to identify unique vertices.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2117  5 other 1 2117  
133 0 0 7 149 2069 0 0 0 0 
134 0 0 7 147 2129 0 0 0 1 4 this 3 2117  
135 0 0 7 151 2132 1014 0 229 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexAux::Copy Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2130  
136 0 0 7 151 2132 1014 0 224 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexAux::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 name 1 2078  3 aux 1 2133  
137 0 0 7 152 2132 1014 0 237 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexAux::Copy Assignment Operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2132  4 copy 1 2130  
138 0 0 4 153 2073 0 0 221 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexAux::set_name
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2132  4 name 1 2078  
139 0 0 6 154 2133 0 0 258 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexAux::get_aux
//       Access: Published
//  Description: Returns the auxiliary data quadruple.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2130  
140 0 0 4 155 2073 0 0 255 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexAux::set_aux
//       Access: Published
//  Description: Sets the auxiliary data quadruple.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2132  3 aux 1 2133  
141 0 0 7 156 2132 1014 0 403 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexAux::make_average
//       Access: Published, Static
//  Description: Creates a new EggVertexAux that contains the
//               averaged values of the two given objects.  It is
//               an error if they don't have the same name.
/////////////////////////////////////////////////////////////////// 2 5 first 1 2130  6 second 1 2130  
142 0 0 4 157 2073 0 0 215 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexAux::write
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 2130  3 out 1 2079  12 indent_level 1 2086  
143 0 0 6 158 2086 0 0 390 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexAux::compare_to
//       Access: Public
//  Description: An ordering operator to compare two vertices for
//               sorting order.  This imposes an arbitrary ordering
//               useful to identify unique vertices.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2130  5 other 1 2130  
144 0 0 7 159 2069 0 0 0 0 
145 0 0 7 165 2136 1140 0 221 ////////////////////////////////////////////////////////////////////
//     Function: EggVertex::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
146 0 0 7 165 2136 1140 0 339 ////////////////////////////////////////////////////////////////////
//     Function: EggVertex::Copy constructor
//       Access: Published
//  Description: Copies all properties of the vertex except its vertex
//               pool, index number, and group membership.
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2137  
147 0 0 7 166 2136 1140 0 347 ////////////////////////////////////////////////////////////////////
//     Function: EggVertex::Copy assignment operator
//       Access: Published
//  Description: Copies all properties of the vertex except its vertex
//               pool, index number, and group membership.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2136  4 copy 1 2137  
148 0 0 7 168 2139 1053 0 362 ////////////////////////////////////////////////////////////////////
//     Function: EggVertex::get_pool
//       Access: Published
//  Description: Returns the vertex pool this vertex belongs in.  This
//               may be NULL if the vertex has not been added to a
//               pool.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2137  
149 0 0 6 169 2074 0 0 710 ////////////////////////////////////////////////////////////////////
//     Function: EggVertex::is_forward_reference
//       Access: Published
//  Description: Returns true if the vertex is a forward reference to
//               some vertex that hasn't been defined yet.  In this
//               case, the vertex may not have any properties filled
//               in yet.
//
//               This can only happen if you implicitly create a
//               vertex via EggVertexPool::get_forward_vertex().
//               Presumably, when the vertex pool is later filled in,
//               this vertex will be replaced with real data.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2137  
150 0 0 4 170 2073 0 0 318 ////////////////////////////////////////////////////////////////////
//     Function: EggVertex::set_pos
//       Access: Published
//  Description: Sets the vertex position.  This variant sets the
//               vertex to a two-dimensional value.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2136  3 pos 1 2140  
151 0 0 4 170 2073 0 0 320 ////////////////////////////////////////////////////////////////////
//     Function: EggVertex::set_pos
//       Access: Published
//  Description: Sets the vertex position.  This variant sets the
//               vertex to a three-dimensional value.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2136  3 pos 1 2142  
152 0 0 4 170 2073 0 0 319 ////////////////////////////////////////////////////////////////////
//     Function: EggVertex::set_pos
//       Access: Published
//  Description: Sets the vertex position.  This variant sets the
//               vertex to a four-dimensional value.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2136  3 pos 1 2144  
153 0 0 4 170 2073 0 0 318 ////////////////////////////////////////////////////////////////////
//     Function: EggVertex::set_pos
//       Access: Published
//  Description: Sets the vertex position.  This variant sets the
//               vertex to a one-dimensional value.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2136  3 pos 1 2097  
154 0 0 4 171 2073 0 0 600 ////////////////////////////////////////////////////////////////////
//     Function: EggVertex::set_pos4
//       Access: Published
//  Description: This special flavor of set_pos() sets the vertex as a
//               four-component value, but does not change the set
//               number of dimensions.  It's handy for retrieving the
//               vertex position via get_pos4, manipulating it, then
//               storing it back again, without worrying about the
//               number of dimensions it actually had.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2136  3 pos 1 2144  
155 0 0 6 172 2086 0 0 371 // get_pos[123] return the pos as the corresponding type.  It is an
// error to call any of these without first verifying that
// get_num_dimensions() matches the desired type.  However,
// get_pos4() may always be called; it returns the pos as a
// four-component point in homogeneous space (with a 1.0 in the last
// position if the pos has fewer than four components). 1 4 this 3 2137  
156 0 0 6 173 2097 0 0 330 ////////////////////////////////////////////////////////////////////
//     Function: EggVertex::get_pos1
//       Access: Published
//  Description: Only valid if get_num_dimensions() returns 1.
//               Returns the position as a one-dimensional value.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2137  
157 0 0 7 174 2147 0 0 330 ////////////////////////////////////////////////////////////////////
//     Function: EggVertex::get_pos2
//       Access: Published
//  Description: Only valid if get_num_dimensions() returns 2.
//               Returns the position as a two-dimensional value.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2137  
158 0 0 7 175 2149 0 0 332 ////////////////////////////////////////////////////////////////////
//     Function: EggVertex::get_pos3
//       Access: Published
//  Description: Valid if get_num_dimensions() returns 3 or 4.
//               Returns the position as a three-dimensional value.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2137  
159 0 0 7 176 2150 0 0 591 ////////////////////////////////////////////////////////////////////
//     Function: EggVertex::get_pos4
//       Access: Published
//  Description: This is always valid, regardless of the value of
//               get_num_dimensions.  It returns the position as a
//               four-dimensional value.  If the pos has fewer than
//               four dimensions, this value represents the pos
//               extended into four-dimensional homogenous space,
//               e.g. by adding 1 as the fourth component.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2137  
160 0 0 6 177 2074 0 0 551 ////////////////////////////////////////////////////////////////////
//     Function: EggVertex::has_uv
//       Access: Published
//  Description: Returns true if the vertex has an unnamed UV
//               coordinate pair, false otherwise.
//
//               This is the more restrictive interface, and is
//               generally useful only in the absence of
//               multitexturing; see has_uv(name) for the interface
//               that supports multitexturing.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2137  
161 0 0 6 177 2074 0 0 369 ////////////////////////////////////////////////////////////////////
//     Function: EggVertex::has_uv
//       Access: Published
//  Description: Returns true if the vertex has the named UV
//               coordinate pair, and the named UV coordinate pair is
//               2-d, false otherwise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2137  4 name 1 2078  
162 0 0 7 178 2128 0 0 604 ////////////////////////////////////////////////////////////////////
//     Function: EggVertex::get_uv
//       Access: Published
//  Description: Returns the unnamed UV coordinate pair on the
//               vertex.  It is an error to call this if has_uv() has
//               returned false.
//
//               This is the more restrictive interface, and is
//               generally useful only in the absence of
//               multitexturing; see get_uv(name) for the interface
//               that supports multitexturing.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2137  
163 0 0 7 178 2128 0 0 362 ////////////////////////////////////////////////////////////////////
//     Function: EggVertex::get_uv
//       Access: Published
//  Description: Returns the named UV coordinate pair on the vertex.
//               It is an error to call this if has_uv(name)
//               returned false.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2137  4 name 1 2078  
164 0 0 4 179 2073 0 0 556 ////////////////////////////////////////////////////////////////////
//     Function: EggVertex::set_uv
//       Access: Published
//  Description: Replaces the unnamed UV coordinate pair on the vertex
//               with the indicated value.
//
//               This is the more restrictive interface, and is
//               generally useful only in the absence of
//               multitexturing; see set_uv(name, uv) for the
//               interface that supports multitexturing.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2136  8 texCoord 1 2124  
165 0 0 4 179 2073 0 0 407 ////////////////////////////////////////////////////////////////////
//     Function: EggVertex::set_uv
//       Access: Published
//  Description: Sets the indicated UV coordinate pair on the vertex.
//               This replaces any UV coordinate pair with the same
//               name already on the vertex, but preserves UV morphs.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2136  4 name 1 2078  8 texCoord 1 2124  
166 0 0 4 180 2073 0 0 267 ////////////////////////////////////////////////////////////////////
//     Function: EggVertex::clear_uv
//       Access: Published
//  Description: Removes all UV coordinate pairs from the vertex.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2136  
167 0 0 4 180 2073 0 0 314 ////////////////////////////////////////////////////////////////////
//     Function: EggVertex::clear_uv
//       Access: Published
//  Description: Removes the named UV coordinate pair from the vertex,
//               along with any UV morphs.
/////////////////////////////////////////////////////////////////// 2 4 this 3 2136  4 name 1 2078  
168 0 0 6 181 2074 0 0 374 ////////////////////////////////////////////////////////////////////
//     Function: EggVertex::has_uvw
//       Access: Published
//  Description: Returns true if the vertex has the named UV
//               coordinate triple, and the named UV coordinate triple is
//               3-d, false otherwise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2137  4 name 1 2078  
169 0 0 6 182 2120 0 0 366 ////////////////////////////////////////////////////////////////////
//     Function: EggVertex::get_uvw
//       Access: Published
//  Description: Returns the named UV coordinate triple on the vertex.
//               It is an error to call this if has_uvw(name)
//               returned false.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2137  4 name 1 2078  
170 0 0 4 183 2073 0 0 437 ////////////////////////////////////////////////////////////////////
//     Function: EggVertex::set_uvw
//       Access: Published
//  Description: Sets the indicated UV coordinate triple on the vertex.
//               This replaces any UV coordinate pair or triple with
//               the same name already on the vertex, but preserves UV
//               morphs.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2136  4 name 1 2078  8 texCoord 1 2120  
171 0 0 7 184 2117 0 0 584 ////////////////////////////////////////////////////////////////////
//     Function: EggVertex::get_uv_obj
//       Access: Published
//  Description: Returns the named EggVertexUV object, which defines
//               both the UV coordinate pair for this name and the UV
//               morphs.  This object might be shared between multiple
//               vertices.  You should not attempt to modify this
//               object; instead, call modify_uv_object to return a
//               modifiable pointer.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2137  4 name 1 2078  
172 0 0 7 185 2119 1014 0 462 ////////////////////////////////////////////////////////////////////
//     Function: EggVertex::modify_uv_obj
//       Access: Published
//  Description: Returns a modifiable pointer to the named EggVertexUV
//               object, which defines both the UV coordinate pair for
//               this name and the UV morphs.  Returns NULL if there
//               is no such named UV object.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2136  4 name 1 2078  
173 0 0 4 186 2073 0 0 400 ////////////////////////////////////////////////////////////////////
//     Function: EggVertex::set_uv_obj
//       Access: Published
//  Description: Sets the indicated EggVertexUV on the vertex.
//               This replaces any UV coordinate pair with the same
//               name already on the vertex, including UV morphs.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2136  9 vertex_uv 1 2119  
174 0 0 6 187 2074 0 0 302 ////////////////////////////////////////////////////////////////////
//     Function: EggVertex::has_aux
//       Access: Published
//  Description: Returns true if the vertex has any auxiliary
//               data, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2137  
175 0 0 6 187 2074 0 0 301 ////////////////////////////////////////////////////////////////////
//     Function: EggVertex::has_aux
//       Access: Published
//  Description: Returns true if the vertex has the named
//               auxiliary data quadruple.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2137  4 name 1 2078  
176 0 0 4 188 2073 0 0 263 ////////////////////////////////////////////////////////////////////
//     Function: EggVertex::clear_aux
//       Access: Published
//  Description: Removes all auxiliary data from the vertex.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2136  
177 0 0 4 188 2073 0 0 268 ////////////////////////////////////////////////////////////////////
//     Function: EggVertex::clear_aux
//       Access: Published
//  Description: Removes the named auxiliary data from the vertex.
/////////////////////////////////////////////////////////////////// 2 4 this 3 2136  4 name 1 2078  
178 0 0 6 189 2133 0 0 370 ////////////////////////////////////////////////////////////////////
//     Function: EggVertex::get_aux
//       Access: Published
//  Description: Returns the named auxiliary data quadruple on the
//               vertex. It is an error to call this if has_aux(name)
//               returned false.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2137  4 name 1 2078  
179 0 0 4 190 2073 0 0 385 ////////////////////////////////////////////////////////////////////
//     Function: EggVertex::set_aux
//       Access: Published
//  Description: Sets the indicated auxiliary data quadruple on the
//               vertex. This replaces any auxiliary data with the
//               same name already on the vertex.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2136  4 name 1 2078  3 aux 1 2133  
180 0 0 7 191 2130 0 0 542 ////////////////////////////////////////////////////////////////////
//     Function: EggVertex::get_aux_obj
//       Access: Published
//  Description: Returns the named EggVertexAux object, which defines
//               the auxiliary data for this name. This object might
//               be shared between multiple vertices.  You should not
//               attempt to modify this object; instead, call
//               modify_aux_object to return a modifiable pointer.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2137  4 name 1 2078  
181 0 0 7 192 2132 1014 0 437 ////////////////////////////////////////////////////////////////////
//     Function: EggVertex::modify_aux_obj
//       Access: Published
//  Description: Returns a modifiable pointer to the named EggVertexAux
//               object, which defines the auxiliary data for
//               this name.  Returns NULL if there is no such
//               named UV object.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2136  4 name 1 2078  
182 0 0 4 193 2073 0 0 377 ////////////////////////////////////////////////////////////////////
//     Function: EggVertex::set_aux_obj
//       Access: Published
//  Description: Sets the indicated EggVertexAux on the vertex.
//               This replaces any auxiliary data with the same
//               name already on the vertex.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2136  10 vertex_aux 1 2132  
183 0 0 7 194 2136 1140 0 579 ////////////////////////////////////////////////////////////////////
//     Function: EggVertex::make_average
//       Access: Published, Static
//  Description: Creates a new vertex that lies in between the two
//               given vertices.  The attributes for the UV sets
//               they have in common are averaged.
//
//               Both vertices need to be either in no pool, or in
//               the same pool.  In the latter case, the new vertex
//               will be placed in that pool.
/////////////////////////////////////////////////////////////////// 2 5 first 1 2137  6 second 1 2137  
184 0 0 6 195 2086 0 0 292 ////////////////////////////////////////////////////////////////////
//     Function: EggVertex::get_index
//       Access: Published
//  Description: Returns the index number of the vertex within its
//               pool.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2137  
185 0 0 4 196 2073 0 0 822 ////////////////////////////////////////////////////////////////////
//     Function: EggVertex::set_external_index
//       Access: Published
//  Description: Sets a special index number that is associated with
//               the EggVertex (but is not written to the egg file).
//               This number is not interpreted by any egg code; it is
//               simply maintained along with the vertex.  It *is*
//               used to differentiate otherwise identical vertices in
//               EggVertexPool::create_unique_vertex(), however.
//
//               The intention of this number is as an aid for file
//               converters, to associate an EggVertex back to the
//               index number of the original source vertex.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2136  14 external_index 1 2086  
186 0 0 6 197 2086 0 0 320 ////////////////////////////////////////////////////////////////////
//     Function: EggVertex::get_external_index
//       Access: Published
//  Description: Returns the number set by set_external_index().  See
//               set_external_index().
//////////////////////////////////////////////////////////////////// 1 4 this 3 2137  
187 0 0 4 198 2073 0 0 506 ////////////////////////////////////////////////////////////////////
//     Function: EggVertex::set_external_index2
//       Access: Published
//  Description: Similar to set_external_index(), but this is a
//               different number which may be used for a different
//               purpose by the calling code.  The egg library does
//               not assign any meaning to this number or use it in
//               any way.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2136  15 external_index2 1 2086  
188 0 0 6 199 2086 0 0 323 ////////////////////////////////////////////////////////////////////
//     Function: EggVertex::get_external_index2
//       Access: Published
//  Description: Returns the number set by set_external_index2().  See
//               set_external_index2().
//////////////////////////////////////////////////////////////////// 1 4 this 3 2137  
189 0 0 4 200 2073 0 0 296 ////////////////////////////////////////////////////////////////////
//     Function: EggVertex::write
//       Access: Published
//  Description: Writes the vertex to the indicated output stream in
//               Egg format.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2137  3 out 1 2079  12 indent_level 1 2086  
190 0 0 6 201 2074 0 0 395 ////////////////////////////////////////////////////////////////////
//     Function: EggVertex::sorts_less_than
//       Access: Published
//  Description: An ordering operator to compare two vertices for
//               sorting order.  This imposes an arbitrary ordering
//               useful to identify unique vertices.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2137  5 other 1 2137  
191 0 0 6 202 2086 0 0 1165 ////////////////////////////////////////////////////////////////////
//     Function: EggVertex::compare_to
//       Access: Published
//  Description: An ordering operator to compare two vertices for
//               sorting order.  This imposes an arbitrary ordering
//               useful to identify unique vertices.
//
//               Group membership is not considered in this
//               comparison.  This is somewhat problematic, but cannot
//               easily be helped, because considering group
//               membership would make it difficult to add and remove
//               groups from vertices.  It also makes it impossible to
//               meaningfully compare with a concrete EggVertex object
//               (which cannot have group memberships).
//
//               However, this is not altogether bad, because two
//               vertices that are identical in all other properties
//               should generally also be identical in group
//               memberships, else the vertices will tend to fly apart
//               when the joints animate.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2137  5 other 1 2137  
192 0 0 6 203 2086 0 0 384 ////////////////////////////////////////////////////////////////////
//     Function: EggVertex::get_num_local_coord
//       Access: Published
//  Description: Returns the number of primitives that own this vertex
//               whose vertices are interpreted to be in a local
//               coordinate system.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2137  
193 0 0 6 204 2086 0 0 382 ////////////////////////////////////////////////////////////////////
//     Function: EggVertex::get_num_global_coord
//       Access: Published
//  Description: Returns the number of primitives that own this vertex
//               whose vertices are interpreted in the global
//               coordinate system.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2137  
194 0 0 4 205 2073 0 0 304 ////////////////////////////////////////////////////////////////////
//     Function: EggVertex::transform
//       Access: Published, Virtual
//  Description: Applies the indicated transformation matrix to the
//               vertex.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2136  3 mat 1 2087  
195 0 0 6 206 2074 0 0 312 ////////////////////////////////////////////////////////////////////
//     Function: EggVertex::has_gref
//       Access: Published
//  Description: Returns true if the indicated group references this
//               vertex, false otherwise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2137  5 group 1 2151  
196 0 0 4 207 2073 0 0 725 ////////////////////////////////////////////////////////////////////
//     Function: EggVertex::copy_grefs_from
//       Access: Published
//  Description: Copies all the group references from the other vertex
//               onto this one.  This assigns the current vertex to
//               exactly the same groups, with exactly the same
//               memberships, as the given one.
//
//               Warning: only an EggVertex allocated from the free
//               store may have groups assigned to it.  Do not attempt
//               to call this on a temporary concrete EggVertex
//               object; a core dump will certainly result.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2136  5 other 1 2137  
197 0 0 4 208 2073 0 0 325 ////////////////////////////////////////////////////////////////////
//     Function: EggVertex::clear_grefs
//       Access: Published
//  Description: Removes all group references from the vertex, so that
//               it is not assigned to any group.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2136  
198 0 0 6 209 2086 0 0 338 ////////////////////////////////////////////////////////////////////
//     Function: EggVertex::has_pref
//       Access: Published
//  Description: Returns the number of times the vertex appears in the
//               indicated primitive, or 0 if it does not appear.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2137  4 prim 1 2153  
199 0 0 4 210 2073 0 0 0 1 4 this 3 2137  
200 0 0 4 211 2073 0 0 0 1 4 this 3 2137  
201 0 0 4 212 2073 0 0 216 ////////////////////////////////////////////////////////////////////
//     Function: EggVertex::output
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2137  3 out 1 2079  
202 0 0 7 217 2069 0 0 0 0 
203 0 0 7 161 2070 0 0 0 1 4 this 3 2136  
204 0 0 7 162 2136 1140 0 0 1 4 this 3 2070  
205 0 0 6 163 2101 0 0 0 1 4 this 3 2136  
206 0 0 7 164 2136 1140 0 0 1 4 this 3 2101  
207 0 0 7 215 2155 0 0 0 1 4 this 3 2137  
208 0 0 7 219 2139 1053 0 459 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::Copy Constructor
//       Access: Public
//  Description: Copying a vertex pool is of questionable value, since
//               it will copy all of the vertices and assign new
//               pointers to them all. There will be no polygons
//               referring to the new vertices.
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2156  
209 0 0 7 219 2139 1053 0 222 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 name 1 2078  
210 0 0 6 220 2074 0 0 389 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::has_vertex
//       Access: Public
//  Description: Returns true if the indicated vertex has been defined
//               in the vertex pool, false otherwise.  This does not
//               include forward references.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2156  5 index 1 2086  
211 0 0 6 221 2074 0 0 386 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::has_forward_vertices
//       Access: Published
//  Description: Returns true if any vertices in the pool are
//               undefined forward-reference vertices, false if all
//               vertices are defined.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2156  
212 0 0 6 222 2074 0 0 383 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::has_defined_vertices
//       Access: Published
//  Description: Returns true if any vertices in the pool are
//               fully defined vertices, false if all vertices are
//               forward references.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2156  
213 0 0 7 223 2136 1140 0 366 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::get_vertex
//       Access: Public
//  Description: Returns the vertex in the pool with the indicated
//               index number, or NULL if no vertices have that index
//               number.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2156  5 index 1 2086  
214 0 0 7 224 2136 1140 0 373 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::indexing operator
//       Access: Public
//  Description: Returns the vertex in the pool with the indicated
//               index number, or NULL if no vertices have that index
//               number.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2156  5 index 1 2086  
215 0 0 7 225 2136 1140 0 619 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::get_forward_vertex
//       Access: Public
//  Description: Returns the vertex in the pool with the indicated
//               index number.  If there is not a vertex in the pool
//               with the indicated index number, creates a special
//               forward-reference EggVertex that has no data, on the
//               assumption that the vertex pool has not yet been
//               fully read and more data will be available later.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2139  5 index 1 2086  
216 0 0 6 226 2086 0 0 389 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::get_highest_index
//       Access: Public
//  Description: Returns the highest index number used by any vertex
//               in the pool (except forward references).  Returns -1
//               if the pool is empty.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2156  
217 0 0 4 227 2073 0 0 553 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::set_highest_index
//       Access: Public
//  Description: Artificially changes the "highest index number", so
//               that a newly created vertex will begin at this number
//               plus 1.  This can be used to default a vertex pool to
//               start counting at 1 (or any other index number),
//               instead of the default of 0.  Use with caution.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2139  13 highest_index 1 2086  
218 0 0 6 228 2086 0 0 319 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::get_num_dimensions
//       Access: Public
//  Description: Returns the maximum number of dimensions used by any
//               vertex in the pool.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2156  
219 0 0 6 229 2074 0 0 326 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::has_normals
//       Access: Public
//  Description: Returns true if any vertex in the pool has a normal
//               defined, false if none of them do.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2156  
220 0 0 6 230 2074 0 0 324 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::has_colors
//       Access: Public
//  Description: Returns true if any vertex in the pool has a color
//               defined, false if none of them do.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2156  
221 0 0 6 231 2074 0 0 403 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::has_nonwhite_colors
//       Access: Public
//  Description: Returns true if any vertex in the pool has a color
//               defined other than white, false if no vertices have
//               colors, or if all colors are white.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2156  
222 0 0 6 233 2074 0 0 318 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::has_uvs
//       Access: Public
//  Description: Returns true if any vertex in the pool has a uv
//               defined, false if none of them do.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2156  
223 0 0 6 234 2074 0 0 328 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::has_aux
//       Access: Public
//  Description: Returns true if any vertex in the pool has
//               auxiliary data defined, false if none of them do.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2156  
224 0 0 4 235 2073 0 0 654 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::get_uv_names
//       Access: Public
//  Description: Returns the list of UV names that are defined by any
//               vertices in the pool, as well as the subset of UV
//               names that actually define 3-d texture coordinates
//               ("uvw_names").  Also returns the subset of UV/UVW
//               names that define a tangent and binormal.  It is the
//               user's responsibility to clear both vectors before
//               calling this method.
//////////////////////////////////////////////////////////////////// 4 4 this 3 2156  8 uv_names 1 2090  9 uvw_names 1 2090  9 tbn_names 1 2090  
225 0 0 4 236 2073 0 0 328 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::get_aux_names
//       Access: Public
//  Description: Returns the list of auxiliary data names that are
//               defined by any vertices in the pool.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2156  9 aux_names 1 2090  
226 0 0 6 237 2158 0 0 261 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::size()
//       Access: Public
//  Description: Returns the number of vertices in the pool.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2156  
227 0 0 7 238 2136 1140 0 1245 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::add_vertex
//       Access: Public
//  Description: Adds the indicated vertex to the pool.  It is an
//               error if the vertex is already a member of this or
//               any other pool.  The vertex must have been allocated
//               from the free store; its pointer will now be owned by
//               the vertex pool.  If the index number is supplied,
//               tries to assign that index number; it is an error if
//               the index number is already in use.
//
//               It is possible that a forward reference to this
//               vertex was requested in the past; if so, the data
//               from the supplied vertex is copied onto the forward
//               reference, which becomes the actual vertex.  In this
//               case, a different pointer is saved (and returned)
//               than the one actually passed in.  In the usual case,
//               however, the vertex pointer passed in is the one that
//               is saved in the vertex pool and returned from this
//               method.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2139  6 vertex 1 2136  5 index 1 2086  
228 0 0 7 239 2136 1140 0 376 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::make_new_vertex()
//       Access: Public
//  Description: Allocates and returns a new vertex from the pool.
//               This is one of three ways to add new vertices to a
//               vertex pool.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2139  
229 0 0 7 239 2136 1140 0 559 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::make_new_vertex()
//       Access: Public
//  Description: Allocates and returns a new vertex from the pool.
//               This is one of three ways to add new vertices to a
//               vertex pool.
//
//               This flavor of make_new_vertex() explicitly sets the
//               vertex position as it is allocated.  It does not
//               attempt to share vertices.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2139  3 pos 1 2140  
230 0 0 7 239 2136 1140 0 559 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::make_new_vertex()
//       Access: Public
//  Description: Allocates and returns a new vertex from the pool.
//               This is one of three ways to add new vertices to a
//               vertex pool.
//
//               This flavor of make_new_vertex() explicitly sets the
//               vertex position as it is allocated.  It does not
//               attempt to share vertices.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2139  3 pos 1 2142  
231 0 0 7 239 2136 1140 0 559 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::make_new_vertex()
//       Access: Public
//  Description: Allocates and returns a new vertex from the pool.
//               This is one of three ways to add new vertices to a
//               vertex pool.
//
//               This flavor of make_new_vertex() explicitly sets the
//               vertex position as it is allocated.  It does not
//               attempt to share vertices.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2139  3 pos 1 2144  
232 0 0 7 239 2136 1140 0 559 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::make_new_vertex()
//       Access: Public
//  Description: Allocates and returns a new vertex from the pool.
//               This is one of three ways to add new vertices to a
//               vertex pool.
//
//               This flavor of make_new_vertex() explicitly sets the
//               vertex position as it is allocated.  It does not
//               attempt to share vertices.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2139  3 pos 1 2097  
233 0 0 7 240 2136 1140 0 458 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::create_unique_vertex
//       Access: Public
//  Description: Creates a new vertex in the pool that is a copy of
//               the indicated one and returns it.  If there is
//               already a vertex in the pool like the indicated one,
//               simply returns that one.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2139  4 copy 1 2137  
234 0 0 7 241 2136 1140 0 478 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::find_matching_vertex
//       Access: Public
//  Description: If the EggVertexPool already has a vertex matching
//               the indicated vertex, returns it; otherwise, returns
//               NULL.  This is similar to create_unique_vertex()
//               except that a new vertex is never created.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2139  4 copy 1 2137  
235 0 0 4 242 2073 0 0 342 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::remove_vertex
//       Access: Public
//  Description: Removes the vertex from the pool.  It is an error if
//               the vertex is not already a member of the pool.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2139  6 vertex 1 2136  
236 0 0 6 243 2086 0 0 591 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::remove_unused_vertices
//       Access: Public
//  Description: Removes all vertices from the pool that are not
//               referenced by at least one primitive.  Also collapses
//               together equivalent vertices, and renumbers all
//               vertices after the operation so their indices are
//               consecutive, beginning at zero.  Returns the number
//               of vertices removed.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2139  
237 0 0 4 244 2073 0 0 355 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::add_unused_vertices_to_prim
//       Access: Public
//  Description: Adds all of the unused vertices in this vertex pool
//               to the indicated primitive, in ascending order.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2139  4 prim 1 2161  
238 0 0 4 245 2073 0 0 733 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::transform
//       Access: Public
//  Description: Applies the indicated transformation matrix to all
//               the vertices.  However, vertices that are attached to
//               primitives that believe their vertices are in a local
//               coordinate system are transformed only by the scale
//               and rotation component.  If a vertex happens to be
//               attached both to a local and a global primitive, and
//               the transformation includes a translation component,
//               the vertex will be split.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2139  3 mat 1 2087  
239 0 0 4 246 2073 0 0 457 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::sort_by_external_index
//       Access: Published
//  Description: Re-orders (and re-numbers) the vertices in this
//               vertex pool so that they appear in increasing order
//               by the optional external_index that has been assigned
//               to each vertex.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2139  
240 0 0 7 247 2069 0 0 0 0 
241 0 0 7 249 2085 1053 0 229 ////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::Copy constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2162  
242 0 0 7 249 2085 1053 0 0 1 4 name 1 2078  
243 0 0 7 250 2085 1053 0 237 ////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::Copy assignment operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2085  4 copy 1 2162  
244 0 0 6 251 2074 0 0 218 ////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::empty
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2162  
245 0 0 6 252 2164 0 0 217 ////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::size
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2162  
246 0 0 4 253 2073 0 0 218 ////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::clear
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2085  
247 0 0 7 254 2082 1053 0 665 ////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::get_first_child
//       Access: Published
//  Description: Returns the first child in the group's list of
//               children, or NULL if the list of children is empty.
//               Can be used with get_next_child() to return the
//               complete list of children without using the iterator
//               class; however, this is non-thread-safe, and so is
//               not recommended except for languages other than C++
//               which cannot use the iterators.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2085  
248 0 0 7 255 2082 1053 0 857 ////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::get_next_child
//       Access: Published
//  Description: Returns the next child in the group's list of
//               children since the last call to get_first_child() or
//               get_next_child(), or NULL if the last child has been
//               returned.  Can be used with get_first_child() to
//               return the complete list of children without using
//               the iterator class; however, this is non-thread-safe,
//               and so is not recommended except for languages other
//               than C++ which cannot use the iterators.
//
//               It is an error to call this without previously
//               calling get_first_child().
//////////////////////////////////////////////////////////////////// 1 4 this 3 2085  
249 0 0 6 256 2165 0 0 0 1 4 this 3 2162  
250 0 0 7 257 2082 1053 0 385 ////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::add_child
//       Access: Published
//  Description: Adds the indicated child to the group and returns it.
//               If the child node is already a child of some other
//               node, removes it first.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2085  4 node 1 2082  
251 0 0 7 258 2082 1053 0 398 ////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::remove_child
//       Access: Published
//  Description: Removes the indicated child node from the group and
//               returns it.  If the child was not already in the
//               group, does nothing and returns NULL.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2085  4 node 1 2082  
252 0 0 4 259 2073 0 0 416 ////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::steal_children
//       Access: Published
//  Description: Moves all the children from the other node to this
//               one.  This is especially useful because the group
//               node copy assignment operator does not copy children.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2085  5 other 1 2085  
253 0 0 7 260 2082 1053 0 410 ////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::find_child
//       Access: Published
//  Description: Returns the child of this node whose name is the
//               indicated string, or NULL if there is no child of
//               this node by that name.  Does not search recursively.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2162  4 name 1 2078  
254 0 0 6 261 2074 0 0 416 ////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::has_absolute_pathnames
//       Access: Published
//  Description: Returns true if any nodes at this level and below
//               include a reference to a file via an absolute
//               pathname, or false if all references are relative.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2162  
255 0 0 4 262 2073 0 0 472 ////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::resolve_filenames
//       Access: Published
//  Description: Walks the tree and attempts to resolve any filenames
//               encountered.  This looks up filenames along the
//               specified search path; it does not automatically
//               search the model_path for missing files.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2085  10 searchpath 1 2168  
256 0 0 4 263 2073 0 0 452 ////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::force_filenames
//       Access: Published
//  Description: Similar to resolve_filenames, but each non-absolute
//               filename encountered is arbitrarily taken to be in
//               the indicated directory, whether or not the so-named
//               filename exists.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2085  9 directory 1 2171  
257 0 0 4 264 2073 0 0 393 ////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::reverse_vertex_ordering
//       Access: Published
//  Description: Reverses the vertex ordering of all polygons defined
//               at this node and below.  Does not change the surface
//               normals, if any.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2085  
258 0 0 4 265 2073 0 0 1132 ////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::recompute_vertex_normals
//       Access: Published
//  Description: Recomputes all the vertex normals for polygon
//               geometry at this group node and below so that they
//               accurately reflect the vertex positions.  A shared
//               edge between two polygons (even in different groups)
//               is considered smooth if the angle between the two
//               edges is less than threshold degrees.
//
//               This function also removes degenerate polygons that
//               do not have enough vertices to define a normal.  It
//               does not affect normals for other kinds of primitives
//               like Nurbs or Points.
//
//               This function does not remove or adjust vertices in
//               the vertex pool; it only adds new vertices with the
//               correct normals.  Thus, it is a good idea to call
//               remove_unused_vertices() after calling this.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2085  9 threshold 1 2097  2 cs 1 2174  
259 0 0 4 266 2073 0 0 1077 ////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::recompute_polygon_normals
//       Access: Published
//  Description: Recomputes all the polygon normals for polygon
//               geometry at this group node and below so that they
//               accurately reflect the vertex positions.  Normals are
//               removed from the vertices and defined only on
//               polygons, giving the geometry a faceted appearance.
//
//               This function also removes degenerate polygons that
//               do not have enough vertices to define a normal.  It
//               does not affect normals for other kinds of primitives
//               like Nurbs or Points.
//
//               This function does not remove or adjust vertices in
//               the vertex pool; it only adds new vertices with the
//               normals removed.  Thus, it is a good idea to call
//               remove_unused_vertices() after calling this.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2085  2 cs 1 2174  
260 0 0 4 267 2073 0 0 606 ////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::strip_normals
//       Access: Published
//  Description: Removes all normals from primitives, and the vertices
//               they reference, at this node and below.
//
//               This function does not remove or adjust vertices in
//               the vertex pool; it only adds new vertices with the
//               normal removed.  Thus, it is a good idea to call
//               remove_unused_vertices() after calling this.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2085  
261 0 0 6 268 2074 0 0 1204 ////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::recompute_tangent_binormal
//       Access: Published
//  Description: This function recomputes the tangent and binormal for
//               the named texture coordinate set for all vertices at
//               this level and below.  Use the empty string for the
//               default texture coordinate set.
//
//               It is necessary for each vertex to already have a
//               normal (or at least a polygon normal), as well as a
//               texture coordinate in the named texture coordinate
//               set, before calling this function.  You might precede
//               this with recompute_vertex_normals() to ensure that
//               the normals exist.
//
//               Like recompute_vertex_normals(), this function does
//               not remove or adjust vertices in the vertex pool; it
//               only adds new vertices with the new tangents and
//               binormals computed.  Thus, it is a good idea to call
//               remove_unused_vertices() after calling this.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2085  7 uv_name 1 2175  
262 0 0 6 268 2074 0 0 397 ////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::recompute_tangent_binormal
//       Access: Published
//  Description: This function recomputes the tangent and binormal for
//               the named texture coordinate sets.
//               Returns true if anything was done.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2085  5 names 1 2178  
263 0 0 6 269 2074 0 0 421 ////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::recompute_tangent_binormal_auto
//       Access: Published
//  Description: This function recomputes the tangent and binormal for
//               any texture coordinate set that affects a normal map.
//               Returns true if anything was done.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2085  
264 0 0 6 271 2086 0 0 772 ////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::triangulate_polygons
//       Access: Published
//  Description: Replace all higher-order polygons at this point in
//               the scene graph and below with triangles.  Returns
//               the total number of new triangles produced, less
//               degenerate polygons removed.
//
//               If flags contains T_polygon and T_convex, both
//               concave and convex polygons will be subdivided into
//               triangles; with only T_polygon, only concave polygons
//               will be subdivided, and convex polygons will be
//               largely unchanged.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2085  5 flags 1 2086  
265 0 0 4 272 2073 0 0 318 ////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::mesh_triangles
//       Access: Published
//  Description: Combine triangles together into triangle strips, at
//               this group and below.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2085  5 flags 1 2086  
266 0 0 4 273 2073 0 0 382 ////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::make_point_primitives
//       Access: Published
//  Description: Creates PointLight primitives to reference any
//               otherwise unreferences vertices discovered in this
//               group or below.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2085  
267 0 0 6 274 2086 0 0 260 ////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::rename_nodes
//       Access: Published
//  Description: Rename by stripping out the prefix
//////////////////////////////////////////////////////////////////// 3 4 this 3 2085  12 strip_prefix 1 2090  7 recurse 1 2074  
268 0 0 6 275 2086 0 0 1111 ////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::remove_unused_vertices
//       Access: Published
//  Description: Removes all vertices from VertexPools within this
//               group or below that are not referenced by at least
//               one primitive.  Also collapses together equivalent
//               vertices, and renumbers all vertices after the
//               operation so their indices are consecutive, beginning
//               at zero.  Returns the total number of vertices
//               removed.
//
//               Note that this operates on the VertexPools within
//               this group level, without respect to primitives that
//               reference these vertices (unlike other functions like
//               strip_normals()).  It is therefore most useful to
//               call this on the EggData root, rather than on a
//               subgroup within the hierarchy, since a VertexPool may
//               appear anywhere in the hierarchy.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2085  7 recurse 1 2074  
269 0 0 6 276 2086 0 0 453 ////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::remove_invalid_primitives
//       Access: Published
//  Description: Removes primitives at this level and below which
//               appear to be degenerate; e.g. polygons with fewer
//               than 3 vertices, etc.  Returns the number of
//               primitives removed.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2085  7 recurse 1 2074  
270 0 0 4 277 2073 0 0 635 ////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::clear_connected_shading
//       Access: Published
//  Description: Resets the connected_shading information on all
//               primitives at this node and below, so that it may be
//               accurately rederived by the next call to
//               get_connected_shading().
//
//               It may be a good idea to call
//               remove_unused_vertices() as well, to establish the
//               correct connectivity between common vertices.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2085  
271 0 0 4 278 2073 0 0 463 ////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::get_connected_shading
//       Access: Published
//  Description: Queries the connected_shading information on all
//               primitives at this node and below, to ensure that it
//               has been completely filled in before we start mucking
//               around with vertices.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2085  
272 0 0 4 279 2073 0 0 1614 ////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::unify_attributes
//       Access: Published
//  Description: Applies per-vertex normal and color to all vertices,
//               if they are in fact per-vertex (and different for
//               each vertex), or moves them to the primitive if they
//               are all the same.
//
//               After this call, either the primitive will have
//               normals or its vertices will, but not both.  Ditto
//               for colors.
//
//               If use_connected_shading is true, each polygon is
//               considered in conjunction with all connected
//               polygons; otherwise, each polygon is considered
//               individually.
//
//               If allow_per_primitive is false, S_per_face or
//               S_overall will treated like S_per_vertex: normals and
//               colors will always be assigned to the vertices.  In
//               this case, there will never be per-primitive colors
//               or normals after this call returns.  On the other
//               hand, if allow_per_primitive is true, then S_per_face
//               means that normals and colors should be assigned to
//               the primitives, and removed from the vertices, as
//               described above.
//
//               This may create redundant vertices in the vertex
//               pool, so it may be a good idea to follow this up with
//               remove_unused_vertices().
//////////////////////////////////////////////////////////////////// 4 4 this 3 2085  21 use_connected_shading 1 2074  19 allow_per_primitive 1 2074  7 recurse 1 2074  
273 0 0 4 280 2073 0 0 768 ////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::apply_last_attribute
//       Access: Published
//  Description: Sets the last vertex of the triangle (or each
//               component) to the primitive normal and/or color, if
//               the primitive is flat-shaded.  This reflects the
//               OpenGL convention of storing flat-shaded properties on
//               the last vertex, although it is not usually a
//               convention in Egg.
//
//               This may create redundant vertices in the vertex
//               pool, so it may be a good idea to follow this up with
//               remove_unused_vertices().
//////////////////////////////////////////////////////////////////// 2 4 this 3 2085  7 recurse 1 2074  
274 0 0 4 281 2073 0 0 772 ////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::apply_first_attribute
//       Access: Published
//  Description: Sets the first vertex of the triangle (or each
//               component) to the primitive normal and/or color, if
//               the primitive is flat-shaded.  This reflects the
//               DirectX convention of storing flat-shaded properties on
//               the first vertex, although it is not usually a
//               convention in Egg.
//
//               This may create redundant vertices in the vertex
//               pool, so it may be a good idea to follow this up with
//               remove_unused_vertices().
//////////////////////////////////////////////////////////////////// 2 4 this 3 2085  7 recurse 1 2074  
275 0 0 4 282 2073 0 0 490 ////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::post_apply_flat_attribute
//       Access: Published
//  Description: Intended as a followup to apply_last_attribute(),
//               this also sets an attribute on the first vertices of
//               the primitive, if they don't already have an
//               attribute set, just so they end up with *something*.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2085  7 recurse 1 2074  
276 0 0 6 283 2074 0 0 380 ////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::has_primitives
//       Access: Published, Virtual
//  Description: Returns true if there are any primitives
//               (e.g. polygons) defined within this group or below,
//               false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2162  
277 0 0 6 284 2074 0 0 416 ////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::joint_has_primitives
//       Access: Published, Virtual
//  Description: Returns true if there are any primitives
//               (e.g. polygons) defined within this group or below,
//               but the search does not include nested joints.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2162  
278 0 0 6 285 2074 0 0 417 ////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::has_normals
//       Access: Published, Virtual
//  Description: Returns true if any of the primitives (e.g. polygons)
//               defined within this group or below have either face
//               or vertex normals defined, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2162  
279 0 0 6 286 2074 0 0 277 ////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::is_right
//       Access: Private, Static
//  Description: Returns true if the 2-d v1 is to the right of v2.
//////////////////////////////////////////////////////////////////// 2 2 v1 1 2180  2 v2 1 2180  
280 0 0 7 287 2069 0 0 0 0 
281 0 0 7 289 2093 1286 0 222 ////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
282 0 0 7 289 2093 1286 0 227 ////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2183  
283 0 0 6 290 2093 0 0 235 ////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::Copy assignment operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2093  4 copy 1 2183  
284 0 0 4 291 2073 0 0 301 ////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::write
//       Access: Public
//  Description: Writes the attributes to the indicated output stream in
//               Egg format.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2183  3 out 1 2079  12 indent_level 1 2086  
285 0 0 4 296 2073 0 0 849 ////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::set_alpha_mode
//       Access: Public
//  Description: Specifies precisely how the transparency for this
//               geometry should be achieved, or if it should be used.
//               The default, AM_unspecified, is to use transparency
//               if the geometry has a color whose alpha value is
//               non-1, or if it has a four-channel texture applied;
//               otherwise, AM_on forces transparency on, and AM_off
//               forces it off.  The other flavors of transparency are
//               specific ways to turn on transparency, which may or
//               may not be supported by a particular rendering
//               backend.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2093  4 mode 1 1985  
286 0 0 6 297 1985 0 0 357 ////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::get_alpha_mode
//       Access: Public
//  Description: Returns the alpha mode that was set, or
//               AM_unspecified if nothing was set.  See
//               set_alpha_mode().
//////////////////////////////////////////////////////////////////// 1 4 this 3 2183  
287 0 0 4 298 2073 0 0 412 ////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::set_depth_write_mode
//       Access: Public
//  Description: Specifies whether writes should be made to the depth
//               buffer (assuming the rendering backend provides a
//               depth buffer) when rendering this geometry.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2093  4 mode 1 1986  
288 0 0 6 299 1986 0 0 376 ////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::get_depth_write_mode
//       Access: Public
//  Description: Returns the depth_write mode that was set, or
//               DWM_unspecified if nothing was set.  See
//               set_depth_write_mode().
//////////////////////////////////////////////////////////////////// 1 4 this 3 2183  
289 0 0 4 300 2073 0 0 521 ////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::set_depth_test_mode
//       Access: Public
//  Description: Specifies whether this geometry should be tested
//               against the depth buffer when it is drawn (assuming
//               the rendering backend provides a depth buffer).  Note
//               that this is different, and independent from, the
//               depth_write mode.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2093  4 mode 1 1987  
290 0 0 6 301 1987 0 0 373 ////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::get_depth_test_mode
//       Access: Public
//  Description: Returns the depth_test mode that was set, or
//               DTM_unspecified if nothing was set.  See
//               set_depth_test_mode().
//////////////////////////////////////////////////////////////////// 1 4 this 3 2183  
291 0 0 4 302 2073 0 0 530 ////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::set_visibility_mode
//       Access: Public
//  Description: Specifies whether this geometry is to be considered
//               normally visible, or hidden.  If it is hidden, it is
//               either not loaded into the scene graph at all, or
//               loaded as a "stashed" node, according to the setting
//               of egg-suppress-hidden.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2093  4 mode 1 1988  
292 0 0 6 303 1988 0 0 372 ////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::get_visibility_mode
//       Access: Public
//  Description: Returns the visibility mode that was set, or
//               VM_unspecified if nothing was set.  See
//               set_visibility_mode().
//////////////////////////////////////////////////////////////////// 1 4 this 3 2183  
293 0 0 4 304 2073 0 0 459 ////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::set_depth_offset
//       Access: Public
//  Description: Sets the "depth-offset" flag associated with this
//               object.  This adds or subtracts an offset bias
//               into the depth buffer. See also DepthOffsetAttrib
//               and NodePath::set_depth_offset().
//////////////////////////////////////////////////////////////////// 2 4 this 3 2093  4 bias 1 2086  
294 0 0 6 305 2086 0 0 336 ////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::get_depth_offset
//       Access: Public
//  Description: Returns the "depth-offset" flag as set for this
//               particular object.  See set_depth_offset().
//////////////////////////////////////////////////////////////////// 1 4 this 3 2183  
295 0 0 6 306 2074 0 0 348 ////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::has_depth_offset
//       Access: Public
//  Description: Returns true if the depth-offset flag has been set for
//               this particular object.  See set_depth_offset().
//////////////////////////////////////////////////////////////////// 1 4 this 3 2183  
296 0 0 4 307 2073 0 0 330 ////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::clear_depth_offset
//       Access: Public
//  Description: Removes the depth-offset flag from this particular
//               object.  See set_depth_offset().
//////////////////////////////////////////////////////////////////// 1 4 this 3 2093  
297 0 0 4 308 2073 0 0 534 ////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::set_draw_order
//       Access: Public
//  Description: Sets the "draw-order" flag associated with this
//               object.  This specifies a particular order in which
//               objects of this type should be drawn, within the
//               specified bin.  If a bin is not explicitly specified,
//               "fixed" is used.  See also set_bin().
//////////////////////////////////////////////////////////////////// 2 4 this 3 2093  5 order 1 2086  
298 0 0 6 309 2086 0 0 330 ////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::get_draw_order
//       Access: Public
//  Description: Returns the "draw-order" flag as set for this
//               particular object.  See set_draw_order().
//////////////////////////////////////////////////////////////////// 1 4 this 3 2183  
299 0 0 6 310 2074 0 0 342 ////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::has_draw_order
//       Access: Public
//  Description: Returns true if the draw-order flag has been set for
//               this particular object.  See set_draw_order().
//////////////////////////////////////////////////////////////////// 1 4 this 3 2183  
300 0 0 4 311 2073 0 0 324 ////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::clear_draw_order
//       Access: Public
//  Description: Removes the draw-order flag from this particular
//               object.  See set_draw_order().
//////////////////////////////////////////////////////////////////// 1 4 this 3 2093  
301 0 0 4 312 2073 0 0 691 ////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::set_bin
//       Access: Public
//  Description: Sets the "bin" string for this particular object.
//               This names a particular bin in which the object
//               should be rendered.  The exact meaning of a bin is
//               implementation defined, but generally a GeomBin
//               matching each bin name must also be specifically
//               added to the rendering engine (e.g. the
//               CullTraverser) in use for this to work.  See also
//               set_draw_order().
//////////////////////////////////////////////////////////////////// 2 4 this 3 2093  3 bin 1 2078  
302 0 0 6 313 2078 0 0 326 ////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::get_bin
//       Access: Public
//  Description: Returns the bin name that has been set for this
//               particular object, if any.  See set_bin().
//////////////////////////////////////////////////////////////////// 1 4 this 3 2183  
303 0 0 6 314 2074 0 0 319 ////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::has_bin
//       Access: Public
//  Description: Returns true if a bin name has been set for this
//               particular object.  See set_bin().
//////////////////////////////////////////////////////////////////// 1 4 this 3 2183  
304 0 0 4 315 2073 0 0 315 ////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::clear_bin
//       Access: Public
//  Description: Removes the bin name that was set for this particular
//               object.  See set_bin().
//////////////////////////////////////////////////////////////////// 1 4 this 3 2093  
305 0 0 6 316 2074 0 0 34 // Comparison operators are handy. 2 4 this 3 2183  5 other 1 2183  
306 0 0 6 317 2074 0 0 0 2 4 this 3 2183  5 other 1 2183  
307 0 0 6 318 2074 0 0 0 2 4 this 3 2183  5 other 1 2183  
308 0 0 6 319 1985 0 0 413 ////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::string_alpha_mode
//       Access: Public
//  Description: Returns the AlphaMode value associated with the given
//               string representation, or AM_unspecified if the string
//               does not match any known AlphaMode value.
//////////////////////////////////////////////////////////////////// 1 6 string 1 2078  
309 0 0 6 320 1986 0 0 447 ////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::string_depth_write_mode
//       Access: Public
//  Description: Returns the DepthWriteMode value associated with the
//               given string representation, or DWM_unspecified if
//               the string does not match any known DepthWriteMode
//               value.
//////////////////////////////////////////////////////////////////// 1 6 string 1 2078  
310 0 0 6 321 1987 0 0 444 ////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::string_depth_test_mode
//       Access: Public
//  Description: Returns the DepthTestMode value associated with the
//               given string representation, or DTM_unspecified if
//               the string does not match any known DepthTestMode
//               value.
//////////////////////////////////////////////////////////////////// 1 6 string 1 2078  
311 0 0 6 322 1988 0 0 437 ////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::string_visibility_mode
//       Access: Public
//  Description: Returns the HiddenMode value associated with the
//               given string representation, or VM_unspecified if
//               the string does not match any known HiddenMode
//               value.
//////////////////////////////////////////////////////////////////// 1 6 string 1 2078  
312 0 0 7 323 2069 0 0 0 0 
313 0 0 7 326 2185 1289 0 221 ////////////////////////////////////////////////////////////////////
//     Function: EggTransform::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
314 0 0 7 326 2185 1289 0 226 ////////////////////////////////////////////////////////////////////
//     Function: EggTransform::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2186  
315 0 0 6 327 2185 0 0 234 ////////////////////////////////////////////////////////////////////
//     Function: EggTransform::Copy assignment operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2185  4 copy 1 2186  
316 0 0 4 329 2073 0 0 266 ////////////////////////////////////////////////////////////////////
//     Function: EggTransform::clear_transform
//       Access: Public
//  Description: Resets the transform to empty, identity.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2185  
317 0 0 4 330 2073 0 0 304 ////////////////////////////////////////////////////////////////////
//     Function: EggTransform::add_translate2d
//       Access: Public
//  Description: Appends a 2-d translation operation to the current
//               transform.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2185  9 translate 1 2180  
318 0 0 4 331 2073 0 0 304 ////////////////////////////////////////////////////////////////////
//     Function: EggTransform::add_translate3d
//       Access: Public
//  Description: Appends a 3-d translation operation to the current
//               transform.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2185  9 translate 1 2188  
319 0 0 4 332 2073 0 0 384 ////////////////////////////////////////////////////////////////////
//     Function: EggTransform::add_rotate2d
//       Access: Public
//  Description: Appends a 2-d rotation to the current transform.  The
//               rotation angle is specified in degrees
//               counterclockwise about the origin.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2185  5 angle 1 2097  
320 0 0 4 333 2073 0 0 391 ////////////////////////////////////////////////////////////////////
//     Function: EggTransform::add_rotx
//       Access: Public
//  Description: Appends a rotation about the X axis to the current
//               transform.  The rotation angle is specified in
//               degrees counterclockwise about the axis.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2185  5 angle 1 2097  
321 0 0 4 334 2073 0 0 391 ////////////////////////////////////////////////////////////////////
//     Function: EggTransform::add_roty
//       Access: Public
//  Description: Appends a rotation about the Y axis to the current
//               transform.  The rotation angle is specified in
//               degrees counterclockwise about the axis.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2185  5 angle 1 2097  
322 0 0 4 335 2073 0 0 391 ////////////////////////////////////////////////////////////////////
//     Function: EggTransform::add_rotz
//       Access: Public
//  Description: Appends a rotation about the Z axis to the current
//               transform.  The rotation angle is specified in
//               degrees counterclockwise about the axis.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2185  5 angle 1 2097  
323 0 0 4 336 2073 0 0 403 ////////////////////////////////////////////////////////////////////
//     Function: EggTransform::add_rotate3d
//       Access: Public
//  Description: Appends an arbitrary 3-d rotation to the current
//               transform, expressed as a quaternion.  This is
//               converted to axis-angle notation for the egg file.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2185  4 quat 1 2190  
324 0 0 4 336 2073 0 0 406 ////////////////////////////////////////////////////////////////////
//     Function: EggTransform::add_rotate3d
//       Access: Public
//  Description: Appends a 3-d rotation about an arbitrary axis to the
//               current transform.  The rotation angle is specified
//               in degrees counterclockwise about the axis.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2185  5 angle 1 2097  4 axis 1 2188  
325 0 0 4 337 2073 0 0 301 ////////////////////////////////////////////////////////////////////
//     Function: EggTransform::add_scale2d
//       Access: Public
//  Description: Appends a possibly non-uniform scale to the current
//               transform.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2185  5 scale 1 2193  
326 0 0 4 338 2073 0 0 301 ////////////////////////////////////////////////////////////////////
//     Function: EggTransform::add_scale3d
//       Access: Public
//  Description: Appends a possibly non-uniform scale to the current
//               transform.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2185  5 scale 1 2196  
327 0 0 4 339 2073 0 0 277 ////////////////////////////////////////////////////////////////////
//     Function: EggTransform::add_uniform_scale
//       Access: Public
//  Description: Appends a uniform scale to the current transform.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2185  5 scale 1 2097  
328 0 0 4 340 2073 0 0 296 ////////////////////////////////////////////////////////////////////
//     Function: EggTransform::add_matrix3
//       Access: Public
//  Description: Appends an arbitrary 3x3 matrix to the current
//               transform.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2185  3 mat 1 2199  
329 0 0 4 341 2073 0 0 296 ////////////////////////////////////////////////////////////////////
//     Function: EggTransform::add_matrix4
//       Access: Public
//  Description: Appends an arbitrary 4x4 matrix to the current
//               transform.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2185  3 mat 1 2087  
330 0 0 6 342 2074 0 0 432 ////////////////////////////////////////////////////////////////////
//     Function: EggTransform::has_transform
//       Access: Public
//  Description: Returns true if the transform is nonempty, false if
//               it is empty (no transform components have been
//               added).  This is true for either a 2-d or a 3-d
//               transform.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2186  
331 0 0 6 343 2074 0 0 632 ////////////////////////////////////////////////////////////////////
//     Function: EggTransform::has_transform2d
//       Access: Public
//  Description: Returns true if the transform is specified as a 2-d
//               transform, e.g. with a 3x3 matrix, or false if it is
//               specified as a 3-d transform (with a 4x4 matrix), or
//               not specified at all.
//
//               Normally, EggTextures have a 2-d matrix (but
//               occasionally they use a 3-d matrix), and EggGroups
//               always have a 3-d matrix.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2186  
332 0 0 4 344 2073 0 0 385 ////////////////////////////////////////////////////////////////////
//     Function: EggTransform::set_transform2d
//       Access: Public
//  Description: Sets the overall transform as a 3x3 matrix.  This
//               completely replaces whatever componentwise transform
//               may have been defined.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2185  3 mat 1 2199  
333 0 0 6 345 2074 0 0 632 ////////////////////////////////////////////////////////////////////
//     Function: EggTransform::has_transform3d
//       Access: Public
//  Description: Returns true if the transform is specified as a 3-d
//               transform, e.g. with a 4x4 matrix, or false if it is
//               specified as a 2-d transform (with a 2x2 matrix), or
//               not specified at all.
//
//               Normally, EggTextures have a 3-d matrix (but
//               occasionally they use a 3-d matrix), and EggGroups
//               always have a 3-d matrix.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2186  
334 0 0 4 346 2073 0 0 385 ////////////////////////////////////////////////////////////////////
//     Function: EggTransform::set_transform3d
//       Access: Public
//  Description: Sets the overall transform as a 4x4 matrix.  This
//               completely replaces whatever componentwise transform
//               may have been defined.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2185  3 mat 1 2087  
335 0 0 7 347 2202 0 0 348 ////////////////////////////////////////////////////////////////////
//     Function: EggTransform::get_transform2d
//       Access: Public
//  Description: Returns the overall transform as a 3x3 matrix.  It is
//               an error to call this if has_transform3d() is true.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2186  
336 0 0 6 348 2087 0 0 450 ////////////////////////////////////////////////////////////////////
//     Function: EggTransform::get_transform3d
//       Access: Public
//  Description: Returns the overall transform as a 4x4 matrix.  It is
//               valid to call this even if has_transform2d() is true;
//               in this case, the 3x3 transform will be expanded to a
//               4x4 matrix.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2186  
337 0 0 6 349 2074 0 0 318 ////////////////////////////////////////////////////////////////////
//     Function: EggTransform::transform_is_identity
//       Access: Public
//  Description: Returns true if the described transform is identity,
//               false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2186  
338 0 0 6 351 2086 0 0 306 ////////////////////////////////////////////////////////////////////
//     Function: EggTransform::get_num_components
//       Access: Public
//  Description: Returns the number of components that make up the
//               transform.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2186  
339 0 0 6 352 1990 0 0 267 ////////////////////////////////////////////////////////////////////
//     Function: EggTransform::get_component_type
//       Access: Public
//  Description: Returns the type of the nth component.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2186  1 n 1 2086  
340 0 0 6 353 2097 0 0 531 ////////////////////////////////////////////////////////////////////
//     Function: EggTransform::get_component_number
//       Access: Public
//  Description: Returns the solitary number associated with the nth
//               component.  In the case of a rotation, this is the
//               angle in degrees to rotate; in the case of uniform
//               scale, this is the amount of the scale.  Other types
//               do not use this property.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2186  1 n 1 2086  
341 0 0 6 354 2193 0 0 519 ////////////////////////////////////////////////////////////////////
//     Function: EggTransform::get_component_vec2
//       Access: Public
//  Description: Returns the 2-component vector associated with the
//               nth component.  This may be the translate vector,
//               rotate axis, or non-uniform scale.  It is an error to
//               call this if the component type does not use a 2-d
//               vector property.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2186  1 n 1 2086  
342 0 0 6 355 2196 0 0 519 ////////////////////////////////////////////////////////////////////
//     Function: EggTransform::get_component_vec3
//       Access: Public
//  Description: Returns the 3-component vector associated with the
//               nth component.  This may be the translate vector,
//               rotate axis, or non-uniform scale.  It is an error to
//               call this if the component type does not use a 3-d
//               vector property.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2186  1 n 1 2086  
343 0 0 6 356 2199 0 0 390 ////////////////////////////////////////////////////////////////////
//     Function: EggTransform::get_component_mat3
//       Access: Public
//  Description: Returns the 3x3 matrix associated with the nth
//               component.  It is an error to call this if the
//               component type is not CT_matrix3.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2186  1 n 1 2086  
344 0 0 6 357 2087 0 0 390 ////////////////////////////////////////////////////////////////////
//     Function: EggTransform::get_component_mat4
//       Access: Public
//  Description: Returns the 4x4 matrix associated with the nth
//               component.  It is an error to call this if the
//               component type is not CT_matrix4.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2186  1 n 1 2086  
345 0 0 4 358 2073 0 0 292 ////////////////////////////////////////////////////////////////////
//     Function: EggTransform::write
//       Access: Public
//  Description: Writes the transform to the indicated stream in Egg
//               format.
//////////////////////////////////////////////////////////////////// 4 4 this 3 2186  3 out 1 2079  12 indent_level 1 2086  5 label 1 2078  
346 0 0 7 360 2205 1323 0 0 1 4 this 3 2203  
347 0 0 4 361 2073 0 0 0 3 4 this 3 2203  3 out 1 2079  12 indent_level 1 2086  
348 0 0 4 362 2073 0 0 0 2 4 this 3 2205  3 mat 1 2087  
349 0 0 7 363 2069 0 0 0 0 
350 0 0 7 366 2206 1326 0 235 ////////////////////////////////////////////////////////////////////
//     Function: EggSwitchConditionDistance::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 4 9 switch_in 1 2097  10 switch_out 1 2097  6 center 1 2142  4 fade 1 2097  
351 0 0 7 367 2069 0 0 0 0 
352 0 0 7 388 2207 1335 0 225 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::Copy Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2151  
353 0 0 7 388 2207 1335 0 220 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 name 1 2078  
354 0 0 7 389 2207 1335 0 233 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::Copy assignment operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2207  4 copy 1 2151  
355 0 0 4 391 2073 0 0 327 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::write
//       Access: Published, Virtual
//  Description: Writes the group and all of its children to the
//               indicated output stream in Egg format.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2151  3 out 1 2079  12 indent_level 1 2086  
356 0 0 4 392 2073 0 0 326 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::write_billboard_flags
//       Access: Published
//  Description: Writes just the <Billboard> entry and related fields to
//               the indicated ostream.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2151  3 out 1 2079  12 indent_level 1 2086  
357 0 0 4 393 2073 0 0 322 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::write_collide_flags
//       Access: Published
//  Description: Writes just the <Collide> entry and related fields to
//               the indicated ostream.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2151  3 out 1 2079  12 indent_level 1 2086  
358 0 0 4 394 2073 0 0 311 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::write_model_flags
//       Access: Published
//  Description: Writes the <Model> flag and related flags to the
//               indicated ostream.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2151  3 out 1 2079  12 indent_level 1 2086  
359 0 0 4 395 2073 0 0 313 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::write_switch_flags
//       Access: Published
//  Description: Writes the <Switch> flag and related flags to the
//               indicated ostream.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2151  3 out 1 2079  12 indent_level 1 2086  
360 0 0 4 396 2073 0 0 317 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::write_object_types
//       Access: Published
//  Description: Writes just the <ObjectTypes> entries, if any, to the
//               indicated ostream.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2151  3 out 1 2079  12 indent_level 1 2086  
361 0 0 4 397 2073 0 0 272 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::write_decal_flags
//       Access: Published
//  Description: Writes the flags related to decaling, if any.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2151  3 out 1 2079  12 indent_level 1 2086  
362 0 0 4 398 2073 0 0 301 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::write_tags
//       Access: Published
//  Description: Writes just the <Tag> entries, if any, to the
//               indicated ostream.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2151  3 out 1 2079  12 indent_level 1 2086  
363 0 0 4 399 2073 0 0 344 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::write_render_mode
//       Access: Published
//  Description: Writes the flags inherited from EggRenderMode and
//               similar flags that control obscure render effects.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2151  3 out 1 2079  12 indent_level 1 2086  
364 0 0 6 400 2074 0 0 508 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::is_joint
//       Access: Published, Virtual
//  Description: Returns true if this particular node represents a
//               <Joint> entry or not.  This is a handy thing to know
//               since Joints are sorted to the end of their sibling
//               list when writing an egg file.  See
//               EggGroupNode::write().
//////////////////////////////////////////////////////////////////// 1 4 this 3 2151  
365 0 0 6 401 2093 0 0 554 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::determine_alpha_mode
//       Access: Published, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               or EggPrimitive or some such object at this level or
//               above this group that has an alpha_mode other than
//               AM_unspecified.  Returns a valid EggRenderMode pointer
//               if one is found, or NULL otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2207  
366 0 0 6 402 2093 0 0 566 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::determine_depth_write_mode
//       Access: Published, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               or EggPrimitive or some such object at this level or
//               above this group that has a depth_write_mode other
//               than DWM_unspecified.  Returns a valid EggRenderMode
//               pointer if one is found, or NULL otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2207  
367 0 0 6 403 2093 0 0 564 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::determine_depth_test_mode
//       Access: Published, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               or EggPrimitive or some such object at this level or
//               above this group that has a depth_test_mode other
//               than DTM_unspecified.  Returns a valid EggRenderMode
//               pointer if one is found, or NULL otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2207  
368 0 0 6 404 2093 0 0 563 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::determine_visibility_mode
//       Access: Published, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               or EggPrimitive or some such object at this level or
//               above this group that has a visibility_mode other
//               than VM_unspecified.  Returns a valid EggRenderMode
//               pointer if one is found, or NULL otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2207  
369 0 0 6 405 2093 0 0 540 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::determine_depth_offset
//       Access: Published, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               or EggPrimitive or some such object at this level or
//               above this group that has a depth_offset specified.
//               Returns a valid EggRenderMode pointer if one is found,
//               or NULL otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2207  
370 0 0 6 406 2093 0 0 536 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::determine_draw_order
//       Access: Published, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               or EggPrimitive or some such object at this level or
//               above this group that has a draw_order specified.
//               Returns a valid EggRenderMode pointer if one is found,
//               or NULL otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2207  
371 0 0 6 407 2093 0 0 523 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::determine_bin
//       Access: Published, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               or EggPrimitive or some such object at this level or
//               above this group that has a bin specified.  Returns a
//               valid EggRenderMode pointer if one is found, or NULL
//               otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2207  
372 0 0 6 408 2074 0 0 619 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::determine_indexed
//       Access: Published, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               at this level or above that has the "indexed" scalar
//               set.  Returns the value of the indexed scalar if it
//               is found, or false if it is not.
//
//               In other words, returns true if the "indexed" flag is
//               in effect for the indicated node, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2207  
373 0 0 6 409 2074 0 0 607 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::determine_decal
//       Access: Published, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               at this level or above that has the "decal" flag
//               set.  Returns the value of the decal flag if it
//               is found, or false if it is not.
//
//               In other words, returns true if the "decal" flag is
//               in effect for the indicated node, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2207  
374 0 0 4 410 2073 0 0 223 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_group_type
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2207  4 type 1 1998  
375 0 0 6 411 1998 0 0 223 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_group_type
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2151  
376 0 0 6 412 2074 0 0 668 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::is_instance_type
//       Access: Published
//  Description: Returns true if this group is an instance type node;
//               i.e. it begins the root of a local coordinate space.
//               This is not related to instancing (multiple copies of
//               a node in a scene graph).
//
//               This also includes the case of the node including a
//               billboard flag without an explicit center, which
//               implicitly makes the node behave like an instance.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2151  
377 0 0 4 413 2073 0 0 227 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_billboard_type
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2207  4 type 1 2000  
378 0 0 6 414 2000 0 0 227 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_billboard_type
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2151  
379 0 0 4 415 2073 0 0 1120 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_billboard_center
//       Access: Published
//  Description: Sets the point around which the billboard will
//               rotate, if this node contains a billboard
//               specification.
//
//               If a billboard type is given but no billboard_center
//               is specified, then the group node is treated as an
//               <Instance>, and the billboard rotates around the
//               origin.  If, however, a billboard_center is
//               specified, then the group node is *not* treated as an
//               <Instance>, and the billboard rotates around the
//               specified point.
//
//               The point is in the same coordinate system as the
//               vertices of this node: usually global, but possibly
//               local if there is an <Instance> somewhere above.
//               Specifically, this is the coordinate system defined
//               by get_vertex_frame().
//////////////////////////////////////////////////////////////////// 2 4 this 3 2207  16 billboard_center 1 2142  
380 0 0 4 416 2073 0 0 231 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::clear_billboard_center
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2207  
381 0 0 6 417 2074 0 0 229 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::has_billboard_center
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2151  
382 0 0 6 418 2142 0 0 229 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_billboard_center
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2151  
383 0 0 4 419 2073 0 0 220 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_cs_type
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2207  4 type 1 2001  
384 0 0 6 420 2001 0 0 220 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_cs_type
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2151  
385 0 0 4 421 2073 0 0 226 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_collide_flags
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2207  5 flags 1 2086  
386 0 0 6 422 2002 0 0 226 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_collide_flags
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2151  
387 0 0 4 423 2073 0 0 227 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_collision_name
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2207  14 collision_name 1 2078  
388 0 0 4 424 2073 0 0 229 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::clear_collision_name
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2207  
389 0 0 6 425 2074 0 0 227 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::has_collision_name
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2151  
390 0 0 6 426 2078 0 0 227 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_collision_name
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2151  
391 0 0 4 427 2073 0 0 221 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_dcs_type
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2207  4 type 1 1999  
392 0 0 6 428 1999 0 0 221 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_dcs_type
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2151  
393 0 0 6 429 2074 0 0 316 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::has_dcs_type
//       Access: Published
//  Description: Returns true if the specified DCS type is not
//               DC_none and not DC_unspecified.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2151  
394 0 0 4 430 2073 0 0 222 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_dart_type
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2207  4 type 1 2003  
395 0 0 6 431 2003 0 0 222 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_dart_type
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2151  
396 0 0 4 432 2073 0 0 224 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_switch_flag
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2207  4 flag 1 2074  
397 0 0 6 433 2074 0 0 224 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_switch_flag
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2151  
398 0 0 4 434 2073 0 0 223 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_switch_fps
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2207  3 fps 1 2097  
399 0 0 6 435 2097 0 0 223 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_switch_fps
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2151  
400 0 0 4 436 2073 0 0 224 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::add_object_type
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2207  11 object_type 1 2078  
401 0 0 4 437 2073 0 0 227 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::clear_object_types
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2207  
402 0 0 6 438 2086 0 0 229 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_num_object_types
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2151  
403 0 0 6 439 2078 0 0 224 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_object_type
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2151  5 index 1 2086  
404 0 0 6 440 2074 0 0 332 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::has_object_type
//       Access: Published
//  Description: Returns true if the indicated object type has been
//               added to the group, or false otherwise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2151  11 object_type 1 2078  
405 0 0 6 441 2074 0 0 440 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::remove_object_type
//       Access: Published
//  Description: Removes the first instance of the indicated object
//               type from the group if it is present.  Returns true
//               if the object type was found and removed, false
//               otherwise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2207  11 object_type 1 2078  
406 0 0 4 442 2073 0 0 223 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_model_flag
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2207  4 flag 1 2074  
407 0 0 6 443 2074 0 0 223 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_model_flag
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2151  
408 0 0 4 444 2073 0 0 225 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_texlist_flag
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2207  4 flag 1 2074  
409 0 0 6 445 2074 0 0 225 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_texlist_flag
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2151  
410 0 0 4 446 2073 0 0 223 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_nofog_flag
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2207  4 flag 1 2074  
411 0 0 6 447 2074 0 0 223 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_nofog_flag
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2151  
412 0 0 4 448 2073 0 0 223 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_decal_flag
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2207  4 flag 1 2074  
413 0 0 6 449 2074 0 0 223 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_decal_flag
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2151  
414 0 0 4 450 2073 0 0 224 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_direct_flag
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2207  4 flag 1 2074  
415 0 0 6 451 2074 0 0 224 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_direct_flag
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2151  
416 0 0 4 452 2073 0 0 224 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_portal_flag
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2207  4 flag 1 2074  
417 0 0 6 453 2074 0 0 224 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_portal_flag
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2151  
418 0 0 4 454 2073 0 0 226 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_occluder_flag
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2207  4 flag 1 2074  
419 0 0 6 455 2074 0 0 226 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_occluder_flag
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2151  
420 0 0 4 456 2073 0 0 227 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_polylight_flag
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2207  4 flag 1 2074  
421 0 0 6 457 2074 0 0 227 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_polylight_flag
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2151  
422 0 0 4 458 2073 0 0 335 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_indexed_flag
//       Access: Published
//  Description: If this flag is true, geometry at this node and below
//               will be generated as indexed geometry.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2207  4 flag 1 2074  
423 0 0 4 459 2073 0 0 227 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::clear_indexed_flag
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2207  
424 0 0 6 460 2074 0 0 225 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::has_indexed_flag
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2151  
425 0 0 6 461 2074 0 0 225 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_indexed_flag
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2151  
426 0 0 4 462 2073 0 0 225 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_collide_mask
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2207  4 mask 1 2208  
427 0 0 4 463 2073 0 0 227 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::clear_collide_mask
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2207  
428 0 0 6 464 2074 0 0 225 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::has_collide_mask
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2151  
429 0 0 7 465 2208 0 0 225 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_collide_mask
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2151  
430 0 0 4 466 2073 0 0 230 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_from_collide_mask
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2207  4 mask 1 2208  
431 0 0 4 467 2073 0 0 232 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::clear_from_collide_mask
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2207  
432 0 0 6 468 2074 0 0 230 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::has_from_collide_mask
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2151  
433 0 0 7 469 2208 0 0 230 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_from_collide_mask
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2151  
434 0 0 4 470 2073 0 0 230 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_into_collide_mask
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2207  4 mask 1 2208  
435 0 0 4 471 2073 0 0 232 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::clear_into_collide_mask
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2207  
436 0 0 6 472 2074 0 0 230 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::has_into_collide_mask
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2151  
437 0 0 7 473 2208 0 0 230 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_into_collide_mask
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2151  
438 0 0 4 474 2073 0 0 223 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_blend_mode
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2207  10 blend_mode 1 2004  
439 0 0 6 475 2004 0 0 223 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_blend_mode
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2151  
440 0 0 4 476 2073 0 0 228 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_blend_operand_a
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2207  15 blend_operand_a 1 2005  
441 0 0 6 477 2005 0 0 228 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_blend_operand_a
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2151  
442 0 0 4 478 2073 0 0 228 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_blend_operand_b
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2207  15 blend_operand_b 1 2005  
443 0 0 6 479 2005 0 0 228 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_blend_operand_b
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2151  
444 0 0 4 480 2073 0 0 224 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_blend_color
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2207  11 blend_color 1 2112  
445 0 0 4 481 2073 0 0 265 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::clear_blend_color
//       Access: Published
//  Description: Removes the blend color specification.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2207  
446 0 0 6 482 2074 0 0 310 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::has_blend_color
//       Access: Published
//  Description: Returns true if the blend color has been specified,
//               false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2151  
447 0 0 6 483 2112 0 0 324 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_blend_color
//       Access: Published
//  Description: Returns the blend color if one has been specified, or
//               (0, 0, 0, 0) if one has not.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2151  
448 0 0 4 484 2073 0 0 216 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_lod
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2207  3 lod 1 2203  
449 0 0 4 485 2073 0 0 218 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::clear_lod
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2207  
450 0 0 6 486 2074 0 0 216 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::has_lod
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2151  
451 0 0 7 487 2203 0 0 216 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_lod
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2151  
452 0 0 4 488 2073 0 0 878 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_tag
//       Access: Published
//  Description: Associates a user-defined value with a user-defined
//               key which is stored on the node.  This value has no
//               meaning to Panda; but it is stored indefinitely on
//               the node until it is requested again.  This value
//               will be copied to the PandaNode that is created for
//               this particular EggGroup if the egg file is loaded as
//               a scene.
//
//               Each unique key stores a different string value.
//               There is no effective limit on the number of
//               different keys that may be stored or on the length of
//               any one key's value.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2207  3 key 1 2078  5 value 1 2078  
453 0 0 6 489 2078 0 0 433 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_tag
//       Access: Published
//  Description: Retrieves the user-defined value that was previously
//               set on this node for the particular key, if any.  If
//               no value has been previously set, returns the empty
//               string.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2151  3 key 1 2078  
454 0 0 6 490 2074 0 0 404 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::has_tag
//       Access: Published
//  Description: Returns true if a value has been defined on this node
//               for the particular key (even if that value is the
//               empty string), or false if no value has been set.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2151  3 key 1 2078  
455 0 0 4 491 2073 0 0 397 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::clear_tag
//       Access: Published
//  Description: Removes the value defined for this key on this
//               particular node.  After a call to clear_tag(),
//               has_tag() will return false for the indicated key.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2207  3 key 1 2078  
456 0 0 6 492 2186 0 0 603 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_default_pose
//       Access: Published
//  Description: Returns a read-only accessor to the initial pose
//               transform.  This is the <DefaultPose> entry for a
//               Joint, and defines only the initial transform pose
//               for the unanimated joint; it has nothing to do with
//               the group's <Transform> entry, which defines the
//               (eventual) space of the group's vertices.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2151  
457 0 0 6 493 2185 0 0 605 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::modify_default_pose
//       Access: Published
//  Description: Returns a writable accessor to the initial pose
//               transform.  This is the <DefaultPose> entry for a
//               Joint, and defines only the initial transform pose
//               for the unanimated joint; it has nothing to do with
//               the group's <Transform> entry, which defines the
//               (eventual) space of the group's vertices.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2207  
458 0 0 4 494 2073 0 0 580 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_default_pose
//       Access: Published
//  Description: Replaces the initial pose transform.  This is the
//               <DefaultPose> entry for a Joint, and defines only the
//               initial transform pose for the unanimated joint; it
//               has nothing to do with the group's <Transform> entry,
//               which defines the (eventual) space of the group's
//               vertices.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2207  9 transform 1 2186  
459 0 0 4 495 2073 0 0 305 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::clear_default_pose
//       Access: Published
//  Description: Removes the initial pose transform.  See
//               set_default_pose().
//////////////////////////////////////////////////////////////////// 1 4 this 3 2207  
460 0 0 4 496 2073 0 0 0 2 4 this 3 2207  7 u_speed 1 2212  
461 0 0 4 497 2073 0 0 0 2 4 this 3 2207  7 v_speed 1 2212  
462 0 0 4 498 2073 0 0 0 2 4 this 3 2207  7 w_speed 1 2212  
463 0 0 4 499 2073 0 0 0 2 4 this 3 2207  7 r_speed 1 2212  
464 0 0 6 500 2097 0 0 0 1 4 this 3 2151  
465 0 0 6 501 2097 0 0 0 1 4 this 3 2151  
466 0 0 6 502 2097 0 0 0 1 4 this 3 2151  
467 0 0 6 503 2097 0 0 0 1 4 this 3 2151  
468 0 0 6 504 2074 0 0 0 1 4 this 3 2207  
469 0 0 4 505 2073 0 0 467 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::ref_vertex
//       Access: Published
//  Description: Adds the vertex to the set of those referenced by the
//               group, at the indicated membership level.  If the
//               vertex is already being referenced, increases the
//               membership amount by the indicated amount.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2207  4 vert 1 2136  10 membership 1 2097  
470 0 0 4 506 2073 0 0 372 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::unref_vertex
//       Access: Published
//  Description: Removes the vertex from the set of those referenced
//               by the group.  Does nothing if the vertex is not
//               already reffed.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2207  4 vert 1 2136  
471 0 0 4 507 2073 0 0 273 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::unref_all_vertices
//       Access: Published
//  Description: Removes all vertices from the reference list.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2207  
472 0 0 6 508 2097 0 0 390 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_vertex_membership
//       Access: Published
//  Description: Returns the amount of membership of the indicated
//               vertex in this group.  If the vertex is not reffed by
//               the group, returns 0.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2151  4 vert 1 2137  
473 0 0 4 509 2073 0 0 340 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_vertex_membership
//       Access: Published
//  Description: Explicitly sets the net membership of the indicated
//               vertex in this group to the given value.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2207  4 vert 1 2136  10 membership 1 2097  
474 0 0 4 510 2073 0 0 450 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::steal_vrefs
//       Access: Published
//  Description: Moves all of the vertex references from the indicated
//               other group into this one.  If a given vertex was
//               previously shared by both groups, the relative
//               memberships will be summed.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2207  5 other 1 2207  
475 0 0 4 511 2073 0 0 0 1 4 this 3 2151  
476 0 0 4 512 2073 0 0 464 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::add_group_ref
//       Access: Published
//  Description: Adds a new <Ref> entry to the group.  This declares
//               an internal reference to another node, and is used to
//               implement scene-graph instancing; it is only valid if
//               the group_type is GT_instance.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2207  5 group 1 2207  
477 0 0 6 513 2086 0 0 321 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_num_group_refs
//       Access: Published
//  Description: Returns the number of <Ref> entries within this
//               group.  See add_group_ref().
//////////////////////////////////////////////////////////////////// 1 4 this 3 2151  
478 0 0 7 514 2207 1335 0 308 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_group_ref
//       Access: Published
//  Description: Returns the nth <Ref> entry within this group.  See
//               add_group_ref().
//////////////////////////////////////////////////////////////////// 2 4 this 3 2151  1 n 1 2086  
479 0 0 4 515 2073 0 0 311 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::remove_group_ref
//       Access: Published
//  Description: Removes the nth <Ref> entry within this group.  See
//               add_group_ref().
//////////////////////////////////////////////////////////////////// 2 4 this 3 2207  1 n 1 2086  
480 0 0 4 516 2073 0 0 315 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::clear_group_refs
//       Access: Published
//  Description: Removes all of the <Ref> entries within this group.
//               See add_group_ref().
//////////////////////////////////////////////////////////////////// 1 4 this 3 2207  
481 0 0 6 517 1998 0 0 415 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::string_group_type
//       Access: Published, Static
//  Description: Returns the GroupType value associated with the given
//               string representation, or GT_invalid if the string
//               does not match any known GroupType value.
//////////////////////////////////////////////////////////////////// 1 6 strval 1 2078  
482 0 0 6 518 2003 0 0 409 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::string_dart_type
//       Access: Published, Static
//  Description: Returns the DartType value associated with the given
//               string representation, or DT_none if the string
//               does not match any known DartType value.
//////////////////////////////////////////////////////////////////// 1 6 strval 1 2078  
483 0 0 6 519 1999 0 0 413 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::string_dcs_type
//       Access: Published, Static
//  Description: Returns the DCSType value associated with the given
//               string representation, or DC_unspecified if the
//               string does not match any known DCSType value.
//////////////////////////////////////////////////////////////////// 1 6 strval 1 2078  
484 0 0 6 520 2000 0 0 424 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::string_billboard_type
//       Access: Published, Static
//  Description: Returns the BillboardType value associated with the
//               given string representation, or BT_none if the string
//               does not match any known BillboardType value.
//////////////////////////////////////////////////////////////////// 1 6 strval 1 2078  
485 0 0 6 521 2001 0 0 428 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::string_cs_type
//       Access: Published, Static
//  Description: Returns the CollisionSolidType value associated with the
//               given string representation, or CST_none if the string
//               does not match any known CollisionSolidType value.
//////////////////////////////////////////////////////////////////// 1 6 strval 1 2078  
486 0 0 6 522 2002 0 0 546 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::string_collide_flags
//       Access: Published, Static
//  Description: Returns the CollideFlags value associated with the
//               given string representation, or CF_none if the string
//               does not match any known CollideFlags value.  This
//               only recognizes a single keyword; it does not attempt
//               to parse a string of keywords.
//////////////////////////////////////////////////////////////////// 1 6 strval 1 2078  
487 0 0 6 523 2004 0 0 406 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::string_blend_mode
//       Access: Published, Static
//  Description: Returns the BlendMode value associated with the
//               given string representation, or BM_none if the string
//               does not match any known BlendMode.
//////////////////////////////////////////////////////////////////// 1 6 strval 1 2078  
488 0 0 6 524 2005 0 0 415 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::string_blend_operand
//       Access: Published, Static
//  Description: Returns the BlendOperand value associated with the
//               given string representation, or BO_none if the string
//               does not match any known BlendOperand.
//////////////////////////////////////////////////////////////////// 1 6 strval 1 2078  
489 0 0 7 525 2069 0 0 0 0 
490 0 0 7 370 2085 1053 0 0 1 4 this 3 2207  
491 0 0 7 371 2207 1335 0 0 1 4 this 3 2085  
492 0 0 6 372 2093 0 0 0 1 4 this 3 2207  
493 0 0 7 373 2207 1335 0 0 1 4 this 3 2093  
494 0 0 6 374 2185 0 0 0 1 4 this 3 2207  
495 0 0 7 375 2207 1335 0 0 1 4 this 3 2185  
496 0 0 7 527 2215 1475 0 220 ////////////////////////////////////////////////////////////////////
//     Function: EggBin::Copy constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2213  
497 0 0 7 527 2215 1475 0 229 ////////////////////////////////////////////////////////////////////
//     Function: EggBin::EggGroup copy constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2151  
498 0 0 7 527 2215 1475 0 215 ////////////////////////////////////////////////////////////////////
//     Function: EggBin::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 name 1 2078  
499 0 0 4 528 2073 0 0 218 ////////////////////////////////////////////////////////////////////
//     Function: EggBin::set_bin_number
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2215  10 bin_number 1 2086  
500 0 0 6 529 2086 0 0 218 ////////////////////////////////////////////////////////////////////
//     Function: EggBin::get_bin_number
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2213  
501 0 0 7 530 2069 0 0 0 0 
502 0 0 6 533 2086 0 0 460 ////////////////////////////////////////////////////////////////////
//     Function: EggBinMaker::make_bins
//       Access: Public
//  Description: The main entry point to EggBinMaker.  Walks the egg
//               scene graph beginning at the indicated root node, and
//               moves all binnable nodes into EggBin objects.
//               Returns the number of EggBins created.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2216  10 root_group 1 2085  
503 0 0 4 534 2073 0 0 419 ////////////////////////////////////////////////////////////////////
//     Function: EggBinMaker::prepare_node
//       Access: Public, Virtual
//  Description: May be overridden in derived classes to perform some
//               setup work as each node is encountered.  This will be
//               called once for each node in the egg hierarchy.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2216  4 node 1 2082  
504 0 0 6 535 2086 0 0 0 2 4 this 3 2216  4 node 1 2083  
505 0 0 6 536 2074 0 0 669 ////////////////////////////////////////////////////////////////////
//     Function: EggBinMaker::sorts_less
//       Access: Public, Virtual
//  Description: May be overridden in derived classes to create
//               additional bins within a particular bin number, based
//               on some arbitrary property of nodes.  This function
//               establishes an arbitrary but fixed ordering between
//               nodes; if two nodes do not sort to the same position,
//               different bins are created for each one (with the
//               same bin number on each bin).
//////////////////////////////////////////////////////////////////// 4 4 this 3 2216  10 bin_number 1 2086  1 a 1 2083  1 b 1 2083  
506 0 0 6 537 2074 0 0 398 ////////////////////////////////////////////////////////////////////
//     Function: EggBinMaker::collapse_group
//       Access: Public, Virtual
//  Description: May be overridden in derived classes to specify
//               whether a particular group node, apparently
//               redundant, may be safely collapsed out.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2216  5 group 1 2151  10 bin_number 1 2086  
507 0 0 6 538 2078 0 0 381 ////////////////////////////////////////////////////////////////////
//     Function: EggBinMaker::get_bin_name
//       Access: Public, Virtual
//  Description: May be overridden in derived classes to define a name
//               for each new bin, based on its bin number, and a
//               sample child.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2216  10 bin_number 1 2086  5 child 1 2083  
508 0 0 7 539 2215 1475 0 655 ////////////////////////////////////////////////////////////////////
//     Function: EggBinMaker::make_bin
//       Access: Public, Virtual
//  Description: May be overridden in derived classes to construct a
//               new EggBin object (or some derived class, if needed),
//               and preload some initial data into as required.
//
//               child is an arbitrary child of the bin, and
//               collapse_from is the group the bin is being collapsed
//               with, if any (implying collapse_group() returned
//               true), or NULL if not.
//////////////////////////////////////////////////////////////////// 4 4 this 3 2216  10 bin_number 1 2086  5 child 1 2083  13 collapse_from 1 2207  
509 0 0 7 540 2069 0 0 0 0 
510 0 0 7 542 2219 1490 0 224 ////////////////////////////////////////////////////////////////////
//     Function: EggComment::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2217  
511 0 0 7 542 2219 1490 0 219 ////////////////////////////////////////////////////////////////////
//     Function: EggComment::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 9 node_name 1 2078  7 comment 1 2078  
512 0 0 7 543 2219 1490 0 232 ////////////////////////////////////////////////////////////////////
//     Function: EggComment::Copy assignment operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2219  4 copy 1 2217  
513 0 0 7 543 2219 1490 0 227 ////////////////////////////////////////////////////////////////////
//     Function: EggComment::Assignment operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2219  7 comment 1 2078  
514 0 0 4 545 2073 0 0 219 ////////////////////////////////////////////////////////////////////
//     Function: EggComment::set_comment
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2219  7 comment 1 2078  
515 0 0 6 546 2078 0 0 219 ////////////////////////////////////////////////////////////////////
//     Function: EggComment::set_comment
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2217  
516 0 0 7 547 2069 0 0 0 0 
517 0 0 6 544 2078 0 0 0 1 4 this 3 2217  
518 0 0 7 550 2220 1498 0 237 ////////////////////////////////////////////////////////////////////
//     Function: EggFilenameNode::Copy assignment operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2220  4 copy 1 2221  
519 0 0 6 551 2078 0 0 297 ////////////////////////////////////////////////////////////////////
//     Function: EggFilenameNode::get_default_extension
//       Access: Public, Virtual
//  Description: Returns the default extension for this filename type.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2221  
520 0 0 6 552 2171 0 0 276 ////////////////////////////////////////////////////////////////////
//     Function: EggFilenameNode::get_filename
//       Access: Public
//  Description: Returns a nonmodifiable reference to the filename.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2221  
521 0 0 4 553 2073 0 0 225 ////////////////////////////////////////////////////////////////////
//     Function: EggFilenameNode::set_filename
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2220  8 filename 1 2171  
522 0 0 6 554 2171 0 0 822 ////////////////////////////////////////////////////////////////////
//     Function: EggFilenameNode::get_fullpath
//       Access: Public
//  Description: Returns the full pathname to the file, if it is
//               known; otherwise, returns the same thing as
//               get_filename().
//
//               This function simply returns whatever was set by the
//               last call to set_fullpath().  This string is not
//               written to the egg file; its main purpose is to
//               record the full path to a filename (for instance, a
//               texture filename) if it is known, for egg structures
//               that are generated in-memory and then immediately
//               converted to a scene graph.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2221  
523 0 0 4 555 2073 0 0 316 ////////////////////////////////////////////////////////////////////
//     Function: EggFilenameNode::set_fullpath
//       Access: Public
//  Description: Records the full pathname to the file, for the
//               benefit of get_fullpath().
//////////////////////////////////////////////////////////////////// 2 4 this 3 2220  8 fullpath 1 2171  
524 0 0 7 556 2069 0 0 0 0 
525 0 0 7 565 2225 1507 0 227 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::Copy constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2223  
526 0 0 7 565 2225 1507 0 222 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 9 tref_name 1 2078  8 filename 1 2171  
527 0 0 7 566 2225 1507 0 235 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::Copy assignment operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2225  4 copy 1 2223  
528 0 0 4 568 2073 0 0 315 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::write
//       Access: Public, Virtual
//  Description: Writes the texture definition to the indicated output
//               stream in Egg format.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2223  3 out 1 2079  12 indent_level 1 2086  
529 0 0 6 570 2074 0 0 1471 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::is_equivalent_to
//       Access: Published
//  Description: Returns true if the two textures are equivalent in
//               all relevant properties (according to eq), false
//               otherwise.
//
//               The Equivalence parameter, eq, should be set to the
//               bitwise OR of the following properties, according to
//               what you consider relevant:
//
//               EggTexture::E_basename:
//                 The basename part of the texture filename, without
//                 the directory prefix *or* the filename extension.
//
//               EggTexture::E_extension:
//                 The extension part of the texture filename.
//
//               EggTexture::E_dirname:
//                 The directory prefix of the texture filename.
//
//               EggTexture::E_complete_filename:
//                 The union of the above three; that is, the complete
//                 filename, with directory, basename, and extension.
//
//               EggTexture::E_transform:
//                 The texture matrix.
//
//               EggTexture::E_attributes:
//                 All remaining texture attributes (mode, mipmap,
//                 etc.) except TRef name.
//
//               EggTexture::E_tref_name:
//                 The TRef name.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2223  5 other 1 2223  2 eq 1 2086  
530 0 0 6 571 2074 0 0 502 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::sorts_less_than
//       Access: Published
//  Description: An ordering operator to compare two textures for
//               sorting order.  This imposes an arbitrary ordering
//               useful to identify unique textures, according to the
//               indicated Equivalence factor.  See
//               is_equivalent_to().
//////////////////////////////////////////////////////////////////// 3 4 this 3 2223  5 other 1 2223  2 eq 1 2086  
531 0 0 6 572 2074 0 0 537 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::has_alpha_channel
//       Access: Published
//  Description: Given the number of color components (channels) in
//               the image file as actually read from the disk, return
//               true if this texture seems to have an alpha channel
//               or not.  This depends on the EggTexture's format as
//               well as the number of channels.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2223  14 num_components 1 2086  
532 0 0 4 586 2073 0 0 227 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_texture_type
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2225  12 texture_type 1 2012  
533 0 0 6 587 2012 0 0 227 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_texture_type
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2223  
534 0 0 4 588 2073 0 0 221 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_format
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2225  6 format 1 2013  
535 0 0 6 589 2013 0 0 221 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_format
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2223  
536 0 0 4 590 2073 0 0 231 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_compression_mode
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2225  4 mode 1 2014  
537 0 0 6 591 2014 0 0 231 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_compression_mode
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2223  
538 0 0 4 592 2073 0 0 224 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_wrap_mode
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2225  4 mode 1 2015  
539 0 0 6 593 2015 0 0 224 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_wrap_mode
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2223  
540 0 0 4 594 2073 0 0 221 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_wrap_u
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2225  4 mode 1 2015  
541 0 0 6 595 2015 0 0 345 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_wrap_u
//       Access: Published
//  Description: Returns the amount specified for U wrap.  This may be
//               unspecified, even if there is an overall wrap value.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2223  
542 0 0 6 596 2015 0 0 439 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::determine_wrap_u
//       Access: Published
//  Description: Determines the appropriate wrap in the U direction.
//               This is different from get_wrap_u() in that if the U
//               wrap is unspecified, it returns the overall wrap
//               value.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2223  
543 0 0 4 597 2073 0 0 221 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_wrap_v
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2225  4 mode 1 2015  
544 0 0 6 598 2015 0 0 345 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_wrap_v
//       Access: Published
//  Description: Returns the amount specified for V wrap.  This may be
//               unspecified, even if there is an overall wrap value.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2223  
545 0 0 6 599 2015 0 0 439 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::determine_wrap_v
//       Access: Published
//  Description: Determines the appropriate wrap in the V direction.
//               This is different from get_wrap_v() in that if the V
//               wrap is unspecified, it returns the overall wrap
//               value.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2223  
546 0 0 4 600 2073 0 0 221 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_wrap_w
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2225  4 mode 1 2015  
547 0 0 6 601 2015 0 0 345 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_wrap_w
//       Access: Published
//  Description: Returns the amount specified for W wrap.  This may be
//               unspecified, even if there is an overall wrap value.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2223  
548 0 0 6 602 2015 0 0 439 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::determine_wrap_w
//       Access: Published
//  Description: Determines the appropriate wrap in the W direction.
//               This is different from get_wrap_w() in that if the W
//               wrap is unspecified, it returns the overall wrap
//               value.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2223  
549 0 0 4 603 2073 0 0 224 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_minfilter
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2225  4 type 1 2016  
550 0 0 6 604 2016 0 0 224 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_minfilter
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2223  
551 0 0 4 605 2073 0 0 224 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_magfilter
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2225  4 type 1 2016  
552 0 0 6 606 2016 0 0 224 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_magfilter
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2223  
553 0 0 4 607 2073 0 0 381 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_anisotropic_degree
//       Access: Published
//  Description: Sets the degree of anisotropic filtering for this
//               texture.  1 is off; higher levels indicate filtering
//               in effect.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2225  18 anisotropic_degree 1 2086  
554 0 0 4 608 2073 0 0 321 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::clear_anisotropic_degree
//       Access: Published
//  Description: Removes the specification of anisotropic filtering
//               from the texture.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2225  
555 0 0 6 609 2074 0 0 382 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::has_anisotropic_degree
//       Access: Published
//  Description: Returns true if a value for the anisotropic filtering
//               degree has been specified for this texture, false
//               otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2223  
556 0 0 6 610 2086 0 0 386 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_anisotropic_degree
//       Access: Published
//  Description: Returns the anisotropic filtering degree that has
//               been specified for this texture, or 0 if nothing has
//               been specified.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2223  
557 0 0 4 611 2073 0 0 223 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_env_type
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2225  4 type 1 2017  
558 0 0 6 612 2017 0 0 223 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_env_type
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2223  
559 0 0 6 613 2074 0 0 415 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::affects_polygon_alpha
//       Access: Published
//  Description: Returns true if this texture's environment type or
//               combine mode allows the texture to have an effect on
//               the polygon's alpha values, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2223  
560 0 0 4 614 2073 0 0 227 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_combine_mode
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 2225  7 channel 1 2019  2 cm 1 2018  
561 0 0 6 615 2018 0 0 227 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_combine_mode
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2223  7 channel 1 2019  
562 0 0 4 616 2073 0 0 229 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_combine_source
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 4 4 this 3 2225  7 channel 1 2019  1 n 1 2086  2 cs 1 2021  
563 0 0 6 617 2021 0 0 229 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_combine_source
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 2223  7 channel 1 2019  1 n 1 2086  
564 0 0 4 618 2073 0 0 230 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_combine_operand
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 4 4 this 3 2225  7 channel 1 2019  1 n 1 2086  2 co 1 2022  
565 0 0 6 619 2022 0 0 230 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_combine_operand
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 2223  7 channel 1 2019  1 n 1 2086  
566 0 0 4 620 2073 0 0 1011 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_saved_result
//       Access: Published
//  Description: Sets the saved_result flag.  When this is true, the
//               output of this stage is not part of the normal
//               pipeline--that is, it will not be supplied as the
//               "previous" source for the next texture stage--but it
//               will instead be supplied as the "last_saved_result"
//               source for any future stages, until the next
//               TextureStage with a saved_result set true is
//               encountered.
//
//               This can be used to reuse the results of this texture
//               stage as input to more than one stage later in the
//               pipeline.
//
//               The last texture in the pipeline (the one with the
//               highest sort value) should not have this flag set.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2225  12 saved_result 1 2074  
567 0 0 6 621 2074 0 0 322 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_saved_result
//       Access: Published
//  Description: Returns the current setting of the saved_result flag.
//               See set_saved_result().
//////////////////////////////////////////////////////////////////// 1 4 this 3 2223  
568 0 0 4 622 2073 0 0 222 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_tex_gen
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2225  7 tex_gen 1 2023  
569 0 0 6 623 2023 0 0 222 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_tex_gen
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2223  
570 0 0 4 624 2073 0 0 228 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_quality_level
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2225  13 quality_level 1 2024  
571 0 0 6 625 2024 0 0 228 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_quality_level
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2223  
572 0 0 4 626 2073 0 0 778 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_stage_name
//       Access: Published
//  Description: Specifies the particular TextureStage this texture
//               will be rendered on by name.  If this is omitted, the
//               texture will be rendered on the default TextureStage,
//               unless some other stage-specific property is
//               specificied, in which case the texture will be
//               rendered on a TextureStage with the same name as the
//               tref.  This is in support of multitexturing.
//
//               Each different TextureStage in the world must be
//               uniquely named.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2225  10 stage_name 1 2078  
573 0 0 4 627 2073 0 0 273 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::clear_stage_name
//       Access: Published
//  Description: Removes the named TextureStage specification.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2225  
574 0 0 6 628 2074 0 0 336 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::has_stage_name
//       Access: Published
//  Description: Returns true if a stage name has been explicitly
//               specified for this texture, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2223  
575 0 0 6 629 2078 0 0 392 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_stage_name
//       Access: Published
//  Description: Returns the stage name that has been specified for
//               this texture, or the tref name if no texture stage
//               has explicitly been specified.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2223  
576 0 0 4 630 2073 0 0 435 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_priority
//       Access: Published
//  Description: Sets the importance of this texture with respect to
//               other textures also applied on the same geometry.
//               This is only meaningful in the presence of
//               multitexturing.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2225  8 priority 1 2086  
577 0 0 4 631 2073 0 0 345 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::clear_priority
//       Access: Published
//  Description: Removes the specification of multitexture priority
//               from the texture.  The default priority value is 0.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2225  
578 0 0 6 632 2074 0 0 371 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::has_priority
//       Access: Published
//  Description: Returns true if a priority value for multitexture
//               importance has been specified for the texture, false
//               otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2223  
579 0 0 6 633 2086 0 0 386 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_priority
//       Access: Published
//  Description: Returns the multitexture importance value that has been
//               specified for the texture, or 0 if no priority value has
//               been specified.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2223  
580 0 0 4 634 2073 0 0 220 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_color
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2225  5 color 1 2112  
581 0 0 4 635 2073 0 0 222 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::clear_color
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2225  
582 0 0 6 636 2074 0 0 303 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::has_color
//       Access: Published
//  Description: Returns true if a blend color has been
//               specified for the texture.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2223  
583 0 0 6 637 2112 0 0 315 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_color
//       Access: Published
//  Description: Returns the blend color if one has been
//               specified, or (0, 0, 0, 1) otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2223  
584 0 0 4 638 2073 0 0 227 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_border_color
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2225  12 border_color 1 2112  
585 0 0 4 639 2073 0 0 229 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::clear_border_color
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2225  
586 0 0 6 640 2074 0 0 311 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::has_border_color
//       Access: Published
//  Description: Returns true if a border color has been
//               specified for the texture.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2223  
587 0 0 6 641 2112 0 0 323 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_border_color
//       Access: Published
//  Description: Returns the border color if one has been
//               specified, or (0, 0, 0, 1) otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2223  
588 0 0 4 642 2073 0 0 593 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_uv_name
//       Access: Published
//  Description: Specifies the named set of texture coordinates that
//               this texture will use when it is applied to geometry.
//               Geometry may have multiple sets of texture
//               coordinates defined, by name.
//
//               If this is not specified for a particular texture,
//               the default set of texture coordinates will be used.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2225  7 uv_name 1 2078  
589 0 0 4 643 2073 0 0 398 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::clear_uv_name
//       Access: Published
//  Description: Removes the restriction to a particular named set of
//               texture coordinates and restores the texture to using
//               the default texture coordinates.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2225  
590 0 0 6 644 2074 0 0 336 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::has_uv_name
//       Access: Published
//  Description: Returns true if a texcoord name has been explicitly
//               specified for this texture, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2223  
591 0 0 6 645 2078 0 0 395 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_uv_name
//       Access: Published
//  Description: Returns the texcoord name that has been specified for
//               this texture, or the empty string if no texcoord name
//               has explicitly been specified.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2223  
592 0 0 4 646 2073 0 0 493 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_rgb_scale
//       Access: Published
//  Description: Sets an additional factor that will scale all three
//               r, g, b components after the texture has been
//               applied.  This is used only when a combine mode is in
//               effect.
//
//               The only legal values are 1, 2, or 4.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2225  9 rgb_scale 1 2086  
593 0 0 4 647 2073 0 0 325 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::clear_rgb_scale
//       Access: Published
//  Description: Removes the rgb_scale from the texture and restores
//               it to the default value of 1.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2225  
594 0 0 6 648 2074 0 0 323 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::has_rgb_scale
//       Access: Published
//  Description: Returns true if an rgb_scale has been specified for
//               the texture, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2223  
595 0 0 6 649 2086 0 0 374 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_rgb_scale
//       Access: Published
//  Description: Returns the rgb_scale value that has been
//               specified for the texture, or 1 if no rgb_scale value
//               has been specified.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2223  
596 0 0 4 650 2073 0 0 468 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_alpha_scale
//       Access: Published
//  Description: Sets an additional factor that will scale the
//               alpha component after the texture has been applied.
//               This is used only when a combine mode is in effect.
//
//               The only legal values are 1, 2, or 4.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2225  11 alpha_scale 1 2086  
597 0 0 4 651 2073 0 0 329 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::clear_alpha_scale
//       Access: Published
//  Description: Removes the alpha_scale from the texture and restores
//               it to the default value of 1.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2225  
598 0 0 6 652 2074 0 0 327 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::has_alpha_scale
//       Access: Published
//  Description: Returns true if an alpha_scale has been specified for
//               the texture, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2223  
599 0 0 6 653 2086 0 0 380 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_alpha_scale
//       Access: Published
//  Description: Returns the alpha_scale value that has been
//               specified for the texture, or 1 if no alpha_scale
//               value has been specified.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2223  
600 0 0 4 654 2073 0 0 516 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_alpha_filename
//       Access: Published
//  Description: Specifies a separate file that will be loaded in with
//               the 1- or 3-component texture and applied as the
//               alpha channel.  This is useful when loading textures
//               from file formats that do not support alpha, for
//               instance jpg.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2225  8 filename 1 2171  
601 0 0 4 655 2073 0 0 231 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::clear_alpha_filename
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2225  
602 0 0 6 656 2074 0 0 381 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::has_alpha_filename
//       Access: Published
//  Description: Returns true if a separate file for the alpha
//               component has been applied, false otherwise.  See
//               set_alpha_filename().
//////////////////////////////////////////////////////////////////// 1 4 this 3 2223  
603 0 0 6 657 2171 0 0 419 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_alpha_filename
//       Access: Published
//  Description: Returns the separate file assigned for the alpha
//               channel.  It is an error to call this unless
//               has_alpha_filename() returns true.  See set_alpha_filename().
//////////////////////////////////////////////////////////////////// 1 4 this 3 2223  
604 0 0 4 658 2073 0 0 326 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_alpha_fullpath
//       Access: Published
//  Description: Records the full pathname to the file, for the
//               benefit of get_alpha_fullpath().
//////////////////////////////////////////////////////////////////// 2 4 this 3 2225  8 fullpath 1 2171  
605 0 0 6 659 2171 0 0 817 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_alpha_fullpath
//       Access: Published
//  Description: Returns the full pathname to the alpha file, if it is
//               known; otherwise, returns the same thing as
//               get_alpha_filename().
//
//               This function simply returns whatever was set by the
//               last call to set_alpha_fullpath().  This string is
//               not written to the egg file; its main purpose is to
//               record the full path to the alpha filename if it is
//               known, for egg structures that are generated
//               in-memory and then immediately converted to a scene
//               graph.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2223  
606 0 0 4 660 2073 0 0 742 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_alpha_file_channel
//       Access: Published
//  Description: If a separate alpha-file is specified, this indicates
//               which channel number should be extracted from this
//               file to derive the alpha channel for the final image.
//               The default is 0, which means the grayscale
//               combination of r, g, b.  Otherwise, this should be
//               the 1-based channel number, for instance 1, 2, or 3
//               for r, g, or b, respectively, or 4 for the alpha
//               channel of a four-component image.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2225  18 alpha_file_channel 1 2086  
607 0 0 4 661 2073 0 0 336 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::clear_alpha_file_channel
//       Access: Published
//  Description: Removes the specification of a particular channel to
//               use from the alpha-file image.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2225  
608 0 0 6 662 2074 0 0 349 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::has_alpha_file_channel
//       Access: Published
//  Description: Returns true if a particular channel has been
//               specified for the alpha-file image, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2223  
609 0 0 6 663 2086 0 0 435 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_alpha_file_channel
//       Access: Published
//  Description: Returns the particular channel that has been
//               specified for the alpha-file image, or 0 if no
//               channel has been specified.  See
//               set_alpha_file_channel().
//////////////////////////////////////////////////////////////////// 1 4 this 3 2223  
610 0 0 4 664 2073 0 0 698 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_multiview
//       Access: Published
//  Description: Sets the multiview flag.
//
//               If multiview is true, the filename should contain a
//               hash mark ('#'), which will be filled in with the
//               view number; and a multiview texture will be defined
//               with a series of images, one for each view.
//
//               A multiview texture is most often used for stereo
//               textures, but other uses are also possible, such as
//               for texture animation.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2225  9 multiview 1 2074  
611 0 0 6 665 2074 0 0 313 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_multiview
//       Access: Published
//  Description: Returns the current setting of the multiview flag.
//               See set_multiview().
//////////////////////////////////////////////////////////////////// 1 4 this 3 2223  
612 0 0 4 666 2073 0 0 456 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_num_views
//       Access: Published
//  Description: When loading a 3-D multiview texture, this parameter
//               is necessary to specify how many views will be
//               expected.  The z size is determined implicitly from
//               the number of images loaded.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2225  9 num_views 1 2086  
613 0 0 4 667 2073 0 0 321 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::clear_num_views
//       Access: Published
//  Description: Removes the specification of the number of views
//               for a 3-D multiview texture.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2225  
614 0 0 6 668 2074 0 0 361 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::has_num_views
//       Access: Published
//  Description: Returns true if the number of views has been
//               specified for the 3-D multiview texture, false
//               otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2223  
615 0 0 6 669 2086 0 0 342 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_num_views
//       Access: Published
//  Description: Returns the specified number of views specified for
//               the 3-D multiview texture.  See set_num_views().
//////////////////////////////////////////////////////////////////// 1 4 this 3 2223  
616 0 0 4 670 2073 0 0 912 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_read_mipmaps
//       Access: Published
//  Description: Sets the read_mipmaps flag.
//
//               If read_mipmaps is true, the filename should contain
//               a hash mark ('#'), which will be filled in with the
//               mipmap level number; and the texture will be defined
//               with a series of images, one for each mipmap level.
//
//               If the filename is of a type that already requires a
//               hash mark, such as a cube map or a 3-d texture, then
//               the filename should now require two hash marks, and
//               the first one indicates the mipmap level number,
//               while the second indicates the face number or 3-d
//               level number.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2225  12 read_mipmaps 1 2074  
617 0 0 6 671 2074 0 0 322 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_read_mipmaps
//       Access: Published
//  Description: Returns the current setting of the read_mipmaps flag.
//               See set_read_mipmaps().
//////////////////////////////////////////////////////////////////// 1 4 this 3 2223  
618 0 0 4 672 2073 0 0 273 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_min_lod
//       Access: Published
//  Description: Sets the minimum mipmap level that may be sampled.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2225  7 min_lod 1 2097  
619 0 0 4 673 2073 0 0 311 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::clear_min_lod
//       Access: Published
//  Description: Removes the specification of a minimum mipmap level
//               from the texture.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2225  
620 0 0 6 674 2074 0 0 346 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::has_min_lod
//       Access: Published
//  Description: Returns true if a value for the minimum mipmap level
//               has been specified for this texture, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2223  
621 0 0 6 675 2097 0 0 314 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_min_lod
//       Access: Published
//  Description: Returns the minimum mipmap level that has been
//               specified for this texture.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2223  
622 0 0 4 676 2073 0 0 273 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_max_lod
//       Access: Published
//  Description: Sets the maximum mipmap level that may be sampled.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2225  7 max_lod 1 2097  
623 0 0 4 677 2073 0 0 311 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::clear_max_lod
//       Access: Published
//  Description: Removes the specification of a maximum mipmap level
//               from the texture.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2225  
624 0 0 6 678 2074 0 0 346 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::has_max_lod
//       Access: Published
//  Description: Returns true if a value for the maximum mipmap level
//               has been specified for this texture, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2223  
625 0 0 6 679 2097 0 0 314 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_max_lod
//       Access: Published
//  Description: Returns the maximum mipmap level that has been
//               specified for this texture.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2223  
626 0 0 4 680 2073 0 0 316 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_lod_bias
//       Access: Published
//  Description: Sets the mipmap level bias that is added to the
//               mipmap level to be sampled.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2225  8 lod_bias 1 2097  
627 0 0 4 681 2073 0 0 312 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::clear_lod_bias
//       Access: Published
//  Description: Removes the specification of a maximum mipmap level
//               from the texture.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2225  
628 0 0 6 682 2074 0 0 347 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::has_lod_bias
//       Access: Published
//  Description: Returns true if a value for the maximum mipmap level
//               has been specified for this texture, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2223  
629 0 0 6 683 2097 0 0 315 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_lod_bias
//       Access: Published
//  Description: Returns the maximum mipmap level that has been
//               specified for this texture.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2223  
630 0 0 4 684 2073 0 0 437 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::clear_multitexture
//       Access: Published
//  Description: Resets the multitexture flags set by
//               multitexture_over().  After this call,
//               get_multitexture() will return false, and
//               get_multitexture_sort() will return 0.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2225  
631 0 0 6 685 2074 0 0 771 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::multitexture_over
//       Access: Published
//  Description: Indicates that this texture should be layered on top
//               of the other texture.  This will guarantee that
//               this->get_multitexture_sort() >
//               other->get_multitexture_sort(), at least until
//               clear_multitexture() is called on either one.
//
//               The return value is true if successful, or false if
//               there is a failure because the other texture was
//               already layered on top of this one (or there is a
//               three- or more-way cycle).
//////////////////////////////////////////////////////////////////// 2 4 this 3 2225  5 other 1 2225  
632 0 0 6 686 2086 0 0 628 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_multitexture_sort
//       Access: Published
//  Description: Returns an integer that represents the depth to which
//               this texture is layered on all other textures in the
//               egg file.  In general, if texture A is layered over
//               texture B, then sort(A) > sort(B).  If texture A is
//               never layered over any other texture, then sort(A) ==
//               0.  More than that is difficult to guarantee.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2223  
633 0 0 6 687 2012 0 0 427 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::string_texture_type
//       Access: Published, Static
//  Description: Returns the Texture_ype value associated with the given
//               string representation, or TT_unspecified if the string
//               does not match any known TextureType value.
//////////////////////////////////////////////////////////////////// 1 6 string 1 2078  
634 0 0 6 688 2013 0 0 410 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::string_format
//       Access: Published, Static
//  Description: Returns the Format value associated with the given
//               string representation, or F_unspecified if the string
//               does not match any known Format value.
//////////////////////////////////////////////////////////////////// 1 6 string 1 2078  
635 0 0 6 689 2014 0 0 435 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::string_compression_mode
//       Access: Published, Static
//  Description: Returns the CompressionMode value associated with the given
//               string representation, or CM_default if the string
//               does not match any known CompressionMode value.
//////////////////////////////////////////////////////////////////// 1 6 string 1 2078  
636 0 0 6 690 2015 0 0 418 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::string_wrap_mode
//       Access: Published, Static
//  Description: Returns the WrapMode value associated with the given
//               string representation, or WM_unspecified if the string
//               does not match any known WrapMode value.
//////////////////////////////////////////////////////////////////// 1 6 string 1 2078  
637 0 0 6 691 2016 0 0 424 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::string_filter_type
//       Access: Published, Static
//  Description: Returns the FilterType value associated with the given
//               string representation, or FT_unspecified if the string
//               does not match any known FilterType value.
//////////////////////////////////////////////////////////////////// 1 6 string 1 2078  
638 0 0 6 692 2017 0 0 415 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::string_env_type
//       Access: Published, Static
//  Description: Returns the EnvType value associated with the given
//               string representation, or ET_unspecified if the string
//               does not match any known EnvType value.
//////////////////////////////////////////////////////////////////// 1 6 string 1 2078  
639 0 0 6 693 2018 0 0 427 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::string_combine_mode
//       Access: Published, Static
//  Description: Returns the CombineMode value associated with the given
//               string representation, or CM_unspecified if the string
//               does not match any known CombineMode value.
//////////////////////////////////////////////////////////////////// 1 6 string 1 2078  
640 0 0 6 694 2021 0 0 433 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::string_combine_source
//       Access: Published, Static
//  Description: Returns the CombineSource value associated with the given
//               string representation, or CS_unspecified if the string
//               does not match any known CombineSource value.
//////////////////////////////////////////////////////////////////// 1 6 string 1 2078  
641 0 0 6 695 2022 0 0 436 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::string_combine_operand
//       Access: Published, Static
//  Description: Returns the CombineOperand value associated with the given
//               string representation, or CO_unspecified if the string
//               does not match any known CombineOperand value.
//////////////////////////////////////////////////////////////////// 1 6 string 1 2078  
642 0 0 6 696 2023 0 0 412 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::string_tex_gen
//       Access: Published, Static
//  Description: Returns the TexGen value associated with the given
//               string representation, or ET_unspecified if the string
//               does not match any known TexGen value.
//////////////////////////////////////////////////////////////////// 1 6 string 1 2078  
643 0 0 6 697 2024 0 0 418 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::string_quality_level
//       Access: Published, Static
//  Description: Returns the TexGen value associated with the given
//               string representation, or ET_unspecified if the string
//               does not match any known TexGen value.
//////////////////////////////////////////////////////////////////// 1 6 string 1 2078  
644 0 0 7 698 2069 0 0 0 0 
645 0 0 7 559 2220 1498 0 0 1 4 this 3 2225  
646 0 0 7 560 2225 1507 0 0 1 4 this 3 2220  
647 0 0 6 561 2093 0 0 0 1 4 this 3 2225  
648 0 0 7 562 2225 1507 0 0 1 4 this 3 2093  
649 0 0 6 563 2185 0 0 0 1 4 this 3 2225  
650 0 0 7 564 2225 1507 0 0 1 4 this 3 2185  
651 0 0 7 700 2228 1653 0 225 ////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2226  
652 0 0 7 700 2228 1653 0 220 ////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 9 mref_name 1 2078  
653 0 0 6 702 2074 0 0 784 ////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::is_equivalent_to
//       Access: Public
//  Description: Returns true if the two materials are equivalent in
//               all relevant properties (according to eq), false
//               otherwise.
//
//               The Equivalence parameter, eq, should be set to the
//               bitwise OR of the following properties, according to
//               what you consider relevant:
//
//               EggMaterial::E_attributes:
//                 All material attributes (diff, spec,
//                 etc.) except MRef name.
//
//               EggMaterial::E_mref_name:
//                 The MRef name.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2226  5 other 1 2226  2 eq 1 2086  
654 0 0 6 703 2074 0 0 502 ////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::sorts_less_than
//       Access: Public
//  Description: An ordering operator to compare two materials for
//               sorting order.  This imposes an arbitrary ordering
//               useful to identify unique materials, according to the
//               indicated Equivalence factor.  See
//               is_equivalent_to().
//////////////////////////////////////////////////////////////////// 3 4 this 3 2226  5 other 1 2226  2 eq 1 2086  
655 0 0 4 704 2073 0 0 217 ////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::set_diff
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2228  4 diff 1 2112  
656 0 0 4 705 2073 0 0 219 ////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::clear_diff
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2228  
657 0 0 6 706 2074 0 0 217 ////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::has_diff
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2226  
658 0 0 7 707 2111 0 0 360 ////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::get_diff
//       Access: Public
//  Description: It is legal to call this even if has_diff() returns
//               false.  If so, it simply returns the default diff
//               color.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2226  
659 0 0 4 708 2073 0 0 216 ////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::set_amb
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2228  3 amb 1 2112  
660 0 0 4 709 2073 0 0 218 ////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::clear_amb
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2228  
661 0 0 6 710 2074 0 0 216 ////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::has_amb
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2226  
662 0 0 7 711 2111 0 0 357 ////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::get_amb
//       Access: Public
//  Description: It is legal to call this even if has_amb() returns
//               false.  If so, it simply returns the default amb
//               color.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2226  
663 0 0 4 712 2073 0 0 217 ////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::set_emit
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2228  4 emit 1 2112  
664 0 0 4 713 2073 0 0 219 ////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::clear_emit
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2228  
665 0 0 6 714 2074 0 0 217 ////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::has_emit
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2226  
666 0 0 7 715 2111 0 0 360 ////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::get_emit
//       Access: Public
//  Description: It is legal to call this even if has_emit() returns
//               false.  If so, it simply returns the default emit
//               color.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2226  
667 0 0 4 716 2073 0 0 217 ////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::set_spec
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2228  4 spec 1 2112  
668 0 0 4 717 2073 0 0 219 ////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::clear_spec
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2228  
669 0 0 6 718 2074 0 0 217 ////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::has_spec
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2226  
670 0 0 7 719 2111 0 0 360 ////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::get_spec
//       Access: Public
//  Description: It is legal to call this even if has_spec() returns
//               false.  If so, it simply returns the default spec
//               color.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2226  
671 0 0 4 720 2073 0 0 222 ////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::set_shininess
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2228  9 shininess 1 2097  
672 0 0 4 721 2073 0 0 224 ////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::clear_shininess
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2228  
673 0 0 6 722 2074 0 0 222 ////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::has_shininess
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2226  
674 0 0 6 723 2097 0 0 222 ////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::get_shininess
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2226  
675 0 0 4 724 2073 0 0 218 ////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::set_local
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2228  5 local 1 2074  
676 0 0 4 725 2073 0 0 220 ////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::clear_local
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2228  
677 0 0 6 726 2074 0 0 218 ////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::has_local
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2226  
678 0 0 6 727 2074 0 0 218 ////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::get_local
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2226  
679 0 0 7 728 2069 0 0 0 0 
680 0 0 7 738 2161 1661 0 237 ////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::Copy assignment operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2161  4 copy 1 2153  
681 0 0 6 740 2093 0 0 562 ////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::determine_alpha_mode
//       Access: Published, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               or EggPrimitive or some such object at this level or
//               above this primitive that has an alpha_mode other than
//               AM_unspecified.  Returns a valid EggRenderMode pointer
//               if one is found, or NULL otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2161  
682 0 0 6 741 2093 0 0 569 ////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::determine_depth_write_mode
//       Access: Published, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               or EggPrimitive or some such object at this level or
//               above this node that has a depth_write_mode other than
//               DWM_unspecified.  Returns a valid EggRenderMode pointer
//               if one is found, or NULL otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2161  
683 0 0 6 742 2093 0 0 567 ////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::determine_depth_test_mode
//       Access: Published, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               or EggPrimitive or some such object at this level or
//               above this node that has a depth_test_mode other than
//               DTM_unspecified.  Returns a valid EggRenderMode pointer
//               if one is found, or NULL otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2161  
684 0 0 6 743 2093 0 0 566 ////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::determine_visibility_mode
//       Access: Published, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               or EggPrimitive or some such object at this level or
//               above this node that has a visibility_mode other than
//               VM_unspecified.  Returns a valid EggRenderMode pointer
//               if one is found, or NULL otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2161  
685 0 0 6 744 2093 0 0 548 ////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::determine_depth_offset
//       Access: Published, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               or EggPrimitive or some such object at this level or
//               above this primitive that has a depth_offset specified.
//               Returns a valid EggRenderMode pointer if one is found,
//               or NULL otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2161  
686 0 0 6 745 2093 0 0 544 ////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::determine_draw_order
//       Access: Published, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               or EggPrimitive or some such object at this level or
//               above this primitive that has a draw_order specified.
//               Returns a valid EggRenderMode pointer if one is found,
//               or NULL otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2161  
687 0 0 6 746 2093 0 0 531 ////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::determine_bin
//       Access: Published, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               or EggPrimitive or some such object at this level or
//               above this primitive that has a bin specified.  Returns a
//               valid EggRenderMode pointer if one is found, or NULL
//               otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2161  
688 0 0 6 747 2078 0 0 498 ////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::get_sort_name
//       Access: Published
//  Description: Returns the name of the primitive for the purposes of
//               sorting primitives into different groups, if there is
//               one.
//
//               Presently, this is defined as the primitive name
//               itself, unless it begins with a digit.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2153  
689 0 0 6 748 2028 0 0 1114 ////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::get_shading
//       Access: Published, Virtual
//  Description: Returns the shading properties apparent on this
//               particular primitive.  This returns S_per_vertex if
//               the vertices have colors or normals (and they are not
//               all the same values), or for a simple primitive,
//               S_overall otherwise.  A composite primitive may also
//               return S_per_face if the individual component
//               primitives have colors or normals that are not all
//               the same values.
//
//               To get the most accurate results, you should call
//               clear_shading() on all connected primitives (or on
//               all primitives in the egg file), followed by
//               get_shading() on each primitive.  You may find it
//               easiest to call these methods on the EggData root
//               node (they are defined on EggGroupNode).
//////////////////////////////////////////////////////////////////// 1 4 this 3 2153  
690 0 0 4 749 2073 0 0 385 ////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::clear_connected_shading
//       Access: Published
//  Description: Resets the connected_shading member in this
//               primitive, so that get_connected_shading() will
//               recompute a new value.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2161  
691 0 0 6 750 2028 0 0 852 ////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::get_connected_shading
//       Access: Published
//  Description: Determines what sort of shading properties this
//               primitive's connected neighbors have.
//
//               To get the most accurate results, you should first
//               call clear_connected_shading() on all connected
//               primitives (or on all primitives in the egg file).
//               It might also be a good idea to call
//               remove_unused_vertices() to ensure proper
//               connectivity.
//
//               You may find it easiest to call these other methods
//               on the EggData root node (they are defined on
//               EggGroupNode).
//////////////////////////////////////////////////////////////////// 1 4 this 3 2153  
692 0 0 4 751 2073 0 0 494 ////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::set_texture
//       Access: Published
//  Description: Replaces the current list of textures with the
//               indicated texture.
//
//               This method is deprecated and is used in support of
//               single-texturing only.  Please use the multitexture
//               variant add_texture instead.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2161  7 texture 1 2225  
693 0 0 6 752 2074 0 0 515 ////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::has_texture
//       Access: Published
//  Description: Returns true if the primitive has any textures
//               specified, false otherwise.
//
//               This method is deprecated and is used in support of
//               single-texturing only.  New code should be written to
//               use the multitexture variants instead.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2153  
694 0 0 6 752 2074 0 0 326 ////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::has_texture
//       Access: Published
//  Description: Returns true if the primitive has the particular
//               indicated texture, false otherwise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2153  7 texture 1 2225  
695 0 0 7 753 2225 1507 0 543 ////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::get_texture
//       Access: Published
//  Description: Returns the first texture on the primitive, if any,
//               or NULL if there are no textures on the primitive.
//
//               This method is deprecated and is used in support of
//               single-texturing only.  New code should be written to
//               use the multitexture variants instead.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2153  
696 0 0 7 753 2225 1507 0 305 ////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::get_texture
//       Access: Published
//  Description: Returns the nth texture that has been applied to the
//               primitive.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2153  1 n 1 2086  
697 0 0 4 754 2073 0 0 549 ////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::add_texture
//       Access: Published
//  Description: Applies the indicated texture to the primitive.
//
//               Note that, in the case of multiple textures being
//               applied to a single primitive, the order in which the
//               textures are applied does not affect the rendering
//               order; use EggTexture::set_sort() to specify that.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2161  7 texture 1 2225  
698 0 0 4 755 2073 0 0 268 ////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::clear_texture
//       Access: Published
//  Description: Removes any texturing from the primitive.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2161  
699 0 0 6 756 2086 0 0 303 ////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::get_num_textures
//       Access: Published
//  Description: Returns the number of textures applied to the
//               primitive.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2153  
700 0 0 4 757 2073 0 0 274 ////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::set_material
//       Access: Published
//  Description: Applies the indicated material to the primitive.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2161  8 material 1 2228  
701 0 0 4 758 2073 0 0 268 ////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::clear_material
//       Access: Published
//  Description: Removes any material from the primitive.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2161  
702 0 0 7 759 2228 1653 0 326 ////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::get_material
//       Access: Published
//  Description: Returns a pointer to the applied material, or NULL if
//               there is no material applied.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2153  
703 0 0 6 760 2074 0 0 406 ////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::has_material
//       Access: Published
//  Description: Returns true if the primitive is materiald (and
//               get_material() will return a real pointer), false
//               otherwise (and get_material() will return NULL).
//////////////////////////////////////////////////////////////////// 1 4 this 3 2153  
704 0 0 4 761 2073 0 0 466 ////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::set_bface_flag
//       Access: Published
//  Description: Sets the backfacing flag of the polygon.  If this is
//               true, the polygon will be rendered so that both faces
//               are visible; if it is false, only the front face of
//               the polygon will be visible.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2161  4 flag 1 2074  
705 0 0 6 762 2074 0 0 313 ////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::get_bface_flag
//       Access: Published
//  Description: Retrieves the backfacing flag of the polygon.  See
//               set_bface_flag().
//////////////////////////////////////////////////////////////////// 1 4 this 3 2153  
706 0 0 4 763 2073 0 0 307 ////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::copy_attributes
//       Access: Published
//  Description: Copies the rendering attributes from the indicated
//               primitive.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2161  5 other 1 2102  
707 0 0 4 763 2073 0 0 307 ////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::copy_attributes
//       Access: Published
//  Description: Copies the rendering attributes from the indicated
//               primitive.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2161  5 other 1 2153  
708 0 0 6 764 2074 0 0 588 ////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::has_vertex_normal
//       Access: Published
//  Description: Returns true if any vertex on the primitive has a
//               specific normal set, false otherwise.
//
//               If you call unify_attributes() first, this will also
//               return false even if all the vertices were set to the
//               same value (since unify_attributes() removes
//               redundant vertex properties).
//////////////////////////////////////////////////////////////////// 1 4 this 3 2153  
709 0 0 6 765 2074 0 0 586 ////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::has_vertex_color
//       Access: Published
//  Description: Returns true if any vertex on the primitive has a
//               specific color set, false otherwise.
//
//               If you call unify_attributes() first, this will also
//               return false even if all the vertices were set to the
//               same value (since unify_attributes() removes
//               redundant vertex properties).
//////////////////////////////////////////////////////////////////// 1 4 this 3 2153  
710 0 0 4 766 2073 0 0 1216 ////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::unify_attributes
//       Access: Published, Virtual
//  Description: If the shading property is S_per_vertex, ensures that
//               all vertices have a normal and a color, and the
//               overall primitive does not.
//
//               If the shading property is S_per_face, and this is a
//               composite primitive, ensures that all components have
//               a normal and a color, and the vertices and overall
//               primitive do not.  (If this is a simple primitive,
//               S_per_face works the same as S_overall, below).
//
//               If the shading property is S_overall, ensures that no
//               vertices or components have a normal or a color, and
//               the overall primitive does (if any exists at all).
//
//               After this call, either the primitive will have
//               normals or its vertices will, but not both.  Ditto
//               for colors.
//
//               This may create redundant vertices in the vertex
//               pool.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2161  7 shading 1 2028  
711 0 0 4 767 2073 0 0 689 ////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::apply_last_attribute
//       Access: Published, Virtual
//  Description: Sets the last vertex of the triangle (or each
//               component) to the primitive normal and/or color, if
//               the primitive is flat-shaded.  This reflects the
//               OpenGL convention of storing flat-shaded properties on
//               the last vertex, although it is not usually a
//               convention in Egg.
//
//               This may introduce redundant vertices to the vertex
//               pool.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2161  
712 0 0 4 768 2073 0 0 693 ////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::apply_first_attribute
//       Access: Published, Virtual
//  Description: Sets the first vertex of the triangle (or each
//               component) to the primitive normal and/or color, if
//               the primitive is flat-shaded.  This reflects the
//               DirectX convention of storing flat-shaded properties on
//               the first vertex, although it is not usually a
//               convention in Egg.
//
//               This may introduce redundant vertices to the vertex
//               pool.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2161  
713 0 0 4 769 2073 0 0 499 ////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::post_apply_flat_attribute
//       Access: Published, Virtual
//  Description: Intended as a followup to apply_last_attribute(),
//               this also sets an attribute on the first vertices of
//               the primitive, if they don't already have an
//               attribute set, just so they end up with *something*.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2161  
714 0 0 4 770 2073 0 0 481 ////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::reverse_vertex_ordering
//       Access: Published, Virtual
//  Description: Reverses the ordering of the vertices in this
//               primitive, if appropriate, in order to change the
//               direction the polygon appears to be facing.  Does not
//               adjust the surface normal, if any.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2161  
715 0 0 6 771 2074 0 0 550 ////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::cleanup
//       Access: Published, Virtual
//  Description: Cleans up modeling errors in whatever context this
//               makes sense.  For instance, for a polygon, this calls
//               remove_doubled_verts(true).  For a point, it calls
//               remove_nonunique_verts().  Returns true if the
//               primitive is valid, or false if it is degenerate.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2161  
716 0 0 4 772 2073 0 0 945 ////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::remove_doubled_verts
//       Access: Published
//  Description: Certain kinds of primitives, particularly polygons,
//               don't like to have the same vertex repeated
//               consecutively.  Unfortunately, some modeling programs
//               (like MultiGen) make this an easy mistake to make.
//
//               It's handy to have a function to remove these
//               redundant vertices.  If closed is true, it also
//               checks that the first and last vertices are not the
//               same.
//
//               This function identifies repeated vertices by
//               position only; it does not consider any other
//               properties, such as color or UV, significant in
//               differentiating vertices.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2161  6 closed 1 2074  
717 0 0 4 773 2073 0 0 541 ////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::remove_nonunique_verts
//       Access: Published
//  Description: Removes any multiple appearances of the same vertex
//               from the primitive.  This primarily makes sense for a
//               point primitive, which is really a collection of
//               points and which doesn't make sense to include the
//               same point twice, in any order.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2161  
718 0 0 6 774 2074 0 0 380 ////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::has_primitives
//       Access: Published, Virtual
//  Description: Returns true if there are any primitives
//               (e.g. polygons) defined within this group or below,
//               false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2153  
719 0 0 6 775 2074 0 0 416 ////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::joint_has_primitives
//       Access: Published, Virtual
//  Description: Returns true if there are any primitives
//               (e.g. polygons) defined within this group or below,
//               but the search does not include nested joints.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2153  
720 0 0 6 776 2074 0 0 417 ////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::has_normals
//       Access: Published, Virtual
//  Description: Returns true if any of the primitives (e.g. polygons)
//               defined within this group or below have either face
//               or vertex normals defined, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2153  
721 0 0 4 777 2073 0 0 266 ////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::clear
//       Access: Published
//  Description: Removes all of the vertices from the primitive.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2161  
722 0 0 7 778 2136 1140 0 330 ////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::add_vertex
//       Access: Published
//  Description: Adds the indicated vertex to the end of the
//               primitive's list of vertices, and returns it.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2161  6 vertex 1 2136  
723 0 0 7 779 2136 1140 0 421 ////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::remove_vertex
//       Access: Published
//  Description: Removes the indicated vertex from the
//               primitive and returns it.  If the vertex was not
//               already in the primitive, does nothing and returns
//               NULL.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2161  6 vertex 1 2136  
724 0 0 4 780 2073 0 0 370 ////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::copy_vertices
//       Access: Published
//  Description: Replaces the current primitive's list of vertices
//               with a copy of the list of vertices on the other
//               primitive.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2161  5 other 1 2153  
725 0 0 6 781 2086 0 0 230 ////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::get_num_vertices
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 2153  
726 0 0 4 782 2073 0 0 445 ////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::set_vertex
//       Access: Published
//  Description: Replaces a particular vertex based on its index
//               number in the list of vertices.  This is just a
//               convenience function for people who don't want to
//               mess with the iterators.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2161  5 index 1 2086  6 vertex 1 2136  
727 0 0 7 783 2136 1140 0 277 ////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::get_vertex
//       Access: Published
//  Description: Returns a particular index based on its index number.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2153  5 index 1 2086  
728 0 0 7 784 2139 1053 0 368 ////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::get_pool
//       Access: Published
//  Description: Returns the vertex pool associated with the vertices
//               of the primitive, or NULL if the primitive has no
//               vertices.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2153  
729 0 0 4 785 2073 0 0 0 3 4 this 3 2153  3 out 1 2079  12 indent_level 1 2086  
730 0 0 4 786 2073 0 0 0 1 4 this 3 2153  
731 0 0 7 787 2069 0 0 0 0 
732 0 0 7 731 2082 1053 0 0 1 4 this 3 2161  
733 0 0 7 732 2161 1661 0 0 1 4 this 3 2082  
734 0 0 6 733 2101 0 0 0 1 4 this 3 2161  
735 0 0 7 734 2161 1661 0 0 1 4 this 3 2101  
736 0 0 6 735 2093 0 0 0 1 4 this 3 2161  
737 0 0 7 736 2161 1661 0 0 1 4 this 3 2093  
738 0 0 7 789 2229 1661 0 246 ////////////////////////////////////////////////////////////////////
//     Function: EggCompositePrimitive::Copy assignment operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2229  4 copy 1 2230  
739 0 0 6 790 2086 0 0 410 ////////////////////////////////////////////////////////////////////
//     Function: EggCompositePrimitive::get_num_components
//       Access: Published
//  Description: Returns the number of individual component triangles
//               within the composite.  Each one of these might have a
//               different set of attributes.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2230  
740 0 0 6 791 2101 0 0 307 ////////////////////////////////////////////////////////////////////
//     Function: EggCompositePrimitive::get_component
//       Access: Published
//  Description: Returns the attributes for the nth component
//               triangle.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2229  1 i 1 2086  
741 0 0 6 791 2102 0 0 307 ////////////////////////////////////////////////////////////////////
//     Function: EggCompositePrimitive::get_component
//       Access: Published
//  Description: Returns the attributes for the nth component
//               triangle.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2230  1 i 1 2086  
742 0 0 4 792 2073 0 0 307 ////////////////////////////////////////////////////////////////////
//     Function: EggCompositePrimitive::set_component
//       Access: Published
//  Description: Changes the attributes for the nth component
//               triangle.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2229  1 i 1 2086  6 attrib 1 2102  
743 0 0 6 793 2074 0 0 678 ////////////////////////////////////////////////////////////////////
//     Function: EggCompositePrimitive::triangulate_into
//       Access: Published
//  Description: Subdivides the composite primitive into triangles and
//               adds those triangles to the indicated container.
//               Does not remove the primitive from its existing
//               parent or modify it in any way.
//
//               Returns true if the triangulation is successful, or
//               false if there was some error (in which case the
//               container may contain some partial triangulation).
//////////////////////////////////////////////////////////////////// 2 4 this 3 2230  9 container 1 2085  
744 0 0 7 794 2229 1661 0 830 ////////////////////////////////////////////////////////////////////
//     Function: EggCompositePrimitive::triangulate_in_place
//       Access: Published
//  Description: Subdivides the composite primitive into triangles and
//               adds those triangles to the parent group node in
//               place of the original primitive.  Returns a pointer
//               to the original primitive, which is likely about to
//               be destructed.
//
//               If convex_also is true, both concave and convex
//               polygons will be subdivided into triangles;
//               otherwise, only concave polygons will be subdivided,
//               and convex polygons will be copied unchanged into the
//               container.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2229  
745 0 0 7 795 2069 0 0 0 0 
746 0 0 7 797 2232 1739 0 216 ////////////////////////////////////////////////////////////////////
//     Function: EggData::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
747 0 0 7 797 2232 1739 0 221 ////////////////////////////////////////////////////////////////////
//     Function: EggData::Copy constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2233  
748 0 0 7 798 2232 1739 0 229 ////////////////////////////////////////////////////////////////////
//     Function: EggData::Copy assignment operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2232  4 copy 1 2233  
749 0 0 6 799 2074 0 0 479 ////////////////////////////////////////////////////////////////////
//     Function: EggData::resolve_egg_filename
//       Access: Public, Static
//  Description: Looks for the indicated filename, first along the
//               indicated searchpath, and then along the model_path.
//               If found, updates the filename to the full path and
//               returns true; otherwise, returns false.
//////////////////////////////////////////////////////////////////// 2 12 egg_filename 1 2235  10 searchpath 1 2168  
750 0 0 6 800 2074 0 0 584 ////////////////////////////////////////////////////////////////////
//     Function: EggData::read
//       Access: Public
//  Description: Opens the indicated filename and reads the egg data
//               contents from it.  Returns true if the file was
//               successfully opened and read, false if there were
//               some errors, in which case the data may be partially
//               read.
//
//               error is the output stream to which to write error
//               messages.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2232  8 filename 1 2235  12 display_name 1 2078  
751 0 0 6 800 2074 0 0 762 ////////////////////////////////////////////////////////////////////
//     Function: EggData::read
//       Access: Public
//  Description: Parses the egg syntax contained in the indicated
//               input stream.  Returns true if the stream was a
//               completely valid egg file, false if there were some
//               errors, in which case the data may be partially read.
//
//               Before you call this routine, you should probably
//               call set_egg_filename() to set the name of the egg
//               file we're processing, if at all possible.  If there
//               is no such filename, you may set it to the empty
//               string.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2232  2 in 1 2236  
752 0 0 4 801 2073 0 0 324 ////////////////////////////////////////////////////////////////////
//     Function: EggData::merge
//       Access: Public
//  Description: Appends the other egg structure to the end of this
//               one.  The other egg structure is invalidated.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2232  5 other 1 2232  
753 0 0 6 802 2074 0 0 656 ////////////////////////////////////////////////////////////////////
//     Function: EggData::load_externals
//       Access: Public
//  Description: Loads up all the egg files referenced by <File>
//               entries within the egg structure, and inserts their
//               contents in place of the <File> entries.  Searches
//               for files in the searchpath, if not found directly,
//               and writes error messages to the indicated output
//               stream.  Returns true if all externals were loaded
//               successfully, false otherwise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2232  10 searchpath 1 2168  
754 0 0 6 802 2074 0 0 656 ////////////////////////////////////////////////////////////////////
//     Function: EggData::load_externals
//       Access: Public
//  Description: Loads up all the egg files referenced by <File>
//               entries within the egg structure, and inserts their
//               contents in place of the <File> entries.  Searches
//               for files in the searchpath, if not found directly,
//               and writes error messages to the indicated output
//               stream.  Returns true if all externals were loaded
//               successfully, false otherwise.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2232  10 searchpath 1 2168  6 record 1 2238  
755 0 0 6 803 2086 0 0 608 ////////////////////////////////////////////////////////////////////
//     Function: EggData::collapse_equivalent_textures
//       Access: Public
//  Description: Removes duplicate references to the same texture
//               image with the same properties.  Considers two
//               texture references with identical properties, but
//               different tref names, to be equivalent, and collapses
//               them, choosing one tref name to keep arbitrarily.
//               Returns the number of textures removed.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2232  
756 0 0 6 804 2086 0 0 607 ////////////////////////////////////////////////////////////////////
//     Function: EggData::collapse_equivalent_materials
//       Access: Public
//  Description: Removes duplicate references to the same material
//               with the same properties.  Considers two material
//               references with identical properties, but different
//               mref names, to be equivalent, and collapses them,
//               choosing one mref name to keep arbitrarily.  Returns
//               the number of materials removed.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2232  
757 0 0 6 805 2074 0 0 265 ////////////////////////////////////////////////////////////////////
//     Function: EggData::write_egg
//       Access: Public
//  Description: The main interface for writing complete egg files.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2232  8 filename 1 2235  
758 0 0 6 805 2074 0 0 265 ////////////////////////////////////////////////////////////////////
//     Function: EggData::write_egg
//       Access: Public
//  Description: The main interface for writing complete egg files.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2232  3 out 1 2079  
759 0 0 4 806 2073 0 0 399 ////////////////////////////////////////////////////////////////////
//     Function: EggData::set_auto_resolve_externals
//       Access: Public
//  Description: Indicates whether the EggData object will
//               automatically resolve any external references when
//               read() is called.  The default is false.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2232  7 resolve 1 2074  
760 0 0 6 807 2074 0 0 399 ////////////////////////////////////////////////////////////////////
//     Function: EggData::get_auto_resolve_externals
//       Access: Public
//  Description: Indicates whether the EggData object will
//               automatically resolve any external references when
//               read() is called.  The default is false.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2233  
761 0 0 6 808 2074 0 0 741 ////////////////////////////////////////////////////////////////////
//     Function: EggData::original_had_absolute_pathnames
//       Access: Public
//  Description: Returns true if the data processed in the last call
//               to read() contained absolute pathnames, or false if
//               those pathnames were all relative.
//
//               This method is necessary because if
//               auto_resolve_externals() is in effect, it may modify
//               the pathnames to be absolute whether or not they were
//               as loaded from disk.  This method can be used to
//               query the state of the original egg file from disk.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2233  
762 0 0 4 809 2073 0 0 403 ////////////////////////////////////////////////////////////////////
//     Function: EggData::set_coordinate_system
//       Access: Public
//  Description: Changes the coordinate system of the EggData.  If the
//               coordinate system was previously different, this may
//               result in a conversion of the data.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2232  8 coordsys 1 2174  
763 0 0 6 810 2174 0 0 307 ////////////////////////////////////////////////////////////////////
//     Function: EggData::get_coordinate_system
//       Access: Public
//  Description: Returns the coordinate system in which the egg file
//               is defined.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2233  
764 0 0 4 811 2073 0 0 392 ////////////////////////////////////////////////////////////////////
//     Function: EggData::set_egg_filename
//       Access: Public
//  Description: Sets the filename--especially the directory part--in
//               which the egg file is considered to reside.  This is
//               also implicitly set by read().
//////////////////////////////////////////////////////////////////// 2 4 this 3 2232  12 egg_filename 1 2171  
765 0 0 6 812 2171 0 0 307 ////////////////////////////////////////////////////////////////////
//     Function: EggData::get_egg_filename
//       Access: Public
//  Description: Returns the directory in which the egg file is
//               considered to reside.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2233  
766 0 0 4 813 2073 0 0 379 ////////////////////////////////////////////////////////////////////
//     Function: EggData::set_egg_timestamp
//       Access: Public
//  Description: Sets the timestamp of the egg file on disk, at the
//               time it was opened for reading.  This is also
//               implicitly set by read().
//////////////////////////////////////////////////////////////////// 2 4 this 3 2232  13 egg_timestamp 1 2240  
767 0 0 6 814 2240 0 0 385 ////////////////////////////////////////////////////////////////////
//     Function: EggData::get_egg_timestamp
//       Access: Public
//  Description: Returns the timestamp of the egg file on disk, at the
//               time it was opened for reading, or 0 if this
//               information is not available.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2233  
768 0 0 4 815 2073 0 0 1124 ////////////////////////////////////////////////////////////////////
//     Function: EggData::recompute_vertex_normals
//       Access: Public
//  Description: Recomputes all the vertex normals for polygon
//               geometry at this group node and below so that they
//               accurately reflect the vertex positions.  A shared
//               edge between two polygons (even in different groups)
//               is considered smooth if the angle between the two
//               edges is less than threshold degrees.
//
//               This function also removes degenerate polygons that
//               do not have enough vertices to define a normal.  It
//               does not affect normals for other kinds of primitives
//               like Nurbs or Points.
//
//               This function does not remove or adjust vertices in
//               the vertex pool; it only adds new vertices with the
//               correct normals.  Thus, it is a good idea to call
//               remove_unused_vertices() after calling this.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2232  9 threshold 1 2097  
769 0 0 4 816 2073 0 0 1069 ////////////////////////////////////////////////////////////////////
//     Function: EggData::recompute_polygon_normals
//       Access: Public
//  Description: Recomputes all the polygon normals for polygon
//               geometry at this group node and below so that they
//               accurately reflect the vertex positions.  Normals are
//               removed from the vertices and defined only on
//               polygons, giving the geometry a faceted appearance.
//
//               This function also removes degenerate polygons that
//               do not have enough vertices to define a normal.  It
//               does not affect normals for other kinds of primitives
//               like Nurbs or Points.
//
//               This function does not remove or adjust vertices in
//               the vertex pool; it only adds new vertices with the
//               normals removed.  Thus, it is a good idea to call
//               remove_unused_vertices() after calling this.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2232  
770 0 0 4 817 2073 0 0 598 ////////////////////////////////////////////////////////////////////
//     Function: EggData::strip_normals
//       Access: Public
//  Description: Removes all normals from primitives, and the vertices
//               they reference, at this node and below.
//
//               This function does not remove or adjust vertices in
//               the vertex pool; it only adds new vertices with the
//               normal removed.  Thus, it is a good idea to call
//               remove_unused_vertices() after calling this.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2232  
771 0 0 7 818 2069 0 0 0 0 
772 0 0 7 821 2242 1744 0 228 ////////////////////////////////////////////////////////////////////
//     Function: EggCoordinateSystem::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 5 value 1 2174  
773 0 0 7 821 2242 1744 0 233 ////////////////////////////////////////////////////////////////////
//     Function: EggCoordinateSystem::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2243  
774 0 0 4 822 2073 0 0 226 ////////////////////////////////////////////////////////////////////
//     Function: EggCoordinateSystem::set_value
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2242  5 value 1 2174  
775 0 0 6 823 2174 0 0 226 ////////////////////////////////////////////////////////////////////
//     Function: EggCoordinateSystem::set_value
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2243  
776 0 0 7 824 2069 0 0 0 0 
777 0 0 7 827 2245 1752 0 230 ////////////////////////////////////////////////////////////////////
//     Function: EggCurve::Copy assignment operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2245  4 copy 1 2246  
778 0 0 4 829 2073 0 0 559 ////////////////////////////////////////////////////////////////////
//     Function: EggCurve::set_subdiv
//       Access: Public
//  Description: Sets the number of subdivisions that will be
//               requested across the curve.  (This doesn't necessary
//               guarantee that this number of subdivisions will be
//               made; it's just a hint to any curve renderer or quick
//               tesselator.)  Set the number to 0 to disable the
//               hint.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2245  6 subdiv 1 2086  
779 0 0 6 830 2086 0 0 335 ////////////////////////////////////////////////////////////////////
//     Function: EggCurve::get_subdiv
//       Access: Public
//  Description: Returns the requested number of subdivisions, or 0 if
//               no particular subdivisions have been requested.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2246  
780 0 0 4 831 2073 0 0 367 ////////////////////////////////////////////////////////////////////
//     Function: EggCurve::set_curve_type
//       Access: Public
//  Description: Sets the type of the curve.  This is primarily used
//               as a hint to any code that may need to deal with this
//               curve.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2245  4 type 1 2033  
781 0 0 6 832 2033 0 0 261 ////////////////////////////////////////////////////////////////////
//     Function: EggCurve::get_curve_type
//       Access: Public
//  Description: Returns the indicated type of the curve.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2246  
782 0 0 6 833 2033 0 0 412 ////////////////////////////////////////////////////////////////////
//     Function: EggCurve::string_curve_type
//       Access: Public, Static
//  Description: Returns the CurveType value associated with the given
//               string representation, or CT_invalid if the string
//               does not match any known CurveType value.
//////////////////////////////////////////////////////////////////// 1 6 string 1 2078  
783 0 0 7 834 2069 0 0 0 0 
784 0 0 7 837 2250 1756 0 234 ////////////////////////////////////////////////////////////////////
//     Function: EggExternalReference::Copy constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2248  
785 0 0 7 837 2250 1756 0 229 ////////////////////////////////////////////////////////////////////
//     Function: EggExternalReference::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 9 node_name 1 2078  8 filename 1 2078  
786 0 0 7 838 2250 1756 0 242 ////////////////////////////////////////////////////////////////////
//     Function: EggExternalReference::Copy assignment operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2250  4 copy 1 2248  
787 0 0 7 839 2069 0 0 0 0 
788 0 0 4 842 2073 0 0 313 ////////////////////////////////////////////////////////////////////
//     Function: EggNameUniquifier::clear
//       Access: Public
//  Description: Empties the table of used named and prepares the
//               Uniquifier for a new tree.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2251  
789 0 0 4 843 2073 0 0 269 ////////////////////////////////////////////////////////////////////
//     Function: EggNameUniquifier::uniquify
//       Access: Public
//  Description: Begins the traversal from the indicated node.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2251  4 node 1 2082  
790 0 0 7 844 2082 1053 0 341 ////////////////////////////////////////////////////////////////////
//     Function: EggNameUniquifier::get_node
//       Access: Public
//  Description: Returns the node associated with the given category
//               and name, or NULL if the name has not been used.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2252  8 category 1 2078  4 name 1 2078  
791 0 0 6 845 2074 0 0 332 ////////////////////////////////////////////////////////////////////
//     Function: EggNameUniquifier::has_name
//       Access: Public
//  Description: Returns true if the name has been used for the
//               indicated category already, false otherwise.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2252  8 category 1 2078  4 name 1 2078  
792 0 0 6 846 2074 0 0 477 ////////////////////////////////////////////////////////////////////
//     Function: EggNameUniquifier::add_name
//       Access: Public
//  Description: Adds the name to the indicated category.  This name
//               will not be used for any other egg node within this
//               category.  Returns true if the name was added, or
//               false if it was already in use for the category.
//////////////////////////////////////////////////////////////////// 4 4 this 3 2251  8 category 1 2078  4 name 1 2078  4 node 1 2082  
793 0 0 6 847 2078 0 0 0 2 4 this 3 2251  4 node 1 2082  
794 0 0 6 848 2078 0 0 487 ////////////////////////////////////////////////////////////////////
//     Function: EggNameUniquifier::filter_name
//       Access: Public, Virtual
//  Description: Returns the name of the given node, or at least the
//               name it should be.  This provides a hook to adjust
//               the name before attempting to uniquify it, if
//               desired, for instance to remove invalid characters.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2251  4 node 1 2082  
795 0 0 6 849 2078 0 0 682 ////////////////////////////////////////////////////////////////////
//     Function: EggNameUniquifier::generate_name
//       Access: Public, Virtual
//  Description: Generates a new name for the given node when its
//               existing name clashes with some other node.  This
//               function will be called repeatedly, if necessary,
//               until it returns a name that actually is unique.
//
//               The category is the string returned by
//               get_category(), and index is a uniquely-generated
//               number that may be useful for synthesizing the name.
//////////////////////////////////////////////////////////////////// 4 4 this 3 2251  4 node 1 2082  8 category 1 2078  5 index 1 2086  
796 0 0 7 850 2069 0 0 0 0 
797 0 0 7 852 2254 1768 0 530 ////////////////////////////////////////////////////////////////////
//     Function: EggGroupUniquifier::Constructor
//       Access: Public
//  Description: If filter_names is true, then the group names will be
//               coerced into a fairly safe, standard convention that
//               uses no characters other than a-z, A-Z, 0-9, and
//               underscore.  If filter_names is false, the group
//               names will be left unchanged.
//////////////////////////////////////////////////////////////////// 1 12 filter_names 1 2074  
798 0 0 7 853 2069 0 0 0 0 
799 0 0 7 856 2257 1661 0 221 ////////////////////////////////////////////////////////////////////
//     Function: EggLine::Copy constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2255  
800 0 0 7 856 2257 1661 0 216 ////////////////////////////////////////////////////////////////////
//     Function: EggLine::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 name 1 2078  
801 0 0 7 857 2257 1661 0 229 ////////////////////////////////////////////////////////////////////
//     Function: EggLine::Copy assignment operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2257  4 copy 1 2255  
802 0 0 6 858 2074 0 0 217 ////////////////////////////////////////////////////////////////////
//     Function: EggLine::has_thick
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2255  
803 0 0 6 859 2097 0 0 328 ////////////////////////////////////////////////////////////////////
//     Function: EggLine::get_thick
//       Access: Published
//  Description: Returns the thickness set on this particular line.
//               If there is no thickness set, returns 1.0.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2255  
804 0 0 4 860 2073 0 0 217 ////////////////////////////////////////////////////////////////////
//     Function: EggLine::set_thick
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2257  5 thick 1 2097  
805 0 0 4 861 2073 0 0 219 ////////////////////////////////////////////////////////////////////
//     Function: EggLine::clear_thick
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2257  
806 0 0 7 862 2069 0 0 0 0 
807 0 0 7 864 2258 1778 0 230 ////////////////////////////////////////////////////////////////////
//     Function: EggMaterialCollection::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
808 0 0 7 864 2258 1778 0 235 ////////////////////////////////////////////////////////////////////
//     Function: EggMaterialCollection::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2259  
809 0 0 6 865 2258 0 0 243 ////////////////////////////////////////////////////////////////////
//     Function: EggMaterialCollection::Copy Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2258  4 copy 1 2259  
810 0 0 4 867 2073 0 0 267 ////////////////////////////////////////////////////////////////////
//     Function: EggMaterialCollection::clear
//       Access: Public
//  Description: Removes all materials from the collection.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2258  
811 0 0 6 868 2086 0 0 483 ////////////////////////////////////////////////////////////////////
//     Function: EggMaterialCollection::extract_materials
//       Access: Public
//  Description: Walks the egg hierarchy beginning at the indicated
//               node, and removes any EggMaterials encountered in the
//               hierarchy, adding them to the collection.  Returns
//               the number of EggMaterials encountered.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2258  4 node 1 2085  
812 0 0 6 869 2086 0 0 1402 ////////////////////////////////////////////////////////////////////
//     Function: EggMaterialCollection::find_used_materials
//       Access: Public
//  Description: Walks the egg hierarchy beginning at the indicated
//               node, looking for materials that are referenced by
//               primitives but are not already members of the
//               collection, adding them to the collection.
//
//               If this is called following extract_materials(), it
//               can be used to pick up any additional material
//               references that appeared in the egg hierarchy (but
//               whose EggMaterial node was not actually part of the
//               hierarchy).
//
//               If this is called in lieu of extract_materials(), it
//               will fill up the collection with all of the
//               referenced materials (and only the referenced
//               materials), without destructively removing the
//               EggMaterials from the hierarchy.
//
//               This also has the side effect of incrementing the
//               internal usage count for a material in the collection
//               each time a material reference is encountered.  This
//               side effect is taken advantage of by
//               remove_unused_materials().
//////////////////////////////////////////////////////////////////// 2 4 this 3 2258  4 node 1 2082  
813 0 0 4 870 2073 0 0 574 ////////////////////////////////////////////////////////////////////
//     Function: EggMaterialCollection::remove_unused_materials
//       Access: Public
//  Description: Removes any materials from the collection that aren't
//               referenced by any primitives in the indicated egg
//               hierarchy.  This also, incidentally, adds materials to
//               the collection that had been referenced by primitives
//               but had not previously appeared in the collection.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2258  4 node 1 2082  
814 0 0 6 871 2086 0 0 756 ////////////////////////////////////////////////////////////////////
//     Function: EggMaterialCollection::collapse_equivalent_materials
//       Access: Public
//  Description: Walks through the collection and collapses together
//               any separate materials that are equivalent according
//               to the indicated equivalence factor, eq (see
//               EggMaterial::is_equivalent_to()).  The return value is
//               the number of materials removed.
//
//               This flavor of collapse_equivalent_materials()
//               automatically adjusts all the primitives in the egg
//               hierarchy to refer to the new material pointers.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2258  2 eq 1 2086  4 node 1 2085  
815 0 0 6 871 2086 0 0 1035 ////////////////////////////////////////////////////////////////////
//     Function: EggMaterialCollection::collapse_equivalent_materials
//       Access: Public
//  Description: Walks through the collection and collapses together
//               any separate materials that are equivalent according
//               to the indicated equivalence factor, eq (see
//               EggMaterial::is_equivalent_to()).  The return value is
//               the number of materials removed.
//
//               This flavor of collapse_equivalent_materials() does
//               not adjust any primitives in the egg hierarchy;
//               instead, it fills up the 'removed' map with an entry
//               for each removed material, mapping it back to the
//               equivalent retained material.  It's up to the user to
//               then call replace_materials() with this map, if
//               desired, to apply these changes to the egg hierarchy.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2258  2 eq 1 2086  7 removed 1 2261  
816 0 0 4 872 2073 0 0 606 ////////////////////////////////////////////////////////////////////
//     Function: EggMaterialCollection::replace_materials
//       Access: Public, Static
//  Description: Walks the egg hierarchy, changing out any reference
//               to a material appearing on the left side of the map
//               with its corresponding material on the right side.
//               This is most often done following a call to
//               collapse_equivalent_materials().  It does not directly
//               affect the Collection.
//////////////////////////////////////////////////////////////////// 2 4 node 1 2085  7 replace 1 2264  
817 0 0 4 873 2073 0 0 386 ////////////////////////////////////////////////////////////////////
//     Function: EggMaterialCollection::uniquify_mrefs
//       Access: Public
//  Description: Guarantees that each material in the collection has a
//               unique MRef name.  This is essential before writing
//               an egg file.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2258  
818 0 0 4 874 2073 0 0 406 ////////////////////////////////////////////////////////////////////
//     Function: EggMaterialCollection::sort_by_mref
//       Access: Public
//  Description: Sorts all the materials into alphabetical order by
//               MRef name.  Subsequent operations using begin()/end()
//               will traverse in this sorted order.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2258  
819 0 0 6 875 2074 0 0 413 ////////////////////////////////////////////////////////////////////
//     Function: EggMaterialCollection::add_material
//       Access: Public
//  Description: Explicitly adds a new material to the collection.
//               Returns true if the material was added, false if it
//               was already there or if there was some error.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2258  8 material 1 2228  
820 0 0 6 876 2074 0 0 414 ////////////////////////////////////////////////////////////////////
//     Function: EggMaterialCollection::remove_material
//       Access: Public
//  Description: Explicitly removes a material from the collection.
//               Returns true if the material was removed, false if it
//               wasn't there or if there was some error.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2258  8 material 1 2228  
821 0 0 7 877 2228 1653 0 477 ////////////////////////////////////////////////////////////////////
//     Function: EggMaterialCollection::create_unique_material
//       Access: Public
//  Description: Creates a new material if there is not already one
//               equivalent (according to eq, see
//               EggMaterial::is_equivalent_to()) to the indicated
//               material, or returns the existing one if there is.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2258  4 copy 1 2226  2 eq 1 2086  
822 0 0 7 878 2228 1653 0 328 ////////////////////////////////////////////////////////////////////
//     Function: EggMaterialCollection::find_mref
//       Access: Public
//  Description: Returns the material with the indicated MRef name, or
//               NULL if no material matches.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2259  9 mref_name 1 2078  
823 0 0 7 880 2268 1799 0 227 ////////////////////////////////////////////////////////////////////
//     Function: EggPolygon::Copy constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2266  
824 0 0 7 880 2268 1799 0 222 ////////////////////////////////////////////////////////////////////
//     Function: EggPolygon::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 name 1 2078  
825 0 0 7 881 2268 1799 0 235 ////////////////////////////////////////////////////////////////////
//     Function: EggPolygon::Copy assignment operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2268  4 copy 1 2266  
826 0 0 6 882 2074 0 0 678 ////////////////////////////////////////////////////////////////////
//     Function: EggPolygon::calculate_normal
//       Access: Published
//  Description: Calculates the true polygon normal--the vector
//               pointing out of the front of the polygon--based on
//               the vertices.  This does not return or change the
//               polygon's normal as set via set_normal().
//
//               The return value is true if the normal is computed
//               correctly, or false if the polygon is degenerate and
//               does not have at least three noncollinear vertices.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2266  6 result 1 2269  2 cs 1 2174  
827 0 0 6 883 2074 0 0 327 ////////////////////////////////////////////////////////////////////
//     Function: EggPolygon::is_planar
//       Access: Published
//  Description: Returns true if all of the polygon's vertices lie
//               within the same plane, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2266  
828 0 0 6 884 2074 0 0 480 ////////////////////////////////////////////////////////////////////
//     Function: EggPolygon::recompute_polygon_normal
//       Access: Published
//  Description: Recalculates the normal according to the order of the
//               vertices, and sets it.  Returns true if the normal is
//               computed correctly, or false if the polygon is
//               degenerate and does not have a normal.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2268  2 cs 1 2174  
829 0 0 6 885 2074 0 0 1053 ////////////////////////////////////////////////////////////////////
//     Function: EggPolygon::triangulate_into
//       Access: Published
//  Description: Subdivides the polygon into triangles and adds each
//               one to the indicated container.  If the polygon is
//               already a triangle, adds an exact copy of the polygon
//               to the container.  Does not remove the polygon from
//               its existing parent or modify it in any way.
//
//               Returns true if the triangulation is successful, or
//               false if there was some error (in which case the
//               container may contain some partial triangulation).
//
//               If convex_also is true, both concave and convex
//               polygons will be subdivided into triangles;
//               otherwise, only concave polygons will be subdivided,
//               and convex polygons will be copied unchanged into the
//               container.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2266  9 container 1 2085  11 convex_also 1 2074  
830 0 0 7 886 2268 1799 0 786 ////////////////////////////////////////////////////////////////////
//     Function: EggPolygon::triangulate_in_place
//       Access: Published
//  Description: Subdivides the polygon into triangles and adds those
//               triangles to the parent group node in place of the
//               original polygon.  Returns a pointer to the original
//               polygon, which is likely about to be destructed.
//
//               If convex_also is true, both concave and convex
//               polygons will be subdivided into triangles;
//               otherwise, only concave polygons will be subdivided,
//               and convex polygons will be copied unchanged into the
//               container.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2268  11 convex_also 1 2074  
831 0 0 7 887 2069 0 0 0 0 
832 0 0 7 890 2272 1814 0 227 ////////////////////////////////////////////////////////////////////
//     Function: EggNurbsCurve::Copy constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2270  
833 0 0 7 890 2272 1814 0 222 ////////////////////////////////////////////////////////////////////
//     Function: EggNurbsCurve::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 name 1 2078  
834 0 0 7 891 2272 1814 0 235 ////////////////////////////////////////////////////////////////////
//     Function: EggNurbsCurve::Copy assignment operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2272  4 copy 1 2270  
835 0 0 4 892 2073 0 0 588 ////////////////////////////////////////////////////////////////////
//     Function: EggNurbsCurve::setup
//       Access: Public
//  Description: Prepares a new curve definition with the indicated
//               order and number of knots.  This also implies a
//               particular number of vertices as well (the number of
//               knots minus the order), but it is up to the user to
//               add the correct number of vertices to the curve by
//               repeatedly calling push_back().
//////////////////////////////////////////////////////////////////// 3 4 this 3 2272  5 order 1 2086  9 num_knots 1 2086  
836 0 0 4 893 2073 0 0 542 ////////////////////////////////////////////////////////////////////
//     Function: EggNurbsCurve::set_order
//       Access: Public
//  Description: Directly changes the order to the indicated value
//               (which must be an integer in the range 1 <= order <=
//               4).  If possible, it is preferable to use the setup()
//               method instead of this method, since changing the
//               order directly may result in an invalid curve.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2272  5 order 1 2086  
837 0 0 4 894 2073 0 0 665 ////////////////////////////////////////////////////////////////////
//     Function: EggNurbsCurve::set_num_knots
//       Access: Public
//  Description: Directly changes the number of knots.  This will
//               either add zero-valued knots onto the end, or
//               truncate knot values from the end, depending on
//               whether the list is being increased or decreased.  If
//               possible, it is preferable to use the setup() method
//               instead of directly setting the number of knots, as
//               this may result in an invalid curve.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2272  3 num 1 2086  
838 0 0 4 895 2073 0 0 452 ////////////////////////////////////////////////////////////////////
//     Function: EggNurbsCurve::set_knot
//       Access: Public
//  Description: Resets the value of the indicated knot as indicated.
//               k must be in the range 0 <= k < get_num_knots(),
//               and the value must be in the range get_knot(k - 1)
//               <= value <= get_knot(k + 1).
//////////////////////////////////////////////////////////////////// 3 4 this 3 2272  1 k 1 2086  5 value 1 2097  
839 0 0 6 896 2074 0 0 458 ////////////////////////////////////////////////////////////////////
//     Function: EggNurbsCurve::is_valid
//       Access: Public
//  Description: Returns true if the NURBS parameters are all
//               internally consistent (e.g. it has the right number
//               of vertices to match its number of knots and order in
//               each dimension), or false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2270  
840 0 0 6 897 2086 0 0 470 ////////////////////////////////////////////////////////////////////
//     Function: EggNurbsCurve::get_order
//       Access: Public
//  Description: Returns the order of the curve.  The order is the
//               degree of the NURBS equation plus 1; for a typical
//               NURBS, the order is 4.  With this implementation of
//               NURBS, the order must be in the range [1, 4].
//////////////////////////////////////////////////////////////////// 1 4 this 3 2270  
841 0 0 6 898 2086 0 0 310 ////////////////////////////////////////////////////////////////////
//     Function: EggNurbsCurve::get_degree
//       Access: Public
//  Description: Returns the degree of the curve.  For a typical
//               NURBS, the degree is 3.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2270  
842 0 0 6 899 2086 0 0 253 ////////////////////////////////////////////////////////////////////
//     Function: EggNurbsCurve::get_num_knots
//       Access: Public
//  Description: Returns the number of knots.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2270  
843 0 0 6 900 2086 0 0 669 ////////////////////////////////////////////////////////////////////
//     Function: EggNurbsCurve::get_num_cvs
//       Access: Public
//  Description: Returns the total number of control vertices that
//               *should* be defined for the curve.  This is
//               determined by the number of knots and the order, in
//               each direction; it does not necessarily reflect the
//               number of vertices that have actually been added to
//               the curve.  (However, if the number of vertices in
//               the curve are wrong, the curve is invalid.)
//////////////////////////////////////////////////////////////////// 1 4 this 3 2270  
844 0 0 6 901 2074 0 0 458 ////////////////////////////////////////////////////////////////////
//     Function: EggNurbsCurve::is_closed
//       Access: Public
//  Description: Returns true if the curve appears to be closed.
//               Since the Egg syntax does not provide a means for
//               explicit indication of closure, this has to be
//               guessed at by examining the curve itself.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2270  
845 0 0 6 902 2097 0 0 255 ////////////////////////////////////////////////////////////////////
//     Function: EggNurbsCurve::get_knot
//       Access: Public
//  Description: Returns the nth knot value defined.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2270  1 k 1 2086  
846 0 0 7 903 2069 0 0 0 0 
847 0 0 7 906 2273 1821 0 232 ////////////////////////////////////////////////////////////////////
//     Function: EggSurface::Copy assignment operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2273  4 copy 1 2274  
848 0 0 4 907 2073 0 0 586 ////////////////////////////////////////////////////////////////////
//     Function: EggSurface::set_u_subdiv
//       Access: Public
//  Description: Sets the number of subdivisions in the U direction
//               that will be requested across the surface.  (This
//               doesn't necessary guarantee that this number of
//               subdivisions will be made; it's just a hint to any
//               surface renderer or quick tesselator.)  Set the
//               number to 0 to disable the hint.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2273  6 subdiv 1 2086  
849 0 0 6 908 2086 0 0 375 ////////////////////////////////////////////////////////////////////
//     Function: EggSurface::get_u_subdiv
//       Access: Public
//  Description: Returns the requested number of subdivisions in the U
//               direction, or 0 if no particular subdivisions have
//               been requested.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2274  
850 0 0 4 909 2073 0 0 586 ////////////////////////////////////////////////////////////////////
//     Function: EggSurface::set_v_subdiv
//       Access: Public
//  Description: Sets the number of subdivisions in the U direction
//               that will be requested across the surface.  (This
//               doesn't necessary guarantee that this number of
//               subdivisions will be made; it's just a hint to any
//               surface renderer or quick tesselator.)  Set the
//               number to 0 to disable the hint.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2273  6 subdiv 1 2086  
851 0 0 6 910 2086 0 0 375 ////////////////////////////////////////////////////////////////////
//     Function: EggSurface::get_v_subdiv
//       Access: Public
//  Description: Returns the requested number of subdivisions in the U
//               direction, or 0 if no particular subdivisions have
//               been requested.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2274  
852 0 0 7 911 2069 0 0 0 0 
853 0 0 7 922 2278 1851 0 229 ////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::Copy constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2276  
854 0 0 7 922 2278 1851 0 224 ////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 name 1 2078  
855 0 0 7 923 2278 1851 0 237 ////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::Copy assignment operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2278  4 copy 1 2276  
856 0 0 4 924 2073 0 0 647 ////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::setup
//       Access: Public
//  Description: Prepares a new surface definition with the indicated
//               order and number of knots in each dimension.  This
//               also implies a particular number of vertices in each
//               dimension as well (the number of knots minus the
//               order), but it is up to the user to add the correct
//               number of vertices to the surface by repeatedly
//               calling push_back().
//////////////////////////////////////////////////////////////////// 5 4 this 3 2278  7 u_order 1 2086  7 v_order 1 2086  11 num_u_knots 1 2086  11 num_v_knots 1 2086  
857 0 0 4 925 2073 0 0 586 ////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::set_u_order
//       Access: Public
//  Description: Directly changes the order in the U direction to the
//               indicated value (which must be an integer in the
//               range 1 <= u_order <= 4).  If possible, it is
//               preferable to use the setup() method instead of this
//               method, since changing the order directly may result
//               in an invalid surface.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2278  7 u_order 1 2086  
858 0 0 4 926 2073 0 0 586 ////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::set_v_order
//       Access: Public
//  Description: Directly changes the order in the V direction to the
//               indicated value (which must be an integer in the
//               range 1 <= v_order <= 4).  If possible, it is
//               preferable to use the setup() method instead of this
//               method, since changing the order directly may result
//               in an invalid surface.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2278  7 v_order 1 2086  
859 0 0 4 927 2073 0 0 690 ////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::set_num_u_knots
//       Access: Public
//  Description: Directly changes the number of knots in the U
//               direction.  This will either add zero-valued knots
//               onto the end, or truncate knot values from the end,
//               depending on whether the list is being increased or
//               decreased.  If possible, it is preferable to use the
//               setup() method instead of directly setting the number
//               of knots, as this may result in an invalid surface.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2278  3 num 1 2086  
860 0 0 4 928 2073 0 0 690 ////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::set_num_v_knots
//       Access: Public
//  Description: Directly changes the number of knots in the V
//               direction.  This will either add zero-valued knots
//               onto the end, or truncate knot values from the end,
//               depending on whether the list is being increased or
//               decreased.  If possible, it is preferable to use the
//               setup() method instead of directly setting the number
//               of knots, as this may result in an invalid surface.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2278  3 num 1 2086  
861 0 0 4 929 2073 0 0 462 ////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::set_u_knot
//       Access: Public
//  Description: Resets the value of the indicated knot as indicated.
//               k must be in the range 0 <= k < get_num_u_knots(),
//               and the value must be in the range get_u_knot(k - 1)
//               <= value <= get_u_knot(k + 1).
//////////////////////////////////////////////////////////////////// 3 4 this 3 2278  1 k 1 2086  5 value 1 2097  
862 0 0 4 930 2073 0 0 462 ////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::set_v_knot
//       Access: Public
//  Description: Resets the value of the indicated knot as indicated.
//               k must be in the range 0 <= k < get_num_v_knots(),
//               and the value must be in the range get_v_knot(k - 1)
//               <= value <= get_v_knot(k + 1).
//////////////////////////////////////////////////////////////////// 3 4 this 3 2278  1 k 1 2086  5 value 1 2097  
863 0 0 4 931 2073 0 0 456 ////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::set_cv
//       Access: Public
//  Description: Redefines the control vertex associated with a
//               particular u, v coordinate pair.  This is just a
//               shorthand to access the EggPrimitive's normal vertex
//               assignment for a 2-d control vertex.
//////////////////////////////////////////////////////////////////// 4 4 this 3 2278  2 ui 1 2086  2 vi 1 2086  6 vertex 1 2136  
864 0 0 6 932 2074 0 0 460 ////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::is_valid
//       Access: Public
//  Description: Returns true if the NURBS parameters are all
//               internally consistent (e.g. it has the right number
//               of vertices to match its number of knots and order in
//               each dimension), or false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2276  
865 0 0 6 933 2086 0 0 511 ////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::get_u_order
//       Access: Public
//  Description: Returns the order of the surface in the U direction.
//               The order is the degree of the NURBS equation plus 1;
//               for a typical NURBS, the order is 4.  With this
//               implementation of NURBS, the order must be in the
//               range [1, 4].
//////////////////////////////////////////////////////////////////// 1 4 this 3 2276  
866 0 0 6 934 2086 0 0 511 ////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::get_v_order
//       Access: Public
//  Description: Returns the order of the surface in the V direction.
//               The order is the degree of the NURBS equation plus 1;
//               for a typical NURBS, the order is 4.  With this
//               implementation of NURBS, the order must be in the
//               range [1, 4].
//////////////////////////////////////////////////////////////////// 1 4 this 3 2276  
867 0 0 6 935 2086 0 0 334 ////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::get_u_degree
//       Access: Public
//  Description: Returns the degree of the surface in the U direction.
//               For a typical NURBS, the degree is 3.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2276  
868 0 0 6 936 2086 0 0 334 ////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::get_v_degree
//       Access: Public
//  Description: Returns the degree of the surface in the V direction.
//               for a typical NURBS, the degree is 3.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2276  
869 0 0 6 937 2086 0 0 276 ////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::get_num_u_knots
//       Access: Public
//  Description: Returns the number of knots in the U direction.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2276  
870 0 0 6 938 2086 0 0 276 ////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::get_num_v_knots
//       Access: Public
//  Description: Returns the number of knots in the V direction.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2276  
871 0 0 6 939 2086 0 0 657 ////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::get_num_u_cvs
//       Access: Public
//  Description: Returns the number of control vertices that should be
//               present in the U direction.  This is determined by
//               the number of knots and the order; it does not
//               necessarily reflect the number of vertices that have
//               actually been added to the surface.  (However, if the
//               number of vertices in the surface are wrong, the
//               surface is invalid.)
//////////////////////////////////////////////////////////////////// 1 4 this 3 2276  
872 0 0 6 940 2086 0 0 657 ////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::get_num_v_cvs
//       Access: Public
//  Description: Returns the number of control vertices that should be
//               present in the V direction.  This is determined by
//               the number of knots and the order; it does not
//               necessarily reflect the number of vertices that have
//               actually been added to the surface.  (However, if the
//               number of vertices in the surface are wrong, the
//               surface is invalid.)
//////////////////////////////////////////////////////////////////// 1 4 this 3 2276  
873 0 0 6 941 2086 0 0 679 ////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::get_num_cvs
//       Access: Public
//  Description: Returns the total number of control vertices that
//               *should* be defined for the surface.  This is
//               determined by the number of knots and the order, in
//               each direction; it does not necessarily reflect the
//               number of vertices that have actually been added to
//               the surface.  (However, if the number of vertices in
//               the surface are wrong, the surface is invalid.)
//////////////////////////////////////////////////////////////////// 1 4 this 3 2276  
874 0 0 6 942 2086 0 0 538 ////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::get_u_index
//       Access: Public
//  Description: Returns the U index number of the given vertex within
//               the EggPrimitive's linear list of vertices.  An
//               EggNurbsSurface maps a linear list of vertices to its
//               2-d mesh; this returns the U index number that
//               corresponds to the nth vertex in the list.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2276  12 vertex_index 1 2086  
875 0 0 6 943 2086 0 0 538 ////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::get_v_index
//       Access: Public
//  Description: Returns the V index number of the given vertex within
//               the EggPrimitive's linear list of vertices.  An
//               EggNurbsSurface maps a linear list of vertices to its
//               2-d mesh; this returns the V index number that
//               corresponds to the nth vertex in the list.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2276  12 vertex_index 1 2086  
876 0 0 6 944 2086 0 0 344 ////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::get_vertex_index
//       Access: Public
//  Description: Returns the index number within the EggPrimitive's
//               list of the control vertex at position ui, vi.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2276  2 ui 1 2086  2 vi 1 2086  
877 0 0 6 945 2074 0 0 503 ////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::is_closed_u
//       Access: Public
//  Description: Returns true if the surface appears to be closed in
//               the U direction.  Since the Egg syntax does not
//               provide a means for explicit indication of closure,
//               this has to be guessed at by examining the surface
//               itself.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2276  
878 0 0 6 946 2074 0 0 503 ////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::is_closed_v
//       Access: Public
//  Description: Returns true if the surface appears to be closed in
//               the V direction.  Since the Egg syntax does not
//               provide a means for explicit indication of closure,
//               this has to be guessed at by examining the surface
//               itself.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2276  
879 0 0 6 947 2097 0 0 295 ////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::get_u_knot
//       Access: Public
//  Description: Returns the nth knot value defined in the U
//               direction.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2276  1 k 1 2086  
880 0 0 6 948 2097 0 0 295 ////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::get_v_knot
//       Access: Public
//  Description: Returns the nth knot value defined in the V
//               direction.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2276  1 k 1 2086  
881 0 0 7 949 2136 1140 0 294 ////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::get_cv
//       Access: Public
//  Description: Returns the control vertex at the indicate U, V
//               position.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2276  2 ui 1 2086  2 vi 1 2086  
882 0 0 7 950 2069 0 0 0 0 
883 0 0 7 953 2281 1855 0 225 ////////////////////////////////////////////////////////////////////
//     Function: EggPatch::Copy constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2279  
884 0 0 7 953 2281 1855 0 220 ////////////////////////////////////////////////////////////////////
//     Function: EggPatch::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 name 1 2078  
885 0 0 7 954 2281 1855 0 233 ////////////////////////////////////////////////////////////////////
//     Function: EggPatch::Copy assignment operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2281  4 copy 1 2279  
886 0 0 7 955 2069 0 0 0 0 
887 0 0 7 958 2284 1867 0 222 ////////////////////////////////////////////////////////////////////
//     Function: EggPoint::Copy constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2282  
888 0 0 7 958 2284 1867 0 217 ////////////////////////////////////////////////////////////////////
//     Function: EggPoint::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 name 1 2078  
889 0 0 7 959 2284 1867 0 230 ////////////////////////////////////////////////////////////////////
//     Function: EggPoint::Copy assignment operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2284  4 copy 1 2282  
890 0 0 6 960 2074 0 0 218 ////////////////////////////////////////////////////////////////////
//     Function: EggPoint::has_thick
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2282  
891 0 0 6 961 2097 0 0 330 ////////////////////////////////////////////////////////////////////
//     Function: EggPoint::get_thick
//       Access: Published
//  Description: Returns the thickness set on this particular point.
//               If there is no thickness set, returns 1.0.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2282  
892 0 0 4 962 2073 0 0 218 ////////////////////////////////////////////////////////////////////
//     Function: EggPoint::set_thick
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2284  5 thick 1 2097  
893 0 0 4 963 2073 0 0 220 ////////////////////////////////////////////////////////////////////
//     Function: EggPoint::clear_thick
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2284  
894 0 0 6 964 2074 0 0 224 ////////////////////////////////////////////////////////////////////
//     Function: EggPoint::has_perspective
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2282  
895 0 0 6 965 2074 0 0 370 ////////////////////////////////////////////////////////////////////
//     Function: EggPoint::get_perspective
//       Access: Published
//  Description: Returns the perspective flag set on this particular
//               point.  If there is no perspective flag set, returns
//               false.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2282  
896 0 0 4 966 2073 0 0 224 ////////////////////////////////////////////////////////////////////
//     Function: EggPoint::set_perspective
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2284  11 perspective 1 2074  
897 0 0 4 967 2073 0 0 226 ////////////////////////////////////////////////////////////////////
//     Function: EggPoint::clear_perspective
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2284  
898 0 0 7 968 2069 0 0 0 0 
899 0 0 7 973 2285 1871 0 225 ////////////////////////////////////////////////////////////////////
//     Function: EggPolysetMaker::Constructor
//       Access: Public
//  Description: 
//////////////////////////////////////////////////////////////////// 0 
900 0 0 4 974 2073 0 0 609 ////////////////////////////////////////////////////////////////////
//     Function: EggPolysetMaker::set_properties
//       Access: Public
//  Description: Sets the set of properties that determines which
//               polygons are allowed to be grouped together into a
//               single polyset.  This is the bitwise 'or' of all the
//               properties that matter.  If this is 0, all polygons
//               (within a given group) will be lumped into a common
//               polyset regardless of their properties.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2285  10 properties 1 2086  
901 0 0 7 975 2069 0 0 0 0 
902 0 0 7 978 2286 1874 0 226 ////////////////////////////////////////////////////////////////////
//     Function: EggPoolUniquifier::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
903 0 0 7 979 2069 0 0 0 0 
904 0 0 7 982 2289 1882 0 226 ////////////////////////////////////////////////////////////////////
//     Function: EggSAnimData::Copy constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2287  
905 0 0 7 982 2289 1882 0 221 ////////////////////////////////////////////////////////////////////
//     Function: EggSAnimData::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 name 1 2078  
906 0 0 7 983 2289 1882 0 234 ////////////////////////////////////////////////////////////////////
//     Function: EggSAnimData::Copy assignment operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2289  4 copy 1 2287  
907 0 0 6 984 2086 0 0 326 ////////////////////////////////////////////////////////////////////
//     Function: EggSAnimData::get_num_rows
//       Access: Public
//  Description: Returns the number of rows in the table.  For an
//               SAnim table, each row has one column.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2287  
908 0 0 6 985 2097 0 0 329 ////////////////////////////////////////////////////////////////////
//     Function: EggSAnimData::get_value
//       Access: Public
//  Description: Returns the value at the indicated row.  Row must be
//               in the range 0 <= row < get_num_rows().
//////////////////////////////////////////////////////////////////// 2 4 this 3 2287  3 row 1 2086  
909 0 0 4 986 2073 0 0 329 ////////////////////////////////////////////////////////////////////
//     Function: EggSAnimData::set_value
//       Access: Public
//  Description: Changes the value at the indicated row.  Row must be
//               in the range 0 <= row < get_num_rows().
//////////////////////////////////////////////////////////////////// 3 4 this 3 2289  3 row 1 2086  5 value 1 2097  
910 0 0 4 987 2073 0 0 322 ////////////////////////////////////////////////////////////////////
//     Function: EggSAnimData::optimize
//       Access: Public
//  Description: Optimizes the data by collapsing a long table of
//               duplicate values into a single value.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2289  
911 0 0 7 988 2069 0 0 0 0 
912 0 0 7 992 2292 1890 0 222 ////////////////////////////////////////////////////////////////////
//     Function: EggTable::Copy constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2290  
913 0 0 7 992 2292 1890 0 217 ////////////////////////////////////////////////////////////////////
//     Function: EggTable::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 name 1 2078  
914 0 0 7 993 2292 1890 0 230 ////////////////////////////////////////////////////////////////////
//     Function: EggTable::Copy assignment operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2292  4 copy 1 2290  
915 0 0 4 994 2073 0 0 220 ////////////////////////////////////////////////////////////////////
//     Function: EggTable::set_table_type
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2292  4 type 1 2059  
916 0 0 6 995 2059 0 0 220 ////////////////////////////////////////////////////////////////////
//     Function: EggTable::get_table_type
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2290  
917 0 0 6 996 2074 0 0 313 ////////////////////////////////////////////////////////////////////
//     Function: EggTable::has_transform
//       Access: Public
//  Description: Returns true if the table contains a transform
//               description, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2290  
918 0 0 6 997 2059 0 0 412 ////////////////////////////////////////////////////////////////////
//     Function: EggTable::string_table_type
//       Access: Public, Static
//  Description: Returns the TableType value associated with the given
//               string representation, or TT_invalid if the string
//               does not match any known TableType value.
//////////////////////////////////////////////////////////////////// 1 6 string 1 2078  
919 0 0 7 998 2069 0 0 0 0 
920 0 0 7 1001 2293 1893 0 229 ////////////////////////////////////////////////////////////////////
//     Function: EggTextureCollection::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
921 0 0 7 1001 2293 1893 0 234 ////////////////////////////////////////////////////////////////////
//     Function: EggTextureCollection::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2294  
922 0 0 6 1002 2293 0 0 242 ////////////////////////////////////////////////////////////////////
//     Function: EggTextureCollection::Copy Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2293  4 copy 1 2294  
923 0 0 4 1004 2073 0 0 265 ////////////////////////////////////////////////////////////////////
//     Function: EggTextureCollection::clear
//       Access: Public
//  Description: Removes all textures from the collection.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2293  
924 0 0 6 1005 2086 0 0 479 ////////////////////////////////////////////////////////////////////
//     Function: EggTextureCollection::extract_textures
//       Access: Public
//  Description: Walks the egg hierarchy beginning at the indicated
//               node, and removes any EggTextures encountered in the
//               hierarchy, adding them to the collection.  Returns
//               the number of EggTextures encountered.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2293  4 node 1 2085  
925 0 0 6 1006 2074 0 0 322 ////////////////////////////////////////////////////////////////////
//     Function: EggTextureCollection::is_empty
//       Access: Published
//  Description: Returns true if there are no EggTexures in the
//               collection, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2294  
926 0 0 6 1007 2086 0 0 290 ////////////////////////////////////////////////////////////////////
//     Function: EggTextureCollection::get_num_textures
//       Access: Published
//  Description: Returns the number of EggTextures in the collection.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2294  
927 0 0 7 1008 2225 1507 0 278 ////////////////////////////////////////////////////////////////////
//     Function: EggTextureCollection::get_texture
//       Access: Published
//  Description: Returns the nth EggTexture in the collection.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2294  5 index 1 2086  
928 0 0 6 1009 2086 0 0 1765 ////////////////////////////////////////////////////////////////////
//     Function: EggTextureCollection::find_used_textures
//       Access: Public
//  Description: Walks the egg hierarchy beginning at the indicated
//               node, looking for textures that are referenced by
//               primitives but are not already members of the
//               collection, adding them to the collection.
//
//               If this is called following extract_textures(), it
//               can be used to pick up any additional texture
//               references that appeared in the egg hierarchy (but
//               whose EggTexture node was not actually part of the
//               hierarchy).
//
//               If this is called in lieu of extract_textures(), it
//               will fill up the collection with all of the
//               referenced textures (and only the referenced
//               textures), without destructively removing the
//               EggTextures from the hierarchy.
//
//               This also has the side effect of incrementing the
//               internal usage count for a texture in the collection
//               each time a texture reference is encountered.  This
//               side effect is taken advantage of by
//               remove_unused_textures().
//
//               And one more side effect: this function identifies
//               the presence of multitexturing in the egg file, and
//               calls multitexture_over() on each texture
//               appropriately so that, after this call, you may
//               expect get_multitexture_sort() to return a reasonable
//               value for each texture.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2293  4 node 1 2082  
929 0 0 4 1010 2073 0 0 570 ////////////////////////////////////////////////////////////////////
//     Function: EggTextureCollection::remove_unused_textures
//       Access: Public
//  Description: Removes any textures from the collection that aren't
//               referenced by any primitives in the indicated egg
//               hierarchy.  This also, incidentally, adds textures to
//               the collection that had been referenced by primitives
//               but had not previously appeared in the collection.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2293  4 node 1 2082  
930 0 0 6 1011 2086 0 0 749 ////////////////////////////////////////////////////////////////////
//     Function: EggTextureCollection::collapse_equivalent_textures
//       Access: Public
//  Description: Walks through the collection and collapses together
//               any separate textures that are equivalent according
//               to the indicated equivalence factor, eq (see
//               EggTexture::is_equivalent_to()).  The return value is
//               the number of textures removed.
//
//               This flavor of collapse_equivalent_textures()
//               automatically adjusts all the primitives in the egg
//               hierarchy to refer to the new texture pointers.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2293  2 eq 1 2086  4 node 1 2085  
931 0 0 6 1011 2086 0 0 1026 ////////////////////////////////////////////////////////////////////
//     Function: EggTextureCollection::collapse_equivalent_textures
//       Access: Public
//  Description: Walks through the collection and collapses together
//               any separate textures that are equivalent according
//               to the indicated equivalence factor, eq (see
//               EggTexture::is_equivalent_to()).  The return value is
//               the number of textures removed.
//
//               This flavor of collapse_equivalent_textures() does
//               not adjust any primitives in the egg hierarchy;
//               instead, it fills up the 'removed' map with an entry
//               for each removed texture, mapping it back to the
//               equivalent retained texture.  It's up to the user to
//               then call replace_textures() with this map, if
//               desired, to apply these changes to the egg hierarchy.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2293  2 eq 1 2086  7 removed 1 2296  
932 0 0 4 1012 2073 0 0 601 ////////////////////////////////////////////////////////////////////
//     Function: EggTextureCollection::replace_textures
//       Access: Public, Static
//  Description: Walks the egg hierarchy, changing out any reference
//               to a texture appearing on the left side of the map
//               with its corresponding texture on the right side.
//               This is most often done following a call to
//               collapse_equivalent_textures().  It does not directly
//               affect the Collection.
//////////////////////////////////////////////////////////////////// 2 4 node 1 2085  7 replace 1 2299  
933 0 0 4 1013 2073 0 0 384 ////////////////////////////////////////////////////////////////////
//     Function: EggTextureCollection::uniquify_trefs
//       Access: Public
//  Description: Guarantees that each texture in the collection has a
//               unique TRef name.  This is essential before writing
//               an egg file.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2293  
934 0 0 4 1014 2073 0 0 404 ////////////////////////////////////////////////////////////////////
//     Function: EggTextureCollection::sort_by_tref
//       Access: Public
//  Description: Sorts all the textures into alphabetical order by
//               TRef name.  Subsequent operations using begin()/end()
//               will traverse in this sorted order.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2293  
935 0 0 4 1015 2073 0 0 471 ////////////////////////////////////////////////////////////////////
//     Function: EggTextureCollection::sort_by_basename
//       Access: Public
//  Description: Sorts all the textures into alphabetical order by
//               the basename part (including extension) of the
//               filename.  Subsequent operations using begin()/end()
//               will traverse in this sorted order.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2293  
936 0 0 7 1016 2225 1507 0 278 ////////////////////////////////////////////////////////////////////
//     Function: EggTextureCollection::operator []
//       Access: Published
//  Description: Returns the nth EggTexture in the collection.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2294  1 n 1 2301  
937 0 0 6 1017 2301 0 0 278 ////////////////////////////////////////////////////////////////////
//     Function: EggTextureCollection::size
//       Access: Published
//  Description: Returns the number of EggTextures in the collection.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2294  
938 0 0 6 1018 2074 0 0 409 ////////////////////////////////////////////////////////////////////
//     Function: EggTextureCollection::add_texture
//       Access: Public
//  Description: Explicitly adds a new texture to the collection.
//               Returns true if the texture was added, false if it
//               was already there or if there was some error.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2293  7 texture 1 2225  
939 0 0 6 1019 2074 0 0 410 ////////////////////////////////////////////////////////////////////
//     Function: EggTextureCollection::remove_texture
//       Access: Public
//  Description: Explicitly removes a texture from the collection.
//               Returns true if the texture was removed, false if it
//               wasn't there or if there was some error.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2293  7 texture 1 2225  
940 0 0 7 1020 2225 1507 0 472 ////////////////////////////////////////////////////////////////////
//     Function: EggTextureCollection::create_unique_texture
//       Access: Public
//  Description: Creates a new texture if there is not already one
//               equivalent (according to eq, see
//               EggTexture::is_equivalent_to()) to the indicated
//               texture, or returns the existing one if there is.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2293  4 copy 1 2223  2 eq 1 2086  
941 0 0 7 1021 2225 1507 0 325 ////////////////////////////////////////////////////////////////////
//     Function: EggTextureCollection::find_tref
//       Access: Public
//  Description: Returns the texture with the indicated TRef name, or
//               NULL if no texture matches.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2294  9 tref_name 1 2078  
942 0 0 7 1022 2225 1507 0 328 ////////////////////////////////////////////////////////////////////
//     Function: EggTextureCollection::find_filename
//       Access: Public
//  Description: Returns the texture with the indicated filename, or
//               NULL if no texture matches.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2294  8 filename 1 2171  
943 0 0 7 1024 2304 1661 0 231 ////////////////////////////////////////////////////////////////////
//     Function: EggTriangleFan::Copy constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2302  
944 0 0 7 1024 2304 1661 0 226 ////////////////////////////////////////////////////////////////////
//     Function: EggTriangleFan::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 name 1 2078  
945 0 0 7 1025 2304 1661 0 239 ////////////////////////////////////////////////////////////////////
//     Function: EggTriangleFan::Copy assignment operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2304  4 copy 1 2302  
946 0 0 7 1026 2069 0 0 0 0 
947 0 0 7 1028 2307 1661 0 233 ////////////////////////////////////////////////////////////////////
//     Function: EggTriangleStrip::Copy constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2305  
948 0 0 7 1028 2307 1661 0 228 ////////////////////////////////////////////////////////////////////
//     Function: EggTriangleStrip::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 name 1 2078  
949 0 0 7 1029 2307 1661 0 241 ////////////////////////////////////////////////////////////////////
//     Function: EggTriangleStrip::Copy assignment operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2307  4 copy 1 2305  
950 0 0 7 1030 2069 0 0 0 0 
951 0 0 7 1032 2310 1942 0 322 ////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::Conversion constructor
//       Access: Public
//  Description: Converts the older-style XfmAnim table to the
//               newer-style XfmSAnim table.
//////////////////////////////////////////////////////////////////// 1 12 convert_from 1 2308  
952 0 0 7 1032 2310 1942 0 225 ////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::Copy constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2311  
953 0 0 7 1032 2310 1942 0 220 ////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 name 1 2078  2 cs 1 2174  
954 0 0 7 1033 2310 1942 0 233 ////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::Copy assignment operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2310  4 copy 1 2311  
955 0 0 4 1034 2073 0 0 216 ////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::set_fps
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2310  3 fps 1 2097  
956 0 0 4 1035 2073 0 0 218 ////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::clear_fps
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2310  
957 0 0 6 1036 2074 0 0 216 ////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::has_fps
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2311  
958 0 0 6 1037 2097 0 0 262 ////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::get_fps
//       Access: Public
//  Description: This is only valid if has_fps() returns true.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2311  
959 0 0 4 1038 2073 0 0 218 ////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::set_order
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2310  5 order 1 2078  
960 0 0 4 1039 2073 0 0 220 ////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::clear_order
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2310  
961 0 0 6 1040 2074 0 0 218 ////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::has_order
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2311  
962 0 0 6 1041 2078 0 0 218 ////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::get_order
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2311  
963 0 0 6 1042 2078 0 0 448 ////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::get_standard_order
//       Access: Public, Static
//  Description: Returns the standard order of matrix component
//               composition.  This is what the order string must be
//               set to in order to use set_value() or add_data()
//               successfully.
//////////////////////////////////////////////////////////////////// 0 
964 0 0 6 1043 2174 0 0 589 ////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::get_coordinate_system
//       Access: Public
//  Description: Returns the coordinate system this table believes it
//               is defined within.  This should always match the
//               coordinate system of the EggData structure that owns
//               it.  It is necessary to store it here because the
//               meaning of the h, p, and r columns depends on the
//               coordinate system.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2311  
965 0 0 4 1044 2073 0 0 290 ////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::optimize
//       Access: Public
//  Description: Optimizes the table by collapsing redundant
//               sub-tables.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2310  
966 0 0 4 1045 2073 0 0 512 ////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::optimize_to_standard_order
//       Access: Public
//  Description: Optimizes the table by collapsing redundant
//               sub-tables, and simultaneously ensures that the order
//               string is the standard order (which is the same as
//               that supported by compose_matrix() and
//               decompose_matrix()).
//////////////////////////////////////////////////////////////////// 1 4 this 3 2310  
967 0 0 4 1046 2073 0 0 508 ////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::normalize
//       Access: Public
//  Description: The inverse operation of optimize(), this ensures
//               that all the sub-tables have the same length by
//               duplicating rows as necessary.  This is needed before
//               doing operations like add_data() or set_value() on an
//               existing table.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2310  
968 0 0 6 1047 2086 0 0 528 ////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::get_num_rows
//       Access: Public
//  Description: Returns the effective number of rows in the table.
//               This is actually the number of rows of the smallest
//               subtable larger than one row.  This is a convenience
//               function that treats the table of tables as if it
//               were a single table of matrices.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2311  
969 0 0 4 1048 2073 0 0 639 ////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::get_value
//       Access: Public
//  Description: Returns the value of the aggregate row of the table
//               as a matrix.  This is a convenience function that
//               treats the table of tables as if it were a single
//               table of matrices.  It is an error to call this if
//               any SAnimData children of this node have an improper
//               name (e.g. not a single letter, or not one of
//               "ijkabchprxyz").
//////////////////////////////////////////////////////////////////// 3 4 this 3 2311  3 row 1 2086  3 mat 1 2313  
970 0 0 6 1049 2074 0 0 716 ////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::set_value
//       Access: Public
//  Description: Replaces the indicated row of the table with the
//               given matrix.
//
//               This function can only be called if all the
//               constraints of add_data(), below, are met.  Call
//               normalize() first if you are not sure.
//
//               The return value is true if the matrix can be
//               decomposed and stored as scale, shear, rotate, and
//               translate, or false otherwise.  The data is set in
//               either case.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2310  3 row 1 2086  3 mat 1 2087  
971 0 0 4 1050 2073 0 0 316 ////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::clear_data
//       Access: Public
//  Description: Removes all data from the table.  It does this by
//               removing all of its children.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2310  
972 0 0 6 1051 2074 0 0 1669 ////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::add_data
//       Access: Public
//  Description: Adds a new matrix to the table, by adding a new row
//               to each of the subtables.
//
//               This is a convenience function that
//               treats the table of tables as if it were a single
//               table of matrices.  It is an error to call this if
//               any SAnimData children of this node have an improper
//               name (e.g. not a single letter, or not one of
//               "ijkabchprxyz").
//
//               This function has the further requirement that all
//               nine of the subtables must exist and be of the same
//               length.  Furthermore, the order string must be the
//               standard order string, which matches the system
//               compose_matrix() and decompose_matrix() functions.
//
//               Thus, you probably cannot take an existing
//               EggXfmSAnim object and start adding matrices to the
//               end; you must clear out the original data first.  (As
//               a special exception, if no tables exist, they will be
//               created.)  The method normalize() will do this for
//               you on an existing EggXfmSAnim.
//
//               This function may fail silently if the matrix cannot
//               be decomposed into scale, shear, rotate, and
//               translate.  In this case, the closest approximation
//               is added to the table, and false is returned.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2310  3 mat 1 2087  
973 0 0 4 1052 2073 0 0 307 ////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::add_component_data
//       Access: Public
//  Description: Adds a new row to the indicated component (0-12) of
//               the table.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2310  9 component 1 2086  5 value 1 2097  
974 0 0 4 1052 2073 0 0 330 ////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::add_component_data
//       Access: Public
//  Description: Adds a new row to the named component (one of
//               matrix_component_letters) of the table.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2310  14 component_name 1 2078  5 value 1 2097  
975 0 0 4 1053 2073 0 0 442 ////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::compose_with_order
//       Access: Public, Static
//  Description: Composes a matrix out of the nine individual
//               components, respecting the order string.  The
//               components will be applied in the order indicated by
//               the string.
//////////////////////////////////////////////////////////////////// 7 3 mat 1 2313  5 scale 1 2196  5 shear 1 2196  3 hpr 1 2196  5 trans 1 2196  5 order 1 2078  2 cs 1 2174  
976 0 0 7 1054 2069 0 0 0 0 
977 0 0 7 1057 2314 1959 0 228 ////////////////////////////////////////////////////////////////////
//     Function: EggXfmAnimData::Copy constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2308  
978 0 0 7 1057 2314 1959 0 325 ////////////////////////////////////////////////////////////////////
//     Function: EggXfmAnimData::Conversion constructor
//       Access: Public
//  Description: Converts the newer-style XfmSAnim table to the
//               older-style XfmAnim table.
//////////////////////////////////////////////////////////////////// 1 12 convert_from 1 2311  
979 0 0 7 1057 2314 1959 0 223 ////////////////////////////////////////////////////////////////////
//     Function: EggXfmAnimData::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 name 1 2078  2 cs 1 2174  
980 0 0 7 1058 2314 1959 0 236 ////////////////////////////////////////////////////////////////////
//     Function: EggXfmAnimData::Copy assignment operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2314  4 copy 1 2308  
981 0 0 4 1059 2073 0 0 221 ////////////////////////////////////////////////////////////////////
//     Function: EggXfmAnimData::set_order
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2314  5 order 1 2078  
982 0 0 4 1060 2073 0 0 223 ////////////////////////////////////////////////////////////////////
//     Function: EggXfmAnimData::clear_order
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2314  
983 0 0 6 1061 2074 0 0 221 ////////////////////////////////////////////////////////////////////
//     Function: EggXfmAnimData::has_order
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2308  
984 0 0 6 1062 2078 0 0 221 ////////////////////////////////////////////////////////////////////
//     Function: EggXfmAnimData::get_order
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2308  
985 0 0 6 1063 2078 0 0 451 ////////////////////////////////////////////////////////////////////
//     Function: EggXfmAnimData::get_standard_order
//       Access: Public, Static
//  Description: Returns the standard order of matrix component
//               composition.  This is what the order string must be
//               set to in order to use set_value() or add_data()
//               successfully.
//////////////////////////////////////////////////////////////////// 0 
986 0 0 4 1064 2073 0 0 224 ////////////////////////////////////////////////////////////////////
//     Function: EggXfmAnimData::set_contents
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2314  8 contents 1 2078  
987 0 0 4 1065 2073 0 0 226 ////////////////////////////////////////////////////////////////////
//     Function: EggXfmAnimData::clear_contents
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2314  
988 0 0 6 1066 2074 0 0 224 ////////////////////////////////////////////////////////////////////
//     Function: EggXfmAnimData::has_contents
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2308  
989 0 0 6 1067 2078 0 0 224 ////////////////////////////////////////////////////////////////////
//     Function: EggXfmAnimData::get_contents
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2308  
990 0 0 6 1068 2174 0 0 592 ////////////////////////////////////////////////////////////////////
//     Function: EggXfmAnimData::get_coordinate_system
//       Access: Public
//  Description: Returns the coordinate system this table believes it
//               is defined within.  This should always match the
//               coordinate system of the EggData structure that owns
//               it.  It is necessary to store it here because the
//               meaning of the h, p, and r columns depends on the
//               coordinate system.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2308  
991 0 0 6 1069 2086 0 0 265 ////////////////////////////////////////////////////////////////////
//     Function: EggXfmAnimData::get_num_rows
//       Access: Public
//  Description: Returns the number of rows in the table.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2308  
992 0 0 6 1070 2086 0 0 393 ////////////////////////////////////////////////////////////////////
//     Function: EggXfmAnimData::get_num_cols
//       Access: Public
//  Description: Returns the number of columns in the table.  This is
//               set according to the "contents" string, which defines
//               the meaning of each column.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2308  
993 0 0 4 1071 2073 0 0 437 ////////////////////////////////////////////////////////////////////
//     Function: EggXfmAnimData::get_value
//       Access: Public
//  Description: Returns the value of the aggregate row of the table
//               as a matrix.  This is a convenience function that
//               treats the 2-d table as if it were a single table of
//               matrices.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2308  3 row 1 2086  3 mat 1 2313  
994 0 0 6 1071 2097 0 0 400 ////////////////////////////////////////////////////////////////////
//     Function: EggXfmAnimData::get_value
//       Access: Public
//  Description: Returns the value at the indicated row.  Row must be
//               in the range 0 <= row < get_num_rows(); col must be
//               in the range 0 <= col < get_num_cols().
//////////////////////////////////////////////////////////////////// 3 4 this 3 2308  3 row 1 2086  3 col 1 2086  
995 0 0 7 1072 2069 0 0 0 0 
355
1960 11 EggUserData 0 75777 11 EggUserData 11 EggUserData 0 0 0 1 996 0 0 2 997 998 0 0 1 0 1961 0 0 0 0 632
////////////////////////////////////////////////////////////////////
//       Class : EggUserData
// Description : This is a base class for a user-defined data type to
//               extend egg structures in processing code.  The user
//               of the egg library may derive from EggUserData to
//               associate any arbitrary data with various egg
//               objects.
//
//               However, this data will not be written out to the
//               disk when the egg file is written; it is an in-memory
//               object only.
////////////////////////////////////////////////////////////////////

1961 19 TypedReferenceCount 0 2049 19 TypedReferenceCount 19 TypedReferenceCount 0 0 0 0 0 0 0 0 0 0 0 0 710
////////////////////////////////////////////////////////////////////
//       Class : TypedReferenceCount
// Description : A base class for things which need to inherit from
//               both TypedObject and from ReferenceCount.  It's
//               convenient to define this intermediate base class
//               instead of multiply inheriting from the two classes
//               each time they are needed, so that we can sensibly
//               pass around pointers to things which are both
//               TypedObjects and ReferenceCounters.
//               
//               See also TypedObject for detailed instructions.
////////////////////////////////////////////////////////////////////

1962 9 EggObject 0 75777 9 EggObject 9 EggObject 0 0 0 1 999 0 0 6 1000 1001 1002 1003 1004 1005 0 0 1 0 1961 0 0 0 0 292
////////////////////////////////////////////////////////////////////
//       Class : EggObject
// Description : The highest-level base class in the egg directory.
//               (Almost) all things egg inherit from this.
////////////////////////////////////////////////////////////////////

1963 14 EggNamedObject 0 141313 14 EggNamedObject 14 EggNamedObject 0 0 0 1 1010 1014 0 3 1011 1012 1013 0 0 2 3 1962 1006 1007 3 1964 1008 1009 0 0 274
////////////////////////////////////////////////////////////////////
//       Class : EggNamedObject
// Description : This is a fairly low-level base class--any egg
//               object that has a name.
////////////////////////////////////////////////////////////////////

1964 7 Namable 0 2049 7 Namable 7 Namable 0 0 0 0 0 0 0 0 0 0 0 0 324
////////////////////////////////////////////////////////////////////
//       Class : Namable
// Description : A base class for all things which can have a name.
//               The name is either empty or nonempty, but it is never
//               NULL.
////////////////////////////////////////////////////////////////////

1965 7 EggNode 0 141313 7 EggNode 7 EggNode 0 0 0 0 1053 0 38 1015 1016 1017 1018 1019 1020 1021 1022 1023 1024 1025 1026 1027 1028 1029 1030 1031 1032 1033 1034 1035 1036 1037 1038 1039 1040 1041 1042 1043 1044 1045 1046 1047 1048 1049 1050 1051 1052 0 0 1 0 1963 0 0 0 0 409
////////////////////////////////////////////////////////////////////
//       Class : EggNode
// Description : A base class for things that may be directly added
//               into the egg hierarchy.  This includes groups,
//               joints, polygons, vertex pools, etc., but does not
//               include things like vertices.
////////////////////////////////////////////////////////////////////

1966 11 EggAnimData 0 141313 11 EggAnimData 11 EggAnimData 0 0 0 0 1064 0 10 1054 1055 1056 1057 1058 1059 1060 1061 1062 1063 0 0 1 0 1965 0 0 0 0 293
////////////////////////////////////////////////////////////////////
//       Class : EggAnimData
// Description : A base class for EggSAnimData and EggXfmAnimData,
//               which contain rows and columns of numbers.
////////////////////////////////////////////////////////////////////

1967 14 EggAnimPreload 0 141313 14 EggAnimPreload 14 EggAnimPreload 0 0 0 1 1065 1076 0 10 1066 1067 1068 1069 1070 1071 1072 1073 1074 1075 0 0 1 0 1965 0 0 0 0 230
////////////////////////////////////////////////////////////////////
//       Class : EggAnimPreload
// Description : This corresponds to an <AnimPreload> entry.
////////////////////////////////////////////////////////////////////

1968 13 EggAttributes 0 26625 13 EggAttributes 13 EggAttributes 0 0 0 1 1079 1081 2 2315 2316 18 1080 1082 1083 1084 1085 1086 1087 1088 1089 1090 1091 1092 1093 1094 1095 1096 1097 1100 0 0 1 3 1969 1077 1078 0 0 606
////////////////////////////////////////////////////////////////////
//       Class : EggAttributes
// Description : The set of attributes that may be applied to vertices
//               as well as polygons, such as surface normal and
//               color.
//
//               This class cannot inherit from EggObject, because it
//               causes problems at the EggPolygon level with multiple
//               appearances of the EggObject base class.  And making
//               EggObject a virtual base class is just no fun.
////////////////////////////////////////////////////////////////////

1969 10 MemoryBase 0 2049 10 MemoryBase 10 MemoryBase 0 0 0 0 0 0 0 0 0 0 0 0 704
////////////////////////////////////////////////////////////////////
//       Class : MemoryBase
// Description : This class is intended to be the base class of all
//               objects in Panda that might be allocated and deleted
//               via the new and delete operators.  It redefines these
//               operators to provide some memory tracking support.
//
//               We used to try to override the global operator new
//               and delete methods, but that seems to cause problems
//               when including header files for C++-based system
//               libraries (such as are found on OSX).
////////////////////////////////////////////////////////////////////

1970 18 EggMorphNormalList 0 2105344 18 EggMorphNormalList 18 EggMorphNormalList 0 0 1971 0 0 0 0 0 0 0 0 0 0

1971 30 EggMorphList< EggMorphNormal > 0 1050624 30 EggMorphList< EggMorphNormal > 30 EggMorphList< EggMorphNormal > 0 0 0 0 0 0 0 0 0 0 0 0 0

1972 17 EggMorphColorList 0 2105344 17 EggMorphColorList 17 EggMorphColorList 0 0 1973 0 0 0 0 0 0 0 0 0 0

1973 29 EggMorphList< EggMorphColor > 0 1050624 29 EggMorphList< EggMorphColor > 29 EggMorphList< EggMorphColor > 0 0 0 0 0 0 0 0 0 0 0 0 0

1974 11 EggVertexUV 0 75777 11 EggVertexUV 11 EggVertexUV 0 0 0 1 1101 1014 1 2317 22 1102 1103 1104 1105 1106 1107 1108 1109 1110 1111 1112 1113 1114 1115 1116 1117 1118 1119 1120 1121 1122 1124 0 0 1 0 1963 0 0 0 0 406
////////////////////////////////////////////////////////////////////
//       Class : EggVertexUV
// Description : The set of UV's that may or may not be assigned to a
//               vertex.  To support multitexturing, there may be
//               multiple sets of UV's on a particular vertex, each
//               with its own name.
////////////////////////////////////////////////////////////////////

1975 20 EggMorphTexCoordList 0 2105344 20 EggMorphTexCoordList 20 EggMorphTexCoordList 0 0 1976 0 0 0 0 0 0 0 0 0 0

1976 32 EggMorphList< EggMorphTexCoord > 0 1050624 32 EggMorphList< EggMorphTexCoord > 32 EggMorphList< EggMorphTexCoord > 0 0 0 0 0 0 0 0 0 0 0 0 0

1977 12 EggVertexAux 0 75777 12 EggVertexAux 12 EggVertexAux 0 0 0 1 1125 1014 0 8 1126 1127 1128 1129 1130 1131 1132 1133 0 0 1 0 1963 0 0 0 0 500
////////////////////////////////////////////////////////////////////
//       Class : EggVertexAux
// Description : The set of named auxiliary data that may or may not
//               be assigned to a vertex.  Panda will import this data
//               and create a custom column for it in the vertex data,
//               but will not otherwise interpret it.  Presumably, a
//               shader will process the data later.
////////////////////////////////////////////////////////////////////

1978 9 EggVertex 0 26625 9 EggVertex 9 EggVertex 0 0 0 1 1138 1140 1 2318 47 1139 1141 1142 1143 1144 1145 1146 1147 1148 1149 1150 1151 1152 1153 1154 1155 1156 1157 1158 1159 1160 1161 1162 1163 1164 1165 1166 1167 1168 1169 1170 1171 1172 1173 1174 1175 1176 1177 1178 1179 1180 1181 1182 1183 1184 1185 1187 0 0 2 3 1962 1134 1135 3 1968 1136 1137 0 0 291
////////////////////////////////////////////////////////////////////
//       Class : EggVertex
// Description : Any one-, two-, three-, or four-component vertex,
//               possibly with attributes such as a normal.
////////////////////////////////////////////////////////////////////

1979 18 EggMorphVertexList 0 2105344 18 EggMorphVertexList 18 EggMorphVertexList 0 0 1980 0 0 0 0 0 0 0 0 0 0

1980 30 EggMorphList< EggMorphVertex > 0 1050624 30 EggMorphList< EggMorphVertex > 30 EggMorphList< EggMorphVertex > 0 0 0 0 0 0 0 0 0 0 0 0 0

1981 13 EggVertexPool 0 75777 13 EggVertexPool 13 EggVertexPool 0 0 0 1 1188 1053 0 28 1189 1190 1191 1192 1193 1194 1195 1196 1197 1198 1199 1200 1201 1202 1203 1204 1205 1206 1207 1208 1209 1210 1211 1212 1213 1214 1215 1216 0 0 1 0 1965 0 0 0 0 876
////////////////////////////////////////////////////////////////////
//       Class : EggVertexPool
// Description : A collection of vertices.  There may be any number of
//               vertex pools in a single egg structure.  The vertices
//               in a single pool need not necessarily have any
//               connection to each other, but it is necessary that
//               any one primitive (e.g. a polygon) must pull all its
//               vertices from the same pool.
//
//               An EggVertexPool is an STL-style container of
//               pointers to EggVertex's.  Functions add_vertex() and
//               remove_vertex() are provided to manipulate the list.
//               The list may also be operated on (read-only) via
//               iterators and begin()/end().
////////////////////////////////////////////////////////////////////

1982 12 EggGroupNode 0 75777 12 EggGroupNode 12 EggGroupNode 0 0 0 1 1217 1053 0 37 1218 1219 1220 1221 1222 1223 1224 1225 1226 1227 1228 1229 1230 1231 1232 1233 1234 1235 1236 1237 1238 1239 1240 1241 1242 1243 1244 1245 1246 1247 1248 1249 1250 1251 1252 1253 1254 0 0 1 0 1965 0 0 0 1 1983 712
////////////////////////////////////////////////////////////////////
//       Class : EggGroupNode
// Description : A base class for nodes in the hierarchy that are not
//               leaf nodes.  (See also EggGroup, which is
//               specifically the "<Group>" node in egg.)
//
//               An EggGroupNode is an STL-style container of pointers
//               to EggNodes, like a vector.  Functions
//               push_back()/pop_back() and insert()/erase() are
//               provided to manipulate the list.  The list may also
//               be operated on (read-only) via iterators and
//               begin()/end().
////////////////////////////////////////////////////////////////////

1983 16 TriangulateFlags 0 794624 30 EggGroupNode::TriangulateFlags 30 EggGroupNode::TriangulateFlags 1982 0 0 0 0 0 0 0 0 0 5 9 T_polygon 23 EggGroupNode::T_polygon 0
1 8 T_convex 22 EggGroupNode::T_convex 0
2 11 T_composite 25 EggGroupNode::T_composite 0
4 9 T_recurse 23 EggGroupNode::T_recurse 0
8 13 T_flat_shaded 27 EggGroupNode::T_flat_shaded 0
16 0 0

1984 13 EggRenderMode 0 141313 13 EggRenderMode 13 EggRenderMode 0 0 0 1 1255 1286 0 30 1256 1257 1258 1259 1260 1261 1262 1263 1264 1265 1266 1267 1268 1269 1270 1271 1272 1273 1274 1275 1276 1277 1278 1279 1280 1281 1282 1283 1284 1285 0 0 0 0 4 1985 1986 1987 1988 827
////////////////////////////////////////////////////////////////////
//       Class : EggRenderMode
// Description : This class stores miscellaneous rendering properties
//               that is associated with geometry, and which may be
//               set on the geometry primitive level, on the group
//               above it, or indirectly via a texture.  It's intended
//               to be a base class for egg objects that can have
//               these properties set.
//
//               This class cannot inherit from EggObject, because it
//               causes problems at the EggPolygon level with multiple
//               appearances of the EggObject base class.  And making
//               EggObject a virtual base class is just no fun.
////////////////////////////////////////////////////////////////////

1985 9 AlphaMode 0 794624 24 EggRenderMode::AlphaMode 24 EggRenderMode::AlphaMode 1984 0 0 0 0 0 0 0 0 0 9 14 AM_unspecified 29 EggRenderMode::AM_unspecified 0
0 6 AM_off 21 EggRenderMode::AM_off 19
// No transparency.
1 5 AM_on 20 EggRenderMode::AM_on 37
// Use whatever the default model is.
2 8 AM_blend 23 EggRenderMode::AM_blend 59
// Normal alpha blending, e.g. TransparencyAttrib::M_alpha.
3 19 AM_blend_no_occlude 34 EggRenderMode::AM_blend_no_occlude 34
// Alpha blending w/o depth write.
4 5 AM_ms 20 EggRenderMode::AM_ms 36
// TransparencyAttrib::M_multisample
5 10 AM_ms_mask 25 EggRenderMode::AM_ms_mask 41
// TransparencyAttrib::M_multisample_mask
6 9 AM_binary 24 EggRenderMode::AM_binary 31
// TransparencyAttrib::M_binary
7 7 AM_dual 22 EggRenderMode::AM_dual 29
// TransparencyAttrib::M_dual
8 0 44
// Specifies implementation of transparency.

1986 14 DepthWriteMode 0 794624 29 EggRenderMode::DepthWriteMode 29 EggRenderMode::DepthWriteMode 1984 0 0 0 0 0 0 0 0 0 3 15 DWM_unspecified 30 EggRenderMode::DWM_unspecified 0
0 7 DWM_off 22 EggRenderMode::DWM_off 0
1 6 DWM_on 21 EggRenderMode::DWM_on 0
2 0 0

1987 13 DepthTestMode 0 794624 28 EggRenderMode::DepthTestMode 28 EggRenderMode::DepthTestMode 1984 0 0 0 0 0 0 0 0 0 3 15 DTM_unspecified 30 EggRenderMode::DTM_unspecified 0
0 7 DTM_off 22 EggRenderMode::DTM_off 0
1 6 DTM_on 21 EggRenderMode::DTM_on 0
2 0 0

1988 14 VisibilityMode 0 794624 29 EggRenderMode::VisibilityMode 29 EggRenderMode::VisibilityMode 1984 0 0 0 0 0 0 0 0 0 3 14 VM_unspecified 29 EggRenderMode::VM_unspecified 0
0 9 VM_hidden 24 EggRenderMode::VM_hidden 0
1 9 VM_normal 24 EggRenderMode::VM_normal 0
2 0 0

1989 12 EggTransform 0 26625 12 EggTransform 12 EggTransform 0 0 0 1 1287 1289 0 30 1288 1290 1291 1292 1293 1294 1295 1296 1297 1298 1299 1300 1301 1302 1303 1304 1305 1306 1307 1308 1309 1310 1311 1312 1313 1314 1315 1316 1317 1318 0 0 0 0 1 1990 579
////////////////////////////////////////////////////////////////////
//       Class : EggTransform
// Description : This represents the <Transform> entry of a group
//               or texture node: a list of component transform
//               operations, applied in order, that describe a net
//               transform matrix.  
//
//               This may be either a 3-d transform, and therefore
//               described by a 4x4 matrix, or a 2-d transform,
//               described by a 3x3 matrix.
////////////////////////////////////////////////////////////////////

1990 13 ComponentType 0 794624 27 EggTransform::ComponentType 27 EggTransform::ComponentType 1989 0 0 0 0 0 0 0 0 0 13 10 CT_invalid 24 EggTransform::CT_invalid 0
0 14 CT_translate2d 28 EggTransform::CT_translate2d 0
1 14 CT_translate3d 28 EggTransform::CT_translate3d 0
2 11 CT_rotate2d 25 EggTransform::CT_rotate2d 0
3 7 CT_rotx 21 EggTransform::CT_rotx 0
4 7 CT_roty 21 EggTransform::CT_roty 0
5 7 CT_rotz 21 EggTransform::CT_rotz 0
6 11 CT_rotate3d 25 EggTransform::CT_rotate3d 0
7 10 CT_scale2d 24 EggTransform::CT_scale2d 0
8 10 CT_scale3d 24 EggTransform::CT_scale3d 0
9 16 CT_uniform_scale 30 EggTransform::CT_uniform_scale 0
10 10 CT_matrix3 24 EggTransform::CT_matrix3 0
11 10 CT_matrix4 24 EggTransform::CT_matrix4 0
12 0 0

1991 18 EggSwitchCondition 0 141313 18 EggSwitchCondition 18 EggSwitchCondition 0 0 0 0 1323 0 4 1319 1320 1321 1322 0 0 1 0 1962 0 0 0 0 610
////////////////////////////////////////////////////////////////////
//       Class : EggSwitchCondition
// Description : This corresponds to a <SwitchCondition> entry within
//               a group.  It indicates the condition at which a
//               level-of-detail is switched in or out.  This is
//               actually an abstract base class for potentially any
//               number of specific different kinds of switching
//               conditions; presently, only a <Distance> type is
//               actually supported.
////////////////////////////////////////////////////////////////////

1992 26 EggSwitchConditionDistance 0 141313 26 EggSwitchConditionDistance 26 EggSwitchConditionDistance 0 0 0 1 1324 1326 0 1 1325 0 0 1 0 1991 0 0 0 0 314
////////////////////////////////////////////////////////////////////
//       Class : EggSwitchConditionDistance
// Description : A SwitchCondition that switches the levels-of-detail
//               based on distance from the camera's eyepoint.
////////////////////////////////////////////////////////////////////

1993 8 EggGroup 0 26625 8 EggGroup 8 EggGroup 0 0 0 1 1333 1335 0 136 1334 1336 1337 1338 1339 1340 1341 1342 1343 1344 1345 1346 1347 1348 1349 1350 1351 1352 1353 1354 1355 1356 1357 1358 1359 1360 1361 1362 1363 1364 1365 1366 1367 1368 1369 1370 1371 1372 1373 1374 1375 1376 1377 1378 1379 1380 1381 1382 1383 1384 1385 1386 1387 1388 1389 1390 1391 1392 1393 1394 1395 1396 1397 1398 1399 1400 1401 1402 1403 1404 1405 1406 1407 1408 1409 1410 1411 1412 1413 1414 1415 1416 1417 1418 1419 1420 1421 1422 1423 1424 1425 1426 1427 1428 1429 1430 1431 1432 1433 1434 1435 1436 1437 1438 1439 1440 1441 1442 1443 1444 1445 1446 1447 1448 1449 1450 1451 1452 1453 1454 1455 1456 1457 1458 1459 1460 1461 1462 1463 1464 1465 1466 1467 1468 1469 1470 2 2319 2320 0 3 3 1982 1327 1328 3 1984 1329 1330 3 1989 1331 1332 0 10 1994 1996 1998 1999 2000 2001 2002 2003 2004 2005 302
////////////////////////////////////////////////////////////////////
//       Class : EggGroup
// Description : The main glue of the egg hierarchy, this corresponds
//               to the <Group>, <Instance>, and <Joint> type nodes.
////////////////////////////////////////////////////////////////////

1994 9 VertexRef 0 2367488 19 EggGroup::VertexRef 19 EggGroup::VertexRef 1993 0 1995 0 0 0 0 0 0 0 0 0 0

1995 27 map< PT_EggVertex, double > 0 2048 27 map< PT_EggVertex, double > 27 map< PT_EggVertex, double > 0 0 0 0 0 0 0 0 0 0 0 0 0

1996 7 TagData 0 2367488 17 EggGroup::TagData 17 EggGroup::TagData 1993 0 1997 0 0 0 0 0 0 0 0 0 0

1997 21 map< string, string > 0 2048 21 map< string, string > 21 map< string, string > 0 0 0 0 0 0 0 0 0 0 0 0 0

1998 9 GroupType 0 794624 19 EggGroup::GroupType 19 EggGroup::GroupType 1993 0 0 0 0 0 0 0 0 0 4 10 GT_invalid 20 EggGroup::GT_invalid 58
// The bits here must correspond to those in Flags, below.
-1 8 GT_group 18 EggGroup::GT_group 0
0 11 GT_instance 21 EggGroup::GT_instance 0
1 8 GT_joint 18 EggGroup::GT_joint 0
2 0 49
// These bits are all stored somewhere in _flags.

1999 7 DCSType 0 794624 17 EggGroup::DCSType 17 EggGroup::DCSType 1993 0 0 0 0 0 0 0 0 0 6 14 DC_unspecified 24 EggGroup::DC_unspecified 59
// The bits here must correspond to those in Flags2, below.
0 7 DC_none 17 EggGroup::DC_none 0
16 8 DC_local 18 EggGroup::DC_local 0
32 6 DC_net 16 EggGroup::DC_net 0
48 11 DC_no_touch 21 EggGroup::DC_no_touch 0
64 10 DC_default 20 EggGroup::DC_default 0
80 0 0

2000 13 BillboardType 0 794624 23 EggGroup::BillboardType 23 EggGroup::BillboardType 1993 0 0 0 0 0 0 0 0 0 4 7 BT_none 17 EggGroup::BT_none 58
// The bits here must correspond to those in Flags, below.
0 7 BT_axis 17 EggGroup::BT_axis 0
32 24 BT_point_camera_relative 34 EggGroup::BT_point_camera_relative 0
64 23 BT_point_world_relative 33 EggGroup::BT_point_world_relative 0
128 0 0

2001 18 CollisionSolidType 0 794624 28 EggGroup::CollisionSolidType 28 EggGroup::CollisionSolidType 1993 0 0 0 0 0 0 0 0 0 9 8 CST_none 18 EggGroup::CST_none 97
// The bits here must correspond to those in Flags, below, and
// they must fit within F_cs_type.
0 9 CST_plane 19 EggGroup::CST_plane 0
65536 11 CST_polygon 21 EggGroup::CST_polygon 0
131072 11 CST_polyset 21 EggGroup::CST_polyset 0
196608 10 CST_sphere 20 EggGroup::CST_sphere 0
262144 8 CST_tube 18 EggGroup::CST_tube 0
327680 14 CST_inv_sphere 24 EggGroup::CST_inv_sphere 0
393216 7 CST_box 17 EggGroup::CST_box 0
458752 14 CST_floor_mesh 24 EggGroup::CST_floor_mesh 0
524288 0 0

2002 12 CollideFlags 0 794624 22 EggGroup::CollideFlags 22 EggGroup::CollideFlags 1993 0 0 0 0 0 0 0 0 0 9 7 CF_none 17 EggGroup::CF_none 103
// The bits here must correspond to those in Flags, below, and
// they must fit within F_collide_flags.
0 10 CF_descend 20 EggGroup::CF_descend 0
1048576 8 CF_event 18 EggGroup::CF_event 0
2097152 7 CF_keep 17 EggGroup::CF_keep 0
4194304 8 CF_solid 18 EggGroup::CF_solid 0
8388608 9 CF_center 19 EggGroup::CF_center 0
16777216 12 CF_turnstile 22 EggGroup::CF_turnstile 0
33554432 8 CF_level 18 EggGroup::CF_level 0
67108864 13 CF_intangible 23 EggGroup::CF_intangible 0
134217728 0 0

2003 8 DartType 0 794624 18 EggGroup::DartType 18 EggGroup::DartType 1993 0 0 0 0 0 0 0 0 0 5 7 DT_none 17 EggGroup::DT_none 58
// The bits here must correspond to those in Flags, below.
0 13 DT_structured 23 EggGroup::DT_structured 0
268435456 7 DT_sync 17 EggGroup::DT_sync 0
536870912 9 DT_nosync 19 EggGroup::DT_nosync 0
805306368 10 DT_default 20 EggGroup::DT_default 0
1073741824 0 0

2004 9 BlendMode 0 794624 19 EggGroup::BlendMode 19 EggGroup::BlendMode 1993 0 0 0 0 0 0 0 0 0 7 14 BM_unspecified 24 EggGroup::BM_unspecified 0
0 7 BM_none 17 EggGroup::BM_none 0
1 6 BM_add 16 EggGroup::BM_add 0
2 11 BM_subtract 21 EggGroup::BM_subtract 0
3 15 BM_inv_subtract 25 EggGroup::BM_inv_subtract 0
4 6 BM_min 16 EggGroup::BM_min 0
5 6 BM_max 16 EggGroup::BM_max 0
6 0 68
// These correspond to ColorBlendAttrib::Mode (but not numerically).

2005 12 BlendOperand 0 794624 22 EggGroup::BlendOperand 22 EggGroup::BlendOperand 1993 0 0 0 0 0 0 0 0 0 20 14 BO_unspecified 24 EggGroup::BO_unspecified 0
0 7 BO_zero 17 EggGroup::BO_zero 0
1 6 BO_one 16 EggGroup::BO_one 0
2 17 BO_incoming_color 27 EggGroup::BO_incoming_color 0
3 27 BO_one_minus_incoming_color 37 EggGroup::BO_one_minus_incoming_color 0
4 16 BO_fbuffer_color 26 EggGroup::BO_fbuffer_color 0
5 26 BO_one_minus_fbuffer_color 36 EggGroup::BO_one_minus_fbuffer_color 0
6 17 BO_incoming_alpha 27 EggGroup::BO_incoming_alpha 0
7 27 BO_one_minus_incoming_alpha 37 EggGroup::BO_one_minus_incoming_alpha 0
8 16 BO_fbuffer_alpha 26 EggGroup::BO_fbuffer_alpha 0
9 26 BO_one_minus_fbuffer_alpha 36 EggGroup::BO_one_minus_fbuffer_alpha 0
10 17 BO_constant_color 27 EggGroup::BO_constant_color 0
11 27 BO_one_minus_constant_color 37 EggGroup::BO_one_minus_constant_color 0
12 17 BO_constant_alpha 27 EggGroup::BO_constant_alpha 0
13 27 BO_one_minus_constant_alpha 37 EggGroup::BO_one_minus_constant_alpha 0
14 26 BO_incoming_color_saturate 36 EggGroup::BO_incoming_color_saturate 0
15 14 BO_color_scale 24 EggGroup::BO_color_scale 0
16 24 BO_one_minus_color_scale 34 EggGroup::BO_one_minus_color_scale 0
17 14 BO_alpha_scale 24 EggGroup::BO_alpha_scale 0
18 24 BO_one_minus_alpha_scale 34 EggGroup::BO_one_minus_alpha_scale 0
19 0 71
// These correspond to ColorBlendAttrib::Operand (but not numerically).

2006 6 EggBin 0 141313 6 EggBin 6 EggBin 0 0 0 1 1471 1475 0 3 1472 1473 1474 0 0 1 0 1993 0 0 0 0 462
////////////////////////////////////////////////////////////////////
//       Class : EggBin
// Description : A type of group node that holds related subnodes.
//               This is a special kind of node that will never be
//               read in from an egg file, but can only exist in the
//               egg scene graph if it is created via the use of an
//               EggBinMaker.
////////////////////////////////////////////////////////////////////

2007 11 EggBinMaker 0 75777 11 EggBinMaker 11 EggBinMaker 0 0 0 0 0 0 8 1476 1477 1478 1479 1480 1481 1482 1483 0 0 1 0 1962 0 0 0 0 401
////////////////////////////////////////////////////////////////////
//       Class : EggBinMaker
// Description : This is a handy class for collecting related nodes
//               together.  It is an abstract class; to use it you
//               must subclass off of it.  See the somewhat lengthy
//               comment above.
////////////////////////////////////////////////////////////////////

2008 10 EggComment 0 141313 10 EggComment 10 EggComment 0 0 0 1 1484 1490 0 4 1485 1487 1488 1489 0 1 1486 1 0 1965 0 0 0 0 263
////////////////////////////////////////////////////////////////////
//       Class : EggComment
// Description : A comment that appears in an egg file within a
//               <Comment> entry.
////////////////////////////////////////////////////////////////////

2009 15 EggFilenameNode 0 141313 15 EggFilenameNode 15 EggFilenameNode 0 0 0 0 1498 0 7 1491 1492 1493 1494 1495 1496 1497 0 0 1 0 1965 0 0 0 0 430
////////////////////////////////////////////////////////////////////
//       Class : EggFilenameNode
// Description : This is an egg node that contains a filename.  It
//               references a physical file relative to the directory
//               the egg file was loaded in.  It is a base class for
//               EggTexture and EggExternalReference.
////////////////////////////////////////////////////////////////////

2010 10 EggTexture 0 26625 10 EggTexture 10 EggTexture 0 0 0 1 1505 1507 0 118 1506 1508 1509 1510 1511 1512 1513 1514 1515 1516 1517 1518 1519 1520 1521 1522 1523 1524 1525 1526 1527 1528 1529 1530 1531 1532 1533 1534 1535 1536 1537 1538 1539 1540 1541 1542 1543 1544 1545 1546 1547 1548 1549 1550 1551 1552 1553 1554 1555 1556 1557 1558 1559 1560 1561 1562 1563 1564 1565 1566 1567 1568 1569 1570 1571 1572 1573 1574 1575 1576 1577 1578 1579 1580 1581 1582 1583 1584 1585 1586 1587 1588 1589 1590 1591 1592 1593 1594 1595 1596 1597 1598 1599 1600 1601 1602 1603 1604 1605 1606 1607 1608 1609 1610 1611 1612 1613 1614 1615 1616 1617 1618 1619 1620 1621 1622 1623 1624 0 0 3 3 2009 1499 1500 3 1984 1501 1502 3 1989 1503 1504 0 14 2011 2012 2013 2014 2015 2016 2017 2018 2019 2020 2021 2022 2023 2024 254
////////////////////////////////////////////////////////////////////
//       Class : EggTexture
// Description : Defines a texture map that may be applied to
//               geometry.
////////////////////////////////////////////////////////////////////

2011 11 Equivalence 0 794624 23 EggTexture::Equivalence 23 EggTexture::Equivalence 2010 0 0 0 0 0 0 0 0 0 7 10 E_basename 22 EggTexture::E_basename 0
1 11 E_extension 23 EggTexture::E_extension 0
2 9 E_dirname 21 EggTexture::E_dirname 0
4 19 E_complete_filename 31 EggTexture::E_complete_filename 0
7 11 E_transform 23 EggTexture::E_transform 0
8 12 E_attributes 24 EggTexture::E_attributes 0
16 11 E_tref_name 23 EggTexture::E_tref_name 0
32 0 0

2012 11 TextureType 0 794624 23 EggTexture::TextureType 23 EggTexture::TextureType 2010 0 0 0 0 0 0 0 0 0 5 14 TT_unspecified 26 EggTexture::TT_unspecified 0
0 13 TT_1d_texture 25 EggTexture::TT_1d_texture 0
1 13 TT_2d_texture 25 EggTexture::TT_2d_texture 0
2 13 TT_3d_texture 25 EggTexture::TT_3d_texture 0
3 11 TT_cube_map 23 EggTexture::TT_cube_map 0
4 0 0

2013 6 Format 0 794624 18 EggTexture::Format 18 EggTexture::Format 2010 0 0 0 0 0 0 0 0 0 19 13 F_unspecified 25 EggTexture::F_unspecified 0
0 6 F_rgba 18 EggTexture::F_rgba 0
1 6 F_rgbm 18 EggTexture::F_rgbm 0
2 8 F_rgba12 20 EggTexture::F_rgba12 0
3 7 F_rgba8 19 EggTexture::F_rgba8 0
4 7 F_rgba4 19 EggTexture::F_rgba4 0
5 7 F_rgba5 19 EggTexture::F_rgba5 0
6 5 F_rgb 17 EggTexture::F_rgb 0
7 7 F_rgb12 19 EggTexture::F_rgb12 0
8 6 F_rgb8 18 EggTexture::F_rgb8 0
9 6 F_rgb5 18 EggTexture::F_rgb5 0
10 8 F_rgb332 20 EggTexture::F_rgb332 0
11 5 F_red 17 EggTexture::F_red 0
12 7 F_green 19 EggTexture::F_green 0
13 6 F_blue 18 EggTexture::F_blue 0
14 7 F_alpha 19 EggTexture::F_alpha 0
15 11 F_luminance 23 EggTexture::F_luminance 0
16 17 F_luminance_alpha 29 EggTexture::F_luminance_alpha 0
17 21 F_luminance_alphamask 33 EggTexture::F_luminance_alphamask 0
18 0 0

2014 15 CompressionMode 0 794624 27 EggTexture::CompressionMode 27 EggTexture::CompressionMode 2010 0 0 0 0 0 0 0 0 0 9 10 CM_default 22 EggTexture::CM_default 0
0 6 CM_off 18 EggTexture::CM_off 0
1 5 CM_on 17 EggTexture::CM_on 0
2 7 CM_fxt1 19 EggTexture::CM_fxt1 0
3 7 CM_dxt1 19 EggTexture::CM_dxt1 0
4 7 CM_dxt2 19 EggTexture::CM_dxt2 0
5 7 CM_dxt3 19 EggTexture::CM_dxt3 0
6 7 CM_dxt4 19 EggTexture::CM_dxt4 0
7 7 CM_dxt5 19 EggTexture::CM_dxt5 0
8 0 0

2015 8 WrapMode 0 794624 20 EggTexture::WrapMode 20 EggTexture::WrapMode 2010 0 0 0 0 0 0 0 0 0 6 14 WM_unspecified 26 EggTexture::WM_unspecified 0
0 8 WM_clamp 20 EggTexture::WM_clamp 0
1 9 WM_repeat 21 EggTexture::WM_repeat 0
2 9 WM_mirror 21 EggTexture::WM_mirror 0
3 14 WM_mirror_once 26 EggTexture::WM_mirror_once 0
4 15 WM_border_color 27 EggTexture::WM_border_color 0
5 0 0

2016 10 FilterType 0 794624 22 EggTexture::FilterType 22 EggTexture::FilterType 2010 0 0 0 0 0 0 0 0 0 7 14 FT_unspecified 26 EggTexture::FT_unspecified 225
// Note that these type values match up, name-for-name, with a
// similar enumerated type in Panda's Texture object.  However,
// they do *not* match up numerically.  You must convert between
// them using a switch statement.
0 10 FT_nearest 22 EggTexture::FT_nearest 28
// Mag Filter and Min Filter
1 9 FT_linear 21 EggTexture::FT_linear 0
2 25 FT_nearest_mipmap_nearest 37 EggTexture::FT_nearest_mipmap_nearest 17
// "mipmap point"
3 24 FT_linear_mipmap_nearest 36 EggTexture::FT_linear_mipmap_nearest 18
// "mipmap linear"
4 24 FT_nearest_mipmap_linear 36 EggTexture::FT_nearest_mipmap_linear 20
// "mipmap bilinear"
5 23 FT_linear_mipmap_linear 35 EggTexture::FT_linear_mipmap_linear 21
// "mipmap trilinear"
6 0 0

2017 7 EnvType 0 794624 19 EggTexture::EnvType 19 EggTexture::EnvType 2010 0 0 0 0 0 0 0 0 0 16 14 ET_unspecified 26 EggTexture::ET_unspecified 0
0 11 ET_modulate 23 EggTexture::ET_modulate 0
1 8 ET_decal 20 EggTexture::ET_decal 0
2 8 ET_blend 20 EggTexture::ET_blend 0
3 10 ET_replace 22 EggTexture::ET_replace 0
4 6 ET_add 18 EggTexture::ET_add 0
5 20 ET_blend_color_scale 32 EggTexture::ET_blend_color_scale 0
6 16 ET_modulate_glow 28 EggTexture::ET_modulate_glow 0
7 17 ET_modulate_gloss 29 EggTexture::ET_modulate_gloss 0
8 9 ET_normal 21 EggTexture::ET_normal 0
9 16 ET_normal_height 28 EggTexture::ET_normal_height 0
10 7 ET_glow 19 EggTexture::ET_glow 0
11 8 ET_gloss 20 EggTexture::ET_gloss 0
12 9 ET_height 21 EggTexture::ET_height 0
13 11 ET_selector 23 EggTexture::ET_selector 0
14 15 ET_normal_gloss 27 EggTexture::ET_normal_gloss 0
15 0 0

2018 11 CombineMode 0 794624 23 EggTexture::CombineMode 23 EggTexture::CombineMode 2010 0 0 0 0 0 0 0 0 0 9 14 CM_unspecified 26 EggTexture::CM_unspecified 0
0 10 CM_replace 22 EggTexture::CM_replace 0
1 11 CM_modulate 23 EggTexture::CM_modulate 0
2 6 CM_add 18 EggTexture::CM_add 0
3 13 CM_add_signed 25 EggTexture::CM_add_signed 0
4 14 CM_interpolate 26 EggTexture::CM_interpolate 0
5 11 CM_subtract 23 EggTexture::CM_subtract 0
6 11 CM_dot3_rgb 23 EggTexture::CM_dot3_rgb 0
7 12 CM_dot3_rgba 24 EggTexture::CM_dot3_rgba 0
8 0 0

2019 14 CombineChannel 0 794624 26 EggTexture::CombineChannel 26 EggTexture::CombineChannel 2010 0 0 0 0 0 0 0 0 0 3 6 CC_rgb 18 EggTexture::CC_rgb 0
0 8 CC_alpha 20 EggTexture::CC_alpha 0
1 15 CC_num_channels 27 EggTexture::CC_num_channels 0
2 0 0

2020 12 CombineIndex 0 794624 24 EggTexture::CombineIndex 24 EggTexture::CombineIndex 2010 0 0 0 0 0 0 0 0 0 1 14 CI_num_indices 26 EggTexture::CI_num_indices 0
3 0 0

2021 13 CombineSource 0 794624 25 EggTexture::CombineSource 25 EggTexture::CombineSource 2010 0 0 0 0 0 0 0 0 0 7 14 CS_unspecified 26 EggTexture::CS_unspecified 0
0 10 CS_texture 22 EggTexture::CS_texture 0
1 11 CS_constant 23 EggTexture::CS_constant 0
2 16 CS_primary_color 28 EggTexture::CS_primary_color 0
3 11 CS_previous 23 EggTexture::CS_previous 0
4 23 CS_constant_color_scale 35 EggTexture::CS_constant_color_scale 0
5 20 CS_last_saved_result 32 EggTexture::CS_last_saved_result 0
6 0 0

2022 14 CombineOperand 0 794624 26 EggTexture::CombineOperand 26 EggTexture::CombineOperand 2010 0 0 0 0 0 0 0 0 0 5 14 CO_unspecified 26 EggTexture::CO_unspecified 0
0 12 CO_src_color 24 EggTexture::CO_src_color 0
1 22 CO_one_minus_src_color 34 EggTexture::CO_one_minus_src_color 0
2 12 CO_src_alpha 24 EggTexture::CO_src_alpha 0
3 22 CO_one_minus_src_alpha 34 EggTexture::CO_one_minus_src_alpha 0
4 0 0

2023 6 TexGen 0 794624 18 EggTexture::TexGen 18 EggTexture::TexGen 2010 0 0 0 0 0 0 0 0 0 9 14 TG_unspecified 26 EggTexture::TG_unspecified 0
0 17 TG_eye_sphere_map 29 EggTexture::TG_eye_sphere_map 0
1 17 TG_world_cube_map 29 EggTexture::TG_world_cube_map 0
2 15 TG_eye_cube_map 27 EggTexture::TG_eye_cube_map 0
3 15 TG_world_normal 27 EggTexture::TG_world_normal 0
4 13 TG_eye_normal 25 EggTexture::TG_eye_normal 0
5 17 TG_world_position 29 EggTexture::TG_world_position 0
6 15 TG_eye_position 27 EggTexture::TG_eye_position 0
7 15 TG_point_sprite 27 EggTexture::TG_point_sprite 0
8 0 0

2024 12 QualityLevel 0 794624 24 EggTexture::QualityLevel 24 EggTexture::QualityLevel 2010 0 0 0 0 0 0 0 0 0 5 14 QL_unspecified 26 EggTexture::QL_unspecified 0
0 10 QL_default 22 EggTexture::QL_default 0
1 10 QL_fastest 22 EggTexture::QL_fastest 0
2 9 QL_normal 21 EggTexture::QL_normal 0
3 7 QL_best 19 EggTexture::QL_best 0
4 0 0

2025 11 EggMaterial 0 141313 11 EggMaterial 11 EggMaterial 0 0 0 1 1625 1653 0 27 1626 1627 1628 1629 1630 1631 1632 1633 1634 1635 1636 1637 1638 1639 1640 1641 1642 1643 1644 1645 1646 1647 1648 1649 1650 1651 1652 0 0 1 0 1965 0 0 0 1 2026 183
////////////////////////////////////////////////////////////////////
//       Class : EggMaterial
// Description :
////////////////////////////////////////////////////////////////////

2026 11 Equivalence 0 794624 24 EggMaterial::Equivalence 24 EggMaterial::Equivalence 2025 0 0 0 0 0 0 0 0 0 2 12 E_attributes 25 EggMaterial::E_attributes 0
1 11 E_mref_name 24 EggMaterial::E_mref_name 0
2 0 0

2027 12 EggPrimitive 0 26625 12 EggPrimitive 12 EggPrimitive 0 0 0 0 1661 0 49 1660 1662 1663 1664 1665 1666 1667 1668 1669 1670 1671 1672 1673 1674 1675 1676 1677 1678 1679 1680 1681 1682 1683 1684 1685 1686 1687 1688 1689 1690 1691 1692 1693 1694 1695 1696 1697 1698 1699 1700 1701 1702 1703 1704 1705 1706 1707 1708 1709 2 2321 2322 0 3 3 1965 1654 1655 3 1968 1656 1657 3 1984 1658 1659 0 1 2028 754
////////////////////////////////////////////////////////////////////
//       Class : EggPrimitive
// Description : A base class for any of a number of kinds of geometry
//               primitives: polygons, point lights, nurbs patches,
//               parametrics curves, etc.  Things with a set of
//               vertices and some rendering properties like color.
//
//               An EggPrimitive is an STL-style container of pointers
//               to EggVertex's.  In fact, it IS a vector, and can be
//               manipulated in all the ways that vectors can.
//               However, it is necessary that all vertices belong to
//               the same vertex pool.
////////////////////////////////////////////////////////////////////

2028 7 Shading 0 794624 21 EggPrimitive::Shading 21 EggPrimitive::Shading 2027 0 0 0 0 0 0 0 0 0 4 9 S_unknown 23 EggPrimitive::S_unknown 94
// The order here is important.  The later choices are more
// specific than the earlier ones.
0 9 S_overall 23 EggPrimitive::S_overall 0
1 10 S_per_face 24 EggPrimitive::S_per_face 0
2 12 S_per_vertex 26 EggPrimitive::S_per_vertex 0
3 0 0

2029 21 EggCompositePrimitive 0 75777 21 EggCompositePrimitive 21 EggCompositePrimitive 0 0 0 0 1661 0 7 1710 1711 1712 1713 1714 1715 1716 1 2323 0 1 0 2027 0 0 0 0 414
////////////////////////////////////////////////////////////////////
//       Class : EggCompositePrimitive
// Description : The base class for primitives such as triangle strips
//               and triangle fans, which include several component
//               triangles, each of which might have its own color
//               and/or normal.
////////////////////////////////////////////////////////////////////

2030 7 EggData 0 141313 7 EggData 7 EggData 0 0 0 1 1717 1739 0 21 1718 1719 1720 1721 1722 1723 1724 1725 1726 1727 1728 1729 1730 1731 1732 1733 1734 1735 1736 1737 1738 0 0 1 0 1982 0 0 0 0 728
////////////////////////////////////////////////////////////////////
//       Class : EggData
// Description : This is the primary interface into all the egg data,
//               and the root of the egg file structure.  An EggData
//               structure corresponds exactly with an egg file on the
//               disk.
//
//               The EggData class inherits from EggGroupNode its
//               collection of children, which are accessed by using
//               the EggData itself as an STL container with begin()
//               and end() calls.  The children of the EggData class
//               are the toplevel nodes in the egg file.
////////////////////////////////////////////////////////////////////

2031 19 EggCoordinateSystem 0 141313 19 EggCoordinateSystem 19 EggCoordinateSystem 0 0 0 1 1740 1744 0 3 1741 1742 1743 0 0 1 0 1965 0 0 0 0 403
////////////////////////////////////////////////////////////////////
//       Class : EggCoordinateSystem
// Description : The <CoordinateSystem> entry at the top of an egg
//               file.  Don't confuse this with the enum
//               EggData::CoordinateSystem, which is the value
//               contained by this entry.
////////////////////////////////////////////////////////////////////

2032 8 EggCurve 0 141313 8 EggCurve 8 EggCurve 0 0 0 0 1752 0 7 1745 1746 1747 1748 1749 1750 1751 0 0 1 0 2027 0 0 0 1 2033 250
////////////////////////////////////////////////////////////////////
//       Class : EggCurve
// Description : A parametric curve of some kind.  See
//               EggNurbsCurve.
////////////////////////////////////////////////////////////////////

2033 9 CurveType 0 794624 19 EggCurve::CurveType 19 EggCurve::CurveType 2032 0 0 0 0 0 0 0 0 0 4 7 CT_none 17 EggCurve::CT_none 0
0 6 CT_xyz 16 EggCurve::CT_xyz 0
1 6 CT_hpr 16 EggCurve::CT_hpr 0
2 4 CT_t 14 EggCurve::CT_t 0
3 0 0

2034 20 EggExternalReference 0 141313 20 EggExternalReference 20 EggExternalReference 0 0 0 1 1753 1756 0 2 1754 1755 0 0 1 0 2009 0 0 0 0 289
////////////////////////////////////////////////////////////////////
//       Class : EggExternalReference
// Description : Defines a reference to another egg file which should
//               be inserted at this point.
////////////////////////////////////////////////////////////////////

2035 17 EggNameUniquifier 0 75777 17 EggNameUniquifier 17 EggNameUniquifier 0 0 0 0 0 0 9 1757 1758 1759 1760 1761 1762 1763 1764 1765 0 0 1 0 1962 0 0 0 0 407
////////////////////////////////////////////////////////////////////
//       Class : EggNameUniquifier
// Description : This is a handy class for guaranteeing unique node
//               names in an egg hierarchy.  It is an abstract class;
//               to use it you must subclass off of it.  See the
//               comment above.
////////////////////////////////////////////////////////////////////

2036 18 EggGroupUniquifier 0 141313 18 EggGroupUniquifier 18 EggGroupUniquifier 0 0 0 1 1766 1768 0 1 1767 0 0 1 0 2035 0 0 0 0 408
////////////////////////////////////////////////////////////////////
//       Class : EggGroupUniquifier
// Description : This is a specialization of EggNameUniquifier to
//               generate unique names for EggGroup nodes.  It's not
//               called automatically; you must invoke it yourself if
//               you want it.
////////////////////////////////////////////////////////////////////

2037 7 EggLine 0 75777 7 EggLine 7 EggLine 0 0 0 1 1769 1661 0 6 1770 1771 1772 1773 1774 1775 0 0 1 0 2029 0 0 0 0 279
////////////////////////////////////////////////////////////////////
//       Class : EggLine
// Description : A line segment, or a series of connected line
//               segments, defined by a <Line> entry.
////////////////////////////////////////////////////////////////////

2038 21 EggMaterialCollection 0 26625 21 EggMaterialCollection 21 EggMaterialCollection 0 0 0 1 1776 1778 0 13 1777 1779 1780 1781 1782 1783 1784 1785 1786 1787 1788 1789 1790 0 0 0 0 0 477
////////////////////////////////////////////////////////////////////
//       Class : EggMaterialCollection
// Description : This is a collection of materials by MRef name.  It
//               can extract the materials from an egg file and sort
//               them all together; it can also manage the creation of
//               unique materials and the assignment of unique MRef
//               names.
////////////////////////////////////////////////////////////////////

2039 10 EggPolygon 0 141313 10 EggPolygon 10 EggPolygon 0 0 0 1 1791 1799 0 7 1792 1793 1794 1795 1796 1797 1798 0 0 1 0 2027 0 0 0 0 200
////////////////////////////////////////////////////////////////////
//       Class : EggPolygon
// Description : A single polygon.
////////////////////////////////////////////////////////////////////

2040 13 EggNurbsCurve 0 141313 13 EggNurbsCurve 13 EggNurbsCurve 0 0 0 1 1800 1814 0 13 1801 1802 1803 1804 1805 1806 1807 1808 1809 1810 1811 1812 1813 1 2324 0 1 0 2032 0 0 0 0 211
////////////////////////////////////////////////////////////////////
//       Class : EggNurbsCurve
// Description : A parametric NURBS curve.
////////////////////////////////////////////////////////////////////

2041 10 EggSurface 0 141313 10 EggSurface 10 EggSurface 0 0 0 0 1821 0 6 1815 1816 1817 1818 1819 1820 0 0 1 0 2027 0 0 0 0 256
////////////////////////////////////////////////////////////////////
//       Class : EggSurface
// Description : A parametric surface of some kind.  See
//               EggNurbsSurface.
////////////////////////////////////////////////////////////////////

2042 15 EggNurbsSurface 0 141313 15 EggNurbsSurface 15 EggNurbsSurface 0 0 0 1 1822 1851 0 28 1823 1824 1825 1826 1827 1828 1829 1830 1831 1832 1833 1834 1835 1836 1837 1838 1839 1840 1841 1842 1843 1844 1845 1846 1847 1848 1849 1850 2 2325 2326 0 1 0 2041 0 0 0 5 2043 2045 2046 2048 2049 215
////////////////////////////////////////////////////////////////////
//       Class : EggNurbsSurface
// Description : A parametric NURBS surface.
////////////////////////////////////////////////////////////////////

2043 6 Curves 0 2367488 23 EggNurbsSurface::Curves 23 EggNurbsSurface::Curves 2042 0 2044 0 0 0 0 0 0 0 0 0 0

2044 34 list< PointerTo< EggNurbsCurve > > 0 2048 34 list< PointerTo< EggNurbsCurve > > 34 list< PointerTo< EggNurbsCurve > > 0 0 0 0 0 0 0 0 0 0 0 0 0

2045 4 Loop 0 2367488 21 EggNurbsSurface::Loop 21 EggNurbsSurface::Loop 2042 0 2043 0 0 0 0 0 0 0 0 0 0

2046 5 Loops 0 2367488 22 EggNurbsSurface::Loops 22 EggNurbsSurface::Loops 2042 0 2047 0 0 0 0 0 0 0 0 0 0

2047 12 list< Loop > 0 2048 29 list< EggNurbsSurface::Loop > 29 list< EggNurbsSurface::Loop > 0 0 0 0 0 0 0 0 0 0 0 0 0

2048 4 Trim 0 2367488 21 EggNurbsSurface::Trim 21 EggNurbsSurface::Trim 2042 0 2046 0 0 0 0 0 0 0 0 0 0

2049 5 Trims 0 2367488 22 EggNurbsSurface::Trims 22 EggNurbsSurface::Trims 2042 0 2050 0 0 0 0 0 0 0 0 0 0

2050 12 list< Trim > 0 2048 29 list< EggNurbsSurface::Trim > 29 list< EggNurbsSurface::Trim > 0 0 0 0 0 0 0 0 0 0 0 0 0

2051 8 EggPatch 0 141313 8 EggPatch 8 EggPatch 0 0 0 1 1852 1855 0 2 1853 1854 0 0 1 0 2027 0 0 0 0 283
////////////////////////////////////////////////////////////////////
//       Class : EggPatch
// Description : A single "patch", a special primitive to be rendered
//               only with a tessellation shader.
////////////////////////////////////////////////////////////////////

2052 8 EggPoint 0 141313 8 EggPoint 8 EggPoint 0 0 0 1 1856 1867 0 10 1857 1858 1859 1860 1861 1862 1863 1864 1865 1866 0 0 1 0 2027 0 0 0 0 282
////////////////////////////////////////////////////////////////////
//       Class : EggPoint
// Description : A single point, or a collection of points as defined
//               by a single <PointLight> entry.
////////////////////////////////////////////////////////////////////

2053 15 EggPolysetMaker 0 141313 15 EggPolysetMaker 15 EggPolysetMaker 0 0 0 1 1868 1871 0 2 1869 1870 0 0 1 0 2007 0 0 0 2 2054 2055 680
////////////////////////////////////////////////////////////////////
//       Class : EggPolysetMaker
// Description : A specialization on EggBinMaker for making polysets
//               that share the same basic rendering characteristic.
//               This really just defines the example functions
//               described in the leading comment to EggBinMaker.
//
//               It makes some common assumptions about how polysets
//               should be grouped; if these are not sufficient, you
//               can always rederive your own further specialization
//               of this class.
////////////////////////////////////////////////////////////////////

2054 9 BinNumber 0 794624 26 EggPolysetMaker::BinNumber 26 EggPolysetMaker::BinNumber 2053 0 0 0 0 0 0 0 0 0 2 7 BN_none 24 EggPolysetMaker::BN_none 0
0 10 BN_polyset 27 EggPolysetMaker::BN_polyset 0
1 0 75
// The BinNumber serves to identify why a particular EggBin was
// created.

2055 10 Properties 0 794624 27 EggPolysetMaker::Properties 27 EggPolysetMaker::Properties 2053 0 0 0 0 0 0 0 0 0 10 13 P_has_texture 30 EggPolysetMaker::P_has_texture 0
1 9 P_texture 26 EggPolysetMaker::P_texture 0
2 14 P_has_material 31 EggPolysetMaker::P_has_material 0
4 10 P_material 27 EggPolysetMaker::P_material 0
8 16 P_has_poly_color 33 EggPolysetMaker::P_has_poly_color 0
16 12 P_poly_color 29 EggPolysetMaker::P_poly_color 0
32 17 P_has_poly_normal 34 EggPolysetMaker::P_has_poly_normal 0
64 19 P_has_vertex_normal 36 EggPolysetMaker::P_has_vertex_normal 0
128 18 P_has_vertex_color 35 EggPolysetMaker::P_has_vertex_color 0
256 7 P_bface 24 EggPolysetMaker::P_bface 0
512 0 0

2056 17 EggPoolUniquifier 0 141313 17 EggPoolUniquifier 17 EggPoolUniquifier 0 0 0 1 1872 1874 0 1 1873 0 0 1 0 2035 0 0 0 0 476
////////////////////////////////////////////////////////////////////
//       Class : EggPoolUniquifier
// Description : This is a specialization of EggNameUniquifier to
//               generate unique names for textures, materials, and
//               vertex pools prior to writing out an egg file.  It's
//               automatically called by EggData prior to writing out
//               an egg file.
////////////////////////////////////////////////////////////////////

2057 12 EggSAnimData 0 141313 12 EggSAnimData 12 EggSAnimData 0 0 0 1 1875 1882 0 6 1876 1877 1878 1879 1880 1881 0 0 1 0 1966 0 0 0 0 363
////////////////////////////////////////////////////////////////////
//       Class : EggSAnimData
// Description : Corresponding to an <S$Anim> entry, this stores a
//               single column of numbers, for instance for a morph
//               target, or as one column in an EggXfmSAnim.
////////////////////////////////////////////////////////////////////

2058 8 EggTable 0 141313 8 EggTable 8 EggTable 0 0 0 1 1883 1890 0 6 1884 1885 1886 1887 1888 1889 0 0 1 0 1982 0 0 0 1 2059 540
////////////////////////////////////////////////////////////////////
//       Class : EggTable
// Description : This corresponds to a <Table> or a <Bundle> entry.
//               As such, it doesn't actually contain a table of
//               numbers, but it may be a parent to an EggSAnimData or
//               an EggXfmAnimData, which do.  It may also be a parent
//               to another <Table> or <Bundle>, establishing a
//               hierarchy of tables.
////////////////////////////////////////////////////////////////////

2059 9 TableType 0 794624 19 EggTable::TableType 19 EggTable::TableType 2058 0 0 0 0 0 0 0 0 0 3 10 TT_invalid 20 EggTable::TT_invalid 0
0 8 TT_table 18 EggTable::TT_table 0
1 9 TT_bundle 19 EggTable::TT_bundle 0
2 0 0

2060 20 EggTextureCollection 0 26625 20 EggTextureCollection 20 EggTextureCollection 0 0 0 1 1891 1893 0 20 1892 1894 1895 1896 1897 1898 1899 1900 1901 1902 1903 1904 1905 1906 1907 1908 1909 1910 1911 1912 1 2327 0 0 0 0 473
////////////////////////////////////////////////////////////////////
//       Class : EggTextureCollection
// Description : This is a collection of textures by TRef name.  It
//               can extract the textures from an egg file and sort
//               them all together; it can also manage the creation of
//               unique textures and the assignment of unique TRef
//               names.
////////////////////////////////////////////////////////////////////

2061 14 EggTriangleFan 0 75777 14 EggTriangleFan 14 EggTriangleFan 0 0 0 1 1913 1661 0 2 1914 1915 0 0 1 0 2029 0 0 0 0 347
////////////////////////////////////////////////////////////////////
//       Class : EggTriangleFan
// Description : A connected fan of triangles.  This does not
//               normally appear in an egg file; it is typically
//               generated as a result of meshing.
////////////////////////////////////////////////////////////////////

2062 16 EggTriangleStrip 0 75777 16 EggTriangleStrip 16 EggTriangleStrip 0 0 0 1 1916 1661 0 2 1917 1918 0 0 1 0 2029 0 0 0 0 351
////////////////////////////////////////////////////////////////////
//       Class : EggTriangleStrip
// Description : A connected strip of triangles.  This does not
//               normally appear in an egg file; it is typically
//               generated as a result of meshing.
////////////////////////////////////////////////////////////////////

2063 11 EggXfmSAnim 0 141313 11 EggXfmSAnim 11 EggXfmSAnim 0 0 0 1 1919 1942 0 22 1920 1921 1922 1923 1924 1925 1926 1927 1928 1929 1930 1931 1932 1933 1934 1935 1936 1937 1938 1939 1940 1941 0 0 1 0 1982 0 0 0 0 484
////////////////////////////////////////////////////////////////////
//       Class : EggXfmSAnim
// Description : This corresponds to an <Xfm$Anim_S$> entry, which is
//               a collection of up to nine <S$Anim> entries that
//               specify the nine components of a transformation.
//               It's implemented as a group that can contain
//               any number of EggSAnimData children.
////////////////////////////////////////////////////////////////////

2064 14 EggXfmAnimData 0 141313 14 EggXfmAnimData 14 EggXfmAnimData 0 0 0 1 1943 1959 0 15 1944 1945 1946 1947 1948 1949 1950 1951 1952 1953 1954 1955 1956 1957 1958 0 0 1 0 1966 0 0 0 0 497
////////////////////////////////////////////////////////////////////
//       Class : EggXfmAnimData
// Description : Corresponding to an <Xfm$Anim> entry, this stores a
//               two-dimensional table with up to nine columns, one
//               for each component of a transformation.  This is an
//               older syntax of egg anim table, not often used
//               currently--it's replaced by EggXfmSAnim.
////////////////////////////////////////////////////////////////////

2065 13 EggUserData * 0 8576 13 EggUserData * 13 EggUserData * 0 0 1960 0 0 0 0 0 0 0 0 0 0

2066 19 EggUserData const * 0 8576 19 EggUserData const * 19 EggUserData const * 0 0 2067 0 0 0 0 0 0 0 0 0 0

2067 17 EggUserData const 0 8832 17 EggUserData const 17 EggUserData const 0 0 1960 0 0 0 0 0 0 0 0 0 0

2068 10 TypeHandle 0 2048 10 TypeHandle 10 TypeHandle 0 0 0 0 0 0 0 0 0 0 0 0 1098
////////////////////////////////////////////////////////////////////
//       Class : TypeHandle
// Description : TypeHandle is the identifier used to differentiate
//               C++ class types.  Any C++ classes that inherit from
//               some base class, and must be differentiated at run
//               time, should store a static TypeHandle object that
//               can be queried through a static member function
//               named get_class_type().  Most of the time, it is also
//               desirable to inherit from TypedObject, which provides
//               some virtual functions to return the TypeHandle for a
//               particular instance.
//
//               At its essence, a TypeHandle is simply a unique
//               identifier that is assigned by the TypeRegistry.  The
//               TypeRegistry stores a tree of TypeHandles, so that
//               ancestry of a particular type may be queried, and the
//               type name may be retrieved for run-time display.
////////////////////////////////////////////////////////////////////

2069 12 TypeHandle * 0 8576 12 TypeHandle * 12 TypeHandle * 0 0 2068 0 0 0 0 0 0 0 0 0 0

2070 11 EggObject * 0 8576 11 EggObject * 11 EggObject * 0 0 1962 0 0 0 0 0 0 0 0 0 0

2071 17 EggObject const * 0 8576 17 EggObject const * 17 EggObject const * 0 0 2072 0 0 0 0 0 0 0 0 0 0

2072 15 EggObject const 0 8832 15 EggObject const 15 EggObject const 0 0 1962 0 0 0 0 0 0 0 0 0 0

2073 4 void 0 8194 4 void 4 void 0 6 0 0 0 0 0 0 0 0 0 0 0

2074 4 bool 0 8194 4 bool 4 bool 0 4 0 0 0 0 0 0 0 0 0 0 0

2075 22 EggNamedObject const * 0 8576 22 EggNamedObject const * 22 EggNamedObject const * 0 0 2076 0 0 0 0 0 0 0 0 0 0

2076 20 EggNamedObject const 0 8832 20 EggNamedObject const 20 EggNamedObject const 0 0 1963 0 0 0 0 0 0 0 0 0 0

2077 16 EggNamedObject * 0 8576 16 EggNamedObject * 16 EggNamedObject * 0 0 1963 0 0 0 0 0 0 0 0 0 0

2078 13 atomic string 0 2 13 atomic string 13 atomic string 0 7 0 0 0 0 0 0 0 0 0 0 0

2079 9 ostream * 0 8576 9 ostream * 9 ostream * 0 0 2080 0 0 0 0 0 0 0 0 0 0

2080 7 ostream 0 2048 7 ostream 7 ostream 0 0 0 0 0 0 0 0 0 0 0 0 0

2081 9 Namable * 0 8576 9 Namable * 9 Namable * 0 0 1964 0 0 0 0 0 0 0 0 0 0

2082 9 EggNode * 0 8576 9 EggNode * 9 EggNode * 0 0 1965 0 0 0 0 0 0 0 0 0 0

2083 15 EggNode const * 0 8576 15 EggNode const * 15 EggNode const * 0 0 2084 0 0 0 0 0 0 0 0 0 0

2084 13 EggNode const 0 8832 13 EggNode const 13 EggNode const 0 0 1965 0 0 0 0 0 0 0 0 0 0

2085 14 EggGroupNode * 0 8576 14 EggGroupNode * 14 EggGroupNode * 0 0 1982 0 0 0 0 0 0 0 0 0 0

2086 3 int 0 8194 3 int 3 int 0 1 0 0 0 0 0 0 0 0 0 0 0

2087 17 LMatrix4d const * 0 8576 17 LMatrix4d const * 17 LMatrix4d const * 0 0 2088 0 0 0 0 0 0 0 0 0 0

2088 15 LMatrix4d const 0 8832 15 LMatrix4d const 15 LMatrix4d const 0 0 2089 0 0 0 0 0 0 0 0 0 0

2089 9 LMatrix4d 0 2048 9 LMatrix4d 9 LMatrix4d 0 0 0 0 0 0 0 3 2328 2329 2330 0 0 0 0 215
////////////////////////////////////////////////////////////////////
//       Class : LMatrix4
// Description : This is a 4-by-4 transform matrix.
////////////////////////////////////////////////////////////////////

2090 15 vector_string * 0 8576 15 vector_string * 15 vector_string * 0 0 2091 0 0 0 0 0 0 0 0 0 0

2091 13 vector_string 0 2105344 13 vector_string 13 vector_string 0 0 2092 0 0 0 0 0 0 0 0 0 0

2092 16 vector< string > 0 2048 16 vector< string > 16 vector< string > 0 0 0 0 0 0 0 0 0 0 0 0 0

2093 15 EggRenderMode * 0 8576 15 EggRenderMode * 15 EggRenderMode * 0 0 1984 0 0 0 0 0 0 0 0 0 0

2094 13 EggAnimData * 0 8576 13 EggAnimData * 13 EggAnimData * 0 0 1966 0 0 0 0 0 0 0 0 0 0

2095 19 EggAnimData const * 0 8576 19 EggAnimData const * 19 EggAnimData const * 0 0 2096 0 0 0 0 0 0 0 0 0 0

2096 17 EggAnimData const 0 8832 17 EggAnimData const 17 EggAnimData const 0 0 1966 0 0 0 0 0 0 0 0 0 0

2097 6 double 0 8194 6 double 6 double 0 3 0 0 0 0 0 0 0 0 0 0 0

2098 22 EggAnimPreload const * 0 8576 22 EggAnimPreload const * 22 EggAnimPreload const * 0 0 2099 0 0 0 0 0 0 0 0 0 0

2099 20 EggAnimPreload const 0 8832 20 EggAnimPreload const 20 EggAnimPreload const 0 0 1967 0 0 0 0 0 0 0 0 0 0

2100 16 EggAnimPreload * 0 8576 16 EggAnimPreload * 16 EggAnimPreload * 0 0 1967 0 0 0 0 0 0 0 0 0 0

2101 15 EggAttributes * 0 8576 15 EggAttributes * 15 EggAttributes * 0 0 1968 0 0 0 0 0 0 0 0 0 0

2102 21 EggAttributes const * 0 8576 21 EggAttributes const * 21 EggAttributes const * 0 0 2103 0 0 0 0 0 0 0 0 0 0

2103 19 EggAttributes const 0 8832 19 EggAttributes const 19 EggAttributes const 0 0 1968 0 0 0 0 0 0 0 0 0 0

2104 16 LNormald const * 0 8576 16 LNormald const * 16 LNormald const * 0 0 2105 0 0 0 0 0 0 0 0 0 0

2105 14 LNormald const 0 8832 14 LNormald const 14 LNormald const 0 0 2106 0 0 0 0 0 0 0 0 0 0

2106 8 LNormald 0 2105344 8 LNormald 8 LNormald 0 0 2107 0 0 0 0 0 0 0 0 0 0

2107 9 LVector3d 0 2048 9 LVector3d 9 LVector3d 0 0 0 0 0 0 0 0 0 0 0 0 598
////////////////////////////////////////////////////////////////////
//       Class : LVector3
// Description : This is a three-component vector distance (as opposed
//               to a three-component point, which represents a
//               particular point in space).  Some of the methods are
//               slightly different between LPoint3 and LVector3; in
//               particular, subtraction of two points yields a
//               vector, while addition of a vector and a point yields
//               a point.
////////////////////////////////////////////////////////////////////

2108 6 LColor 0 2105344 6 LColor 6 LColor 0 0 2109 0 0 0 0 0 0 0 0 0 0

2109 7 LColorf 0 2105344 7 LColorf 7 LColorf 0 0 2110 0 0 0 0 0 0 0 0 0 0

2110 10 LVecBase4f 0 2048 10 LVecBase4f 10 LVecBase4f 0 0 0 0 0 0 0 0 0 0 0 0 265
////////////////////////////////////////////////////////////////////
//       Class : LVecBase4
// Description : This is the base class for all three-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

2111 8 LColor * 0 8576 8 LColor * 8 LColor * 0 0 2108 0 0 0 0 0 0 0 0 0 0

2112 14 LColor const * 0 8576 14 LColor const * 14 LColor const * 0 0 2113 0 0 0 0 0 0 0 0 0 0

2113 12 LColor const 0 8832 12 LColor const 12 LColor const 0 0 2108 0 0 0 0 0 0 0 0 0 0

2114 12 MemoryBase * 0 8576 12 MemoryBase * 12 MemoryBase * 0 0 1969 0 0 0 0 0 0 0 0 0 0

2115 20 EggMorphNormalList * 0 8576 20 EggMorphNormalList * 20 EggMorphNormalList * 0 0 1970 0 0 0 0 0 0 0 0 0 0

2116 19 EggMorphColorList * 0 8576 19 EggMorphColorList * 19 EggMorphColorList * 0 0 1972 0 0 0 0 0 0 0 0 0 0

2117 19 EggVertexUV const * 0 8576 19 EggVertexUV const * 19 EggVertexUV const * 0 0 2118 0 0 0 0 0 0 0 0 0 0

2118 17 EggVertexUV const 0 8832 17 EggVertexUV const 17 EggVertexUV const 0 0 1974 0 0 0 0 0 0 0 0 0 0

2119 13 EggVertexUV * 0 8576 13 EggVertexUV * 13 EggVertexUV * 0 0 1974 0 0 0 0 0 0 0 0 0 0

2120 19 LTexCoord3d const * 0 8576 19 LTexCoord3d const * 19 LTexCoord3d const * 0 0 2121 0 0 0 0 0 0 0 0 0 0

2121 17 LTexCoord3d const 0 8832 17 LTexCoord3d const 17 LTexCoord3d const 0 0 2122 0 0 0 0 0 0 0 0 0 0

2122 11 LTexCoord3d 0 2105344 11 LTexCoord3d 11 LTexCoord3d 0 0 2123 0 0 0 0 0 0 0 0 0 0

2123 8 LPoint3d 0 2048 8 LPoint3d 8 LPoint3d 0 0 0 0 0 0 0 0 0 0 0 0 596
////////////////////////////////////////////////////////////////////
//       Class : LPoint3
// Description : This is a three-component point in space (as opposed
//               to a three-component vector, which represents a
//               direction and a distance).  Some of the methods are
//               slightly different between LPoint3 and LVector3; in
//               particular, subtraction of two points yields a
//               vector, while addition of a vector and a point yields
//               a point.
////////////////////////////////////////////////////////////////////

2124 18 LTexCoordd const * 0 8576 18 LTexCoordd const * 18 LTexCoordd const * 0 0 2125 0 0 0 0 0 0 0 0 0 0

2125 16 LTexCoordd const 0 8832 16 LTexCoordd const 16 LTexCoordd const 0 0 2126 0 0 0 0 0 0 0 0 0 0

2126 10 LTexCoordd 0 2105344 10 LTexCoordd 10 LTexCoordd 0 0 2127 0 0 0 0 0 0 0 0 0 0

2127 8 LPoint2d 0 2048 8 LPoint2d 8 LPoint2d 0 0 0 0 0 0 0 0 0 0 0 0 219
////////////////////////////////////////////////////////////////////
//       Class : LPoint2
// Description : This is a two-component point in space.
////////////////////////////////////////////////////////////////////

2128 12 LTexCoordd * 0 8576 12 LTexCoordd * 12 LTexCoordd * 0 0 2126 0 0 0 0 0 0 0 0 0 0

2129 22 EggMorphTexCoordList * 0 8576 22 EggMorphTexCoordList * 22 EggMorphTexCoordList * 0 0 1975 0 0 0 0 0 0 0 0 0 0

2130 20 EggVertexAux const * 0 8576 20 EggVertexAux const * 20 EggVertexAux const * 0 0 2131 0 0 0 0 0 0 0 0 0 0

2131 18 EggVertexAux const 0 8832 18 EggVertexAux const 18 EggVertexAux const 0 0 1977 0 0 0 0 0 0 0 0 0 0

2132 14 EggVertexAux * 0 8576 14 EggVertexAux * 14 EggVertexAux * 0 0 1977 0 0 0 0 0 0 0 0 0 0

2133 18 LVecBase4d const * 0 8576 18 LVecBase4d const * 18 LVecBase4d const * 0 0 2134 0 0 0 0 0 0 0 0 0 0

2134 16 LVecBase4d const 0 8832 16 LVecBase4d const 16 LVecBase4d const 0 0 2135 0 0 0 0 0 0 0 0 0 0

2135 10 LVecBase4d 0 2048 10 LVecBase4d 10 LVecBase4d 0 0 0 0 0 0 0 0 0 0 0 0 265
////////////////////////////////////////////////////////////////////
//       Class : LVecBase4
// Description : This is the base class for all three-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

2136 11 EggVertex * 0 8576 11 EggVertex * 11 EggVertex * 0 0 1978 0 0 0 0 0 0 0 0 0 0

2137 17 EggVertex const * 0 8576 17 EggVertex const * 17 EggVertex const * 0 0 2138 0 0 0 0 0 0 0 0 0 0

2138 15 EggVertex const 0 8832 15 EggVertex const 15 EggVertex const 0 0 1978 0 0 0 0 0 0 0 0 0 0

2139 15 EggVertexPool * 0 8576 15 EggVertexPool * 15 EggVertexPool * 0 0 1981 0 0 0 0 0 0 0 0 0 0

2140 16 LPoint2d const * 0 8576 16 LPoint2d const * 16 LPoint2d const * 0 0 2141 0 0 0 0 0 0 0 0 0 0

2141 14 LPoint2d const 0 8832 14 LPoint2d const 14 LPoint2d const 0 0 2127 0 0 0 0 0 0 0 0 0 0

2142 16 LPoint3d const * 0 8576 16 LPoint3d const * 16 LPoint3d const * 0 0 2143 0 0 0 0 0 0 0 0 0 0

2143 14 LPoint3d const 0 8832 14 LPoint3d const 14 LPoint3d const 0 0 2123 0 0 0 0 0 0 0 0 0 0

2144 16 LPoint4d const * 0 8576 16 LPoint4d const * 16 LPoint4d const * 0 0 2145 0 0 0 0 0 0 0 0 0 0

2145 14 LPoint4d const 0 8832 14 LPoint4d const 14 LPoint4d const 0 0 2146 0 0 0 0 0 0 0 0 0 0

2146 8 LPoint4d 0 2048 8 LPoint4d 8 LPoint4d 0 0 0 0 0 0 0 0 0 0 0 0 220
////////////////////////////////////////////////////////////////////
//       Class : LPoint4
// Description : This is a four-component point in space.
////////////////////////////////////////////////////////////////////

2147 10 LPoint2d * 0 8576 10 LPoint2d * 10 LPoint2d * 0 0 2127 0 0 0 0 0 0 0 0 0 0

2148 8 LVertexd 0 2105344 8 LVertexd 8 LVertexd 0 0 2123 0 0 0 0 0 0 0 0 0 0

2149 10 LVertexd * 0 8576 10 LVertexd * 10 LVertexd * 0 0 2148 0 0 0 0 0 0 0 0 0 0

2150 10 LPoint4d * 0 8576 10 LPoint4d * 10 LPoint4d * 0 0 2146 0 0 0 0 0 0 0 0 0 0

2151 16 EggGroup const * 0 8576 16 EggGroup const * 16 EggGroup const * 0 0 2152 0 0 0 0 0 0 0 0 0 0

2152 14 EggGroup const 0 8832 14 EggGroup const 14 EggGroup const 0 0 1993 0 0 0 0 0 0 0 0 0 0

2153 20 EggPrimitive const * 0 8576 20 EggPrimitive const * 20 EggPrimitive const * 0 0 2154 0 0 0 0 0 0 0 0 0 0

2154 18 EggPrimitive const 0 8832 18 EggPrimitive const 18 EggPrimitive const 0 0 2027 0 0 0 0 0 0 0 0 0 0

2155 20 EggMorphVertexList * 0 8576 20 EggMorphVertexList * 20 EggMorphVertexList * 0 0 1979 0 0 0 0 0 0 0 0 0 0

2156 21 EggVertexPool const * 0 8576 21 EggVertexPool const * 21 EggVertexPool const * 0 0 2157 0 0 0 0 0 0 0 0 0 0

2157 19 EggVertexPool const 0 8832 19 EggVertexPool const 19 EggVertexPool const 0 0 1981 0 0 0 0 0 0 0 0 0 0

2158 9 size_type 0 2367488 24 EggVertexPool::size_type 24 EggVertexPool::size_type 1981 0 2159 0 0 0 0 0 0 0 0 0 0

2159 6 size_t 0 2105344 6 size_t 6 size_t 0 0 2160 0 0 0 0 0 0 0 0 0 0

2160 17 unsigned long int 0 8214 17 unsigned long int 17 unsigned long int 0 1 0 0 0 0 0 0 0 0 0 0 0

2161 14 EggPrimitive * 0 8576 14 EggPrimitive * 14 EggPrimitive * 0 0 2027 0 0 0 0 0 0 0 0 0 0

2162 20 EggGroupNode const * 0 8576 20 EggGroupNode const * 20 EggGroupNode const * 0 0 2163 0 0 0 0 0 0 0 0 0 0

2163 18 EggGroupNode const 0 8832 18 EggGroupNode const 18 EggGroupNode const 0 0 1982 0 0 0 0 0 0 0 0 0 0

2164 9 size_type 0 2367488 23 EggGroupNode::size_type 23 EggGroupNode::size_type 1982 0 2159 0 0 0 0 0 0 0 0 0 0

2165 10 PyObject * 0 8576 10 PyObject * 10 PyObject * 0 0 2166 0 0 0 0 0 0 0 0 0 0

2166 8 PyObject 0 2105344 8 PyObject 8 PyObject 0 0 2167 0 0 0 0 0 0 0 0 0 0

2167 7 _object 0 1024 7 _object 7 _object 0 0 0 0 0 0 0 0 0 0 0 0 0

2168 19 DSearchPath const * 0 8576 19 DSearchPath const * 19 DSearchPath const * 0 0 2169 0 0 0 0 0 0 0 0 0 0

2169 17 DSearchPath const 0 8832 17 DSearchPath const 17 DSearchPath const 0 0 2170 0 0 0 0 0 0 0 0 0 0

2170 11 DSearchPath 0 2048 11 DSearchPath 11 DSearchPath 0 0 0 0 0 0 0 1 2331 0 0 0 0 551
///////////////////////////////////////////////////////////////////
//       Class : DSearchPath
// Description : This class stores a list of directories that can be
//               searched, in order, to locate a particular file.  It
//               is normally constructed by passing it a traditional
//               searchpath-style string, e.g. a list of directory
//               names delimited by spaces or colons, but it can also
//               be built up explicitly.
////////////////////////////////////////////////////////////////////

2171 16 Filename const * 0 8576 16 Filename const * 16 Filename const * 0 0 2172 0 0 0 0 0 0 0 0 0 0

2172 14 Filename const 0 8832 14 Filename const 14 Filename const 0 0 2173 0 0 0 0 0 0 0 0 0 0

2173 8 Filename 0 2048 8 Filename 8 Filename 0 0 0 0 0 0 0 0 0 0 0 0 869
////////////////////////////////////////////////////////////////////
//       Class : Filename
// Description : The name of a file, such as a texture file or an Egg
//               file.  Stores the full pathname, and includes
//               functions for extracting out the directory prefix
//               part and the file extension and stuff.
//
//               A Filename is also aware of the mapping between the
//               Unix-like filename convention we use internally, and
//               the local OS's specific filename convention, and it
//               knows how to perform basic OS-specific I/O, like
//               testing for file existence and searching a
//               searchpath, as well as the best way to open an
//               fstream for reading or writing.
////////////////////////////////////////////////////////////////////

2174 16 CoordinateSystem 0 532480 16 CoordinateSystem 16 CoordinateSystem 0 0 0 0 0 0 0 0 0 0 6 10 CS_default 10 CS_default 213
// The CS_default entry does not refer to a particular coordinate
// system, but rather to the value stored in
// default_coordinate_system, which in turn is loaded from the
// config variable "coordinate-system".
0 12 CS_zup_right 12 CS_zup_right 0
1 12 CS_yup_right 12 CS_yup_right 0
2 11 CS_zup_left 11 CS_zup_left 0
3 11 CS_yup_left 11 CS_yup_left 0
4 10 CS_invalid 10 CS_invalid 155
// CS_invalid is not a coordinate system at all.  It can be used in
// user-input processing code to indicate a contradictory coordinate
// system request.
5 0 0

2175 19 GlobPattern const * 0 8576 19 GlobPattern const * 19 GlobPattern const * 0 0 2176 0 0 0 0 0 0 0 0 0 0

2176 17 GlobPattern const 0 8832 17 GlobPattern const 17 GlobPattern const 0 0 2177 0 0 0 0 0 0 0 0 0 0

2177 11 GlobPattern 0 2048 11 GlobPattern 11 GlobPattern 0 0 0 0 0 0 0 0 0 0 0 0 859
////////////////////////////////////////////////////////////////////
//       Class : GlobPattern
// Description : This class can be used to test for string matches
//               against standard Unix-shell filename globbing
//               conventions.  It serves as a portable standin for the
//               Posix fnmatch() call.
//
//               A GlobPattern is given a pattern string, which can
//               contain operators like *, ?, and [].  Then it can be
//               tested against any number of candidate strings; for
//               each candidate, it will indicate whether the string
//               matches the pattern or not.  It can be used, for
//               example, to scan a directory for all files matching a
//               particular pattern.
////////////////////////////////////////////////////////////////////

2178 21 vector_string const * 0 8576 21 vector_string const * 21 vector_string const * 0 0 2179 0 0 0 0 0 0 0 0 0 0

2179 19 vector_string const 0 8832 19 vector_string const 19 vector_string const 0 0 2091 0 0 0 0 0 0 0 0 0 0

2180 17 LVector2d const * 0 8576 17 LVector2d const * 17 LVector2d const * 0 0 2181 0 0 0 0 0 0 0 0 0 0

2181 15 LVector2d const 0 8832 15 LVector2d const 15 LVector2d const 0 0 2182 0 0 0 0 0 0 0 0 0 0

2182 9 LVector2d 0 2048 9 LVector2d 9 LVector2d 0 0 0 0 0 0 0 0 0 0 0 0 219
////////////////////////////////////////////////////////////////////
//       Class : LVector2
// Description : This is a two-component vector offset.
////////////////////////////////////////////////////////////////////

2183 21 EggRenderMode const * 0 8576 21 EggRenderMode const * 21 EggRenderMode const * 0 0 2184 0 0 0 0 0 0 0 0 0 0

2184 19 EggRenderMode const 0 8832 19 EggRenderMode const 19 EggRenderMode const 0 0 1984 0 0 0 0 0 0 0 0 0 0

2185 14 EggTransform * 0 8576 14 EggTransform * 14 EggTransform * 0 0 1989 0 0 0 0 0 0 0 0 0 0

2186 20 EggTransform const * 0 8576 20 EggTransform const * 20 EggTransform const * 0 0 2187 0 0 0 0 0 0 0 0 0 0

2187 18 EggTransform const 0 8832 18 EggTransform const 18 EggTransform const 0 0 1989 0 0 0 0 0 0 0 0 0 0

2188 17 LVector3d const * 0 8576 17 LVector3d const * 17 LVector3d const * 0 0 2189 0 0 0 0 0 0 0 0 0 0

2189 15 LVector3d const 0 8832 15 LVector3d const 15 LVector3d const 0 0 2107 0 0 0 0 0 0 0 0 0 0

2190 20 LQuaterniond const * 0 8576 20 LQuaterniond const * 20 LQuaterniond const * 0 0 2191 0 0 0 0 0 0 0 0 0 0

2191 18 LQuaterniond const 0 8832 18 LQuaterniond const 18 LQuaterniond const 0 0 2192 0 0 0 0 0 0 0 0 0 0

2192 12 LQuaterniond 0 2048 12 LQuaterniond 12 LQuaterniond 0 0 0 0 0 0 0 0 0 0 0 0 228
////////////////////////////////////////////////////////////////////
//       Class : FLOATNAME(LQuaternion)
// Description : This is the base quaternion class
////////////////////////////////////////////////////////////////////

2193 18 LVecBase2d const * 0 8576 18 LVecBase2d const * 18 LVecBase2d const * 0 0 2194 0 0 0 0 0 0 0 0 0 0

2194 16 LVecBase2d const 0 8832 16 LVecBase2d const 16 LVecBase2d const 0 0 2195 0 0 0 0 0 0 0 0 0 0

2195 10 LVecBase2d 0 2048 10 LVecBase2d 10 LVecBase2d 0 0 0 0 0 0 0 0 0 0 0 0 263
////////////////////////////////////////////////////////////////////
//       Class : LVecBase2
// Description : This is the base class for all two-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

2196 18 LVecBase3d const * 0 8576 18 LVecBase3d const * 18 LVecBase3d const * 0 0 2197 0 0 0 0 0 0 0 0 0 0

2197 16 LVecBase3d const 0 8832 16 LVecBase3d const 16 LVecBase3d const 0 0 2198 0 0 0 0 0 0 0 0 0 0

2198 10 LVecBase3d 0 2048 10 LVecBase3d 10 LVecBase3d 0 0 0 0 0 0 0 0 0 0 0 0 265
////////////////////////////////////////////////////////////////////
//       Class : LVecBase3
// Description : This is the base class for all three-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

2199 17 LMatrix3d const * 0 8576 17 LMatrix3d const * 17 LMatrix3d const * 0 0 2200 0 0 0 0 0 0 0 0 0 0

2200 15 LMatrix3d const 0 8832 15 LMatrix3d const 15 LMatrix3d const 0 0 2201 0 0 0 0 0 0 0 0 0 0

2201 9 LMatrix3d 0 2048 9 LMatrix3d 9 LMatrix3d 0 0 0 0 0 0 0 4 2332 2333 2334 2335 0 0 0 0 462
////////////////////////////////////////////////////////////////////
//       Class : LMatrix3
// Description : This is a 3-by-3 transform matrix.  It typically will
//               represent either a rotation-and-scale (no
//               translation) matrix in 3-d, or a full affine matrix
//               (rotation, scale, translation) in 2-d, e.g. for a
//               texture matrix.
////////////////////////////////////////////////////////////////////

2202 11 LMatrix3d * 0 8576 11 LMatrix3d * 11 LMatrix3d * 0 0 2201 0 0 0 0 0 0 0 0 0 0

2203 26 EggSwitchCondition const * 0 8576 26 EggSwitchCondition const * 26 EggSwitchCondition const * 0 0 2204 0 0 0 0 0 0 0 0 0 0

2204 24 EggSwitchCondition const 0 8832 24 EggSwitchCondition const 24 EggSwitchCondition const 0 0 1991 0 0 0 0 0 0 0 0 0 0

2205 20 EggSwitchCondition * 0 8576 20 EggSwitchCondition * 20 EggSwitchCondition * 0 0 1991 0 0 0 0 0 0 0 0 0 0

2206 28 EggSwitchConditionDistance * 0 8576 28 EggSwitchConditionDistance * 28 EggSwitchConditionDistance * 0 0 1992 0 0 0 0 0 0 0 0 0 0

2207 10 EggGroup * 0 8576 10 EggGroup * 10 EggGroup * 0 0 1993 0 0 0 0 0 0 0 0 0 0

2208 13 CollideMask * 0 8576 13 CollideMask * 13 CollideMask * 0 0 2209 0 0 0 0 0 0 0 0 0 0

2209 11 CollideMask 0 2105344 11 CollideMask 11 CollideMask 0 0 2210 0 0 0 0 0 0 0 0 0 0

2210 9 BitMask32 0 2105344 9 BitMask32 9 BitMask32 0 0 2211 0 0 0 0 0 0 0 0 0 0

2211 24 BitMask< PN_uint32, 32 > 0 2048 24 BitMask< PN_uint32, 32 > 24 BitMask< PN_uint32, 32 > 0 0 0 0 0 0 0 0 0 0 0 0 0

2212 12 double const 0 8832 12 double const 12 double const 0 0 2097 0 0 0 0 0 0 0 0 0 0

2213 14 EggBin const * 0 8576 14 EggBin const * 14 EggBin const * 0 0 2214 0 0 0 0 0 0 0 0 0 0

2214 12 EggBin const 0 8832 12 EggBin const 12 EggBin const 0 0 2006 0 0 0 0 0 0 0 0 0 0

2215 8 EggBin * 0 8576 8 EggBin * 8 EggBin * 0 0 2006 0 0 0 0 0 0 0 0 0 0

2216 13 EggBinMaker * 0 8576 13 EggBinMaker * 13 EggBinMaker * 0 0 2007 0 0 0 0 0 0 0 0 0 0

2217 18 EggComment const * 0 8576 18 EggComment const * 18 EggComment const * 0 0 2218 0 0 0 0 0 0 0 0 0 0

2218 16 EggComment const 0 8832 16 EggComment const 16 EggComment const 0 0 2008 0 0 0 0 0 0 0 0 0 0

2219 12 EggComment * 0 8576 12 EggComment * 12 EggComment * 0 0 2008 0 0 0 0 0 0 0 0 0 0

2220 17 EggFilenameNode * 0 8576 17 EggFilenameNode * 17 EggFilenameNode * 0 0 2009 0 0 0 0 0 0 0 0 0 0

2221 23 EggFilenameNode const * 0 8576 23 EggFilenameNode const * 23 EggFilenameNode const * 0 0 2222 0 0 0 0 0 0 0 0 0 0

2222 21 EggFilenameNode const 0 8832 21 EggFilenameNode const 21 EggFilenameNode const 0 0 2009 0 0 0 0 0 0 0 0 0 0

2223 18 EggTexture const * 0 8576 18 EggTexture const * 18 EggTexture const * 0 0 2224 0 0 0 0 0 0 0 0 0 0

2224 16 EggTexture const 0 8832 16 EggTexture const 16 EggTexture const 0 0 2010 0 0 0 0 0 0 0 0 0 0

2225 12 EggTexture * 0 8576 12 EggTexture * 12 EggTexture * 0 0 2010 0 0 0 0 0 0 0 0 0 0

2226 19 EggMaterial const * 0 8576 19 EggMaterial const * 19 EggMaterial const * 0 0 2227 0 0 0 0 0 0 0 0 0 0

2227 17 EggMaterial const 0 8832 17 EggMaterial const 17 EggMaterial const 0 0 2025 0 0 0 0 0 0 0 0 0 0

2228 13 EggMaterial * 0 8576 13 EggMaterial * 13 EggMaterial * 0 0 2025 0 0 0 0 0 0 0 0 0 0

2229 23 EggCompositePrimitive * 0 8576 23 EggCompositePrimitive * 23 EggCompositePrimitive * 0 0 2029 0 0 0 0 0 0 0 0 0 0

2230 29 EggCompositePrimitive const * 0 8576 29 EggCompositePrimitive const * 29 EggCompositePrimitive const * 0 0 2231 0 0 0 0 0 0 0 0 0 0

2231 27 EggCompositePrimitive const 0 8832 27 EggCompositePrimitive const 27 EggCompositePrimitive const 0 0 2029 0 0 0 0 0 0 0 0 0 0

2232 9 EggData * 0 8576 9 EggData * 9 EggData * 0 0 2030 0 0 0 0 0 0 0 0 0 0

2233 15 EggData const * 0 8576 15 EggData const * 15 EggData const * 0 0 2234 0 0 0 0 0 0 0 0 0 0

2234 13 EggData const 0 8832 13 EggData const 13 EggData const 0 0 2030 0 0 0 0 0 0 0 0 0 0

2235 10 Filename * 0 8576 10 Filename * 10 Filename * 0 0 2173 0 0 0 0 0 0 0 0 0 0

2236 9 istream * 0 8576 9 istream * 9 istream * 0 0 2237 0 0 0 0 0 0 0 0 0 0

2237 7 istream 0 2048 7 istream 7 istream 0 0 0 0 0 0 0 0 0 0 0 0 0

2238 16 BamCacheRecord * 0 8576 16 BamCacheRecord * 16 BamCacheRecord * 0 0 2239 0 0 0 0 0 0 0 0 0 0

2239 14 BamCacheRecord 0 2048 14 BamCacheRecord 14 BamCacheRecord 0 0 0 0 0 0 0 0 0 0 0 0 469
////////////////////////////////////////////////////////////////////
//       Class : BamCacheRecord
// Description : An instance of this class is written to the front of
//               a Bam or Txo file to make the file a cached instance
//               of some other loadable resource.  This record
//               contains information needed to test the validity of
//               the cache.
////////////////////////////////////////////////////////////////////

2240 6 time_t 0 2105344 6 time_t 6 time_t 0 0 2241 0 0 0 0 0 0 0 0 0 0

2241 12 unsigned int 0 8198 12 unsigned int 12 unsigned int 0 1 0 0 0 0 0 0 0 0 0 0 0

2242 21 EggCoordinateSystem * 0 8576 21 EggCoordinateSystem * 21 EggCoordinateSystem * 0 0 2031 0 0 0 0 0 0 0 0 0 0

2243 27 EggCoordinateSystem const * 0 8576 27 EggCoordinateSystem const * 27 EggCoordinateSystem const * 0 0 2244 0 0 0 0 0 0 0 0 0 0

2244 25 EggCoordinateSystem const 0 8832 25 EggCoordinateSystem const 25 EggCoordinateSystem const 0 0 2031 0 0 0 0 0 0 0 0 0 0

2245 10 EggCurve * 0 8576 10 EggCurve * 10 EggCurve * 0 0 2032 0 0 0 0 0 0 0 0 0 0

2246 16 EggCurve const * 0 8576 16 EggCurve const * 16 EggCurve const * 0 0 2247 0 0 0 0 0 0 0 0 0 0

2247 14 EggCurve const 0 8832 14 EggCurve const 14 EggCurve const 0 0 2032 0 0 0 0 0 0 0 0 0 0

2248 28 EggExternalReference const * 0 8576 28 EggExternalReference const * 28 EggExternalReference const * 0 0 2249 0 0 0 0 0 0 0 0 0 0

2249 26 EggExternalReference const 0 8832 26 EggExternalReference const 26 EggExternalReference const 0 0 2034 0 0 0 0 0 0 0 0 0 0

2250 22 EggExternalReference * 0 8576 22 EggExternalReference * 22 EggExternalReference * 0 0 2034 0 0 0 0 0 0 0 0 0 0

2251 19 EggNameUniquifier * 0 8576 19 EggNameUniquifier * 19 EggNameUniquifier * 0 0 2035 0 0 0 0 0 0 0 0 0 0

2252 25 EggNameUniquifier const * 0 8576 25 EggNameUniquifier const * 25 EggNameUniquifier const * 0 0 2253 0 0 0 0 0 0 0 0 0 0

2253 23 EggNameUniquifier const 0 8832 23 EggNameUniquifier const 23 EggNameUniquifier const 0 0 2035 0 0 0 0 0 0 0 0 0 0

2254 20 EggGroupUniquifier * 0 8576 20 EggGroupUniquifier * 20 EggGroupUniquifier * 0 0 2036 0 0 0 0 0 0 0 0 0 0

2255 15 EggLine const * 0 8576 15 EggLine const * 15 EggLine const * 0 0 2256 0 0 0 0 0 0 0 0 0 0

2256 13 EggLine const 0 8832 13 EggLine const 13 EggLine const 0 0 2037 0 0 0 0 0 0 0 0 0 0

2257 9 EggLine * 0 8576 9 EggLine * 9 EggLine * 0 0 2037 0 0 0 0 0 0 0 0 0 0

2258 23 EggMaterialCollection * 0 8576 23 EggMaterialCollection * 23 EggMaterialCollection * 0 0 2038 0 0 0 0 0 0 0 0 0 0

2259 29 EggMaterialCollection const * 0 8576 29 EggMaterialCollection const * 29 EggMaterialCollection const * 0 0 2260 0 0 0 0 0 0 0 0 0 0

2260 27 EggMaterialCollection const 0 8832 27 EggMaterialCollection const 27 EggMaterialCollection const 0 0 2038 0 0 0 0 0 0 0 0 0 0

2261 21 MaterialReplacement * 0 8576 44 EggMaterialCollection::MaterialReplacement * 44 EggMaterialCollection::MaterialReplacement * 0 0 2262 0 0 0 0 0 0 0 0 0 0

2262 19 MaterialReplacement 0 2367488 42 EggMaterialCollection::MaterialReplacement 42 EggMaterialCollection::MaterialReplacement 2038 0 2263 0 0 0 0 0 0 0 0 0 0

2263 37 map< PT_EggMaterial, PT_EggMaterial > 0 2048 37 map< PT_EggMaterial, PT_EggMaterial > 37 map< PT_EggMaterial, PT_EggMaterial > 0 0 0 0 0 0 0 0 0 0 0 0 0

2264 27 MaterialReplacement const * 0 8576 50 EggMaterialCollection::MaterialReplacement const * 50 EggMaterialCollection::MaterialReplacement const * 0 0 2265 0 0 0 0 0 0 0 0 0 0

2265 25 MaterialReplacement const 0 8832 48 EggMaterialCollection::MaterialReplacement const 48 EggMaterialCollection::MaterialReplacement const 0 0 2262 0 0 0 0 0 0 0 0 0 0

2266 18 EggPolygon const * 0 8576 18 EggPolygon const * 18 EggPolygon const * 0 0 2267 0 0 0 0 0 0 0 0 0 0

2267 16 EggPolygon const 0 8832 16 EggPolygon const 16 EggPolygon const 0 0 2039 0 0 0 0 0 0 0 0 0 0

2268 12 EggPolygon * 0 8576 12 EggPolygon * 12 EggPolygon * 0 0 2039 0 0 0 0 0 0 0 0 0 0

2269 10 LNormald * 0 8576 10 LNormald * 10 LNormald * 0 0 2106 0 0 0 0 0 0 0 0 0 0

2270 21 EggNurbsCurve const * 0 8576 21 EggNurbsCurve const * 21 EggNurbsCurve const * 0 0 2271 0 0 0 0 0 0 0 0 0 0

2271 19 EggNurbsCurve const 0 8832 19 EggNurbsCurve const 19 EggNurbsCurve const 0 0 2040 0 0 0 0 0 0 0 0 0 0

2272 15 EggNurbsCurve * 0 8576 15 EggNurbsCurve * 15 EggNurbsCurve * 0 0 2040 0 0 0 0 0 0 0 0 0 0

2273 12 EggSurface * 0 8576 12 EggSurface * 12 EggSurface * 0 0 2041 0 0 0 0 0 0 0 0 0 0

2274 18 EggSurface const * 0 8576 18 EggSurface const * 18 EggSurface const * 0 0 2275 0 0 0 0 0 0 0 0 0 0

2275 16 EggSurface const 0 8832 16 EggSurface const 16 EggSurface const 0 0 2041 0 0 0 0 0 0 0 0 0 0

2276 23 EggNurbsSurface const * 0 8576 23 EggNurbsSurface const * 23 EggNurbsSurface const * 0 0 2277 0 0 0 0 0 0 0 0 0 0

2277 21 EggNurbsSurface const 0 8832 21 EggNurbsSurface const 21 EggNurbsSurface const 0 0 2042 0 0 0 0 0 0 0 0 0 0

2278 17 EggNurbsSurface * 0 8576 17 EggNurbsSurface * 17 EggNurbsSurface * 0 0 2042 0 0 0 0 0 0 0 0 0 0

2279 16 EggPatch const * 0 8576 16 EggPatch const * 16 EggPatch const * 0 0 2280 0 0 0 0 0 0 0 0 0 0

2280 14 EggPatch const 0 8832 14 EggPatch const 14 EggPatch const 0 0 2051 0 0 0 0 0 0 0 0 0 0

2281 10 EggPatch * 0 8576 10 EggPatch * 10 EggPatch * 0 0 2051 0 0 0 0 0 0 0 0 0 0

2282 16 EggPoint const * 0 8576 16 EggPoint const * 16 EggPoint const * 0 0 2283 0 0 0 0 0 0 0 0 0 0

2283 14 EggPoint const 0 8832 14 EggPoint const 14 EggPoint const 0 0 2052 0 0 0 0 0 0 0 0 0 0

2284 10 EggPoint * 0 8576 10 EggPoint * 10 EggPoint * 0 0 2052 0 0 0 0 0 0 0 0 0 0

2285 17 EggPolysetMaker * 0 8576 17 EggPolysetMaker * 17 EggPolysetMaker * 0 0 2053 0 0 0 0 0 0 0 0 0 0

2286 19 EggPoolUniquifier * 0 8576 19 EggPoolUniquifier * 19 EggPoolUniquifier * 0 0 2056 0 0 0 0 0 0 0 0 0 0

2287 20 EggSAnimData const * 0 8576 20 EggSAnimData const * 20 EggSAnimData const * 0 0 2288 0 0 0 0 0 0 0 0 0 0

2288 18 EggSAnimData const 0 8832 18 EggSAnimData const 18 EggSAnimData const 0 0 2057 0 0 0 0 0 0 0 0 0 0

2289 14 EggSAnimData * 0 8576 14 EggSAnimData * 14 EggSAnimData * 0 0 2057 0 0 0 0 0 0 0 0 0 0

2290 16 EggTable const * 0 8576 16 EggTable const * 16 EggTable const * 0 0 2291 0 0 0 0 0 0 0 0 0 0

2291 14 EggTable const 0 8832 14 EggTable const 14 EggTable const 0 0 2058 0 0 0 0 0 0 0 0 0 0

2292 10 EggTable * 0 8576 10 EggTable * 10 EggTable * 0 0 2058 0 0 0 0 0 0 0 0 0 0

2293 22 EggTextureCollection * 0 8576 22 EggTextureCollection * 22 EggTextureCollection * 0 0 2060 0 0 0 0 0 0 0 0 0 0

2294 28 EggTextureCollection const * 0 8576 28 EggTextureCollection const * 28 EggTextureCollection const * 0 0 2295 0 0 0 0 0 0 0 0 0 0

2295 26 EggTextureCollection const 0 8832 26 EggTextureCollection const 26 EggTextureCollection const 0 0 2060 0 0 0 0 0 0 0 0 0 0

2296 20 TextureReplacement * 0 8576 42 EggTextureCollection::TextureReplacement * 42 EggTextureCollection::TextureReplacement * 0 0 2297 0 0 0 0 0 0 0 0 0 0

2297 18 TextureReplacement 0 2367488 40 EggTextureCollection::TextureReplacement 40 EggTextureCollection::TextureReplacement 2060 0 2298 0 0 0 0 0 0 0 0 0 0

2298 35 map< PT_EggTexture, PT_EggTexture > 0 2048 35 map< PT_EggTexture, PT_EggTexture > 35 map< PT_EggTexture, PT_EggTexture > 0 0 0 0 0 0 0 0 0 0 0 0 0

2299 26 TextureReplacement const * 0 8576 48 EggTextureCollection::TextureReplacement const * 48 EggTextureCollection::TextureReplacement const * 0 0 2300 0 0 0 0 0 0 0 0 0 0

2300 24 TextureReplacement const 0 8832 46 EggTextureCollection::TextureReplacement const 46 EggTextureCollection::TextureReplacement const 0 0 2297 0 0 0 0 0 0 0 0 0 0

2301 9 size_type 0 2367488 31 EggTextureCollection::size_type 31 EggTextureCollection::size_type 2060 0 2159 0 0 0 0 0 0 0 0 0 0

2302 22 EggTriangleFan const * 0 8576 22 EggTriangleFan const * 22 EggTriangleFan const * 0 0 2303 0 0 0 0 0 0 0 0 0 0

2303 20 EggTriangleFan const 0 8832 20 EggTriangleFan const 20 EggTriangleFan const 0 0 2061 0 0 0 0 0 0 0 0 0 0

2304 16 EggTriangleFan * 0 8576 16 EggTriangleFan * 16 EggTriangleFan * 0 0 2061 0 0 0 0 0 0 0 0 0 0

2305 24 EggTriangleStrip const * 0 8576 24 EggTriangleStrip const * 24 EggTriangleStrip const * 0 0 2306 0 0 0 0 0 0 0 0 0 0

2306 22 EggTriangleStrip const 0 8832 22 EggTriangleStrip const 22 EggTriangleStrip const 0 0 2062 0 0 0 0 0 0 0 0 0 0

2307 18 EggTriangleStrip * 0 8576 18 EggTriangleStrip * 18 EggTriangleStrip * 0 0 2062 0 0 0 0 0 0 0 0 0 0

2308 22 EggXfmAnimData const * 0 8576 22 EggXfmAnimData const * 22 EggXfmAnimData const * 0 0 2309 0 0 0 0 0 0 0 0 0 0

2309 20 EggXfmAnimData const 0 8832 20 EggXfmAnimData const 20 EggXfmAnimData const 0 0 2064 0 0 0 0 0 0 0 0 0 0

2310 13 EggXfmSAnim * 0 8576 13 EggXfmSAnim * 13 EggXfmSAnim * 0 0 2063 0 0 0 0 0 0 0 0 0 0

2311 19 EggXfmSAnim const * 0 8576 19 EggXfmSAnim const * 19 EggXfmSAnim const * 0 0 2312 0 0 0 0 0 0 0 0 0 0

2312 17 EggXfmSAnim const 0 8832 17 EggXfmSAnim const 17 EggXfmSAnim const 0 0 2063 0 0 0 0 0 0 0 0 0 0

2313 11 LMatrix4d * 0 8576 11 LMatrix4d * 11 LMatrix4d * 0 0 2089 0 0 0 0 0 0 0 0 0 0

2314 16 EggXfmAnimData * 0 8576 16 EggXfmAnimData * 16 EggXfmAnimData * 0 0 2064 0 0 0 0 0 0 0 0 0 0

0
4
2315 9 _dnormals 0 2 1970 1098 0 24 EggAttributes::_dnormals 0

2316 7 _drgbas 0 2 1972 1099 0 22 EggAttributes::_drgbas 0

2317 5 _duvs 0 2 1975 1123 0 18 EggVertexUV::_duvs 0

2318 6 _dxyzs 0 2 1979 1186 0 17 EggVertex::_dxyzs 0

17
2319 0 0 369 16 get_object_types 20 get_num_object_types 15 get_object_type 
2320 0 0 369 14 get_group_refs 18 get_num_group_refs 13 get_group_ref 
2321 0 0 730 12 get_textures 16 get_num_textures 11 get_texture 
2322 0 0 730 12 get_vertices 16 get_num_vertices 10 get_vertex 
2323 0 0 788 14 get_components 18 get_num_components 13 get_component 
2324 0 0 889 9 get_knots 13 get_num_knots 8 get_knot 
2325 0 0 913 11 get_u_knots 15 get_num_u_knots 10 get_u_knot 
2326 0 0 913 11 get_v_knots 15 get_num_v_knots 10 get_v_knot 
2327 0 0 1000 12 get_textures 16 get_num_textures 11 get_texture 
2328 0 0 1129 8 get_rows 4 size 7 get_row 
2329 0 0 1129 8 get_cols 4 size 7 get_col 
2330 0 0 1129 9 get_row3s 4 size 8 get_row3 
2331 0 0 1434 15 get_directories 19 get_num_directories 13 get_directory 
2332 0 0 1538 8 get_rows 4 size 7 get_row 
2333 0 0 1538 8 get_cols 4 size 7 get_col 
2334 0 0 1538 9 get_col2s 4 size 8 get_col2 
2335 0 0 1538 9 get_row2s 4 size 8 get_row2 
