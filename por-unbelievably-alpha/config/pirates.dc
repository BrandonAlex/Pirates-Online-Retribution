from direct.distributed import DistributedObjectGlobal
from pirates.uberdog.ClientServicesManager/UD import ClientServicesManager/UD
from pirates.distributed import DistributedPopulationTracker/AI
from pirates.distributed import DistributedInteractive/AI/UD
from pirates.treasuremap import DistributedBuriedTreasure/AI
from pirates.distributed import PiratesDistrict/AI
from pirates.distributed import PiratesDistrictStats/AI
from pirates.economy import DistributedShopKeeper/AI
from pirates.npc import DistributedNPCSkeleton/AI
from pirates.npc import DistributedNPCPirate/AI
from pirates.npc import DistributedNPCNavySailor/AI
from pirates.npc import DistributedGhost/AI
from pirates.npc import DistributedKillerGhost/AI
from pirates.npc import DistributedBossGhost/AI
from pirates.npc import DistributedVoodooZombie/AI
from pirates.npc import DistributedBountyHunter/AI
from pirates.npc import DistributedNPCTownfolk/AI
// from pirates.npc import DistributedBossTownfolk/AI
from pirates.creature import DistributedCreature/AI
from pirates.creature import DistributedAnimal/AI
from pirates.creature import DistributedRaven/AI
from pirates.pirate import DistributedPlayerPirate/AI/UD
from pirates.instance import DistributedInstanceBase/AI
from pirates.instance import DistributedMainWorld/AI
from pirates.instance import DistributedWelcomeWorld/AI
from pirates.instance import DistributedInstanceWorld/AI
from pirates.instance import DistributedTeleportHandler/AI
from pirates.instance import DistributedTeleportZone/AI
from pirates.instance import DistributedTeleportMgr/AI
from pirates.instance import DistributedMatchMaker/UD
from pirates.instance import DistributedTravelAgent/UD
from pirates.friends import DistributedGuildManager/AI/UD
from pirates.friends import PiratesFriendsManager/UD
from pirates.ai import NewsManager/AI
from pirates.world import DistributedGameArea/AI
from pirates.world import DistributedIsland/AI
from pirates.world import DistributedOceanGrid/AI
from pirates.world import DistributedLocatableObject/AI/UD
from pirates.world import DistributedLocationManager/AI
from pirates.world import DistributedGAConnector/AI
from pirates.world import DistributedGATunnel/AI
from pirates.world import DistributedGADoor/AI
from pirates.world import DistributedGAInterior/AI
from pirates.world import DistributedJailInterior/AI
from pirates.world import DistributedFort/AI
from pirates.battle import DistributedBattleAvatar/AI
from pirates.battle import DistributedBattleNPC/AI
from pirates.battle import WeaponBase/AI
from pirates.battle import Teamable
from pirates.piratesbase import DistributedTimeOfDayManager/AI
from pirates.piratesbase import DistributedGameStatManager/AI
from pirates.piratesgui import DistributedPirateProfileMgr/AI
from pirates.uberdog import DistributedInventory/AI/UD
from pirates.uberdog import PirateInventory/AI/UD
from pirates.minigame import DistributedPotionGame/AI
from pirates.minigame import DistributedPotionCraftingTable/AI
from pirates.minigame import DistributedRepairBench/AI
from pirates.minigame import DistributedRepairGame/AI
from pirates.minigame import DistributedFishingSpot/AI
from pirates.world import DistributedDinghy/AI
from pirates.inventory import Lootable/AI
from pirates.distributed import TargetManager/AI
from pirates.world import DistributedDoor/AI
from pirates.world import DistributedBuildingDoor/AI
from pirates.world import DistributedInteriorDoor/AI
from pirates.world import DistributedCellDoor/AI
from pirates.band import DistributedCrewMatchManager/AI/UD
from pirates.interact import DistributedSearchableContainer/AI
from pirates.coderedemption import CodeRedemption/UD
from pirates.minigame import DistributedGameTable/AI
from pirates.minigame import DistributedPokerTable/AI
from pirates.holiday import DistributedHolidayObject/AI
from pirates.movement import DistributedMovingObject/AI

// A bunch of structs we need...

typedef uint16 SkillId;
typedef SkillId SkillIdList[];

struct PokerAction {
  uint8 action;
  uint32 amount;
};

struct PotentialPirate {
  uint32 avNum;
  string avName;
  string avDNA;
  uint8 avPosition;
  uint8 aname;
  string wishName;
};

struct PosHpr {
  int32/10 x;
  int32/10 y;
  int32/10 z;
  int16/10 h;
  int16/10 p;
  int16/10 r;
};

struct Pos {
  int32/10 x;
  int32/10 y;
  int32/10 z;
};

struct PosH {
  int32/10 x;
  int32/10 y;
  int32/10 z;
  int16/10 h;
};

struct Normal {
  int32/10 nx;
  int32/10 ny;
  int32/10 nz;
};

struct AvatarType {
  int8 faction;
  int8 track;
  int8 id;
  uint8 boss;
};

struct resultPair {
  string valueDesc;
  string value;
};

struct NewsItem {
  uint32 id;
  uint32 endTime;
};

struct NewsMusicItem {
  string musicId;
  uint16/10 duration;
  uint32 requiredDoId;
};

struct NewsPathItem {
  string startWaypointId;
  string progressIds[];
};

struct PortCollisionSphere {
  int32/10 radius;
  Pos pos;
};

struct Link {
  string node;
  uint32 linkId;
  string areaUid;
  uint32 parentId;
  uint32 zoneId;
  string linkNode;
  uint32 worldId;
  uint32 worldZoneId;
};

struct triggerSphere {
  int32/10 posX;
  int32/10 posY;
  int32/10 posZ;
  int32/10 triggerRadius;
  string spawnPtId;
};

struct PlunderListItem {
  uint32 category;
  uint16 id;
  uint16 count;
};

struct PlunderItemInfo {
  uint32 category;
  uint16 id;
  uint16 extraArg;
};

struct PlunderItemLocationInfo {
  uint32 category;
  uint16 id;
  uint16 extraArg;
  uint8 location;
};


dclass DistributedObjectGlobal : DistributedObject {
};

dclass ClientServicesManager : DistributedObjectGlobal {
  requestChallenge() clsend;
  challenge(blob);
  login(blob, string, blob) clsend;
  acceptLogin(string);

  requestAvatars() clsend;
  setAvatars(PotentialPirate[]);

  createAvatar(blob dna, uint8 index, uint8 allegiance, string name) clsend;
  createAvatarResp(uint32 avId);

  chooseAvatar(uint32 avId) clsend;
  avatarResponse(uint32 avId, blob avdata);

  acknowledgeName(uint32 avId) clsend;
  newName(uint32 avId, string name) clsend;
  newNameResp();

  deleteAvatar(uint32 avId) clsend;
  avDeleted(uint32 avId);
};

dclass DistributedMatchMaker : DistributedObject {
  requestActivity(uint32, uint32, int32, resultPair [], uint32 [], uint32, uint16);
  requestJoin(uint32) clsend;
  skipJoin(uint32, bool) clsend;
  cancelRequest(uint32) clsend;
  instanceCreated(uint32, uint32, uint32);
  instanceRemoved(uint32, uint32, uint32);
  printStatus(uint32);
  newDistrictOnline(uint32);
  initiateTeleportResp(uint32, uint32);
  avatarOffline(uint32);
};

dclass DistributedPopulationTracker : DistributedObject {
  setShardId(uint32) required broadcast ram;
  setPopulation(uint16) required broadcast ram;
  setPopLimits(uint16, uint16) required broadcast ram;
};

dclass PiratesDistrict : DistributedDistrict {
  setParentingRules(string, string) broadcast ram;
  setAvatarCount(uint32) broadcast required;
  setNewAvatarCount(uint32) broadcast required;
  setMainWorld(string) broadcast required;
  setShardType(uint8) broadcast required ram;
  setStats : setAvatarCount, setNewAvatarCount;
  setPopulationLimits(uint16, uint16);
  rpcSetAvailable(bool available) airecv;
};

dclass PiratesDistrictStats : DistributedObject {
  setPiratesDistrictId(uint32) broadcast required ram;
  setAvatarCount(uint32) broadcast required ram;
  setNewAvatarCount(uint32) broadcast required ram;
  setStats : setAvatarCount, setNewAvatarCount;
};

struct envSubEntry {
  uint8 id;
  uint8 sub;
  int32 timeStamp;
};

dclass DistributedTimeOfDayManager : DistributedObject {
  syncTOD(uint8, uint16, int32, int32/100) required broadcast ram;
  setIsPaused(bool) required broadcast ram;
  requestSync() airecv clsend;
  setEnvSubs(envSubEntry []) required broadcast ram;
  setMoonPhaseChange(int8, int16/100, int16/100, int32) required broadcast ram;
  setMoonJolly(int8) required broadcast ram;
};

struct ItemNameHolder {
  string typedName;
  uint8[] nameIndices;
};

struct Accessory {
  uint32 uid;
  uint8 colorId;
  uint8 type;
  uint8 location;
};

struct Jewelry {
  uint8 type;
  int32 uid;
};

struct JewelryInfo {
  int32 uid;
  uint8 location;
};

struct Tattoo {
  uint8 type;
  int32 uid;
};

struct TattooInfo {
  int32 uid;
  uint8 location;
};

struct Buff {
  uint8 effectId;
  DoId attackerId;
  int16 timestamp;
  int16 duration;
  int16 timeLeft;
  uint8 recur;
  uint16[] data;
};

dclass DistributedShopKeeper : DistributedObject {
  // requestMakeSale(InventoryItem [], InventoryItem []) airecv clsend;
  // requestMakeShipSale(InventoryItem [], InventoryItem [], ItemNameHolder []) airecv clsend;
  requestPurchaseRepair(uint32) airecv clsend;
  requestPurchaseOverhaul(uint32) airecv clsend;
  requestSellShip(uint32) airecv clsend;
  requestSellItem(uint32, uint32, uint16, uint16) airecv clsend;
  requestAccessoriesList(uint32) airecv clsend;
  requestJewelryList(uint32) airecv clsend;
  requestTattooList(uint32) airecv clsend;
  // requestWeapon(JewelryInfo [], WeaponInfo []) airecv clsend; - WeaponInfo wasn't in the old DC... wtf disney
  requestAccessories(Accessory [], Accessory []) airecv clsend;
  requestJewelry(JewelryInfo [], JewelryInfo []) airecv clsend;
  requestAccessoryEquip(Accessory []) airecv clsend;
  requestJewelryEquip(Jewelry []) airecv clsend;
  requestTattooEquip(Tattoo []) airecv clsend;
  requestTattoo(TattooInfo [], TattooInfo []) airecv clsend;
  requestBarber(uint32, uint8) airecv clsend;
  requestStowaway(string) airecv clsend;
  makeSaleResponse(uint32) ownrecv;
  responseShipRepair(uint32) ownrecv;
  makeTattooResponse(uint16, uint16, bool) ownrecv;
  makeBarberResponse(uint32, uint8, bool) ownrecv;
  responseClothingList(uint32, uint32[] []) ownrecv;
  responseTattooList(uint32, TattooInfo []) ownrecv;
  responseJewelryList(uint32, JewelryInfo []) ownrecv;
};

struct SkillEffects {
  int16 hp;
  int8 power;
  int16 luck;
  int16 mojo;
  int8 swiftness;
};

struct ShipEffects {
  uint8 accel;
  uint8 maxSpeed;
  uint8 revAccel;
  uint8 maxRevAccel;
  uint8 turnRate;
  uint8 maxTurn;
};

typedef SkillEffects SkillEffectsList[];

dclass DistributedLocatableObject : DistributedObject {
  requestRegionUpdate(string) clsend airecv;
  enterAreaSphere(string, string) clsend airecv;
  leaveAreaSphere(string, string) clsend airecv;
  locationChange(string);
};

dclass DistributedInteractive : DistributedNode, DistributedLocatableObject {
  requestInteraction(uint32, uint8, bool) clsend airecv;
  requestExit() clsend airecv;
  demandExit() clsend airecv;
  rejectInteraction();
  acceptInteraction();
  rejectExit();
  offerOptions(uint8[], uint8[]);
  selectOption(uint8) airecv clsend;
  setUserId(DoId) broadcast ram;
  setUniqueId(string) required broadcast ram;
};

dclass DistributedBuriedTreasure : DistributedInteractive {
  setStartingDepth(uint16) required broadcast ram;
  setCurrentDepth(uint16) required broadcast ram;
  showTreasure(uint16) broadcast;
  startDigging();
  stopDigging(uint16);
  setVisZone(string) required broadcast ram;
};

dclass Teamable {
  setTeam(int16) required broadcast ram ownrecv;
  setPVPTeam(int8) required broadcast ram ownrecv airecv;
  setSiegeTeam(int8) required broadcast ram ownrecv airecv;
};

dclass WeaponBase : Teamable {
  requestTargetedSkill(SkillId, SkillId, uint8, DoId, DoIdList, uint32, Pos, uint8) clsend airecv;
  useTargetedSkill(SkillId, SkillId, uint8, DoId, DoIdList, SkillEffects, SkillEffects, SkillEffectsList, uint16 [], uint32, Pos, uint8) broadcast;
  requestShipSkill(SkillId, SkillId, uint8, DoId, uint32) clsend airecv;
  useShipSkill(SkillId, SkillId, uint8, DoId, SkillEffects, ShipEffects, uint32) broadcast;

  requestProjectileSkill(SkillId, SkillId, PosHpr, uint32, uint8) clsend airecv;
  useProjectileSkill(SkillId, SkillId, PosHpr, uint32, uint8) broadcast;
  suggestProjectileSkillResult(SkillId, SkillId, uint8, DoId, DoIdList, Pos, Normal, uint8[], uint32) clsend airecv;
  setProjectileSkillResult(SkillId, SkillId, uint8, DoId, DoIdList, SkillEffects, SkillEffects, SkillEffectsList, Pos, Normal, uint8[], DoId, uint32) broadcast;
};

dclass DistributedMovingObject : DistributedSmoothNode {
  setMaxSpeed(uint16) required broadcast ram;
  setStartState(string) required broadcast ram;
  setAggroRadius(int32) required broadcast ram;
  setAggroMode(uint8) required broadcast ram;
};

dclass DistributedReputationAvatar : DistributedMovingObject, DistributedInteractive { // DistributedQuestGiver
  // Multiple inheritance fucks Astron
  // Copy the fields instead
 
  // DistributedMovingObject
  /*setMaxSpeed(uint16) required broadcast ram;
  setStartState(string) required broadcast ram;
  setAggroRadius(int32) required broadcast ram;
  setAggroMode(uint8) required broadcast ram;*/
  
  // DistributedAvatar
  setName(string) required broadcast db airecv ownrecv;
  checkAvOnShard(DoId) clsend airecv;
  confirmAvOnShard(DoId avId, int8 isOnShard);
  setTalk(DoId fromAv, string(0-256) avName,
          string(0-400) chat, TalkModification [], uint8 flags) broadcast;
};

dclass DistributedBattleAvatar : DistributedReputationAvatar, WeaponBase {
  setAvatarType(AvatarType) required broadcast ram;
  setName(string) required broadcast ram db ownrecv airecv;
  friendsNotify(int32, int8) ownrecv airecv;
  setGameState(string, int16) broadcast ram;
  setGhostColor(uint8) broadcast ram;
  setIsGhost(uint8) required broadcast ram;
  setHasGhostPowers(uint8) required broadcast ram;
  playMotionAnim(uint8, int16) broadcast ownsend airecv;
  setAirborneState(bool, int16) broadcast ownsend airecv;
  setGroundState(uint8, int16) broadcast ownsend airecv;
  setCurrentTarget(uint32) broadcast ram;

  setCurrentWeapon(uint16, uint8) required broadcast ram;
  setCurrentAmmo(SkillId) required broadcast ram;
  setCurrentCharm(uint16) required broadcast ram;
  setShipId(uint32) ownrecv required ram airecv broadcast;
  ramKnockdown() broadcast;
  regenUpdate(int16) broadcast;
  setMaxHp(int32) required broadcast ram ownrecv;
  setHp(int32, uint8) required broadcast ram ownrecv;
  // setLuck(int16) required broadcast ram ownrecv;
  // setMaxLuck(int16) required broadcast ram ownrecv;
  setMojo(int16) required broadcast ram ownrecv;
  setMaxMojo(int16) required broadcast ram ownrecv;
  /*
  setSwiftness(int16) required broadcast ram ownrecv;
  setMaxSwiftness(int16) required broadcast ram ownrecv;
  setPower(int16) required broadcast ram ownrecv;
  setMaxPower(int16) required broadcast ram ownrecv;
  setLuckMod(int16) required broadcast ram ownrecv;
  setMojoMod(int16) required broadcast ram ownrecv;
  setSwiftnessMod(int16/10) required broadcast ram ownrecv;
  setHasteMod(int16/10) required broadcast ram ownrecv;
  setStunMod(int16/10) required broadcast ram ownrecv;
  setPowerMod(int16) required broadcast ram ownrecv;
  setCombo(uint8, uint8, int16, uint32) required broadcast ram;
  */
  
  setSkillEffects(Buff []) required broadcast ram ownrecv;
  
  // setEnsnaredTargetId(uint32) required broadcast ram;

  interrupted(uint8) airecv clsend;
  setLevel(uint16) required broadcast ram ownrecv;
  battleRandomSync();
  setVisZone(string) broadcast ram ownsend;
  setInInvasion(bool) required broadcast ram;
  setArmorScale(int16/10) broadcast ram;
  setEmote(int32) broadcast ram airecv ownsend;
  playEmote(int32) broadcast;
};

// BEGIN NPC CLASSES

dclass DistributedBattleNPC : DistributedBattleAvatar {
  setSpawnPos(int16/10, int16/10, int16/10) required broadcast ram;
  setAmbush(uint8) broadcast ram;
  ambushIntroDone() airecv clsend;
  boardVehicle(uint32) broadcast ram;
  setSpawnPosIndex(string) required broadcast ram;
  setAssociatedQuests(uint16 []) required broadcast ram;
  setSpawnIn(int32) broadcast ram;
  setChat(string, uint8) broadcast ownsend;
  setActorAnims(string, string, string, string) required broadcast ram;
  requestAnimSet(string) broadcast;
  setCollisionMode(uint8) required broadcast ram;
  setInitZ(int16/10) required broadcast ram;
  requestClientAggro() airecv clsend;
  setIsAlarmed(bool, int16/10) broadcast ram;
  requestHostilize() airecv clsend;
  setUniqueId(string) required broadcast ram;
};

dclass Boss {
  dummyFunc();
};

dclass DistributedNPCSkeleton : DistributedBattleNPC {
};

dclass DistributedBossSkeleton : DistributedNPCSkeleton, Boss {
};

dclass DistributedVoodooZombie : DistributedBattleNPC {
  setDNAId(string) required broadcast ram;
};

dclass DistributedBossVoodooZombie : DistributedVoodooZombie, Boss {
};

dclass DistributedBountyHunter : DistributedBattleNPC {
  setDNAId(string) required broadcast ram;
};

dclass DistributedJollyRoger : DistributedBattleNPC, Boss {
  sendInvasionTaunt(uint8) broadcast;
};

dclass DistributedBomberZombie : DistributedBattleNPC {
  explode() broadcast;
};

dclass DistributedCreature : DistributedBattleNPC {
};

dclass DistributedSeaSerpent : DistributedCreature {
};

dclass DistributedAnimal : DistributedCreature {
};

dclass DistributedRaven : DistributedCreature {
};

dclass DistributedBossCreature : DistributedCreature, Boss {
};

dclass Kraken : DistributedCreature {
  uint32 AutoInterest[];
  setParentingRules(string, string) broadcast ram;
  setGameState(string, int16) broadcast ram;
  setTargetShipId(uint32) required broadcast ram;
  setMaxHp(int32) required broadcast ram;
  setHp(int32, uint8) required broadcast ram ownrecv;
};

dclass KrakenPart : DistributedCreature {
  setKrakenId(uint32) required broadcast ram;
};

dclass DoomTentacle : KrakenPart {
  emerge(uint8) broadcast;
};

dclass GrabberTentacle : KrakenPart {
  setLocatorId(uint8) required broadcast ram;
  emerge(uint8) broadcast ram;
  grabAvatar(uint32) broadcast;
  setGrabbedAvatar(uint32) broadcast ram;
  grabMast(uint8) broadcast;
  setGrabbedMast(uint8) broadcast ram;
  hitTentacle() clsend airecv;
};

dclass HolderTentacle : KrakenPart {
  emerge(uint8) broadcast;
  setLocatorId(uint8) required broadcast ram;
  hitTentacle() clsend airecv;
};

dclass KrakenBody : KrakenPart {
};

dclass KrakenHead : KrakenPart {
};

dclass DistributedNPCPirate : DistributedBattleNPC {
  setDNAString(blob) required broadcast ram;
};

dclass DistributedNPCNavySailor : DistributedBattleNPC {
  setDNAId(string) required broadcast ram;
};

dclass DistributedBossNavySailor : DistributedNPCNavySailor, Boss {
};

dclass DistributedGhost : DistributedBattleNPC {
  setDNAId(string) required broadcast ram;
};

dclass DistributedKillerGhost : DistributedBattleNPC {
  setDNAId(string) required broadcast ram;
};

dclass DistributedBossGhost : DistributedGhost, Boss {
  sendGhostKillTaunt();
  sendGhostRunawayTaunt();
};

dclass DistributedNPCTownfolk : DistributedBattleNPC, DistributedShopKeeper {
  setDNAId(string) required broadcast ram;
  setMovie(string, uint32) broadcast ram;
  triggerInteractShow(uint32);
  offerOptions(int8);
  startTutorial(uint8);
  swordTutorialPt1(uint32) airecv clsend;
  pistolTutorialPt1(uint32) airecv clsend;
  shipTutorialPt1(uint32, ItemNameHolder) airecv clsend;
  setShopId(uint16) required broadcast ram;
  setHelpId(uint16) required broadcast ram;
  requestMusic(uint32) airecv clsend;
  playMusic(uint32) broadcast;
  levelUpCutlass(uint32) airecv clsend;
  setQuestRewardsEarned(uint32, uint32, uint32 []);
  setInInvasion(bool) broadcast ram;
  setViewedPotionInstructions() airecv clsend;
  setZombie(bool) broadcast ram;
};

dclass DistributedBossTownfolk : DistributedNPCTownfolk, Boss {
};

// END NPC CLASSES

dclass DistributedFort : DistributedBattleAvatar {
  setIslandId(uint32) required broadcast ram;
  setObjKey(string) required broadcast ram;
  setHp(int16, uint8) required broadcast ram;
  setLevel(uint16) required broadcast ram;
  setDrawbridgesLerpR(uint8) broadcast;
  hideDrawbridges() broadcast;
  hitByProjectile(SkillId, SkillId) airecv clsend;
};

dclass DistributedPlayerPirate : DistributedSmoothNode, DistributedBattleAvatar {
  friendsNotify(DoId avId, int8 status) ownrecv airecv;
  checkAvOnShard(DoId) clsend airecv;
  confirmAvOnShard(DoId avId, int8 isOnShard);
  arrivedOnDistrict(DoId districtId) ownrecv ram;
  setWhisperSCFrom(DoId fromAv, uint16 msgIndex) ownrecv clsend;
  setWhisperSCCustomFrom(DoId fromAv, uint16 msgIndex) ownrecv clsend;
  setWhisperSCEmoteFrom(DoId fromAv, uint16 emoteId) ownrecv clsend;
  setSystemMessage(DoId aboutId, string(0-256) chatString) ownrecv;
  setCommonChatFlags(uint8) broadcast ownrecv ram airecv;
  setWhitelistChatFlags(uint8) broadcast ownrecv ram airecv;
  setSC(uint16 msgIndex) broadcast ownsend airecv;
  setSCCustom(uint16 msgIndex) broadcast ownsend airecv;
  setFriendsList(FriendEntry[] = []) ownrecv required db airecv;
  setDNAString(blob) required broadcast ownrecv db;
  WishNameState(string = "OPEN") db ram;
  WishName(string = "") db ram;
  setDISLid(uint32) ram db airecv;
  setAdminAccess(uint16 = 0) ownrecv required airecv;
  requestRegionUpdate(string) clsend airecv;
  enterAreaSphere(string, string) clsend airecv;
  leaveAreaSphere(string, string) clsend airecv;
  locationChange(string);
  requestInteraction(uint32, uint8, bool) clsend airecv;
  sendCodeForRedemption(string, string, uint32) airecv clsend;

  // SOME OF THE FIELDS BELOW ARE FROM ORIGINAL GAME
  // ARE COMMENTED OUT FOR NOW (TO AVOID ISSUES):
  // db AND/OR required
  // using unknown struct

  requestExit() clsend airecv;
  setParentingRules(string, string) broadcast ram;
  cueRegenerate() broadcast;
  submitErrorLog(string) airecv clsend;
  requestBodyShapeTranslation(uint8) ownsend airecv;
  requestShipUpgrade(uint32, uint8, uint8) ownsend airecv;
  respondShipUpgrade(uint32, uint8) ownrecv;
  setInInvasion(bool) ownsend broadcast ram airecv;
  reportRevive(uint32) broadcast;
  requestGhostGM(uint8) ownsend airecv;
  requestGhost(uint8) ownsend airecv;
  requestGhostColor(uint8) ownsend airecv;
  requestKill(uint32) ownsend airecv;
  setAvatarViewTarget(uint32, string) ownsend airecv;
  acknowledgeViewTarget(uint32) ownrecv;
  requestClothesList() ownsend airecv;
  receiveClothesList(uint32[] []) ownrecv;
  requestChangeClothes() ownsend airecv;
  // requestMAPClothes(MAPClothes []) ownsend airecv;
  // setOnWelcomeWorld(bool) required ownrecv airecv db;
  setFounder(uint8) required broadcast ownrecv db;
  setAllegiance(uint8) required broadcast ownrecv db;
  // setCrewIconIndicator(uint8) ownsend required ram broadcast airecv;
  // setBadgeIcon(int8, int8) required ram broadcast db;
  requestBadgeIcon(int8, int8) ownsend airecv;
  // setShipBadgeIcon(int8, int8) required ram broadcast db;
  requestShipBadgeIcon(int8, int8) ownsend airecv;
  // setLastPVPSinkTime(uint32) required ram broadcast db;
  // setLastShipPVPDecayTime(uint32) required ram broadcast db;
  setInfamySea(uint16) ownrecv;
  // setLastPVPDefeatTime(uint32) required ram broadcast db;
  // setLastLandPVPDecayTime(uint32) required ram broadcast db;
  setInfamyLand(uint16) ownrecv;
  infamyRankSeaDecreaseMessage(uint8, uint8) ownrecv;
  infamyRankLandDecreaseMessage(uint8, uint8) ownrecv;
  setStatus(uint8) ownsend required ram broadcast airecv;
  // updateClientTutorialStatus(uint8) required ownrecv;
  // setUndead(uint8, string) required broadcast ram;
  setInventoryId(uint32) required broadcast ram ownrecv db;
  // setDinghyId(uint32) required broadcast ram;
  // setBandId(uint32, uint32) required broadcast ram ownrecv;
  requestLookoutInvite(uint32, string, uint32, uint32, resultPair []);
  // setGuildId(uint32) required airecv broadcast ram;
  // setGuildName(string) required broadcast ram;
  setBandPvp(bool) clsend airecv;
  setBandParlor(bool) clsend airecv;
  setAFK(bool) clsend airecv;
  setBandDisconnect(uint8) clsend airecv;
  // setEpicQuests(uint32) required broadcast db;
  // setStickyTargets(DoIdList) required broadcast ram;
  requestRemoveStickyTargets(DoIdList) ownsend airecv;
  requestRemoveEffects(DoIdList) ownsend airecv;
  requestAuraDetection(DoIdList) ownsend airecv;
  requestRemoveAuraDetection() ownsend airecv;
  // setDefaultShard(uint32) ownsend ownrecv required db;
  // setDefaultZone(uint32) ownrecv required db;
  // setLastLogout(uint32) required db;
  // setCustomMessages(uint16[]) ownrecv required db;
  setEmote(int32) broadcast ram airecv ownsend;
  playEmote(int32) broadcast;
  setSCEmote(uint16) broadcast ownsend airecv;
  // setSpeedChatQuest(uint16, uint16, uint16, QuestTaskState) broadcast ownsend airecv;
  setWhisperSCQuest(uint32, uint16, uint16, uint16) ownrecv clsend;
  informMissedLoot(uint8, uint8) ownrecv;
  // setSpeedChatStyleIndex(uint8) required ownsend broadcast db;
  setGameState(string, int16) broadcast ram ownsend airecv;
  levelUpMsg(uint32, uint32, uint32) broadcast airecv;
  addQuestMsg(string, uint8) broadcast airecv;
  requestCurrentWeapon(uint16, uint8) ownsend airecv;
  // requestCurrentAmmo(SkillId) ownsend airecv;
  requestCurrentCharm(uint16) ownsend airecv;
  // requestUseSkill(SkillId, uint8) ownsend airecv;
  requestDeployShip(uint32) airecv ownsend;
  requestReturnShip(uint32) airecv ownsend;
  // setActiveShipId(uint32) required airecv ownrecv ownsend ram;
  // setCrewShipId(uint32) required ownrecv ram airecv;
  initCombatTray(SkillId) ownrecv;
  // endMissionPanel(MissionData, PlayerData) ownrecv;
  endInvasionPanel(int8, bool, int32, int16, int8, int8) ownrecv;
  startTimer(uint16, int16, uint8) ownrecv;
  cancelTimer(uint8) ownrecv;
  sendLootMessage(uint16) ownrecv;
  sendCardMessage(uint16) ownrecv;
  sendWeaponMessage(uint32) ownrecv;
  sendJewelryMessage(uint32) ownrecv;
  sendTattooMessage(uint32) ownrecv;
  sendClothingMessage(uint32, uint16) ownrecv;
  sendReputationMessage(uint32, uint16[], uint16[], uint16, uint16, uint16, uint16) ownrecv;
  sendRenownMessage(uint32, uint16, uint16, uint8, uint8) ownrecv;
  sendSalvageMessage(uint32, uint16) ownrecv;
  sendFreeInventoryMessage(uint8) ownrecv;
  sendFailedLootTradeMessage(bool) ownrecv;
  // setLuck(int16) required broadcast;
  // setMaxLuck(int16) required broadcast db;
  setMojo(int16) required broadcast ownrecv;
  setMaxMojo(int16) required broadcast ownrecv;
  // setSwiftness(int16) required broadcast;
  // setMaxSwiftness(int16) required broadcast db;
  // setPower(int16) required broadcast;
  // setMaxPower(int16) required broadcast db;
  // setQuestRewardFlags(uint32) required ownrecv db;
  setTeleportFlags(uint32) airecv ownsend ram;
  teleportQuery(uint32, uint32, uint32, uint32, uint32) clsend ownrecv;
  teleportResponse(uint32, int8, uint32, uint32, uint32) ownrecv clsend;
  forceTeleportStart(string, uint32, uint32, uint32, uint32, uint32) broadcast ram;
  relayTeleportLoc(uint32, uint32, uint32);
  requestActivityAccepted();
  lookoutMatchFound(uint16, uint32);
  lookoutMatchFailed(bool);
  lookoutFeedback(uint8);
  beginningTeleport(uint8, uint8, string, int32);
  requestInvites(uint8 [], uint32, uint32, resultPair [], uint32 []) airecv clsend;
  requestInvitesResp(uint32 [], uint8);
  setLootCarried(uint16, uint16) broadcast ram;
  giveDefaultQuest() airecv clsend;
  requestReturnLocation(uint32) airecv ownsend;
  setReturnLocation(string) required db airecv ownrecv;
  requestCurrentIsland(uint32) airecv ownsend;
  setCurrentIsland(string) ownrecv;
  setJailCellIndex(uint8) required airecv ownrecv;
  // setTeam(int16) required broadcast ram ownrecv;
  // setPvp(uint8) required broadcast ram ownrecv;
  // setZombie(uint8, uint8) required broadcast ram ownrecv;
  setCurseStatus(uint8) ownrecv;
  // setParlorGame(uint8) required broadcast ram ownrecv;
  // setPopulated(uint8) required broadcast db ram;
  spendSkillPoint(SkillId) airecv clsend;
  useTonic(uint16) airecv ownsend;
  useBestTonic() airecv ownsend;
  spentSkillPoint(SkillId) ownrecv;
  requestActivity(uint32, int32, resultPair [], uint32 []) airecv clsend;
  // setTempDoubleXPReward(uint32) required db ram broadcast;
  setGMNametag(string, string) required broadcast ownrecv db;
  requestGotoJailWhileInjured() ownsend airecv;
  setUnderArrest(uint8 = 0) required ram airecv db;
  startHealing(uint32);
  stopHealing();
  setBeingHealed(bool) broadcast ram;
  showContextTutPanel(int16, uint8, uint16, uint8) ownrecv;
  requestContext(uint16, uint8) airecv ownsend;
  requestSeenContext(uint16) airecv ownsend;
  requestChangeTutType(uint16, bool) airecv ownsend;
  removeContext(uint16) ownrecv;
  swingToShip(DoId, DoId, uint8, int16) broadcast ownsend;
  acquireTeleportMutex(DoId, uint32) airecv;
  releaseTeleportMutex(DoId, uint32) airecv;
  bloodFireChange(bool) broadcast ram;
  clearBloodFire() broadcast ram;
  setAuraActivated(uint16) broadcast ram;
  requestShowOffFish(uint32) ownsend airecv;
  showOffFish(uint32, uint16) broadcast;
  rewardNotify(uint32, uint32);
};

dclass NewsManager : DistributedObject {
  holidayNotify() broadcast;
  setHolidayIdList(NewsItem []) broadcast ram;
  displayMessage(uint16) broadcast;
  playMusic(NewsMusicItem) broadcast;
  setNoteablePathList(NewsPathItem []) broadcast ram;
};

dclass DistributedGameArea : DistributedNode {
  setModelPath(string) required broadcast ram;
  // setLinks(Link []) required broadcast ram;
  setUniqueId(string) required broadcast ram;
  setName(string) required broadcast ram;
  addSpawnTriggers(triggerSphere []) broadcast ram;
  spawnNPC(string, uint32) airecv clsend;
  requestNPCRemoval(uint32) airecv clsend;
};

dclass DistributedGuildManager : GuildManager {
  sendSCQuest(uint16, uint8, uint16) clsend airecv;
  recvSCQuest(uint32, uint16, uint8, uint16);
};

dclass DistributedTravelAgent : DistributedObjectGlobal {
  requestInitLoc(uint32) clsend;
  requestInitLocResponse(bool, uint32);
};

dclass DistributedIsland : DistributedCartesianGrid, DistributedGameArea, Teamable {
  setParentingRules(string, string) required broadcast ram;
  setIslandTransform(int32/10, int32/10, int32/10, int32/10) broadcast required ram;
  setZoneSphereSize(uint16, uint16, uint16) required broadcast ram;
  setZoneSphereCenter(int32, int32) required broadcast ram;
  setIslandModel(string) required broadcast ram;
  setUndockable(bool) required broadcast;
  setPortCollisionSpheres(PortCollisionSphere []) required broadcast ram;
  makeLavaErupt() broadcast;
  requestEntryToIsland() airecv clsend;
  deniedEntryToIsland();
  setFeastFireEnabled(bool) required broadcast ram;
  setFireworkShowEnabled(bool, uint8) required broadcast ram;
};

dclass PCAvatarFriendsManager : AvatarFriendsManager {
};

struct Friend
{
  uint32 doId;
  string name;
  blob dna;
};

dclass PiratesFriendsManager : DistributedObjectGlobal {
  removeFriend(uint32) clsend;
  requestAvatarInfo(uint32[]) clsend;

  requestFriendsList() clsend;

  friendInfo(Friend);
  friendList(Friend []);

  friendOnline(uint32, uint8, uint8);
  friendOffline(uint32);

  goingOffline(uint32 avId);

  getAvatarDetails(uint32) clsend;
  friendDetails(uint32, blob, uint16[], uint16, int16, int16, uint32, uint32, blob, blob, int8[]);

  whisperSCTo(uint32 toId, uint16 msgIndex) clsend;
  setWhisperSCFrom(uint32 fromId, uint16 msgIndex);

  whisperSCCustomTo(uint32 toId, uint16 msgIndex) clsend;
  setWhisperSCCustomFrom(uint32 fromId, uint16 msgIndex);

  whisperSCEmoteTo(uint32 toId, uint16 emoteId) clsend;
  setWhisperSCEmoteFrom(uint32 fromId, uint16 emoteId);

  sendTalkWhisper(uint32 toId, string message) clsend;
  receiveTalkWhisper(uint32 fromId, string message);

};

dclass DistributedInstanceBase : DistributedObject {
  uint32 AutoInterest[];
  setParentingRules(string, string) required broadcast ram;
  setType(uint8) broadcast ram;
  setSpawnInfo(int32/10, int32/10, int32/10, int16, uint32, uint32 []);
  requestSpawnLoc() airecv clsend;
  avatarDied() airecv clsend;
  sendLocalAvatarToJail(uint32, uint32, uint32) broadcast;
};

dclass DistributedMainWorld : DistributedInstanceBase {
  setParentingRules(string, string) required broadcast ram;
};

dclass DistributedWelcomeWorld : DistributedInstanceBase {
};

dclass DistributedInstanceWorld : DistributedInstanceBase {
};

typedef uint32 shipList[];

dclass DistributedTeleportMgr : DistributedObject {
  initiateTeleport(uint8, uint8, uint32, string, uint32, string, int32, uint32, uint32) airecv clsend;
  initiateTeleportAI(uint8, string);
  teleportHasBegun(uint8, uint8, string, int32);
  beginTeleportPull(uint32 [], string, uint8, string, uint32, uint8, uint32, uint32, int32, resultPair [], shipList [], uint32, uint32);
  beginDeployThenTeleportPull(uint32, string, uint32);
  requestTargetsLocation(uint32) airecv clsend;
  _localTeleportToIdResponse(uint32, uint32, uint32);
  requestTeleportToIsland(string) airecv clsend;
  teleportToIslandResponse(uint32, uint32);
  stowawayTeleportResponse(uint32, uint32);
  requestTeleportToFishingShip() airecv clsend;
  teleportToFishingShipResponse(uint32);
  notifyFriendVisit(uint32);
  requestClearPreventDamage() airecv clsend;
  requestCrossShardDeploy(uint32, string, uint32) clsend airecv;
  setWelcomeShardMin(uint16);
  teleportToObjectReq(uint32) airecv clsend;
  teleportToObjectResp(uint32, uint32, uint32, uint32) airecv clsend;
};

dclass DistributedTeleportZone : DistributedInstanceBase {
};

dclass DistributedTeleportHandler : DistributedObject {
  startTeleportProcess(uint32, uint32, uint32) airecv clsend;
  continueTeleportToTZ() airecv clsend;
  waitInTZ(uint32 [], uint32) broadcast ram;
  teleportToInstanceReady(uint32) airecv clsend;
  continueTeleportToInstance(uint32, uint32, uint32, string, uint32, uint32, uint32, string, uint32) broadcast ram;
  readyToFinishTeleport(uint32) airecv clsend;
  teleportToInstanceCleanup() broadcast ram;
  teleportToInstanceFinal(uint32) airecv clsend;
  abortTeleport() broadcast ram;
  avatarLeft() airecv clsend;
};

dclass DistributedOceanGrid : DistributedCartesianGrid {
  setParentingRules(string, string) required broadcast ram;
};

dclass DistributedLocationManager : DistributedObject {
};

dclass DistributedGAInterior : DistributedGameArea {
  // N.B. because Astron takes a shit if we add DistributedCartesianGrid
  // to base classes, we manually add these methods
  setBuildingInterior(bool) required broadcast ram;
  setCellWidth(uint32) required broadcast ram;
  setParentingRules(string, string) required broadcast ram;
};

dclass DistributedGAConnector : DistributedNode {
  //setParentingRules(string, string) required broadcast ram;
  setModelPath(string) required broadcast ram;
  setLinks(uint8, string, Link []) broadcast ram;
  setUniqueId(string) required broadcast ram;
  requestPrivateArea(uint32) airecv clsend;
  setPrivateArea(uint32, uint32, uint32, bool) airecv clsend;
};

dclass DistributedGATunnel : DistributedGAConnector {
  sendLeaveTunnelDone() airecv clsend;
};

dclass DistributedGADoor : DistributedGAConnector {
};

dclass DistributedJailInterior : DistributedGAInterior {
};

struct InventoryCategoryLimit {
  uint16 category;
  uint16 limit;
};

struct InventoryTypeLimit {
  uint16 type;
  uint16 limit;
};

struct InventoryStackableSlot {
  uint16 type;
  uint16 quantity;
};

struct InventoryDoIdSlot {
  uint16 category;
  uint32 doId;
};

struct InventoryAccumulatorSlot {
  uint16 type;
  uint32 quantity;
};

struct InventoryItem {
  uint16 type;
  uint16 id;
  uint8 location;
  uint8 upgrades;
  uint8 colorId;
  uint32 count;
};

dclass DistributedInventory : DistributedObject {
  uint32 AutoInterest[];
  setParentingRules(string, string) broadcast ram;
  setInventoryVersion(uint8) airecv db required ownrecv;
  setOwnerId(uint32) required broadcast airecv db ownrecv;
  setCategoryLimits(InventoryCategoryLimit []) airecv db required broadcast ownrecv;
  setDoIds(InventoryDoIdSlot []) airecv db required broadcast ownrecv;
  accumulator(uint16, uint32);
  setAccumulators(InventoryAccumulatorSlot []) airecv db required ownrecv;
  stackLimit(uint16, uint16);
  stack(uint16, uint16);
  locatableItem(uint8, InventoryItem);
  setStackLimits(InventoryTypeLimit []) airecv db required ownrecv;
  setStacks(InventoryStackableSlot []) airecv db required ownrecv;
  locatablesReady(uint8) airecv ram required ownrecv;
  setLocatables(InventoryItem []) airecv db required ownrecv;
  moveLocatables(InventoryItem, InventoryItem) airecv ownrecv clsend;
  trashLocatables(InventoryItem []) airecv ownrecv clsend;
  setTemporaryInventory(bool);
  setTemporaryStack(uint16, uint16);
  sendMaxHp(uint16, uint32) airecv clsend;
  sendMaxMojo(uint16, uint32) airecv clsend;
  requestInventoryComplete();
  approvedTradeResponse(uint32) airecv db;
};

dclass PirateInventory : DistributedInventory {
};

dclass DistributedPotionCraftingTable : DistributedInteractive {
  setParentingRules(string, string) broadcast ram;
  checkExit() clsend airecv;
};

dclass DistributedPotionGame : DistributedObject {
  setColorSet(uint8(0-5)) required;
  start(uint8(0-5));
  completeRecipe(uint8, bool) clsend airecv;
  claimXPBonus(uint8(0-17)) clsend airecv;
  completeSurvival(uint32, uint32) clsend airecv;
  setHintsActive(bool) clsend airecv;
  setXpBonus(uint32) broadcast;
  stop();
  reset() clsend airecv;
  checkExit();
  finish() clsend airecv;
};

dclass DistributedRepairBench : DistributedInteractive {
  setDifficulty(uint8) required broadcast ram;
  denyAccess(int8);
  finishInteraction();
  kickInteraction();
};

dclass DistributedRepairGame : DistributedObject {
  start(uint8(0-5));
  stop();
  requestMincroGame(uint8(0-5)) airecv clsend;
  requestMincroGameResponse(bool, uint8);
  reportMincroGameProgress(uint8(0-5), int8, uint8) clsend airecv;
  setMincroGameProgress(uint8(0-5), int8);
  setAllMincroGameProgress(int8 []);
  setAvIds2CurrentGameList(uint8 [], uint32 []);
  reportMincroGameScore(uint8(0-5), uint32) clsend airecv;
  cycleComplete(uint8, uint32 [], uint16 [], uint32);
  shipDamaged(bool, uint8);
  setGoldBonus(uint32) broadcast;
};

dclass DistributedDinghy : DistributedInteractive {
  setInteractRadius(uint8) required broadcast ram;
  setLocationId(uint8) required broadcast ram;
  //setSiegeTeam(int8) required broadcast ram;
  //offerOptions();
  //offerBandOptions(BandShipInfo []);
  //offerFriendOptions(FriendShipInfo []);
  //offerGuildOptions(GuildShipInfo []);
  //offerPublicOptions(PublicShipInfo []);
  //sendAvatarToShip(uint32);
  denyAccess(int8);
  //selectOwnShip(uint32, int8) clsend airecv;
  //selectFriendShip(uint32) clsend airecv;
  //selectBandShip(uint32) clsend airecv;
  //selectGuildShip(uint32) clsend airecv;
  //selectPublicShip(uint32) clsend airecv;
  //responseFriendsList(uint32, uint32);
  //responseGuildMatesList(uint32, uint32);
};

dclass Lootable {
  startLooting(PlunderListItem [], int8, uint8, bool);
  stopLooting();
  doneTaking() airecv clsend;
  requestItem(PlunderItemLocationInfo) airecv clsend;
  requestItems(PlunderItemInfo []) airecv clsend;
};

dclass DistributedFishingSpot : DistributedInteractive, Lootable {
  setIndex(int8) broadcast ram required;
  setOceanOffset(int16/10) broadcast ram required;
  setOnABoat(bool) broadcast ram required;
  caughtFish(uint8, uint16) clsend airecv;
  lostLure(int16) clsend airecv;
  firstTimeFisher();
  spotFilledByAvId(uint32) broadcast ram;
  setXpBonus(uint32) broadcast;
  setGoldBonus(uint32) broadcast;
};

dclass TargetManager : DistributedObject {
};

dclass DistributedGameStatManager : DistributedObject {
  setAggroModelIndex(int8) required broadcast ram;
};

struct Location {
  uint32 parent;
  uint32 zone;
};

typedef Location Locations[];

dclass DistributedDoor : DistributedInteractive {
  setDoorIndex(uint8) required broadcast ram;
  setBuildingUid(string) required broadcast ram;
  setMovie(uint8, uint32, int16) broadcast;
  setLocked(uint8) required broadcast ram;
  requestArea() airecv clsend;
  setArea(Locations, uint32, bool);
  setOtherDoorId(uint32) required broadcast ram;
  setQuestNeeded(string) required broadcast ram;
};

dclass DistributedBuildingDoor : DistributedDoor {
  setInteriorId(uint32, string, uint32, uint32) required broadcast ram;
  requestPrivateInteriorInstance() airecv clsend;
  setPrivateInteriorInstance(uint32, uint32, uint32, bool);
};

dclass DistributedInteriorDoor : DistributedDoor {
  setInteriorId(uint32, uint32, uint32) required broadcast ram;
  setExteriorId(uint32, uint32, uint32) required broadcast ram;
  setBuildingDoorId(uint32) required broadcast ram;
};

dclass DistributedCellDoor : DistributedInteractive {
  setCellIndex(uint8) required broadcast ram;
  setHealth(uint16) required broadcast ram;
  setCaptives(uint32[]) required broadcast ram;
  doorKicked() airecv clsend;
};

dclass DistributedCrewMatchManager : DistributedObject {
  requestCrewAdd(uint8, uint32, uint32, uint32, uint32, uint32) airecv clsend;
  requestCrewAddUD(uint32, string, uint8, string, uint32, uint8, uint32, uint32, uint8, bool, uint32, uint32, uint32);
  responseCrewAdd(int8);
  requestCrewDelete() airecv clsend;
  requestCrewDeleteUD(uint32);
  responseCrewDelete(uint8);
  requestCrewUpdate(uint32, uint8, string, uint32);
  requestCrewChangeOptions(uint8, uint32, uint32) airecv clsend;
  addBandMember(uint32, uint32, uint32, uint32, uint8);
  removeAvatarFromLookoutList(uint32);
  removeCrewFromLookoutList(uint32);
  requestInitialAvatarAdd(uint8) airecv clsend;
  requestInitialAvatarAddUD(uint32, string, uint8, uint32, uint32, uint8, uint32);
  responseInitialAvatarAdd(uint8, string, uint32, string, uint8);
  requestInitialAvatarAddResponse(uint8, uint8) airecv clsend;
  responseInitialAvatarAddResponse(uint8);
  requestPutAvatarOnLookoutList(uint8) airecv clsend;
  requestPutAvatarOnLookoutListUD(uint32, string, uint8, uint32, uint32, uint8, uint32);
  requestDeleteAvatarFromLookoutList() airecv clsend;
  requestDeleteAvatarFromLookoutListUD(uint32) airecv clsend;
  responseCrewFound(string, uint32, string);
  responseCrewGone();
  requestAcceptInvite(uint32) airecv clsend;
  requestCrewOfOneCreation() airecv clsend;
  requestCrewOfOneDelete() airecv clsend;
  notifySponsorNewMember(uint32, string);
  responseNewMemberRequest(uint32, string, uint8, uint32);
  requestNewMember(uint32, uint8, uint8, uint32) airecv clsend;
  notifyNewMemberAskingCrewLeader(uint32, string);
  notifyNewMemberAccept(uint32, string);
  notifyNewMemberDecline(uint32, string);
  notifyNewMemberTeleport(uint32, string);
  notifyNewMemberTeleportToNewShard(uint32, string, uint32, uint32, uint32);
  requestTeleportQuery(uint32, uint32, uint32, uint32, uint32) airecv clsend;
  requestTeleportResponse(uint32, int8, uint32, uint32, uint32) airecv clsend;
  teleportQuery(uint32, uint32, uint32, uint32, uint32) airecv clsend;
  teleportResponse(uint32, int8, uint32, uint32, uint32) airecv clsend;
  requestRemoveHandle(uint32);
};

dclass DistributedSearchableContainer : DistributedInteractive {
  setSearchTime(uint16) required broadcast ram;
  setType(string) required broadcast ram;
  setVisZone(string) required broadcast ram;
  setScale(int16/10, int16/10, int16/10) required broadcast ram;
  //setContainerColor(int16/10, int16/10, int16/10, int16/10) required broadcast ram;
  setSphereScale(int16/10) required broadcast ram;
  startSearching();
  stopSearching(uint16);
};

dclass CodeRedemption : DistributedObject, CallbackObject {
  online();
  recvAvatarGender(uint32, string, uint32);
  sendCodeForRedemption(string, string, uint32) airecv clsend;
  notifyClientCodeRedeemStatus(uint8, int32, uint32);
};

struct AvatarNameInfo {
  uint32 avId;
  string avName;
  uint32 playerId;
  string playerName;
};

dclass DistributedPirateProfileMgr : DistributedObject {
  requestAvatar(uint32, uint32) airecv clsend;
  //setAvatarInfo(HumanDNA, uint32, string, uint8, uint16, uint16, uint16, uint16, uint32, bool, bool, uint32);
  //receiveAvatarInfo(HumanDNA, uint32, string, uint8, uint16, uint16, uint16, uint16, uint32, bool, bool);
  setAvatarSkillLevels(uint8, uint8, uint8, uint8, uint8, uint8, uint8, uint8, uint8, uint8, uint8, uint32);
  receiveAvatarSkillLevels(uint8, uint8, uint8, uint8, uint8, uint8, uint8, uint8, uint8, uint8, uint8);
  setAvatarShipInfo(bool, bool, bool, uint32);
  receiveAvatarShipInfo(bool, bool, bool);
  receiveAvatarOnlineInfo(string, string, uint8, uint8);
  receiveAvatarChatPermissions(uint8);
};

//typedef uint8(0-255) PlayingCard;
//typedef PlayingCard CardHand[];
//typedef CardHand CardHandArray[];
//typedef PokerAction PokerActionList[];

dclass DistributedGameTable : DistributedInteractive {
  setTableType(uint8) required broadcast;
  setGameVariation(uint8) required broadcast;
  setDealerName(string) required broadcast;
  setDealerType(uint8) required broadcast;
  setAIList(uint8 []) required broadcast;
  receiveAISpeech(int8, string) broadcast;
  receiveAIThoughts(int8, string);
  requestSeat(uint8, string) airecv clsend;
  requestExit() airecv clsend;
  requestSeatResponse(uint8(0-5), uint8);
  setAvatarSeat(uint32 []) broadcast ram;
  avatarSit(uint32, uint8) broadcast;
  avatarStand(uint32, uint8) broadcast;
};

//dclass DistributedPokerTable : DistributedGameTable {
//  setAnteList(uint32 []) required broadcast;
//  sendTell(uint32);
//  requestCheat(uint8, uint8) airecv clsend;
//  cheatResponse(uint8, uint8, uint8, CardHand);
//  requestAIPlayerTurn(uint8) broadcast;
//  askForClientAction(uint8) broadcast;
//  clientAction(int8, PokerAction) airecv clsend;
//  setTableState(int8, uint8, CardHand, CardHand [], int32 [], int32 []) required broadcast ram;
//  setPotSize(uint32) required broadcast ram;
//  setPlayerActions(uint32, PokerActionList, int32 []) broadcast ram;
//  setLocalAvatarHand(CardHand);
//  setLocalAvatarHandValue(uint8, CardHand);
//  setAllHandValues(uint8 [], CardHand []) broadcast;
//  playerExpired();
//  showHealthLoss(int16);
//};

dclass DistributedHolidayObject : DistributedInteractive {
  setInteractRadius(uint8) required broadcast ram;
  setInteractMode(uint8) required broadcast ram;
};
