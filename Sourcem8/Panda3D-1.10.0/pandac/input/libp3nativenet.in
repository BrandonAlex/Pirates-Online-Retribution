1436948149
2 3
14 libp3nativenet 4 5qEC 12 panda3d.core 
90
91 14 Socket_Address 0 4 181 30 Socket_Address::Socket_Address 0 2 1 2 712
///////////////////////////////////////////////////////////////////
//     Function: Socket_Address
//       Access: Published
//  Description: Constructor that lets us set a port value
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Socket_Address::Copy constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Socket_Address::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
136
inline Socket_Address::Socket_Address(unsigned short int port = 0);
inline Socket_Address::Socket_Address(Socket_Address const &inaddr);

92 15 ~Socket_Address 0 6 181 31 Socket_Address::~Socket_Address 0 0 244
////////////////////////////////////////////////////////////////////
//     Function: Socket_Address::~Destructor
//       Access: Published
//  Description: Normal Destructor
////////////////////////////////////////////////////////////////////
53
virtual inline Socket_Address::~Socket_Address(void);

93 10 set_any_IP 0 4 181 26 Socket_Address::set_any_IP 0 1 3 265
////////////////////////////////////////////////////////////////////
//     Function: Socket_Address::set_any_IP
//       Access: Published
//  Description: Set to any address and a specified port
////////////////////////////////////////////////////////////////////
49
inline bool Socket_Address::set_any_IP(int port);

94 8 set_port 0 4 181 24 Socket_Address::set_port 0 1 4 247
////////////////////////////////////////////////////////////////////
//     Function: Socket_Address::set_port
//       Access: Published
//  Description: Set to a specified port
////////////////////////////////////////////////////////////////////
47
inline bool Socket_Address::set_port(int port);

95 13 set_broadcast 0 4 181 29 Socket_Address::set_broadcast 0 1 5 278
////////////////////////////////////////////////////////////////////
//     Function: Socket_Address::set_broadcast
//       Access: Published
//  Description: Set to the broadcast address and a specified port
////////////////////////////////////////////////////////////////////
52
inline bool Socket_Address::set_broadcast(int port);

96 8 set_host 0 4 181 24 Socket_Address::set_host 0 3 6 7 8 899
////////////////////////////////////////////////////////////////////
//     Function: Socket_Address::set_host
//       Access: Published
//  Description: This function will take a port and string-based
//               TCP address and initialize the address with this
//               information.  Returns true on success; on failure,
//               it returns false and the address may be undefined.
////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////
//     Function: Socket_Address::set_host
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////
//     Function: Socket_Address::set_host
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////
202
inline bool Socket_Address::set_host(string const &hostname, int port);
inline bool Socket_Address::set_host(string const &hostname);
inline bool Socket_Address::set_host(unsigned int ip4adr, int port);

97 5 clear 0 4 181 21 Socket_Address::clear 0 1 9 270
////////////////////////////////////////////////////////////////////
//     Function: Socket_Address::clear
//       Access: Published
//  Description: Set the internal values to a suitable known value
////////////////////////////////////////////////////////////////////
40
inline void Socket_Address::clear(void);

98 8 get_port 0 4 181 24 Socket_Address::get_port 0 1 10 258
////////////////////////////////////////////////////////////////////
//     Function: Socket_Address::get_port
//       Access: Published
//  Description: Get the port portion as an integer
////////////////////////////////////////////////////////////////////
63
inline unsigned short int Socket_Address::get_port(void) const;

99 6 get_ip 0 4 181 22 Socket_Address::get_ip 0 1 11 274
////////////////////////////////////////////////////////////////////
//     Function: Socket_Address::get_ip
//       Access: Published
//  Description: Return the IP address portion in dot notation string
////////////////////////////////////////////////////////////////////
49
inline string Socket_Address::get_ip(void) const;

100 11 get_ip_port 0 4 181 27 Socket_Address::get_ip_port 0 1 12 276
////////////////////////////////////////////////////////////////////
//     Function: Socket_Address::get_ip_port
//       Access: Published
//  Description: Return the ip address/port in dot notation string
////////////////////////////////////////////////////////////////////
54
inline string Socket_Address::get_ip_port(void) const;

101 15 GetIPAddressRaw 0 4 181 31 Socket_Address::GetIPAddressRaw 0 1 13 241
//////////////////////////////////////////////////////////////
//     Function: Socket_Address::GetIPAdddressRaw
//       Access: Public
//  Description: Return a RAW sockaddr_in
//////////////////////////////////////////////////////////////
69
inline unsigned long int Socket_Address::GetIPAddressRaw(void) const;

102 11 operator == 0 4 181 27 Socket_Address::operator == 0 1 14 0
72
inline bool Socket_Address::operator ==(Socket_Address const &in) const;

103 11 operator != 0 4 181 27 Socket_Address::operator != 0 1 15 0
72
inline bool Socket_Address::operator !=(Socket_Address const &in) const;

104 10 operator < 0 4 181 26 Socket_Address::operator < 0 1 16 0
71
inline bool Socket_Address::operator <(Socket_Address const &in) const;

105 14 is_mcast_range 0 4 181 30 Socket_Address::is_mcast_range 0 1 17 248
//////////////////////////////////////////////////////////////
//     Function: is_mcast_range
//       Access: Published
//  Description: True if the address is in the multicast range.
//////////////////////////////////////////////////////////////
55
inline bool Socket_Address::is_mcast_range(void) const;

106 9 Socket_IP 0 4 182 20 Socket_IP::Socket_IP 0 2 18 19 452
////////////////////////////////////////////////////////////////////
// Function name : Socket_IP::Socket_IP
// Description   :  Def Constructor
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
// Function name : Socket_IP::SetSocket
// Description   : Assigns an existing socket to this class
////////////////////////////////////////////////////////////////////
74
inline Socket_IP::Socket_IP(void);
inline Socket_IP::Socket_IP(SOCKET in);

107 5 Close 0 4 182 16 Socket_IP::Close 0 1 20 234
////////////////////////////////////////////////////////////////////
// Function name : Socket_IP::Close
// Description   : closes a socket if it is open (allocated)
////////////////////////////////////////////////////////////////////
35
inline void Socket_IP::Close(void);

108 12 GetLastError 0 4 182 23 Socket_IP::GetLastError 0 1 21 245
////////////////////////////////////////////////////////////////////
// Function name : Socket_IP::GetLastError
// Description   : gets the last errcode from a socket operation
////////////////////////////////////////////////////////////////////
48
static inline int Socket_IP::GetLastError(void);

109 14 SetNonBlocking 0 4 182 25 Socket_IP::SetNonBlocking 0 1 22 247
////////////////////////////////////////////////////////////////////
// Function name : SetNonBlocking
// Description   : this function will throw a socket into non-blocking mode
////////////////////////////////////////////////////////////////////
43
inline int Socket_IP::SetNonBlocking(void);

110 11 SetBlocking 0 4 182 22 Socket_IP::SetBlocking 0 1 23 295
////////////////////////////////////////////////////////////////////
// Function name : Socket_IP::SetBlocking
// Description   : Set the socket to block on subsequent calls to
//      socket functions that address this socket
////////////////////////////////////////////////////////////////////
40
inline int Socket_IP::SetBlocking(void);

111 15 SetReuseAddress 0 4 182 26 Socket_IP::SetReuseAddress 0 1 24 242
////////////////////////////////////////////////////////////////////
// Function name :  SetReuseAddress
// Description     :  Informs a socket to reuse IP address as needed
////////////////////////////////////////////////////////////////////
54
inline bool Socket_IP::SetReuseAddress(bool flag = 1);

112 6 Active 0 4 182 17 Socket_IP::Active 0 1 25 231
////////////////////////////////////////////////////////////////////
// Function name : Socket_IP::Active
// Description   : Ask if the socket is open (allocated)
////////////////////////////////////////////////////////////////////
36
inline bool Socket_IP::Active(void);

113 17 SetRecvBufferSize 0 4 182 28 Socket_IP::SetRecvBufferSize 0 1 26 257
////////////////////////////////////////////////////////////////////
// Function name : Socket_IP::SetRecvBufferSize
// Description   : Ok it sets the recv buffer size for both tcp and UDP
////////////////////////////////////////////////////////////////////
50
inline int Socket_IP::SetRecvBufferSize(int size);

114 9 SetSocket 0 4 182 20 Socket_IP::SetSocket 0 1 27 237
////////////////////////////////////////////////////////////////////
// Function name : Socket_IP::SetSocket
// Description   : Assigns an existing socket to this class
////////////////////////////////////////////////////////////////////
45
inline void Socket_IP::SetSocket(SOCKET ins);

115 9 GetSocket 0 4 182 20 Socket_IP::GetSocket 0 2 28 29 442
////////////////////////////////////////////////////////////////////
// Function name : Socket_IP::GetSocket
// Description   : Gets the base socket type
////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////
// Function name : Socket_IP::GetSocket
// Description   : Get The RAW file id of the socket
//////////////////////////////////////////////////////////////
89
inline SOCKET Socket_IP::GetSocket(void);
inline SOCKET Socket_IP::GetSocket(void) const;

116 11 GetPeerName 0 4 182 22 Socket_IP::GetPeerName 0 1 30 219
//////////////////////////////////////////////////////////////
// Function name : Socket_IP::GetPeerName
// Description   : Wrapper on berkly getpeername...
//////////////////////////////////////////////////////////////
57
inline Socket_Address Socket_IP::GetPeerName(void) const;

117 17 InitNetworkDriver 0 4 182 28 Socket_IP::InitNetworkDriver 0 1 31 0
53
static inline int Socket_IP::InitNetworkDriver(void);

118 14 get_class_type 0 4 182 25 Socket_IP::get_class_type 0 1 32 0
50
static TypeHandle Socket_IP::get_class_type(void);

119 10 Socket_TCP 0 4 184 22 Socket_TCP::Socket_TCP 0 2 33 34 186
//////////////////////////////////////////////////////////////
// Function name : Socket_TCP::Socket_TCP
// Description   :
//////////////////////////////////////////////////////////////
76
inline Socket_TCP::Socket_TCP(SOCKET );
inline Socket_TCP::Socket_TCP(void);

120 10 SetNoDelay 0 4 184 22 Socket_TCP::SetNoDelay 0 1 35 248
////////////////////////////////////////////////////////////////////
// Function name : SetNoDelay
// Description   : Disable Nagle algorithm. Don't delay send to coalesce packets
////////////////////////////////////////////////////////////////////
49
inline int Socket_TCP::SetNoDelay(bool flag = 1);

121 9 SetLinger 0 4 184 21 Socket_TCP::SetLinger 0 1 36 241
////////////////////////////////////////////////////////////////////
// Function name : SetLinger
// Description   : will control the behavior of SO_LINGER for a TCP socket
////////////////////////////////////////////////////////////////////
59
inline int Socket_TCP::SetLinger(int interval_seconds = 0);

122 10 DontLinger 0 4 184 22 Socket_TCP::DontLinger 0 1 37 427
////////////////////////////////////////////////////////////////////
// Function name : Socket_TCP::DontLinger
// Description   : Turn off the linger flag. The socket will quickly release
//        buffered items and free up OS resources. You may lose
//        a stream if you use this flag and do not negotiate the close
//        at the application layer.
////////////////////////////////////////////////////////////////////
40
inline int Socket_TCP::DontLinger(void);

123 17 SetSendBufferSize 0 4 184 29 Socket_TCP::SetSendBufferSize 0 1 38 337
////////////////////////////////////////////////////////////////////
// Function name : SetSendBufferSize
// Description   : Just like it sounds. Sets a buffered socket recv buffer size.
//      This function does not refuse ranges outside hard-coded OS
//      limits
////////////////////////////////////////////////////////////////////
53
inline int Socket_TCP::SetSendBufferSize(int insize);

124 10 ActiveOpen 0 4 184 22 Socket_TCP::ActiveOpen 0 1 39 382
//inline bool ActiveOpen(const Socket_Address & theaddress);

////////////////////////////////////////////////////////////////////
// Function name : ActiveOpen
// Description   : This function will try and set the socket up for active open to a specified
//       address and port provided by the input parameter
////////////////////////////////////////////////////////////////////
84
inline bool Socket_TCP::ActiveOpen(Socket_Address const &theaddress, bool setdelay);

125 21 ActiveOpenNonBlocking 0 4 184 33 Socket_TCP::ActiveOpenNonBlocking 0 1 40 354
////////////////////////////////////////////////////////////////////
// Function name : ActiveOpenNonBlocking
// Description   : This function will try and set the socket up for active open to a specified
//       address and port provided by the input parameter (non-blocking version)
////////////////////////////////////////////////////////////////////
80
inline bool Socket_TCP::ActiveOpenNonBlocking(Socket_Address const &theaddress);

126 21 ErrorIs_WouldBlocking 0 4 184 33 Socket_TCP::ErrorIs_WouldBlocking 0 1 41 0
55
inline bool Socket_TCP::ErrorIs_WouldBlocking(int err);

127 12 ShutdownSend 0 4 184 24 Socket_TCP::ShutdownSend 0 1 42 0
43
inline bool Socket_TCP::ShutdownSend(void);

128 8 SendData 0 4 184 20 Socket_TCP::SendData 0 1 43 369
////////////////////////////////////////////////////////////////////
// Function name : Socket_TCP::SendData
// Description   : Ok Lets Send the Data
//
// Return type  : int
//      - if error
//      0 if socket closed for write or lengh is 0
//      + bytes writen ( May be smaller than requested)
////////////////////////////////////////////////////////////////////
51
inline int Socket_TCP::SendData(string const &str);

129 8 RecvData 0 4 184 20 Socket_TCP::RecvData 0 1 44 760
////////////////////////////////////////////////////////////////////
// Function name : Socket_TCP::RecvData
// Description   : Read the data from the connection
//
// Return type  : int
//      - if error
//      0 if socket closed for read or length is 0
//      + bytes read ( May be smaller than requested)
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
// Function name : Socket_TCP::RecvData
// Description   : Read the data from the connection
//
// Return type  : int
//      - if error
//      0 if socket closed for read or length is 0
//      + bytes read ( May be smaller than requested)
////////////////////////////////////////////////////////////////////
41
string Socket_TCP::RecvData(int max_len);

130 14 get_class_type 0 4 184 26 Socket_TCP::get_class_type 0 1 45 0
51
static TypeHandle Socket_TCP::get_class_type(void);

131 11 ~Socket_TCP 0 4 184 23 Socket_TCP::~Socket_TCP 0 0 0
30
Socket_TCP::~Socket_TCP(void);

132 17 Socket_TCP_Listen 0 4 185 36 Socket_TCP_Listen::Socket_TCP_Listen 0 1 46 0
43
Socket_TCP_Listen::Socket_TCP_Listen(void);

133 13 OpenForListen 0 4 185 32 Socket_TCP_Listen::OpenForListen 0 1 47 238
////////////////////////////////////////////////////////////////////
// Function name : OpenForListen
// Description   : This function will initialize a listening Socket
////////////////////////////////////////////////////////////////////
102
inline bool Socket_TCP_Listen::OpenForListen(Socket_Address const &Inaddess, int backlog_size = 1024);

134 21 GetIncomingConnection 0 4 185 40 Socket_TCP_Listen::GetIncomingConnection 0 1 48 245
////////////////////////////////////////////////////////////////////
// Function name : GetIncomingConnection
// Description   : This function is used to accept new connections
////////////////////////////////////////////////////////////////////
102
inline bool Socket_TCP_Listen::GetIncomingConnection(Socket_TCP &newsession, Socket_Address &address);

135 14 get_class_type 0 4 185 33 Socket_TCP_Listen::get_class_type 0 1 49 0
58
static TypeHandle Socket_TCP_Listen::get_class_type(void);

136 19 Socket_UDP_Incoming 0 4 186 40 Socket_UDP_Incoming::Socket_UDP_Incoming 0 1 50 0
54
inline Socket_UDP_Incoming::Socket_UDP_Incoming(void);

137 12 OpenForInput 0 4 186 33 Socket_UDP_Incoming::OpenForInput 0 1 51 320
////////////////////////////////////////////////////////////////////
// Function name : Socket_UDP_Incoming::OpenForInput
// Description     : Starts a UDP socket listening on a port
//
// Return type  : bool
// Argument         : NetAddress & address
////////////////////////////////////////////////////////////////////
77
inline bool Socket_UDP_Incoming::OpenForInput(Socket_Address const &address);

138 17 OpenForInputMCast 0 4 186 38 Socket_UDP_Incoming::OpenForInputMCast 0 1 52 320
////////////////////////////////////////////////////////////////////
// Function name : Socket_UDP_Incoming::OpenForInput
// Description     : Starts a UDP socket listening on a port
//
// Return type  : bool
// Argument         : NetAddress & address
////////////////////////////////////////////////////////////////////
82
inline bool Socket_UDP_Incoming::OpenForInputMCast(Socket_Address const &address);

139 9 GetPacket 0 4 186 30 Socket_UDP_Incoming::GetPacket 0 0 444
////////////////////////////////////////////////////////////////////
// Function name : Socket_UDP_Incoming::GetPacket
// Description     :  Grabs a dataset off the listening UDP socket
//      and fills in the source address information
//
// Return type  : bool
// Argument         : char * data
// Argument         : int *max_len
// Argument         : NetAddress & address
////////////////////////////////////////////////////////////////////
94
inline bool Socket_UDP_Incoming::GetPacket(char *data, int *max_len, Socket_Address &address);

140 6 SendTo 0 4 186 27 Socket_UDP_Incoming::SendTo 0 1 53 375
////////////////////////////////////////////////////////////////////
// Function name : SocketUDP_Outgoing::SendTo
// Description     : Send data to specified address
//
// Return type  : inline bool
// Argument         : char * data
// Argument         : int len
// Argument         : NetAddress & address
////////////////////////////////////////////////////////////////////
98
inline bool Socket_UDP_Incoming::SendTo(char const *data, int len, Socket_Address const &address);

141 13 InitNoAddress 0 4 186 34 Socket_UDP_Incoming::InitNoAddress 0 1 54 317
//////////////////////////////////////////////////////////////
// Function name : Socket_UDP_Incoming::InitNoAddress
// Description     : Set this socket to work with out a bound external address..
// Return type  : inline bool
// Argument         : void
//////////////////////////////////////////////////////////////
53
inline bool Socket_UDP_Incoming::InitNoAddress(void);

142 14 SetToBroadCast 0 4 186 35 Socket_UDP_Incoming::SetToBroadCast 0 1 55 333
//////////////////////////////////////////////////////////////
// Function name : Socket_UDP_Incoming::tToBroadCast
// Description     : Flips the OS bits that allow for brodcast
//      packets to com in on this port
//
// Return type  : bool
// Argument         : void
//////////////////////////////////////////////////////////////
54
inline bool Socket_UDP_Incoming::SetToBroadCast(void);

143 14 get_class_type 0 4 186 35 Socket_UDP_Incoming::get_class_type 0 1 56 0
60
static TypeHandle Socket_UDP_Incoming::get_class_type(void);

144 20 ~Socket_UDP_Incoming 0 4 186 41 Socket_UDP_Incoming::~Socket_UDP_Incoming 0 0 0
48
Socket_UDP_Incoming::~Socket_UDP_Incoming(void);

145 19 Socket_UDP_Outgoing 0 4 187 40 Socket_UDP_Outgoing::Socket_UDP_Outgoing 0 1 57 0
54
inline Socket_UDP_Outgoing::Socket_UDP_Outgoing(void);

146 13 InitToAddress 0 4 187 34 Socket_UDP_Outgoing::InitToAddress 0 1 58 384
// use this interface for a tagreted UDP connection

////////////////////////////////////////////////////////////////////
// Function name : Socket_UDP_Outgoing::InitToAddress
// Description     : Connects the Socket to a Specified address
//
// Return type  : inline bool
// Argument         : NetAddress & address
////////////////////////////////////////////////////////////////////
78
inline bool Socket_UDP_Outgoing::InitToAddress(Socket_Address const &address);

147 4 Send 0 4 187 25 Socket_UDP_Outgoing::Send 0 1 59 641
////////////////////////////////////////////////////////////////////
// Function name : Socket_UDP_Outgoing::Send
// Description     : Send data to connected address
//
// Return type  : inline bool
// Argument         : char * data
// Argument         : int len
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
// Function name : Socket_UDP_Outgoing::Send
// Description     : Send data to connected address
//
// Return type  : inline bool
// Argument         : const string &data
////////////////////////////////////////////////////////////////////
58
inline bool Socket_UDP_Outgoing::Send(string const &data);

148 13 InitNoAddress 0 4 187 34 Socket_UDP_Outgoing::InitNoAddress 0 1 60 374
// use this interface for a none tagreted UDP connection

////////////////////////////////////////////////////////////////////
// Function name : Socket_UDP_Outgoing::InitNoAddress
// Description     : This will set a udp up for targeted sends..
//
// Return type  : inline bool
// Argument         : void
////////////////////////////////////////////////////////////////////
53
inline bool Socket_UDP_Outgoing::InitNoAddress(void);

149 6 SendTo 0 4 187 27 Socket_UDP_Outgoing::SendTo 0 1 61 731
////////////////////////////////////////////////////////////////////
// Function name : Socket_UDP_Outgoing::SendTo
// Description     : Send data to specified address
//
// Return type  : inline bool
// Argument         : char * data
// Argument         : int len
// Argument         : NetAddress & address
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
// Function name : Socket_UDP_Outgoing::SendTo
// Description     : Send data to specified address
//
// Return type  : inline bool
// Argument         : const string &data
// Argument         : NetAddress & address
////////////////////////////////////////////////////////////////////
91
inline bool Socket_UDP_Outgoing::SendTo(string const &data, Socket_Address const &address);

150 14 SetToBroadCast 0 4 187 35 Socket_UDP_Outgoing::SetToBroadCast 0 1 62 313
//////////////////////////////////////////////////////////////
// Function name : Socket_UDP_Outgoing:SetToBroadCast
// Description     : Ask the OS to let us receive BROADCASt packets on  this port..
// Return type  : bool
// Argument         : void
//////////////////////////////////////////////////////////////
54
inline bool Socket_UDP_Outgoing::SetToBroadCast(void);

151 14 get_class_type 0 4 187 35 Socket_UDP_Outgoing::get_class_type 0 1 63 0
60
static TypeHandle Socket_UDP_Outgoing::get_class_type(void);

152 20 ~Socket_UDP_Outgoing 0 4 187 41 Socket_UDP_Outgoing::~Socket_UDP_Outgoing 0 0 0
48
Socket_UDP_Outgoing::~Socket_UDP_Outgoing(void);

153 12 Socket_fdset 0 4 188 26 Socket_fdset::Socket_fdset 0 1 64 218
////////////////////////////////////////////////////////////////////
// Function name : Socket_fdset::Socket_fdset
// Description   : The constructor
////////////////////////////////////////////////////////////////////
40
inline Socket_fdset::Socket_fdset(void);

154 12 setForSocket 0 4 188 26 Socket_fdset::setForSocket 0 1 65 202
////////////////////////////////////////////////////////////////////
// Function name : Socket_fdset::setForSocket
// Description   :
////////////////////////////////////////////////////////////////////
63
inline void Socket_fdset::setForSocket(Socket_IP const &incon);

155 8 IsSetFor 0 4 188 22 Socket_fdset::IsSetFor 0 1 66 258
////////////////////////////////////////////////////////////////////
// Function name : Socket_fdset::IsSetFor
// Description   : check to see if a socket object has been marked for reading
////////////////////////////////////////////////////////////////////
65
inline bool Socket_fdset::IsSetFor(Socket_IP const &incon) const;

156 11 WaitForRead 0 4 188 25 Socket_fdset::WaitForRead 0 2 67 68 379
////////////////////////////////////////////////////////////////////
// Function name : WaitForRead
// Description   :
////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////
// Function name :  Socket_fdset::WaitForRead
// Description   :
//////////////////////////////////////////////////////////////
164
inline int Socket_fdset::WaitForRead(bool zeroFds, PN_uint32 sleep_time = 2147483647);
inline int Socket_fdset::WaitForRead(bool zeroFds, Time_Span const &timeout);

157 12 WaitForWrite 0 4 188 26 Socket_fdset::WaitForWrite 0 1 69 324
////////////////////////////////
////////////////////////////////////////////////////////////////////
// Function name : Socket_fdset::WaitForWrite
// Description   : This is the function that will wait till
//      one of the sockets is ready for writing
////////////////////////////////////////////////////////////////////
87
inline int Socket_fdset::WaitForWrite(bool zeroFds, PN_uint32 sleep_time = 2147483647);

158 12 WaitForError 0 4 188 26 Socket_fdset::WaitForError 0 1 70 276
//////////////////////////////////////////////////////////////
// Function name : Socket_fdset::WaitForError
// Description   : This is the function that will wait till
//      one of the sockets is in error state
//////////////////////////////////////////////////////////////
87
inline int Socket_fdset::WaitForError(bool zeroFds, PN_uint32 sleep_time = 2147483647);

159 5 clear 0 4 188 19 Socket_fdset::clear 0 1 71 226
////////////////////////////////////////////////////////////////////
// Function name :  Socket_fdset::zeroOut
// Description   :  Marks the content as empty
////////////////////////////////////////////////////////////////////
38
inline void Socket_fdset::clear(void);

160 13 ~Socket_fdset 0 4 188 27 Socket_fdset::~Socket_fdset 0 0 0
34
Socket_fdset::~Socket_fdset(void);

161 10 GetMessage 0 4 189 39 Buffered_DatagramConnection::GetMessage 0 1 73 360
////////////////////////////////////////////////////////////////////
// Function name    : Buffered_DatagramConnection::GetMessage
// Description      :  read a message
//  
//  false means something bad happened..
//
//
// Return type      : inline bool 
// Argument         : Datagram &val
////////////////////////////////////////////////////////////////////
67
inline bool Buffered_DatagramConnection::GetMessage(Datagram &val);

162 9 DoConnect 0 4 189 38 Buffered_DatagramConnection::DoConnect 0 1 74 38
// all the real state magic is in here
57
inline bool Buffered_DatagramConnection::DoConnect(void);

163 11 IsConnected 0 4 189 40 Buffered_DatagramConnection::IsConnected 0 1 75 38
// all the real state magic is in here
59
inline bool Buffered_DatagramConnection::IsConnected(void);

164 27 Buffered_DatagramConnection 0 4 189 56 Buffered_DatagramConnection::Buffered_DatagramConnection 0 1 72 390
////////////////////////////////////////////////////////////////////
// Function name    : Buffered_DatagramConnection::Buffered_DatagramConnection
// Description      : 
//  
// Return type      : inline 
// Argument         : bool do_blocking_writes
// Argument         : int rbufsize
// Argument         : int wbufsize
////////////////////////////////////////////////////////////////////
115
inline Buffered_DatagramConnection::Buffered_DatagramConnection(int rbufsize, int wbufsize, int write_flush_point);

165 11 SendMessage 0 4 189 40 Buffered_DatagramConnection::SendMessage 0 1 76 348
// the reason thsi all exists

////////////////////////////////////////////////////////////////////
// Function name    :  Buffered_DatagramConnection::SendMessage
// Description      : send the message 
//  
// Return type      : inline bool 
// Argument         : DataGram &msg
////////////////////////////////////////////////////////////////////
74
inline bool Buffered_DatagramConnection::SendMessage(Datagram const &msg);

166 5 Flush 0 4 189 34 Buffered_DatagramConnection::Flush 0 1 77 295
////////////////////////////////////////////////////////////////////
// Function name    : Buffered_DatagramConnection::Flush
// Description      : flush all wrightes
//  
// Return type      : bool 
// Argument         : void
////////////////////////////////////////////////////////////////////
53
inline bool Buffered_DatagramConnection::Flush(void);

167 5 Reset 0 4 189 34 Buffered_DatagramConnection::Reset 0 1 78 283
////////////////////////////////////////////////////////////////////
// Function name    : Buffered_DatagramConnection::Reset
// Description      : Reset 
//  
// Return type      : void 
// Argument         : void
////////////////////////////////////////////////////////////////////
53
inline void Buffered_DatagramConnection::Reset(void);

168 23 WaitForNetworkReadEvent 0 4 189 52 Buffered_DatagramConnection::WaitForNetworkReadEvent 0 1 79 0
86
inline void Buffered_DatagramConnection::WaitForNetworkReadEvent(PN_stdfloat MaxTime);

169 16 AddressQueueSize 0 4 189 45 Buffered_DatagramConnection::AddressQueueSize 0 1 80 22
// address queue stuff
66
inline size_t Buffered_DatagramConnection::AddressQueueSize(void);

170 10 AddAddress 0 4 189 39 Buffered_DatagramConnection::AddAddress 0 1 81 342
////////////////////////////////////////////////////////////////////
// Function name    : Buffered_DatagramConnection::Init
// Description      :  must be called to set value to the server
//  
// Return type      : inline void 
// Argument         : Socket_Address &inadr
////////////////////////////////////////////////////////////////////
75
inline void Buffered_DatagramConnection::AddAddress(Socket_Address &inadr);

171 14 ClearAddresses 0 4 189 43 Buffered_DatagramConnection::ClearAddresses 0 1 82 0
62
inline void Buffered_DatagramConnection::ClearAddresses(void);

172 14 get_class_type 0 4 189 43 Buffered_DatagramConnection::get_class_type 0 1 83 0
68
static TypeHandle Buffered_DatagramConnection::get_class_type(void);

173 10 Socket_UDP 0 4 190 22 Socket_UDP::Socket_UDP 0 1 84 0
36
inline Socket_UDP::Socket_UDP(void);

174 13 InitToAddress 0 4 190 25 Socket_UDP::InitToAddress 0 1 85 375
// use this interface for a tagreted UDP connection

////////////////////////////////////////////////////////////////////
// Function name : Socket_UDP::InitToAddress
// Description     : Connects the Socket to a Specified address
//
// Return type  : inline bool
// Argument         : NetAddress & address
////////////////////////////////////////////////////////////////////
69
inline bool Socket_UDP::InitToAddress(Socket_Address const &address);

175 4 Send 0 4 190 16 Socket_UDP::Send 0 1 86 623
////////////////////////////////////////////////////////////////////
// Function name : Socket_UDP::Send
// Description     : Send data to connected address
//
// Return type  : inline bool
// Argument         : char * data
// Argument         : int len
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
// Function name : Socket_UDP::Send
// Description     : Send data to connected address
//
// Return type  : inline bool
// Argument         : const string &data
////////////////////////////////////////////////////////////////////
49
inline bool Socket_UDP::Send(string const &data);

176 13 InitNoAddress 0 4 190 25 Socket_UDP::InitNoAddress 0 1 87 365
// use this interface for a none tagreted UDP connection

////////////////////////////////////////////////////////////////////
// Function name : Socket_UDP::InitNoAddress
// Description     : This will set a udp up for targeted sends..
//
// Return type  : inline bool
// Argument         : void
////////////////////////////////////////////////////////////////////
44
inline bool Socket_UDP::InitNoAddress(void);

177 6 SendTo 0 4 190 18 Socket_UDP::SendTo 0 1 88 713
////////////////////////////////////////////////////////////////////
// Function name : Socket_UDP::SendTo
// Description     : Send data to specified address
//
// Return type  : inline bool
// Argument         : char * data
// Argument         : int len
// Argument         : NetAddress & address
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
// Function name : Socket_UDP::SendTo
// Description     : Send data to specified address
//
// Return type  : inline bool
// Argument         : const string &data
// Argument         : NetAddress & address
////////////////////////////////////////////////////////////////////
82
inline bool Socket_UDP::SendTo(string const &data, Socket_Address const &address);

178 14 SetToBroadCast 0 4 190 26 Socket_UDP::SetToBroadCast 0 1 89 304
//////////////////////////////////////////////////////////////
// Function name : Socket_UDP:SetToBroadCast
// Description     : Ask the OS to let us receive BROADCASt packets on  this port..
// Return type  : bool
// Argument         : void
//////////////////////////////////////////////////////////////
45
inline bool Socket_UDP::SetToBroadCast(void);

179 14 get_class_type 0 4 190 26 Socket_UDP::get_class_type 0 1 90 0
51
static TypeHandle Socket_UDP::get_class_type(void);

180 11 ~Socket_UDP 0 4 190 23 Socket_UDP::~Socket_UDP 0 0 0
30
Socket_UDP::~Socket_UDP(void);

90
1 0 0 7 2 193 92 0 231 ////////////////////////////////////////////////////////////////////
//     Function: Socket_Address::Copy constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 6 inaddr 1 191  
2 0 0 7 2 193 92 0 254 ///////////////////////////////////////////////////////////////////
//     Function: Socket_Address
//       Access: Published
//  Description: Constructor that lets us set a port value
//////////////////////////////////////////////////////////////////// 1 4 port 1 194  
3 0 0 6 4 196 0 0 265 ////////////////////////////////////////////////////////////////////
//     Function: Socket_Address::set_any_IP
//       Access: Published
//  Description: Set to any address and a specified port
//////////////////////////////////////////////////////////////////// 2 4 this 3 193  4 port 1 195  
4 0 0 6 5 196 0 0 247 ////////////////////////////////////////////////////////////////////
//     Function: Socket_Address::set_port
//       Access: Published
//  Description: Set to a specified port
//////////////////////////////////////////////////////////////////// 2 4 this 3 193  4 port 1 195  
5 0 0 6 6 196 0 0 278 ////////////////////////////////////////////////////////////////////
//     Function: Socket_Address::set_broadcast
//       Access: Published
//  Description: Set to the broadcast address and a specified port
//////////////////////////////////////////////////////////////////// 2 4 this 3 193  4 port 1 195  
6 0 0 6 7 196 0 0 211 //////////////////////////////////////////////////////////////
//     Function: Socket_Address::set_host
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////// 2 4 this 3 193  8 hostname 1 197  
7 0 0 6 7 196 0 0 473 ////////////////////////////////////////////////////////////////////
//     Function: Socket_Address::set_host
//       Access: Published
//  Description: This function will take a port and string-based
//               TCP address and initialize the address with this
//               information.  Returns true on success; on failure,
//               it returns false and the address may be undefined.
//////////////////////////////////////////////////////////////////// 3 4 this 3 193  8 hostname 1 197  4 port 1 195  
8 0 0 6 7 196 0 0 0 3 4 this 3 193  6 ip4adr 1 198  4 port 1 195  
9 0 0 4 8 199 0 0 270 ////////////////////////////////////////////////////////////////////
//     Function: Socket_Address::clear
//       Access: Published
//  Description: Set the internal values to a suitable known value
//////////////////////////////////////////////////////////////////// 1 4 this 3 193  
10 0 0 6 9 194 0 0 258 ////////////////////////////////////////////////////////////////////
//     Function: Socket_Address::get_port
//       Access: Published
//  Description: Get the port portion as an integer
//////////////////////////////////////////////////////////////////// 1 4 this 3 191  
11 0 0 6 10 197 0 0 274 ////////////////////////////////////////////////////////////////////
//     Function: Socket_Address::get_ip
//       Access: Published
//  Description: Return the IP address portion in dot notation string
//////////////////////////////////////////////////////////////////// 1 4 this 3 191  
12 0 0 6 11 197 0 0 276 ////////////////////////////////////////////////////////////////////
//     Function: Socket_Address::get_ip_port
//       Access: Published
//  Description: Return the ip address/port in dot notation string
//////////////////////////////////////////////////////////////////// 1 4 this 3 191  
13 0 0 6 12 200 0 0 241 //////////////////////////////////////////////////////////////
//     Function: Socket_Address::GetIPAdddressRaw
//       Access: Public
//  Description: Return a RAW sockaddr_in
////////////////////////////////////////////////////////////// 1 4 this 3 191  
14 0 0 6 13 196 0 0 0 2 4 this 3 191  2 in 1 191  
15 0 0 6 14 196 0 0 0 2 4 this 3 191  2 in 1 191  
16 0 0 6 15 196 0 0 0 2 4 this 3 191  2 in 1 191  
17 0 0 6 16 196 0 0 248 //////////////////////////////////////////////////////////////
//     Function: is_mcast_range
//       Access: Published
//  Description: True if the address is in the multicast range.
////////////////////////////////////////////////////////////// 1 4 this 3 191  
18 0 0 7 19 201 0 0 213 ////////////////////////////////////////////////////////////////////
// Function name : Socket_IP::Socket_IP
// Description   :  Def Constructor
//////////////////////////////////////////////////////////////////// 0 
19 0 0 7 19 201 0 0 237 ////////////////////////////////////////////////////////////////////
// Function name : Socket_IP::SetSocket
// Description   : Assigns an existing socket to this class
//////////////////////////////////////////////////////////////////// 1 2 in 1 202  
20 0 0 4 20 199 0 0 234 ////////////////////////////////////////////////////////////////////
// Function name : Socket_IP::Close
// Description   : closes a socket if it is open (allocated)
//////////////////////////////////////////////////////////////////// 1 4 this 3 201  
21 0 0 6 21 195 0 0 245 ////////////////////////////////////////////////////////////////////
// Function name : Socket_IP::GetLastError
// Description   : gets the last errcode from a socket operation
//////////////////////////////////////////////////////////////////// 0 
22 0 0 6 22 195 0 0 247 ////////////////////////////////////////////////////////////////////
// Function name : SetNonBlocking
// Description   : this function will throw a socket into non-blocking mode
//////////////////////////////////////////////////////////////////// 1 4 this 3 201  
23 0 0 6 23 195 0 0 295 ////////////////////////////////////////////////////////////////////
// Function name : Socket_IP::SetBlocking
// Description   : Set the socket to block on subsequent calls to
//      socket functions that address this socket
//////////////////////////////////////////////////////////////////// 1 4 this 3 201  
24 0 0 6 24 196 0 0 242 ////////////////////////////////////////////////////////////////////
// Function name :  SetReuseAddress
// Description     :  Informs a socket to reuse IP address as needed
//////////////////////////////////////////////////////////////////// 2 4 this 3 201  4 flag 1 196  
25 0 0 6 25 196 0 0 231 ////////////////////////////////////////////////////////////////////
// Function name : Socket_IP::Active
// Description   : Ask if the socket is open (allocated)
//////////////////////////////////////////////////////////////////// 1 4 this 3 201  
26 0 0 6 26 195 0 0 257 ////////////////////////////////////////////////////////////////////
// Function name : Socket_IP::SetRecvBufferSize
// Description   : Ok it sets the recv buffer size for both tcp and UDP
//////////////////////////////////////////////////////////////////// 2 4 this 3 201  4 size 1 195  
27 0 0 4 27 199 0 0 237 ////////////////////////////////////////////////////////////////////
// Function name : Socket_IP::SetSocket
// Description   : Assigns an existing socket to this class
//////////////////////////////////////////////////////////////////// 2 4 this 3 201  3 ins 1 202  
28 0 0 6 28 202 0 0 222 ////////////////////////////////////////////////////////////////////
// Function name : Socket_IP::GetSocket
// Description   : Gets the base socket type
//////////////////////////////////////////////////////////////////// 1 4 this 3 201  
29 0 0 6 28 202 0 0 218 //////////////////////////////////////////////////////////////
// Function name : Socket_IP::GetSocket
// Description   : Get The RAW file id of the socket
////////////////////////////////////////////////////////////// 1 4 this 3 203  
30 0 0 7 29 193 92 0 219 //////////////////////////////////////////////////////////////
// Function name : Socket_IP::GetPeerName
// Description   : Wrapper on berkly getpeername...
////////////////////////////////////////////////////////////// 1 4 this 3 203  
31 0 0 6 30 195 0 0 0 0 
32 0 0 7 31 206 0 0 0 0 
33 0 0 7 33 207 131 0 0 0 
34 0 0 7 33 207 131 0 186 //////////////////////////////////////////////////////////////
// Function name : Socket_TCP::Socket_TCP
// Description   :
////////////////////////////////////////////////////////////// 1 6 param0 0 202  
35 0 0 6 34 195 0 0 248 ////////////////////////////////////////////////////////////////////
// Function name : SetNoDelay
// Description   : Disable Nagle algorithm. Don't delay send to coalesce packets
//////////////////////////////////////////////////////////////////// 2 4 this 3 207  4 flag 1 196  
36 0 0 6 35 195 0 0 241 ////////////////////////////////////////////////////////////////////
// Function name : SetLinger
// Description   : will control the behavior of SO_LINGER for a TCP socket
//////////////////////////////////////////////////////////////////// 2 4 this 3 207  16 interval_seconds 1 195  
37 0 0 6 36 195 0 0 427 ////////////////////////////////////////////////////////////////////
// Function name : Socket_TCP::DontLinger
// Description   : Turn off the linger flag. The socket will quickly release
//        buffered items and free up OS resources. You may lose
//        a stream if you use this flag and do not negotiate the close
//        at the application layer.
//////////////////////////////////////////////////////////////////// 1 4 this 3 207  
38 0 0 6 37 195 0 0 337 ////////////////////////////////////////////////////////////////////
// Function name : SetSendBufferSize
// Description   : Just like it sounds. Sets a buffered socket recv buffer size.
//      This function does not refuse ranges outside hard-coded OS
//      limits
//////////////////////////////////////////////////////////////////// 2 4 this 3 207  6 insize 1 195  
39 0 0 6 38 196 0 0 320 ////////////////////////////////////////////////////////////////////
// Function name : ActiveOpen
// Description   : This function will try and set the socket up for active open to a specified
//       address and port provided by the input parameter
//////////////////////////////////////////////////////////////////// 3 4 this 3 207  10 theaddress 1 191  8 setdelay 1 196  
40 0 0 6 39 196 0 0 354 ////////////////////////////////////////////////////////////////////
// Function name : ActiveOpenNonBlocking
// Description   : This function will try and set the socket up for active open to a specified
//       address and port provided by the input parameter (non-blocking version)
//////////////////////////////////////////////////////////////////// 2 4 this 3 207  10 theaddress 1 191  
41 0 0 6 40 196 0 0 0 2 4 this 3 207  3 err 1 195  
42 0 0 6 41 196 0 0 0 1 4 this 3 207  
43 0 0 6 42 195 0 0 0 2 4 this 3 207  3 str 1 197  
44 0 0 6 43 197 0 0 379 ////////////////////////////////////////////////////////////////////
// Function name : Socket_TCP::RecvData
// Description   : Read the data from the connection
//
// Return type  : int
//      - if error
//      0 if socket closed for read or length is 0
//      + bytes read ( May be smaller than requested)
//////////////////////////////////////////////////////////////////// 2 4 this 3 207  7 max_len 1 195  
45 0 0 7 44 206 0 0 0 0 
46 0 0 7 47 208 0 0 0 0 
47 0 0 6 48 196 0 0 238 ////////////////////////////////////////////////////////////////////
// Function name : OpenForListen
// Description   : This function will initialize a listening Socket
//////////////////////////////////////////////////////////////////// 3 4 this 3 208  8 Inaddess 1 191  12 backlog_size 1 195  
48 0 0 6 49 196 0 0 0 3 4 this 3 208  10 newsession 1 207  7 address 1 193  
49 0 0 7 50 206 0 0 0 0 
50 0 0 7 52 209 144 0 0 0 
51 0 0 6 53 196 0 0 320 ////////////////////////////////////////////////////////////////////
// Function name : Socket_UDP_Incoming::OpenForInput
// Description     : Starts a UDP socket listening on a port
//
// Return type  : bool
// Argument         : NetAddress & address
//////////////////////////////////////////////////////////////////// 2 4 this 3 209  7 address 1 191  
52 0 0 6 54 196 0 0 320 ////////////////////////////////////////////////////////////////////
// Function name : Socket_UDP_Incoming::OpenForInput
// Description     : Starts a UDP socket listening on a port
//
// Return type  : bool
// Argument         : NetAddress & address
//////////////////////////////////////////////////////////////////// 2 4 this 3 209  7 address 1 191  
53 0 0 6 56 196 0 0 375 ////////////////////////////////////////////////////////////////////
// Function name : SocketUDP_Outgoing::SendTo
// Description     : Send data to specified address
//
// Return type  : inline bool
// Argument         : char * data
// Argument         : int len
// Argument         : NetAddress & address
//////////////////////////////////////////////////////////////////// 4 4 this 3 209  4 data 1 197  3 len 1 195  7 address 1 191  
54 0 0 6 57 196 0 0 317 //////////////////////////////////////////////////////////////
// Function name : Socket_UDP_Incoming::InitNoAddress
// Description     : Set this socket to work with out a bound external address..
// Return type  : inline bool
// Argument         : void
////////////////////////////////////////////////////////////// 1 4 this 3 209  
55 0 0 6 58 196 0 0 333 //////////////////////////////////////////////////////////////
// Function name : Socket_UDP_Incoming::tToBroadCast
// Description     : Flips the OS bits that allow for brodcast
//      packets to com in on this port
//
// Return type  : bool
// Argument         : void
////////////////////////////////////////////////////////////// 1 4 this 3 209  
56 0 0 7 59 206 0 0 0 0 
57 0 0 7 62 210 152 0 0 0 
58 0 0 6 63 196 0 0 331 ////////////////////////////////////////////////////////////////////
// Function name : Socket_UDP_Outgoing::InitToAddress
// Description     : Connects the Socket to a Specified address
//
// Return type  : inline bool
// Argument         : NetAddress & address
//////////////////////////////////////////////////////////////////// 2 4 this 3 210  7 address 1 191  
59 0 0 6 64 196 0 0 308 ////////////////////////////////////////////////////////////////////
// Function name : Socket_UDP_Outgoing::Send
// Description     : Send data to connected address
//
// Return type  : inline bool
// Argument         : const string &data
//////////////////////////////////////////////////////////////////// 2 4 this 3 210  4 data 1 197  
60 0 0 6 65 196 0 0 316 ////////////////////////////////////////////////////////////////////
// Function name : Socket_UDP_Outgoing::InitNoAddress
// Description     : This will set a udp up for targeted sends..
//
// Return type  : inline bool
// Argument         : void
//////////////////////////////////////////////////////////////////// 1 4 this 3 210  
61 0 0 6 66 196 0 0 353 ////////////////////////////////////////////////////////////////////
// Function name : Socket_UDP_Outgoing::SendTo
// Description     : Send data to specified address
//
// Return type  : inline bool
// Argument         : const string &data
// Argument         : NetAddress & address
//////////////////////////////////////////////////////////////////// 3 4 this 3 210  4 data 1 197  7 address 1 191  
62 0 0 6 67 196 0 0 313 //////////////////////////////////////////////////////////////
// Function name : Socket_UDP_Outgoing:SetToBroadCast
// Description     : Ask the OS to let us receive BROADCASt packets on  this port..
// Return type  : bool
// Argument         : void
////////////////////////////////////////////////////////////// 1 4 this 3 210  
63 0 0 7 68 206 0 0 0 0 
64 0 0 7 71 211 160 0 218 ////////////////////////////////////////////////////////////////////
// Function name : Socket_fdset::Socket_fdset
// Description   : The constructor
//////////////////////////////////////////////////////////////////// 0 
65 0 0 4 72 199 0 0 202 ////////////////////////////////////////////////////////////////////
// Function name : Socket_fdset::setForSocket
// Description   :
//////////////////////////////////////////////////////////////////// 2 4 this 3 211  5 incon 1 203  
66 0 0 6 73 196 0 0 258 ////////////////////////////////////////////////////////////////////
// Function name : Socket_fdset::IsSetFor
// Description   : check to see if a socket object has been marked for reading
//////////////////////////////////////////////////////////////////// 2 4 this 3 212  5 incon 1 203  
67 0 0 6 74 195 0 0 187 ////////////////////////////////////////////////////////////////////
// Function name : WaitForRead
// Description   :
//////////////////////////////////////////////////////////////////// 3 4 this 3 211  7 zeroFds 1 196  10 sleep_time 1 214  
68 0 0 6 74 195 0 0 190 //////////////////////////////////////////////////////////////
// Function name :  Socket_fdset::WaitForRead
// Description   :
////////////////////////////////////////////////////////////// 3 4 this 3 211  7 zeroFds 1 196  7 timeout 1 215  
69 0 0 6 75 195 0 0 324 ////////////////////////////////
////////////////////////////////////////////////////////////////////
// Function name : Socket_fdset::WaitForWrite
// Description   : This is the function that will wait till
//      one of the sockets is ready for writing
//////////////////////////////////////////////////////////////////// 3 4 this 3 211  7 zeroFds 1 196  10 sleep_time 1 214  
70 0 0 6 76 195 0 0 276 //////////////////////////////////////////////////////////////
// Function name : Socket_fdset::WaitForError
// Description   : This is the function that will wait till
//      one of the sockets is in error state
////////////////////////////////////////////////////////////// 3 4 this 3 211  7 zeroFds 1 196  10 sleep_time 1 214  
71 0 0 4 77 199 0 0 226 ////////////////////////////////////////////////////////////////////
// Function name :  Socket_fdset::zeroOut
// Description   :  Marks the content as empty
//////////////////////////////////////////////////////////////////// 1 4 this 3 211  
72 0 0 7 83 218 131 0 390 ////////////////////////////////////////////////////////////////////
// Function name    : Buffered_DatagramConnection::Buffered_DatagramConnection
// Description      : 
//  
// Return type      : inline 
// Argument         : bool do_blocking_writes
// Argument         : int rbufsize
// Argument         : int wbufsize
//////////////////////////////////////////////////////////////////// 3 8 rbufsize 1 195  8 wbufsize 1 195  17 write_flush_point 1 195  
73 0 0 6 80 196 0 0 360 ////////////////////////////////////////////////////////////////////
// Function name    : Buffered_DatagramConnection::GetMessage
// Description      :  read a message
//  
//  false means something bad happened..
//
//
// Return type      : inline bool 
// Argument         : Datagram &val
//////////////////////////////////////////////////////////////////// 2 4 this 3 218  3 val 1 219  
74 0 0 6 81 196 0 0 38 // all the real state magic is in here 1 4 this 3 218  
75 0 0 6 82 196 0 0 38 // all the real state magic is in here 1 4 this 3 218  
76 0 0 6 84 196 0 0 317 ////////////////////////////////////////////////////////////////////
// Function name    :  Buffered_DatagramConnection::SendMessage
// Description      : send the message 
//  
// Return type      : inline bool 
// Argument         : DataGram &msg
//////////////////////////////////////////////////////////////////// 2 4 this 3 218  3 msg 1 221  
77 0 0 6 85 196 0 0 295 ////////////////////////////////////////////////////////////////////
// Function name    : Buffered_DatagramConnection::Flush
// Description      : flush all wrightes
//  
// Return type      : bool 
// Argument         : void
//////////////////////////////////////////////////////////////////// 1 4 this 3 218  
78 0 0 4 86 199 0 0 283 ////////////////////////////////////////////////////////////////////
// Function name    : Buffered_DatagramConnection::Reset
// Description      : Reset 
//  
// Return type      : void 
// Argument         : void
//////////////////////////////////////////////////////////////////// 1 4 this 3 218  
79 0 0 4 87 199 0 0 0 2 4 this 3 218  7 MaxTime 1 223  
80 0 0 6 88 225 0 0 22 // address queue stuff 1 4 this 3 218  
81 0 0 4 89 199 0 0 342 ////////////////////////////////////////////////////////////////////
// Function name    : Buffered_DatagramConnection::Init
// Description      :  must be called to set value to the server
//  
// Return type      : inline void 
// Argument         : Socket_Address &inadr
//////////////////////////////////////////////////////////////////// 2 4 this 3 218  5 inadr 1 193  
82 0 0 4 90 199 0 0 0 1 4 this 3 218  
83 0 0 7 91 206 0 0 0 0 
84 0 0 7 93 226 180 0 0 0 
85 0 0 6 94 196 0 0 322 ////////////////////////////////////////////////////////////////////
// Function name : Socket_UDP::InitToAddress
// Description     : Connects the Socket to a Specified address
//
// Return type  : inline bool
// Argument         : NetAddress & address
//////////////////////////////////////////////////////////////////// 2 4 this 3 226  7 address 1 191  
86 0 0 6 95 196 0 0 299 ////////////////////////////////////////////////////////////////////
// Function name : Socket_UDP::Send
// Description     : Send data to connected address
//
// Return type  : inline bool
// Argument         : const string &data
//////////////////////////////////////////////////////////////////// 2 4 this 3 226  4 data 1 197  
87 0 0 6 96 196 0 0 307 ////////////////////////////////////////////////////////////////////
// Function name : Socket_UDP::InitNoAddress
// Description     : This will set a udp up for targeted sends..
//
// Return type  : inline bool
// Argument         : void
//////////////////////////////////////////////////////////////////// 1 4 this 3 226  
88 0 0 6 97 196 0 0 344 ////////////////////////////////////////////////////////////////////
// Function name : Socket_UDP::SendTo
// Description     : Send data to specified address
//
// Return type  : inline bool
// Argument         : const string &data
// Argument         : NetAddress & address
//////////////////////////////////////////////////////////////////// 3 4 this 3 226  4 data 1 197  7 address 1 191  
89 0 0 6 98 196 0 0 304 //////////////////////////////////////////////////////////////
// Function name : Socket_UDP:SetToBroadCast
// Description     : Ask the OS to let us receive BROADCASt packets on  this port..
// Return type  : bool
// Argument         : void
////////////////////////////////////////////////////////////// 1 4 this 3 226  
90 0 0 7 99 206 0 0 0 0 
46
181 14 Socket_Address 0 26625 14 Socket_Address 14 Socket_Address 0 0 0 1 91 92 0 13 93 94 95 96 97 98 99 100 101 102 103 104 105 0 0 0 0 0 204
///////////////////////////////////
// Class : Socket_Address
//
// Description: A simple place to store and munipulate tcp and port address for
//    communication layer
//
//////////////////////////////

182 9 Socket_IP 0 75777 9 Socket_IP 9 Socket_IP 0 0 0 1 106 0 0 12 107 108 109 110 111 112 113 114 115 116 117 118 0 0 1 0 183 0 0 0 0 676
/////////////////////////////////////////////////////////////////////
// Class : Socket_IP
//
// Description : Base functionality for a INET domain Socket
//     this call should be the starting point for all other
//     unix domain sockets
//
//
//                                       SocketIP
//                                          |
//       -------------------------------------------------------------------
//       |             |                       |                           |
//     SocketTCP     SocketTCP_Listen    SocketUDP_Incoming   SocketUDP_OutBound
//
//
//
// socket_fdset
//
/////////////////////////////////////////////////////////////////////

183 11 TypedObject 0 2049 11 TypedObject 11 TypedObject 0 0 0 0 0 0 0 0 0 0 0 0 3561
////////////////////////////////////////////////////////////////////
//       Class : TypedObject
// Description : This is an abstract class that all classes which
//               use TypeHandle, and also provide virtual functions to
//               support polymorphism, should inherit from.  Each
//               derived class should define get_type(), which should
//               return the specific type of the derived class.
//               Inheriting from this automatically provides support
//               for is_of_type() and is_exact_type().
//
//               All classes that inherit directly or indirectly from
//               TypedObject should redefine get_type() and
//               force_init_type(), as shown below.  Some classes that
//               do not inherit from TypedObject may still declare
//               TypeHandles for themselves by defining methods called
//               get_class_type() and init_type().  Classes such as
//               these may serve as base classes, but the dynamic type
//               identification system will be limited.  Classes that
//               do not inherit from TypedObject need not define the
//               virtual functions get_type() and force_init_type()
//               (or any other virtual functions).
//
//               There is a specific layout for defining the
//               overrides from this class.  Keeping the definitions
//               formatted just like these examples will allow
//               someone in the future to use a sed (or similar)
//               script to make global changes, if necessary.  Avoid
//               rearranging the braces or the order of the functions
//               unless you're ready to change them in every file all
//               at once.
//
//               What follows are some examples that can be used in
//               new classes that you create.
//
//               @par In the class definition (.h file):
//               @code
//               public:
//                 static TypeHandle get_class_type() {
//                   return _type_handle;
//                 }
//                 static void init_type() {
//                   <<<BaseClassOne>>>::init_type();
//                   <<<BaseClassTwo>>>::init_type();
//                   <<<BaseClassN>>>::init_type();
//                   register_type(_type_handle, "<<<ThisClassStringName>>>",
//                                 <<<BaseClassOne>>>::get_class_type(),
//                                 <<<BaseClassTwo>>>::get_class_type(),
//                                 <<<BaseClassN>>>::get_class_type());
//                 }
//                 virtual TypeHandle get_type() const {
//                   return get_class_type();
//                 }
//                 virtual TypeHandle force_init_type() {init_type(); return get_class_type();}
//
//               private:
//                 static TypeHandle _type_handle;
//               @endcode
//
//               @par In the class .cxx file:
//               @code
//               TypeHandle <<<ThisClassStringName>>>::_type_handle;
//               @endcode
//
//               @par In the class config_<<<PackageName>>>.cxx file:
//               @code
//               ConfigureFn(config_<<<PackageName>>>) {
//                 <<<ClassOne>>>::init_type();
//                 <<<ClassTwo>>>::init_type();
//                 <<<ClassN>>>::init_type();
//               }
//               @endcode
////////////////////////////////////////////////////////////////////

184 10 Socket_TCP 0 141313 10 Socket_TCP 10 Socket_TCP 0 0 0 1 119 131 0 11 120 121 122 123 124 125 126 127 128 129 130 0 0 1 0 182 0 0 0 0 377
/////////////////////////////////////////////////////////////////////
// Class : Socket_TCP
//
// Description : Base functionality for a TCP connected socket
//               This class is pretty useless by itself but it does hide some of the
//               platform differences from machine to machine
//
/////////////////////////////////////////////////////////////////////

185 17 Socket_TCP_Listen 0 75777 17 Socket_TCP_Listen 17 Socket_TCP_Listen 0 0 0 1 132 0 0 3 133 134 135 0 0 1 0 182 0 0 0 0 232
/////////////////////////////////////////////////////////////////////
// Class : Socket_TCP_Listen
// Description : Base functionality for a TCP rendezvous socket
/////////////////////////////////////////////////////////////////////

186 19 Socket_UDP_Incoming 0 141313 19 Socket_UDP_Incoming 19 Socket_UDP_Incoming 0 0 0 1 136 144 0 7 137 138 139 140 141 142 143 0 0 1 0 182 0 0 0 0 232
/////////////////////////////////////////////////////////////////////
// Class : Socket_UDP_Incoming
//
// Description : Base functionality for a UDP Reader
//
//
/////////////////////////////////////////////////////////////////////

187 19 Socket_UDP_Outgoing 0 141313 19 Socket_UDP_Outgoing 19 Socket_UDP_Outgoing 0 0 0 1 145 152 0 6 146 147 148 149 150 151 0 0 1 0 182 0 0 0 0 240
/////////////////////////////////////////////////////////////////////
// Class : Socket_UDP_Outgoing
//
// Description : Base functionality for a UDP Sending Socket
//
//
/////////////////////////////////////////////////////////////////////

188 12 Socket_fdset 0 141313 12 Socket_fdset 12 Socket_fdset 0 0 0 1 153 160 0 6 154 155 156 157 158 159 0 0 0 0 0 0

189 27 Buffered_DatagramConnection 0 75777 27 Buffered_DatagramConnection 27 Buffered_DatagramConnection 0 0 0 1 164 131 0 11 161 162 163 165 166 167 168 169 170 171 172 0 0 1 0 184 0 0 0 0 329
////////////////////////////////////////////////////////////////
// there are 3 states
//
//      1. Socket not even assigned,,,,
//      2. Socket Assigned and trying to get a active connect open
//      3. Socket is open and  writable.. ( Fully powered up )...
//
///////////////////////////////////////////////////////////////

190 10 Socket_UDP 0 141313 10 Socket_UDP 10 Socket_UDP 0 0 0 1 173 180 0 6 174 175 176 177 178 179 0 0 1 0 186 0 0 0 0 387
/////////////////////////////////////////////////////////////////////
// Class : Socket_UDP
//
// Description : Base functionality for a combination UDP Reader and
//               Writer.  This duplicates code from
//               Socket_UDP_Outgoing, to avoid the problems of
//               multiple inheritance.
/////////////////////////////////////////////////////////////////////

191 22 Socket_Address const * 0 8576 22 Socket_Address const * 22 Socket_Address const * 0 0 192 0 0 0 0 0 0 0 0 0 0

192 20 Socket_Address const 0 8832 20 Socket_Address const 20 Socket_Address const 0 0 181 0 0 0 0 0 0 0 0 0 0

193 16 Socket_Address * 0 8576 16 Socket_Address * 16 Socket_Address * 0 0 181 0 0 0 0 0 0 0 0 0 0

194 18 unsigned short int 0 8262 18 unsigned short int 18 unsigned short int 0 1 0 0 0 0 0 0 0 0 0 0 0

195 3 int 0 8194 3 int 3 int 0 1 0 0 0 0 0 0 0 0 0 0 0

196 4 bool 0 8194 4 bool 4 bool 0 4 0 0 0 0 0 0 0 0 0 0 0

197 13 atomic string 0 2 13 atomic string 13 atomic string 0 7 0 0 0 0 0 0 0 0 0 0 0

198 12 unsigned int 0 8198 12 unsigned int 12 unsigned int 0 1 0 0 0 0 0 0 0 0 0 0 0

199 4 void 0 8194 4 void 4 void 0 6 0 0 0 0 0 0 0 0 0 0 0

200 17 unsigned long int 0 8214 17 unsigned long int 17 unsigned long int 0 1 0 0 0 0 0 0 0 0 0 0 0

201 11 Socket_IP * 0 8576 11 Socket_IP * 11 Socket_IP * 0 0 182 0 0 0 0 0 0 0 0 0 0

202 6 SOCKET 0 2105344 6 SOCKET 6 SOCKET 0 0 195 0 0 0 0 0 0 0 0 0 0

203 17 Socket_IP const * 0 8576 17 Socket_IP const * 17 Socket_IP const * 0 0 204 0 0 0 0 0 0 0 0 0 0

204 15 Socket_IP const 0 8832 15 Socket_IP const 15 Socket_IP const 0 0 182 0 0 0 0 0 0 0 0 0 0

205 10 TypeHandle 0 2048 10 TypeHandle 10 TypeHandle 0 0 0 0 0 0 0 0 0 0 0 0 1098
////////////////////////////////////////////////////////////////////
//       Class : TypeHandle
// Description : TypeHandle is the identifier used to differentiate
//               C++ class types.  Any C++ classes that inherit from
//               some base class, and must be differentiated at run
//               time, should store a static TypeHandle object that
//               can be queried through a static member function
//               named get_class_type().  Most of the time, it is also
//               desirable to inherit from TypedObject, which provides
//               some virtual functions to return the TypeHandle for a
//               particular instance.
//
//               At its essence, a TypeHandle is simply a unique
//               identifier that is assigned by the TypeRegistry.  The
//               TypeRegistry stores a tree of TypeHandles, so that
//               ancestry of a particular type may be queried, and the
//               type name may be retrieved for run-time display.
////////////////////////////////////////////////////////////////////

206 12 TypeHandle * 0 8576 12 TypeHandle * 12 TypeHandle * 0 0 205 0 0 0 0 0 0 0 0 0 0

207 12 Socket_TCP * 0 8576 12 Socket_TCP * 12 Socket_TCP * 0 0 184 0 0 0 0 0 0 0 0 0 0

208 19 Socket_TCP_Listen * 0 8576 19 Socket_TCP_Listen * 19 Socket_TCP_Listen * 0 0 185 0 0 0 0 0 0 0 0 0 0

209 21 Socket_UDP_Incoming * 0 8576 21 Socket_UDP_Incoming * 21 Socket_UDP_Incoming * 0 0 186 0 0 0 0 0 0 0 0 0 0

210 21 Socket_UDP_Outgoing * 0 8576 21 Socket_UDP_Outgoing * 21 Socket_UDP_Outgoing * 0 0 187 0 0 0 0 0 0 0 0 0 0

211 14 Socket_fdset * 0 8576 14 Socket_fdset * 14 Socket_fdset * 0 0 188 0 0 0 0 0 0 0 0 0 0

212 20 Socket_fdset const * 0 8576 20 Socket_fdset const * 20 Socket_fdset const * 0 0 213 0 0 0 0 0 0 0 0 0 0

213 18 Socket_fdset const 0 8832 18 Socket_fdset const 18 Socket_fdset const 0 0 188 0 0 0 0 0 0 0 0 0 0

214 9 PN_uint32 0 2105344 9 PN_uint32 9 PN_uint32 0 0 198 0 0 0 0 0 0 0 0 0 0

215 17 Time_Span const * 0 8576 17 Time_Span const * 17 Time_Span const * 0 0 216 0 0 0 0 0 0 0 0 0 0

216 15 Time_Span const 0 8832 15 Time_Span const 15 Time_Span const 0 0 217 0 0 0 0 0 0 0 0 0 0

217 9 Time_Span 0 1050624 9 Time_Span 9 Time_Span 0 0 0 0 0 0 0 0 0 0 0 0 149
//////////////////////////////////////////////////////
// Class : Time_Span
//
// Description:
//////////////////////////////////////////////////////

218 29 Buffered_DatagramConnection * 0 8576 29 Buffered_DatagramConnection * 29 Buffered_DatagramConnection * 0 0 189 0 0 0 0 0 0 0 0 0 0

219 10 Datagram * 0 8576 10 Datagram * 10 Datagram * 0 0 220 0 0 0 0 0 0 0 0 0 0

220 8 Datagram 0 2048 8 Datagram 8 Datagram 0 0 0 0 0 0 0 0 0 0 0 0 900
////////////////////////////////////////////////////////////////////
//       Class : Datagram
// Description : An ordered list of data elements, formatted in memory
//               for transmission over a socket or writing to a data
//               file.
//
//               Data elements should be added one at a time, in
//               order, to the Datagram.  The nature and contents of
//               the data elements are totally up to the user.  When a
//               Datagram has been transmitted and received, its data
//               elements may be extracted using a DatagramIterator;
//               it is up to the caller to know the correct type of
//               each data element in order.
//
//               A Datagram is itself headerless; it is simply a
//               collection of data elements.
////////////////////////////////////////////////////////////////////

221 16 Datagram const * 0 8576 16 Datagram const * 16 Datagram const * 0 0 222 0 0 0 0 0 0 0 0 0 0

222 14 Datagram const 0 8832 14 Datagram const 14 Datagram const 0 0 220 0 0 0 0 0 0 0 0 0 0

223 11 PN_stdfloat 0 2105344 11 PN_stdfloat 11 PN_stdfloat 0 0 224 0 0 0 0 0 0 0 0 0 0

224 5 float 0 8194 5 float 5 float 0 2 0 0 0 0 0 0 0 0 0 0 0

225 6 size_t 0 2105344 6 size_t 6 size_t 0 0 200 0 0 0 0 0 0 0 0 0 0

226 12 Socket_UDP * 0 8576 12 Socket_UDP * 12 Socket_UDP * 0 0 190 0 0 0 0 0 0 0 0 0 0

0
0
0
