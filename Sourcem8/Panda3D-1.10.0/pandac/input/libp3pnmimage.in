1436948148
2 3
13 libp3pnmimage 4 BCNh 12 panda3d.core 
292
353 5 pixel 0 4 645 12 pixel::pixel 0 3 1 2 3 0
82
pixel::pixel(void);
pixel::pixel(gray fill);
pixel::pixel(gray r, gray g, gray b);

354 11 operator [] 0 4 645 18 pixel::operator [] 0 2 4 5 0
70
gray pixel::operator [](int i) const;
gray &pixel::operator [](int i);

355 10 operator + 0 4 645 17 pixel::operator + 0 1 6 0
50
pixel pixel::operator +(pixel const &other) const;

356 10 operator - 0 4 645 17 pixel::operator - 0 1 7 0
50
pixel pixel::operator -(pixel const &other) const;

357 10 operator * 0 4 645 17 pixel::operator * 0 1 8 0
49
pixel pixel::operator *(double const mult) const;

358 11 operator += 0 4 645 18 pixel::operator += 0 1 9 0
44
void pixel::operator +=(pixel const &other);

359 11 operator -= 0 4 645 18 pixel::operator -= 0 1 10 0
44
void pixel::operator -=(pixel const &other);

360 11 operator *= 0 4 645 18 pixel::operator *= 0 1 11 0
43
void pixel::operator *=(double const mult);

361 4 size 0 4 645 11 pixel::size 0 1 12 0
29
static int pixel::size(void);

362 6 output 0 4 645 13 pixel::output 0 1 13 0
33
void pixel::output(ostream &out);

363 5 get_b 0 20 645 12 pixel::get_b 0 1 15 25
getter for gray pixel::b;
30
gray pixel::get_b(void) const;

364 5 set_b 0 36 645 12 pixel::set_b 0 1 14 25
setter for gray pixel::b;
30
void pixel::set_b(gray value);

365 5 get_g 0 20 645 12 pixel::get_g 0 1 17 25
getter for gray pixel::g;
30
gray pixel::get_g(void) const;

366 5 set_g 0 36 645 12 pixel::set_g 0 1 16 25
setter for gray pixel::g;
30
void pixel::set_g(gray value);

367 5 get_r 0 20 645 12 pixel::get_r 0 1 19 25
getter for gray pixel::r;
30
gray pixel::get_r(void) const;

368 5 set_r 0 36 645 12 pixel::set_r 0 1 18 25
setter for gray pixel::r;
30
void pixel::set_r(gray value);

369 6 ~pixel 0 4 645 13 pixel::~pixel 0 0 0
20
pixel::~pixel(void);

370 8 get_name 0 6 649 21 PNMFileType::get_name 0 1 20 0
53
virtual string PNMFileType::get_name(void) const = 0;

371 18 get_num_extensions 0 6 649 31 PNMFileType::get_num_extensions 0 1 21 360
////////////////////////////////////////////////////////////////////
//     Function: PNMFileType::get_num_extensions
//       Access: Published, Virtual
//  Description: Returns the number of different possible filename
//               extensions associated with this particular file type.
////////////////////////////////////////////////////////////////////
56
virtual int PNMFileType::get_num_extensions(void) const;

372 13 get_extension 0 6 649 26 PNMFileType::get_extension 0 1 22 378
////////////////////////////////////////////////////////////////////
//     Function: PNMFileType::get_extension
//       Access: Published, Virtual
//  Description: Returns the nth possible filename extension
//               associated with this particular file type, without a
//               leading dot.
////////////////////////////////////////////////////////////////////
55
virtual string PNMFileType::get_extension(int n) const;

373 23 get_suggested_extension 0 6 649 36 PNMFileType::get_suggested_extension 0 1 23 424
////////////////////////////////////////////////////////////////////
//     Function: PNMFileType::get_suggested_extension
//       Access: Published, Virtual
//  Description: Returns a suitable filename extension (without a
//               leading dot) to suggest for files of this type, or
//               empty string if no suggestions are available.
////////////////////////////////////////////////////////////////////
64
virtual string PNMFileType::get_suggested_extension(void) const;

374 14 get_class_type 0 4 649 27 PNMFileType::get_class_type 0 1 24 0
52
static TypeHandle PNMFileType::get_class_type(void);

375 20 ~PNMFileTypeRegistry 0 4 651 41 PNMFileTypeRegistry::~PNMFileTypeRegistry 0 0 227
////////////////////////////////////////////////////////////////////
//     Function: PNMFileTypeRegistry::Destructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
48
PNMFileTypeRegistry::~PNMFileTypeRegistry(void);

376 13 get_num_types 0 4 651 34 PNMFileTypeRegistry::get_num_types 0 1 25 279
////////////////////////////////////////////////////////////////////
//     Function: PNMFileTypeRegistry::get_num_types
//       Access: Published
//  Description: Returns the total number of types registered.
////////////////////////////////////////////////////////////////////
51
int PNMFileTypeRegistry::get_num_types(void) const;

377 8 get_type 0 4 651 29 PNMFileTypeRegistry::get_type 0 1 26 261
////////////////////////////////////////////////////////////////////
//     Function: PNMFileTypeRegistry::get_type
//       Access: Published
//  Description: Returns the nth type registered.
////////////////////////////////////////////////////////////////////
56
PNMFileType *PNMFileTypeRegistry::get_type(int n) const;

378 23 get_type_from_extension 0 4 651 44 PNMFileTypeRegistry::get_type_from_extension 0 1 27 481
////////////////////////////////////////////////////////////////////
//     Function: PNMFileTypeRegistry::get_type_from_extension
//       Access: Published
//  Description: Tries to determine what the PNMFileType is likely to
//               be for a particular image file based on its
//               extension.  Returns a suitable PNMFileType pointer,
//               or NULL if no type can be determined.
////////////////////////////////////////////////////////////////////
88
PNMFileType *PNMFileTypeRegistry::get_type_from_extension(string const &filename) const;

379 26 get_type_from_magic_number 0 4 651 47 PNMFileTypeRegistry::get_type_from_magic_number 0 1 28 544
////////////////////////////////////////////////////////////////////
//     Function: PNMFileTypeRegistry::get_type_from_magic_number
//       Access: Published
//  Description: Tries to determine what the PNMFileType is likely to
//               be for a particular image file based on its
//               magic number, the first two bytes read from the
//               file.  Returns a suitable PNMFileType pointer, or
//               NULL if no type can be determined.
////////////////////////////////////////////////////////////////////
95
PNMFileType *PNMFileTypeRegistry::get_type_from_magic_number(string const &magic_number) const;

380 18 get_type_by_handle 0 4 651 39 PNMFileTypeRegistry::get_type_by_handle 0 1 29 444
////////////////////////////////////////////////////////////////////
//     Function: PNMFileTypeRegistry::get_type_by_handle
//       Access: Published
//  Description: Returns the PNMFileType instance stored in the
//               registry for the given TypeHandle, e.g. as retrieved
//               by a previous call to get_type() on the type
//               instance.
////////////////////////////////////////////////////////////////////
78
PNMFileType *PNMFileTypeRegistry::get_type_by_handle(TypeHandle handle) const;

381 5 write 0 4 651 26 PNMFileTypeRegistry::write 0 1 30 332
////////////////////////////////////////////////////////////////////
//     Function: PNMFileTypeRegistry::write
//       Access: Published
//  Description: Writes a list of supported image file types to the
//               indicated output stream, one per line.
////////////////////////////////////////////////////////////////////
74
void PNMFileTypeRegistry::write(ostream &out, int indent_level = 0) const;

382 14 get_global_ptr 0 4 651 35 PNMFileTypeRegistry::get_global_ptr 0 1 31 319
////////////////////////////////////////////////////////////////////
//     Function: PNMFileTypeRegistry::get_global_ptr
//       Access: Published, Static
//  Description: Returns a pointer to the global PNMFileTypeRegistry
//               object.
////////////////////////////////////////////////////////////////////
70
static PNMFileTypeRegistry *PNMFileTypeRegistry::get_global_ptr(void);

383 14 PNMImageHeader 0 4 652 30 PNMImageHeader::PNMImageHeader 0 2 32 33 459
////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::Copy Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
111
inline PNMImageHeader::PNMImageHeader(void);
inline PNMImageHeader::PNMImageHeader(PNMImageHeader const &copy);

384 10 operator = 0 4 652 26 PNMImageHeader::operator = 0 1 34 0
67
inline void PNMImageHeader::operator =(PNMImageHeader const &copy);

385 15 ~PNMImageHeader 0 4 652 31 PNMImageHeader::~PNMImageHeader 0 0 225
////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::Destructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
45
inline PNMImageHeader::~PNMImageHeader(void);

386 14 get_color_type 0 4 652 30 PNMImageHeader::get_color_type 0 1 35 397
////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::get_color_type
//       Access: Published
//  Description: Returns the image type of the image, as an enumerated
//               value.  This is really just the number of channels
//               cast to the enumerated type.
////////////////////////////////////////////////////////////////////
76
inline PNMImageHeader::ColorType PNMImageHeader::get_color_type(void) const;

387 16 get_num_channels 0 4 652 32 PNMImageHeader::get_num_channels 0 1 36 276
////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::get_num_channels
//       Access: Published
//  Description: Returns the number of channels in the image.
////////////////////////////////////////////////////////////////////
56
inline int PNMImageHeader::get_num_channels(void) const;

388 12 is_grayscale 0 4 652 28 PNMImageHeader::is_grayscale 0 2 37 38 948
////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::is_grayscale
//       Access: Published, Static
//  Description: This static variant of is_grayscale() returns true if
//               the indicated image type represents a grayscale
//               image, false otherwise.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::is_grayscale
//       Access: Published
//  Description: Returns false if the image is a full-color image, and
//               has red, green, and blue components; true if it is a
//               grayscale image and has only a gray component.  (The
//               gray color is actually stored in the blue channel,
//               and the red and green channels are ignored.)
////////////////////////////////////////////////////////////////////
140
static inline bool PNMImageHeader::is_grayscale(PNMImageHeader::ColorType color_type);
inline bool PNMImageHeader::is_grayscale(void) const;

389 9 has_alpha 0 4 652 25 PNMImageHeader::has_alpha 0 2 39 40 852
////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::has_alpha
//       Access: Published, Static
//  Description: This static variant of has_alpha() returns true if
//               the indicated image type includes an alpha channel,
//               false otherwise.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::has_alpha
//       Access: Published
//  Description: Returns true if the image includes an alpha channel,
//               false otherwise.  Unlike is_grayscale(), if this
//               returns false it is an error to call any of the
//               functions accessing the alpha channel.
////////////////////////////////////////////////////////////////////
134
static inline bool PNMImageHeader::has_alpha(PNMImageHeader::ColorType color_type);
inline bool PNMImageHeader::has_alpha(void) const;

390 10 get_maxval 0 4 652 26 PNMImageHeader::get_maxval 0 1 41 443
////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::get_maxval
//       Access: Published
//  Description: Returns the maximum channel value allowable for any
//               pixel in this image; for instance, 255 for a typical
//               8-bit-per-channel image.  A pixel with this value is
//               full on.
////////////////////////////////////////////////////////////////////
53
inline xelval PNMImageHeader::get_maxval(void) const;

391 15 get_color_space 0 4 652 31 PNMImageHeader::get_color_space 0 1 42 331
////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::get_color_space
//       Access: Published
//  Description: Returns the color space that the image is encoded
//               in, or CS_unspecified if unknown.
////////////////////////////////////////////////////////////////////
62
inline ColorSpace PNMImageHeader::get_color_space(void) const;

392 10 get_x_size 0 4 652 26 PNMImageHeader::get_x_size 0 1 43 366
////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::get_x_size
//       Access: Published
//  Description: Returns the number of pixels in the X direction.
//               This is one more than the largest allowable X
//               coordinate.
////////////////////////////////////////////////////////////////////
50
inline int PNMImageHeader::get_x_size(void) const;

393 10 get_y_size 0 4 652 26 PNMImageHeader::get_y_size 0 1 44 366
////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::get_y_size
//       Access: Published
//  Description: Returns the number of pixels in the Y direction.
//               This is one more than the largest allowable Y
//               coordinate.
////////////////////////////////////////////////////////////////////
50
inline int PNMImageHeader::get_y_size(void) const;

394 11 get_comment 0 4 652 27 PNMImageHeader::get_comment 0 1 45 263
////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::get_comment
//       Access: Published
//  Description: Gets the user comment from the file.
////////////////////////////////////////////////////////////////////
54
inline string PNMImageHeader::get_comment(void) const;

395 11 set_comment 0 4 652 27 PNMImageHeader::set_comment 0 1 46 278
////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::set_comment
//       Access: Published
//  Description: Writes a user comment string to the image (header).
////////////////////////////////////////////////////////////////////
63
inline void PNMImageHeader::set_comment(string const &comment);

396 8 has_type 0 4 652 24 PNMImageHeader::has_type 0 1 47 315
////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::has_type
//       Access: Published
//  Description: Returns true if the PNMImageHeader knows what type it
//               is, false otherwise.
////////////////////////////////////////////////////////////////////
49
inline bool PNMImageHeader::has_type(void) const;

397 8 get_type 0 4 652 24 PNMImageHeader::get_type 0 1 48 373
////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::get_type
//       Access: Published
//  Description: If the file type is known (e.g. has_type() returns
//               true), returns its PNMFileType pointer; otherwise,
//               returns NULL.
////////////////////////////////////////////////////////////////////
57
inline PNMFileType *PNMImageHeader::get_type(void) const;

398 8 set_type 0 4 652 24 PNMImageHeader::set_type 0 1 49 583
////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::set_type
//       Access: Published
//  Description: Sets the file type of this PNMImage.  This will be
//               the default type used when an image is read, if the
//               type cannot be determined by magic number or inferred
//               by extension, or the type used when the image is
//               written, if the type cannot be inferred from the
//               filename extension.
////////////////////////////////////////////////////////////////////
56
inline void PNMImageHeader::set_type(PNMFileType *type);

399 11 read_header 0 4 652 27 PNMImageHeader::read_header 0 2 50 51 1214
////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::read_header
//       Access: Published
//  Description: Opens up the image file and tries to read its header
//               information to determine its size, number of
//               channels, etc.  If successful, updates the header
//               information and returns true; otherwise, returns
//               false.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::read_header
//       Access: Published
//  Description: Reads the image header information only from the
//               indicated stream.
//
//               The filename is advisory only, and may be used
//               to suggest a type if it has a known extension.
//
//               If type is non-NULL, it is a suggestion for the type
//               of file it is (and a non-NULL type will override any
//               magic number test or filename extension lookup).
//
//               Returns true if successful, false on error.
////////////////////////////////////////////////////////////////////
249
bool PNMImageHeader::read_header(Filename const &filename, PNMFileType *type = 0, bool report_unknown_type = 1);
bool PNMImageHeader::read_header(istream &data, string const &filename = string(), PNMFileType *type = 0, bool report_unknown_type = 1);

400 11 make_reader 0 4 652 27 PNMImageHeader::make_reader 0 2 52 53 2105
////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::make_reader
//       Access: Published
//  Description: Returns a newly-allocated PNMReader of the suitable
//               type for reading from the indicated image filename,
//               or NULL if the filename cannot be read for some
//               reason.  The filename "-" always stands for standard
//               input.  If type is specified, it is a suggestion for
//               the file type to use.
//
//               The PNMReader should be deleted when it is no longer
//               needed.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::make_reader
//       Access: Published
//  Description: Returns a newly-allocated PNMReader of the suitable
//               type for reading from the already-opened image file,
//               or NULL if the file cannot be read for some reason.
//
//               owns_file should be set true if the PNMReader is to
//               be considered the owner of the stream pointer (in
//               which case the stream will be deleted on completion,
//               whether successful or not), or false if it should not
//               delete it.
//
//               The filename parameter is optional here, since the
//               file has already been opened; it is only used to
//               examine the extension and attempt to guess the file
//               type.
//
//               If magic_number is nonempty, it is assumed to
//               represent the first few bytes that have already been
//               read from the file.  Some file types may have
//               difficulty if this is more than two bytes.
//
//               If type is non-NULL, it is a suggestion for the file
//               type to use.
//
//               The PNMReader should be deleted when it is no longer
//               needed.
////////////////////////////////////////////////////////////////////
329
PNMReader *PNMImageHeader::make_reader(Filename const &filename, PNMFileType *type = 0, bool report_unknown_type = 1) const;
PNMReader *PNMImageHeader::make_reader(istream *file, bool owns_file = 1, Filename const &filename = Filename(), string magic_number = string(), PNMFileType *type = 0, bool report_unknown_type = 1) const;

401 11 make_writer 0 4 652 27 PNMImageHeader::make_writer 0 2 54 55 1861
////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::make_writer
//       Access: Published
//  Description: Returns a newly-allocated PNMWriter of the suitable
//               type for writing an image to the indicated filename,
//               or NULL if the filename cannot be written for some
//               reason.  The filename "-" always stands for standard
//               output.  If type is specified, it is a suggestion for
//               the file type to use.
//
//               The PNMWriter should be deleted when it is no longer
//               needed.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::make_writer
//       Access: Published
//  Description: Returns a newly-allocated PNMWriter of the suitable
//               type for writing to the already-opened image file, or
//               NULL if the file cannot be written for some reason.
//
//               owns_file should be set true if the PNMWriter is to
//               be considered the owner of the stream pointer (in
//               which case the stream will be deleted on completion,
//               whether successful or not), or false if it should not
//               delete it.
//
//               The filename parameter is optional here, since the
//               file has already been opened; it is only used to
//               examine the extension and attempt to guess the
//               intended file type.
//
//               If type is non-NULL, it is a suggestion for the file
//               type to use.
//
//               The PNMWriter should be deleted when it is no longer
//               needed.
////////////////////////////////////////////////////////////////////
237
PNMWriter *PNMImageHeader::make_writer(Filename const &filename, PNMFileType *type = 0) const;
PNMWriter *PNMImageHeader::make_writer(ostream *file, bool owns_file = 1, Filename const &filename = Filename(), PNMFileType *type = 0) const;

402 17 read_magic_number 0 4 652 33 PNMImageHeader::read_magic_number 0 1 56 602
////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::read_magic_number
//       Access: Published, Static
//  Description: Ensures that the first n bytes of the file are read
//               into magic_number.  If magic_number is initially
//               nonempty, assumes these represent the first few bytes
//               already extracted.  Returns true if successful, false
//               if an end of file or error occurred before num_bytes
//               could be read.
////////////////////////////////////////////////////////////////////
98
static bool PNMImageHeader::read_magic_number(istream *file, string &magic_number, int num_bytes);

403 6 output 0 4 652 22 PNMImageHeader::output 0 1 57 221
////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::output
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
48
void PNMImageHeader::output(ostream &out) const;

404 9 PixelSpec 0 4 654 36 PNMImageHeader::PixelSpec::PixelSpec 0 7 58 59 60 61 62 63 64 1676
////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::PixelSpec::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::PixelSpec::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::PixelSpec::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::PixelSpec::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::PixelSpec::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::PixelSpec::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::PixelSpec::Copy Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
543
inline PNMImageHeader::PixelSpec::PixelSpec(xelval gray_value);
inline PNMImageHeader::PixelSpec::PixelSpec(xelval gray_value, xelval alpha);
inline PNMImageHeader::PixelSpec::PixelSpec(xelval red, xelval green, xelval blue);
inline PNMImageHeader::PixelSpec::PixelSpec(xelval red, xelval green, xelval blue, xelval alpha);
inline PNMImageHeader::PixelSpec::PixelSpec(xel const &rgb);
inline PNMImageHeader::PixelSpec::PixelSpec(xel const &rgb, xelval alpha);
inline PNMImageHeader::PixelSpec::PixelSpec(PNMImageHeader::PixelSpec const &copy);

405 10 operator = 0 4 654 37 PNMImageHeader::PixelSpec::operator = 0 1 65 0
89
inline void PNMImageHeader::PixelSpec::operator =(PNMImageHeader::PixelSpec const &copy);

406 10 operator < 0 4 654 37 PNMImageHeader::PixelSpec::operator < 0 1 66 0
96
inline bool PNMImageHeader::PixelSpec::operator <(PNMImageHeader::PixelSpec const &other) const;

407 11 operator == 0 4 654 38 PNMImageHeader::PixelSpec::operator == 0 1 67 0
97
inline bool PNMImageHeader::PixelSpec::operator ==(PNMImageHeader::PixelSpec const &other) const;

408 11 operator != 0 4 654 38 PNMImageHeader::PixelSpec::operator != 0 1 68 0
97
inline bool PNMImageHeader::PixelSpec::operator !=(PNMImageHeader::PixelSpec const &other) const;

409 10 compare_to 0 4 654 37 PNMImageHeader::PixelSpec::compare_to 0 1 69 236
////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::PixelSpec::compare_to
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
95
inline int PNMImageHeader::PixelSpec::compare_to(PNMImageHeader::PixelSpec const &other) const;

410 7 get_red 0 4 654 34 PNMImageHeader::PixelSpec::get_red 0 1 70 233
////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::PixelSpec::get_red
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
61
inline xelval PNMImageHeader::PixelSpec::get_red(void) const;

411 9 get_green 0 4 654 36 PNMImageHeader::PixelSpec::get_green 0 1 71 235
////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::PixelSpec::get_green
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
63
inline xelval PNMImageHeader::PixelSpec::get_green(void) const;

412 8 get_blue 0 4 654 35 PNMImageHeader::PixelSpec::get_blue 0 1 72 234
////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::PixelSpec::get_blue
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
62
inline xelval PNMImageHeader::PixelSpec::get_blue(void) const;

413 9 get_alpha 0 4 654 36 PNMImageHeader::PixelSpec::get_alpha 0 1 73 235
////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::PixelSpec::get_alpha
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
63
inline xelval PNMImageHeader::PixelSpec::get_alpha(void) const;

414 7 set_red 0 4 654 34 PNMImageHeader::PixelSpec::set_red 0 1 74 233
////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::PixelSpec::set_red
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
59
inline void PNMImageHeader::PixelSpec::set_red(xelval red);

415 9 set_green 0 4 654 36 PNMImageHeader::PixelSpec::set_green 0 1 75 235
////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::PixelSpec::set_green
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
63
inline void PNMImageHeader::PixelSpec::set_green(xelval green);

416 8 set_blue 0 4 654 35 PNMImageHeader::PixelSpec::set_blue 0 1 76 234
////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::PixelSpec::set_blue
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
61
inline void PNMImageHeader::PixelSpec::set_blue(xelval blue);

417 9 set_alpha 0 4 654 36 PNMImageHeader::PixelSpec::set_alpha 0 1 77 235
////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::PixelSpec::set_alpha
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
63
inline void PNMImageHeader::PixelSpec::set_alpha(xelval alpha);

418 11 operator [] 0 4 654 38 PNMImageHeader::PixelSpec::operator [] 0 1 78 0
66
inline xelval PNMImageHeader::PixelSpec::operator [](int n) const;

419 4 size 0 4 654 31 PNMImageHeader::PixelSpec::size 0 1 79 394
////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::PixelSpec::size
//       Access: Published, Static
//  Description: Specifies the number of components in the PixelSpec;
//               this is always 4, regardless of the type of image it
//               was taken from.
////////////////////////////////////////////////////////////////////
56
static inline int PNMImageHeader::PixelSpec::size(void);

420 6 output 0 4 654 33 PNMImageHeader::PixelSpec::output 0 1 80 230
////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::PixelSpec::output
//       Access: Public
//  Description: 
////////////////////////////////////////////////////////////////////
59
void PNMImageHeader::PixelSpec::output(ostream &out) const;

421 10 ~PixelSpec 0 4 654 37 PNMImageHeader::PixelSpec::~PixelSpec 0 0 0
44
PNMImageHeader::PixelSpec::~PixelSpec(void);

422 15 ~PixelSpecCount 0 4 655 47 PNMImageHeader::PixelSpecCount::~PixelSpecCount 0 0 0
54
PNMImageHeader::PixelSpecCount::~PixelSpecCount(void);

423 9 Histogram 0 4 662 36 PNMImageHeader::Histogram::Histogram 0 1 81 237
////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::Histogram::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
50
inline PNMImageHeader::Histogram::Histogram(void);

424 14 get_num_pixels 0 4 662 41 PNMImageHeader::Histogram::get_num_pixels 0 1 82 317
////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::Histogram::get_num_pixels
//       Access: Published
//  Description: Returns the number of unique pixel colors in the
//               histogram.
////////////////////////////////////////////////////////////////////
65
inline int PNMImageHeader::Histogram::get_num_pixels(void) const;

425 9 get_pixel 0 4 662 36 PNMImageHeader::Histogram::get_pixel 0 1 83 385
////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::Histogram::get_pixel
//       Access: Published
//  Description: Returns the nth unique pixel color in the histogram.
//               These are ordered by default from most common to
//               least common.
////////////////////////////////////////////////////////////////////
90
inline PNMImageHeader::PixelSpec const &PNMImageHeader::Histogram::get_pixel(int n) const;

426 9 get_count 0 4 662 36 PNMImageHeader::Histogram::get_count 0 2 84 85 678
////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::Histogram::get_count
//       Access: Published
//  Description: Returns the number of occurrences in the image of the
//               nth unique pixel color in the histogram.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::Histogram::get_count
//       Access: Published
//  Description: Returns the number of occurrences in the image of the
//               indicated pixel color.
////////////////////////////////////////////////////////////////////
156
inline int PNMImageHeader::Histogram::get_count(int n) const;
inline int PNMImageHeader::Histogram::get_count(PNMImageHeader::PixelSpec const &pixel) const;

427 5 write 0 4 662 32 PNMImageHeader::Histogram::write 0 1 86 229
////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::Histogram::write
//       Access: Public
//  Description: 
////////////////////////////////////////////////////////////////////
58
void PNMImageHeader::Histogram::write(ostream &out) const;

428 10 ~Histogram 0 4 662 37 PNMImageHeader::Histogram::~Histogram 0 0 0
44
PNMImageHeader::Histogram::~Histogram(void);

429 7 PfmFile 0 4 663 16 PfmFile::PfmFile 0 2 87 88 445
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PfmFile::Copy Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
62
PfmFile::PfmFile(void);
PfmFile::PfmFile(PfmFile const &copy);

430 10 operator = 0 4 663 19 PfmFile::operator = 0 1 89 0
46
void PfmFile::operator =(PfmFile const &copy);

431 5 clear 0 4 663 14 PfmFile::clear 0 2 90 91 703
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::clear
//       Access: Published
//  Description: Eliminates all data in the file.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PfmFile::clear
//       Access: Published
//  Description: Resets to an empty table with a specific size.  The
//               case of num_channels == 0 is allowed only in the case
//               that x_size and y_size are also == 0; and this makes
//               an empty (and invalid) PfmFile.
////////////////////////////////////////////////////////////////////
89
void PfmFile::clear(void);
void PfmFile::clear(int x_size, int y_size, int num_channels);

432 4 read 0 4 663 13 PfmFile::read 0 3 92 93 94 1383
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::read
//       Access: Published
//  Description: Reads the PFM data from the indicated file, returning
//               true on success, false on failure.
//
//               This can also handle reading a standard image file
//               supported by PNMImage; it will be quietly converted
//               to a floating-point type.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PfmFile::read
//       Access: Published
//  Description: Reads the PFM data from the indicated stream,
//               returning true on success, false on failure.
//
//               This can also handle reading a standard image file
//               supported by PNMImage; it will be quietly converted
//               to a floating-point type.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PfmFile::read
//       Access: Published
//  Description: Reads the PFM data using the indicated PNMReader.
//
//               The PNMReader is always deleted upon completion,
//               whether successful or not.
////////////////////////////////////////////////////////////////////
156
bool PfmFile::read(Filename const &fullpath);
bool PfmFile::read(istream &in, Filename const &fullpath = Filename());
bool PfmFile::read(PNMReader *reader);

433 5 write 0 4 663 14 PfmFile::write 0 3 95 96 97 1290
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::write
//       Access: Published
//  Description: Writes the PFM data to the indicated file, returning
//               true on success, false on failure.
//
//               If the type implied by the filename extension
//               supports floating-point, the data will be written
//               directly; otherwise, the floating-point data will be
//               quietly converted to the appropriate integer type.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PfmFile::write
//       Access: Published
//  Description: Writes the PFM data to the indicated stream,
//               returning true on success, false on failure.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PfmFile::write
//       Access: Published
//  Description: Writes the PFM data using the indicated PNMWriter.
//
//               The PNMWriter is always deleted upon completion,
//               whether successful or not.
////////////////////////////////////////////////////////////////////
160
bool PfmFile::write(Filename const &fullpath);
bool PfmFile::write(ostream &out, Filename const &fullpath = Filename());
bool PfmFile::write(PNMWriter *writer);

434 4 load 0 4 663 13 PfmFile::load 0 1 98 326
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::load
//       Access: Published
//  Description: Fills the PfmFile with the data from the indicated
//               PNMImage, converted to floating-point values.
////////////////////////////////////////////////////////////////////
45
bool PfmFile::load(PNMImage const &pnmimage);

435 5 store 0 4 663 14 PfmFile::store 0 1 99 299
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::store
//       Access: Published
//  Description: Copies the data to the indicated PNMImage, converting
//               to RGB values.
////////////////////////////////////////////////////////////////////
46
bool PfmFile::store(PNMImage &pnmimage) const;

436 10 store_mask 0 4 663 19 PfmFile::store_mask 0 1 100 433
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::store_mask
//       Access: Published
//  Description: Stores 1 or 0 values into the indicated PNMImage,
//               according to has_point() for each pixel.  Each valid
//               point gets a 1 value; each nonexistent point gets a 0
//               value.
////////////////////////////////////////////////////////////////////
51
bool PfmFile::store_mask(PNMImage &pnmimage) const;

437 8 is_valid 0 4 663 17 PfmFile::is_valid 0 1 101 216
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::is_valid
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
42
inline bool PfmFile::is_valid(void) const;

438 9 get_scale 0 4 663 18 PfmFile::get_scale 0 1 102 305
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::get_scale
//       Access: Published
//  Description: The "scale" is reported in the pfm header and is
//               probably meaningless.
////////////////////////////////////////////////////////////////////
49
inline PN_float32 PfmFile::get_scale(void) const;

439 9 set_scale 0 4 663 18 PfmFile::set_scale 0 1 103 305
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::set_scale
//       Access: Published
//  Description: The "scale" is reported in the pfm header and is
//               probably meaningless.
////////////////////////////////////////////////////////////////////
49
inline void PfmFile::set_scale(PN_float32 scale);

440 9 has_point 0 4 663 18 PfmFile::has_point 0 1 104 457
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::has_point
//       Access: Published
//  Description: Returns true if there is a valid point at x, y.  This
//               always returns true unless a "no data" value has been
//               set, in which case it returns false if the point at
//               x, y is the "no data" value.
////////////////////////////////////////////////////////////////////
51
inline bool PfmFile::has_point(int x, int y) const;

441 11 get_channel 0 4 663 20 PfmFile::get_channel 0 1 105 303
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::get_channel
//       Access: Published
//  Description: Returns the cth channel of the point value at the
//               indicated point.
////////////////////////////////////////////////////////////////////
66
inline PN_float32 PfmFile::get_channel(int x, int y, int c) const;

442 11 set_channel 0 4 663 20 PfmFile::set_channel 0 1 106 304
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::set_channel
//       Access: Published
//  Description: Replaces the cth channel of the point value at the
//               indicated point.
////////////////////////////////////////////////////////////////////
72
inline void PfmFile::set_channel(int x, int y, int c, PN_float32 value);

443 10 get_point1 0 4 663 19 PfmFile::get_point1 0 1 107 295
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::get_point1
//       Access: Published
//  Description: Returns the 1-component point value at the indicated
//               point.
////////////////////////////////////////////////////////////////////
58
inline PN_float32 PfmFile::get_point1(int x, int y) const;

444 10 set_point1 0 4 663 19 PfmFile::set_point1 0 1 108 296
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::set_point1
//       Access: Published
//  Description: Replaces the 1-component point value at the indicated
//               point.
////////////////////////////////////////////////////////////////////
64
inline void PfmFile::set_point1(int x, int y, PN_float32 point);

445 10 get_point2 0 4 663 19 PfmFile::get_point2 0 1 109 376
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::get_point2
//       Access: Published
//  Description: Returns the 2-component point value at the indicated
//               point.  In a 1-channel image, the channel value is in
//               the x component.
////////////////////////////////////////////////////////////////////
63
inline LPoint2f const &PfmFile::get_point2(int x, int y) const;

446 10 set_point2 0 4 663 19 PfmFile::set_point2 0 2 110 111 756
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::set_point2
//       Access: Published
//  Description: Replaces the 2-component point value at the indicated
//               point.  In a 1-channel image, the channel value is in
//               the x component.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PfmFile::set_point2
//       Access: Published
//  Description: Replaces the 2-component point value at the indicated
//               point.  In a 1-channel image, the channel value is in
//               the x component.
////////////////////////////////////////////////////////////////////
143
inline void PfmFile::set_point2(int x, int y, LVecBase2f const &point);
inline void PfmFile::set_point2(int x, int y, LVecBase2d const &point);

447 13 modify_point2 0 4 663 22 PfmFile::modify_point2 0 1 112 307
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::modify_point2
//       Access: Published
//  Description: Returns a modifiable 2-component point value at the
//               indicated point.
////////////////////////////////////////////////////////////////////
54
inline LPoint2f &PfmFile::modify_point2(int x, int y);

448 9 get_point 0 4 663 18 PfmFile::get_point 0 1 113 375
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::get_point
//       Access: Published
//  Description: Returns the 3-component point value at the indicated
//               point.  In a 1-channel image, the channel value is in
//               the x component.
////////////////////////////////////////////////////////////////////
62
inline LPoint3f const &PfmFile::get_point(int x, int y) const;

449 9 set_point 0 4 663 18 PfmFile::set_point 0 2 114 115 754
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::set_point
//       Access: Published
//  Description: Replaces the 3-component point value at the indicated
//               point.  In a 1-channel image, the channel value is in
//               the x component.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PfmFile::set_point
//       Access: Published
//  Description: Replaces the 3-component point value at the indicated
//               point.  In a 1-channel image, the channel value is in
//               the x component.
////////////////////////////////////////////////////////////////////
141
inline void PfmFile::set_point(int x, int y, LVecBase3f const &point);
inline void PfmFile::set_point(int x, int y, LVecBase3d const &point);

450 12 modify_point 0 4 663 21 PfmFile::modify_point 0 1 116 306
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::modify_point
//       Access: Published
//  Description: Returns a modifiable 3-component point value at the
//               indicated point.
////////////////////////////////////////////////////////////////////
53
inline LPoint3f &PfmFile::modify_point(int x, int y);

451 10 get_point3 0 4 663 19 PfmFile::get_point3 0 1 117 376
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::get_point3
//       Access: Published
//  Description: Returns the 3-component point value at the indicated
//               point.  In a 1-channel image, the channel value is in
//               the x component.
////////////////////////////////////////////////////////////////////
63
inline LPoint3f const &PfmFile::get_point3(int x, int y) const;

452 10 set_point3 0 4 663 19 PfmFile::set_point3 0 2 118 119 756
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::set_point3
//       Access: Published
//  Description: Replaces the 3-component point value at the indicated
//               point.  In a 1-channel image, the channel value is in
//               the x component.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PfmFile::set_point3
//       Access: Published
//  Description: Replaces the 3-component point value at the indicated
//               point.  In a 1-channel image, the channel value is in
//               the x component.
////////////////////////////////////////////////////////////////////
143
inline void PfmFile::set_point3(int x, int y, LVecBase3f const &point);
inline void PfmFile::set_point3(int x, int y, LVecBase3d const &point);

453 13 modify_point3 0 4 663 22 PfmFile::modify_point3 0 1 120 307
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::modify_point3
//       Access: Published
//  Description: Returns a modifiable 3-component point value at the
//               indicated point.
////////////////////////////////////////////////////////////////////
54
inline LPoint3f &PfmFile::modify_point3(int x, int y);

454 10 get_point4 0 4 663 19 PfmFile::get_point4 0 1 121 376
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::get_point4
//       Access: Published
//  Description: Returns the 4-component point value at the indicated
//               point.  In a 1-channel image, the channel value is in
//               the x component.
////////////////////////////////////////////////////////////////////
63
inline LPoint4f const &PfmFile::get_point4(int x, int y) const;

455 10 set_point4 0 4 663 19 PfmFile::set_point4 0 2 122 123 756
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::set_point4
//       Access: Published
//  Description: Replaces the 4-component point value at the indicated
//               point.  In a 1-channel image, the channel value is in
//               the x component.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PfmFile::set_point4
//       Access: Published
//  Description: Replaces the 4-component point value at the indicated
//               point.  In a 1-channel image, the channel value is in
//               the x component.
////////////////////////////////////////////////////////////////////
143
inline void PfmFile::set_point4(int x, int y, LVecBase4f const &point);
inline void PfmFile::set_point4(int x, int y, LVecBase4d const &point);

456 13 modify_point4 0 4 663 22 PfmFile::modify_point4 0 1 124 307
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::modify_point4
//       Access: Published
//  Description: Returns a modifiable 4-component point value at the
//               indicated point.
////////////////////////////////////////////////////////////////////
54
inline LPoint4f &PfmFile::modify_point4(int x, int y);

457 4 fill 0 4 663 13 PfmFile::fill 0 4 125 126 127 128 1030
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::fill
//       Access: Published
//  Description: Fills the table with all of the same value.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PfmFile::fill
//       Access: Published
//  Description: Fills the table with all of the same value.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PfmFile::fill
//       Access: Published
//  Description: Fills the table with all of the same value.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PfmFile::fill
//       Access: Published
//  Description: Fills the table with all of the same value.
////////////////////////////////////////////////////////////////////
187
inline void PfmFile::fill(PN_float32 value);
inline void PfmFile::fill(LPoint2f const &value);
inline void PfmFile::fill(LPoint3f const &value);
void PfmFile::fill(LPoint4f const &value);

458 8 fill_nan 0 4 663 17 PfmFile::fill_nan 0 1 129 246
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::fill_nan
//       Access: Published
//  Description: Fills the table with all NaN.
////////////////////////////////////////////////////////////////////
29
void PfmFile::fill_nan(void);

459 18 fill_no_data_value 0 4 663 27 PfmFile::fill_no_data_value 0 1 130 319
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::fill_no_data_value
//       Access: Published
//  Description: Fills the table with the current no_data value, so
//               that the table is empty.
////////////////////////////////////////////////////////////////////
39
void PfmFile::fill_no_data_value(void);

460 12 fill_channel 0 4 663 21 PfmFile::fill_channel 0 1 131 331
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::fill_channel
//       Access: Published
//  Description: Fills the indicated channel with all of the same
//               value, leaving the other channels unchanged.
////////////////////////////////////////////////////////////////////
58
void PfmFile::fill_channel(int channel, PN_float32 value);

461 16 fill_channel_nan 0 4 663 25 PfmFile::fill_channel_nan 0 1 132 317
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::fill_channel_nan
//       Access: Published
//  Description: Fills the indicated channel with NaN, leaving the
//               other channels unchanged.
////////////////////////////////////////////////////////////////////
44
void PfmFile::fill_channel_nan(int channel);

462 19 fill_channel_masked 0 4 663 28 PfmFile::fill_channel_masked 0 1 133 400
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::fill_channel_masked
//       Access: Published
//  Description: Fills the indicated channel with all of the same
//               value, but only where the table already has a data
//               point.  Leaves empty points unchanged.
////////////////////////////////////////////////////////////////////
65
void PfmFile::fill_channel_masked(int channel, PN_float32 value);

463 23 fill_channel_masked_nan 0 4 663 32 PfmFile::fill_channel_masked_nan 0 1 134 386
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::fill_channel_masked_nan
//       Access: Published
//  Description: Fills the indicated channel with NaN, but only where
//               the table already has a data point.  Leaves empty
//               points unchanged.
////////////////////////////////////////////////////////////////////
51
void PfmFile::fill_channel_masked_nan(int channel);

464 18 calc_average_point 0 4 663 27 PfmFile::calc_average_point 0 1 135 587
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::calc_average_point
//       Access: Published
//  Description: Computes the unweighted average point of all points
//               within the box centered at (x, y) with the indicated
//               Manhattan-distance radius.  Missing points are
//               assigned the value of their nearest neighbor.
//               Returns true if successful, or false if the point
//               value cannot be determined.
////////////////////////////////////////////////////////////////////
104
bool PfmFile::calc_average_point(LPoint3f &result, PN_float32 x, PN_float32 y, PN_float32 radius) const;

465 19 calc_bilinear_point 0 4 663 28 PfmFile::calc_bilinear_point 0 1 136 451
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::calc_bilinear_point
//       Access: Published
//  Description: Computes the weighted average of the four nearest
//               points to the floating-point index (x, y).  Returns
//               true if the point has any contributors, false if the
//               point is unknown.
////////////////////////////////////////////////////////////////////
86
bool PfmFile::calc_bilinear_point(LPoint3f &result, PN_float32 x, PN_float32 y) const;

466 12 calc_min_max 0 4 663 21 PfmFile::calc_min_max 0 1 137 515
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::calc_min_max
//       Access: Published
//  Description: Calculates the minimum and maximum x, y, and z depth
//               component values, representing the bounding box of
//               depth values, and places them in the indicated
//               vectors.  Returns true if successful, false if the
//               mesh contains no points.
////////////////////////////////////////////////////////////////////
81
bool PfmFile::calc_min_max(LVecBase3f &min_points, LVecBase3f &max_points) const;

467 13 calc_autocrop 0 4 663 22 PfmFile::calc_autocrop 0 2 138 139 1564
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::calc_autocrop
//       Access: Published
//  Description: Computes the minimum range of x and y across the PFM
//               file that include all points.  If there are no points
//               with no_data_value in the grid--that is, all points
//               are included--then this will return (0, get_x_size(),
//               0, get_y_size()).
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PfmFile::calc_autocrop
//       Access: Published
//  Description: Computes the minimum range of x and y across the PFM
//               file that include all points.  If there are no points
//               with no_data_value in the grid--that is, all points
//               are included--then this will return (0, get_x_size(),
//               0, get_y_size()).
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PfmFile::calc_autocrop
//       Access: Published
//  Description: Computes the minimum range of x and y across the PFM
//               file that include all points.  If there are no points
//               with no_data_value in the grid--that is, all points
//               are included--then this will return (0, get_x_size(),
//               0, get_y_size()).
////////////////////////////////////////////////////////////////////
208
bool PfmFile::calc_autocrop(int &x_begin, int &x_end, int &y_begin, int &y_end) const;
inline bool PfmFile::calc_autocrop(LVecBase4f &range) const;
inline bool PfmFile::calc_autocrop(LVecBase4d &range) const;

468 12 is_row_empty 0 4 663 21 PfmFile::is_row_empty 0 1 140 401
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::is_row_empty
//       Access: Published
//  Description: Returns true if all of the points on row y, in the range
//               [x_begin, x_end), are the no_data value, or false if
//               any one of these points has a value.
////////////////////////////////////////////////////////////////////
64
bool PfmFile::is_row_empty(int y, int x_begin, int x_end) const;

469 15 is_column_empty 0 4 663 24 PfmFile::is_column_empty 0 1 141 399
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::is_column_empty
//       Access: Published
//  Description: Returns true if all of the points on column x, from
//               [y_begin, y_end), are the no_data value, or false if
//               any one of these points has a value.
////////////////////////////////////////////////////////////////////
67
bool PfmFile::is_column_empty(int x, int y_begin, int y_end) const;

470 16 set_zero_special 0 4 663 25 PfmFile::set_zero_special 0 1 142 468
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::set_zero_special
//       Access: Published
//  Description: Sets the zero_special flag.  When this flag is true,
//               values of (0, 0, 0) in the pfm file are treated as a
//               special case, and are not processed.
//
//               This is a special case of set_no_data_value().
////////////////////////////////////////////////////////////////////
57
inline void PfmFile::set_zero_special(bool zero_special);

471 17 set_no_data_chan4 0 4 663 26 PfmFile::set_no_data_chan4 0 1 143 534
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::set_no_data_chan4
//       Access: Published
//  Description: Sets the no_data_chan4 flag.  When this flag is true,
//               and the pfm file has 4 channels, then a negative
//               value in the fourth channel indicates no data.  When
//               it is false, all points are valid.
//
//               This is a special case of set_no_data_value().
////////////////////////////////////////////////////////////////////
51
inline void PfmFile::set_no_data_chan4(bool chan4);

472 15 set_no_data_nan 0 4 663 24 PfmFile::set_no_data_nan 0 1 144 562
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::set_no_data_nan
//       Access: Published
//  Description: Sets the no_data_nan flag.  When num_channels is
//               nonzero, then a NaN value in any of the first
//               num_channels channels indicates no data for that
//               point.  If num_channels is zero, then all points are
//               valid.
//
//               This is a special case of set_no_data_value().
////////////////////////////////////////////////////////////////////
48
void PfmFile::set_no_data_nan(int num_channels);

473 17 set_no_data_value 0 4 663 26 PfmFile::set_no_data_value 0 2 145 146 640
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::set_no_data_value
//       Access: Published
//  Description: Sets the special value that means "no data" when it
//               appears in the pfm file.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PfmFile::set_no_data_value
//       Access: Published
//  Description: Sets the special value that means "no data" when it
//               appears in the pfm file.
////////////////////////////////////////////////////////////////////
134
void PfmFile::set_no_data_value(LPoint4f const &no_data_value);
inline void PfmFile::set_no_data_value(LPoint4d const &no_data_value);

474 21 set_no_data_threshold 0 4 663 30 PfmFile::set_no_data_threshold 0 2 147 148 754
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::set_no_data_threshold
//       Access: Published
//  Description: Sets the special threshold value.  Points that are
//               below this value in all components are considered "no
//               value".
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PfmFile::set_no_data_threshold
//       Access: Published
//  Description: Sets the special threshold value.  Points that are
//               below this value in all components are considered "no
//               value".
////////////////////////////////////////////////////////////////////
142
void PfmFile::set_no_data_threshold(LPoint4f const &no_data_value);
inline void PfmFile::set_no_data_threshold(LPoint4d const &no_data_value);

475 19 clear_no_data_value 0 4 663 28 PfmFile::clear_no_data_value 0 1 149 382
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::set_no_data_value
//       Access: Published
//  Description: Removes the special value that means "no data" when it
//               appears in the pfm file.  All points will thus be
//               considered valid.
////////////////////////////////////////////////////////////////////
47
inline void PfmFile::clear_no_data_value(void);

476 17 has_no_data_value 0 4 663 26 PfmFile::has_no_data_value 0 1 150 321
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::has_no_data_value
//       Access: Published
//  Description: Returns whether a "no data" value has been
//               established by set_no_data_value().
////////////////////////////////////////////////////////////////////
51
inline bool PfmFile::has_no_data_value(void) const;

477 21 has_no_data_threshold 0 4 663 30 PfmFile::has_no_data_threshold 0 1 151 339
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::has_no_data_threshold
//       Access: Published
//  Description: Returns whether a "no data" threshold value has been
//               established by set_no_data_threshold().
////////////////////////////////////////////////////////////////////
55
inline bool PfmFile::has_no_data_threshold(void) const;

478 17 get_no_data_value 0 4 663 26 PfmFile::get_no_data_value 0 1 152 324
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::get_no_data_value
//       Access: Published
//  Description: If has_no_data_value() returns true, this returns the
//               particular "no data" value.
////////////////////////////////////////////////////////////////////
62
inline LPoint4f const &PfmFile::get_no_data_value(void) const;

479 6 resize 0 4 663 15 PfmFile::resize 0 1 153 422
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::resize
//       Access: Published
//  Description: Applies a simple filter to resample the pfm file
//               in-place to the indicated size.  Don't confuse this
//               with applying a scale to all of the points via
//               xform().
////////////////////////////////////////////////////////////////////
53
void PfmFile::resize(int new_x_size, int new_y_size);

480 15 box_filter_from 0 4 663 24 PfmFile::box_filter_from 0 1 154 529
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::box_filter_from
//       Access: Public
//  Description: Makes a resized copy of the indicated image into this
//               one using the indicated filter.  The image to be
//               copied is squashed and stretched to match the
//               dimensions of the current image, applying the
//               appropriate filter to perform the stretching.
////////////////////////////////////////////////////////////////////
65
void PfmFile::box_filter_from(float radius, PfmFile const &copy);

481 20 gaussian_filter_from 0 4 663 29 PfmFile::gaussian_filter_from 0 1 155 534
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::gaussian_filter_from
//       Access: Public
//  Description: Makes a resized copy of the indicated image into this
//               one using the indicated filter.  The image to be
//               copied is squashed and stretched to match the
//               dimensions of the current image, applying the
//               appropriate filter to perform the stretching.
////////////////////////////////////////////////////////////////////
70
void PfmFile::gaussian_filter_from(float radius, PfmFile const &copy);

482 17 quick_filter_from 0 4 663 26 PfmFile::quick_filter_from 0 1 156 528
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::quick_filter_from
//       Access: Public
//  Description: Resizes from the given image, with a fixed radius of
//               0.5. This is a very specialized and simple algorithm
//               that doesn't handle dropping below the Nyquist rate
//               very well, but is quite a bit faster than the more
//               general box_filter(), above.
////////////////////////////////////////////////////////////////////
53
void PfmFile::quick_filter_from(PfmFile const &copy);

483 12 reverse_rows 0 4 663 21 PfmFile::reverse_rows 0 1 157 271
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::reverse_rows
//       Access: Published
//  Description: Performs an in-place reversal of the row (y) data.
////////////////////////////////////////////////////////////////////
33
void PfmFile::reverse_rows(void);

484 4 flip 0 4 663 13 PfmFile::flip 0 1 158 661
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::flip
//       Access: Published
//  Description: Reverses, transposes, and/or rotates the table
//               in-place according to the specified parameters.  If
//               flip_x is true, the x axis is reversed; if flip_y is
//               true, the y axis is reversed.  Then, if transpose is
//               true, the x and y axes are exchanged.  These
//               parameters can be used to select any combination of
//               90-degree or 180-degree rotations and flips.
////////////////////////////////////////////////////////////////////
61
void PfmFile::flip(bool flip_x, bool flip_y, bool transpose);

485 5 xform 0 4 663 14 PfmFile::xform 0 2 159 160 588
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::xform
//       Access: Published
//  Description: Applies the indicated transform matrix to all points
//               in-place.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PfmFile::xform
//       Access: Published
//  Description: Applies the indicated transform matrix to all points
//               in-place.
////////////////////////////////////////////////////////////////////
104
void PfmFile::xform(LMatrix4f const &transform);
inline void PfmFile::xform(LMatrix4d const &transform);

486 15 forward_distort 0 4 663 24 PfmFile::forward_distort 0 1 161 1063
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::forward_distort
//       Access: Published
//  Description: Applies the distortion indicated in the supplied dist
//               map to the current map.  The dist map is understood
//               to be a mapping of points in the range 0..1 in the
//               first two dimensions.
//
//               The operation can be expressed symbolically as:
//
//               this(u, v) = this(dist(u, v))
//
//               If scale_factor is not 1, it should be a value > 1,
//               and it specifies the factor to upscale the working
//               table while processing, to reduce artifacts from
//               integer truncation.
//
//               By convention, the y axis is inverted in the
//               distortion map relative to the coordinates here.  A y
//               value of 0 in the distortion map corresponds with a v
//               value of 1 in this file.
////////////////////////////////////////////////////////////////////
82
void PfmFile::forward_distort(PfmFile const &dist, PN_float32 scale_factor = 1.0);

487 15 reverse_distort 0 4 663 24 PfmFile::reverse_distort 0 1 162 1063
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::reverse_distort
//       Access: Published
//  Description: Applies the distortion indicated in the supplied dist
//               map to the current map.  The dist map is understood
//               to be a mapping of points in the range 0..1 in the
//               first two dimensions.
//
//               The operation can be expressed symbolically as:
//
//               this(u, v) = dist(this(u, v))
//
//               If scale_factor is not 1, it should be a value > 1,
//               and it specifies the factor to upscale the working
//               table while processing, to reduce artifacts from
//               integer truncation.
//
//               By convention, the y axis in inverted in the
//               distortion map relative to the coordinates here.  A y
//               value of 0 in the distortion map corresponds with a v
//               value of 1 in this file.
////////////////////////////////////////////////////////////////////
82
void PfmFile::reverse_distort(PfmFile const &dist, PN_float32 scale_factor = 1.0);

488 5 merge 0 4 663 14 PfmFile::merge 0 1 163 447
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::merge
//       Access: Published
//  Description: Wherever there is missing data in this PfmFile (that
//               is, wherever has_point() returns false), copy data
//               from the other PfmFile, which must be exactly the
//               same dimensions as this one.
////////////////////////////////////////////////////////////////////
42
void PfmFile::merge(PfmFile const &other);

489 10 apply_mask 0 4 663 19 PfmFile::apply_mask 0 1 164 558
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::apply_mask
//       Access: Published
//  Description: Wherever there is missing data in the other PfmFile,
//               set this the corresponding point in this PfmFile to
//               missing as well, so that this PfmFile has only points
//               where both files have points.
//
//               The point is set to "missing" by setting it the
//               no_data_value.
////////////////////////////////////////////////////////////////////
47
void PfmFile::apply_mask(PfmFile const &other);

490 12 copy_channel 0 4 663 21 PfmFile::copy_channel 0 1 165 400
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::copy_channel
//       Access: Published
//  Description: Copies just the specified channel values from the
//               indicated PfmFile (which could be same as this
//               PfmFile) into the specified channel of this one.
////////////////////////////////////////////////////////////////////
83
void PfmFile::copy_channel(int to_channel, PfmFile const &other, int from_channel);

491 19 copy_channel_masked 0 4 663 28 PfmFile::copy_channel_masked 0 1 166 378
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::copy_channel_masked
//       Access: Published
//  Description: Copies just the specified channel values from the
//               indicated PfmFile, but only where the other file has
//               a data point.
////////////////////////////////////////////////////////////////////
90
void PfmFile::copy_channel_masked(int to_channel, PfmFile const &other, int from_channel);

492 10 apply_crop 0 4 663 19 PfmFile::apply_crop 0 1 167 387
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::apply_crop
//       Access: Published
//  Description: Reduces the PFM file to the cells in the rectangle
//               bounded by (x_begin, x_end, y_begin, y_end), where
//               the _end cells are not included.
////////////////////////////////////////////////////////////////////
73
void PfmFile::apply_crop(int x_begin, int x_end, int y_begin, int y_end);

493 18 clear_to_texcoords 0 4 663 27 PfmFile::clear_to_texcoords 0 1 168 406
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::clear_to_texcoords
//       Access: Published
//  Description: Replaces this PfmFile with a new PfmFile of size
//               x_size x y_size x 3, containing the x y 0 values in
//               the range 0 .. 1 according to the x y index.
////////////////////////////////////////////////////////////////////
57
void PfmFile::clear_to_texcoords(int x_size, int y_size);

494 9 pull_spot 0 4 663 18 PfmFile::pull_spot 0 1 169 528
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::pull_spot
//       Access: Published
//  Description: Applies delta * t to the point values within radius
//               (xr, yr) distance of (xc, yc).  The t value is scaled
//               from 1.0 at the center to 0.0 at radius (xr, yr), and
//               this scale follows the specified exponent.  Returns
//               the number of points affected.
////////////////////////////////////////////////////////////////////
102
int PfmFile::pull_spot(LPoint4f const &delta, float xc, float yc, float xr, float yr, float exponent);

495 17 calc_tight_bounds 0 4 663 26 PfmFile::calc_tight_bounds 0 1 170 487
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::calc_tight_bounds
//       Access: Published
//  Description: Calculates the minimum and maximum vertices of all
//               points within the table.  Assumes the table contains
//               3-D points.
//
//               The return value is true if any points in the table,
//               or false if none are.
////////////////////////////////////////////////////////////////////
80
bool PfmFile::calc_tight_bounds(LPoint3f &min_point, LPoint3f &max_point) const;

496 21 compute_planar_bounds 0 4 663 30 PfmFile::compute_planar_bounds 0 2 171 172 2080
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::compute_planar_bounds
//       Access: Published
//  Description: Computes the minmax bounding volume of the points in
//               3-D space, assuming the points represent a
//               mostly-planar surface.
//
//               This algorithm works by sampling the (square)
//               sample_radius pixels at the four point_dist corners
//               around the center (cx - pd, cx + pd) and so on, to
//               approximate the plane of the surface.  Then all of
//               the points are projected into that plane and the
//               bounding volume of the entire mesh within that plane
//               is determined.  If points_only is true, the bounding
//               volume of only those four points is determined.
//
//               center, point_dist and sample_radius are in UV space,
//               i.e. in the range 0..1.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PfmFile::compute_planar_bounds
//       Access: Published
//  Description: Computes the minmax bounding volume of the points in
//               3-D space, assuming the points represent a
//               mostly-planar surface.
//
//               This algorithm works by sampling the (square)
//               sample_radius pixels at the four point_dist corners
//               around the center (cx - pd, cx + pd) and so on, to
//               approximate the plane of the surface.  Then all of
//               the points are projected into that plane and the
//               bounding volume of the entire mesh within that plane
//               is determined.  If points_only is true, the bounding
//               volume of only those four points is determined.
//
//               center, point_dist and sample_radius are in UV space,
//               i.e. in the range 0..1.
////////////////////////////////////////////////////////////////////
328
PointerTo< BoundingHexahedron > PfmFile::compute_planar_bounds(LPoint2f const &center, PN_float32 point_dist, PN_float32 sample_radius, bool points_only) const;
inline PointerTo< BoundingHexahedron > PfmFile::compute_planar_bounds(LPoint2d const &center, PN_float32 point_dist, PN_float32 sample_radius, bool points_only) const;

497 20 compute_sample_point 0 4 663 29 PfmFile::compute_sample_point 0 1 173 468
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::compute_sample_point
//       Access: Published
//  Description: Computes the average of all the point within
//               sample_radius (manhattan distance) and the indicated
//               point.
//
//               The point coordinates are given in UV space, in the
//               range 0..1.
////////////////////////////////////////////////////////////////////
113
void PfmFile::compute_sample_point(LPoint3f &result, PN_float32 x, PN_float32 y, PN_float32 sample_radius) const;

498 14 copy_sub_image 0 4 663 23 PfmFile::copy_sub_image 0 1 174 646
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::copy_sub_image
//       Access: Published
//  Description: Copies a rectangular area of another image into a
//               rectangular area of this image.  Both images must
//               already have been initialized.  The upper-left corner
//               of the region in both images is specified, and the
//               size of the area; if the size is omitted, it defaults
//               to the entire other image, or the largest piece that
//               will fit.
////////////////////////////////////////////////////////////////////
132
void PfmFile::copy_sub_image(PfmFile const &copy, int xto, int yto, int xfrom = 0, int yfrom = 0, int x_size = -1, int y_size = -1);

499 13 add_sub_image 0 4 663 22 PfmFile::add_sub_image 0 1 175 397
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::add_sub_image
//       Access: Published
//  Description: Behaves like copy_sub_image(), except the copy pixels
//               are added to the pixels of the destination, after
//               scaling by the specified pixel_scale.
////////////////////////////////////////////////////////////////////
156
void PfmFile::add_sub_image(PfmFile const &copy, int xto, int yto, int xfrom = 0, int yfrom = 0, int x_size = -1, int y_size = -1, float pixel_scale = 1.0);

500 14 mult_sub_image 0 4 663 23 PfmFile::mult_sub_image 0 1 176 403
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::mult_sub_image
//       Access: Published
//  Description: Behaves like copy_sub_image(), except the copy pixels
//               are multiplied to the pixels of the destination, after
//               scaling by the specified pixel_scale.
////////////////////////////////////////////////////////////////////
157
void PfmFile::mult_sub_image(PfmFile const &copy, int xto, int yto, int xfrom = 0, int yfrom = 0, int x_size = -1, int y_size = -1, float pixel_scale = 1.0);

501 16 divide_sub_image 0 4 663 25 PfmFile::divide_sub_image 0 1 177 475
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::divide_sub_image
//       Access: Published
//  Description: Behaves like copy_sub_image(), except the copy pixels
//               are divided into the pixels of the destination, after
//               scaling by the specified pixel_scale.
//               dest(x, y) = dest(x, y) / (copy(x, y) * pixel_scale).
////////////////////////////////////////////////////////////////////
159
void PfmFile::divide_sub_image(PfmFile const &copy, int xto, int yto, int xfrom = 0, int yfrom = 0, int x_size = -1, int y_size = -1, float pixel_scale = 1.0);

502 11 operator *= 0 4 663 20 PfmFile::operator *= 0 1 178 0
44
void PfmFile::operator *=(float multiplier);

503 13 gamma_correct 0 4 663 22 PfmFile::gamma_correct 0 1 179 473
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::gamma_correct
//       Access: Published
//  Description: Assuming the image was constructed with a gamma curve
//               of from_gamma in the RGB channels, converts it to an
//               image with a gamma curve of to_gamma in the RGB
//               channels.  Does not affect the alpha channel.
////////////////////////////////////////////////////////////////////
69
inline void PfmFile::gamma_correct(float from_gamma, float to_gamma);

504 19 gamma_correct_alpha 0 4 663 28 PfmFile::gamma_correct_alpha 0 1 180 480
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::gamma_correct_alpha
//       Access: Published
//  Description: Assuming the image was constructed with a gamma curve
//               of from_gamma in the alpha channel, converts it to an
//               image with a gamma curve of to_gamma in the alpha
//               channel.  Does not affect the RGB channels.
////////////////////////////////////////////////////////////////////
75
inline void PfmFile::gamma_correct_alpha(float from_gamma, float to_gamma);

505 14 apply_exponent 0 4 663 23 PfmFile::apply_exponent 0 4 181 182 183 184 1750
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::apply_exponent
//       Access: Published
//  Description: Adjusts each channel of the image by raising the
//               corresponding component value to the indicated
//               exponent, such that L' = L ^ exponent.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PfmFile::apply_exponent
//       Access: Published
//  Description: Adjusts each channel of the image by raising the
//               corresponding component value to the indicated
//               exponent, such that L' = L ^ exponent.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PfmFile::apply_exponent
//       Access: Published
//  Description: Adjusts each channel of the image by raising the
//               corresponding component value to the indicated
//               exponent, such that L' = L ^ exponent.  For a
//               grayscale image, the blue_exponent value is used for
//               the grayscale value, and red_exponent and
//               green_exponent are unused.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PfmFile::apply_exponent
//       Access: Published
//  Description: Adjusts each channel of the image by raising the
//               corresponding component value to the indicated
//               exponent, such that L' = L ^ exponent.
////////////////////////////////////////////////////////////////////
337
inline void PfmFile::apply_exponent(float gray_exponent);
inline void PfmFile::apply_exponent(float gray_exponent, float alpha_exponent);
inline void PfmFile::apply_exponent(float c0_exponent, float c1_exponent, float c2_exponent);
void PfmFile::apply_exponent(float c0_exponent, float c1_exponent, float c2_exponent, float c3_exponent);

506 6 output 0 4 663 15 PfmFile::output 0 1 185 214
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::output
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
41
void PfmFile::output(ostream &out) const;

507 10 get_points 0 4 663 19 PfmFile::get_points 0 1 186 0
42
PyObject *PfmFile::get_points(void) const;

508 13 __getbuffer__ 0 4 663 22 PfmFile::__getbuffer__ 0 1 187 0
77
int PfmFile::__getbuffer__(PyObject *self, Py_buffer *view, int flags) const;

509 8 ~PfmFile 0 4 663 17 PfmFile::~PfmFile 0 0 0
24
PfmFile::~PfmFile(void);

510 16 make_transparent 0 4 664 26 PNMBrush::make_transparent 0 1 188 414
////////////////////////////////////////////////////////////////////
//     Function: PNMBrush::make_transparent
//       Access: Published, Static
//  Description: Returns a new brush that does not paint anything.
//               Can be used as either a pen or a fill brush to make
//               borderless or unfilled shapes, respectively.
////////////////////////////////////////////////////////////////////
62
static PointerTo< PNMBrush > PNMBrush::make_transparent(void);

511 10 make_pixel 0 4 664 20 PNMBrush::make_pixel 0 1 189 384
////////////////////////////////////////////////////////////////////
//     Function: PNMBrush::make_pixel
//       Access: Published, Static
//  Description: Returns a new brush that paints a single pixel of the
//               indicated color on a border, or paints a solid color
//               in an interior.
////////////////////////////////////////////////////////////////////
125
static PointerTo< PNMBrush > PNMBrush::make_pixel(LColorf const &color, PNMBrush::BrushEffect effect = ::PNMBrush::BE_blend);

512 9 make_spot 0 4 664 19 PNMBrush::make_spot 0 1 190 401
////////////////////////////////////////////////////////////////////
//     Function: PNMBrush::make_spot
//       Access: Published, Static
//  Description: Returns a new brush that paints a spot of the
//               indicated color and radius.  If fuzzy is true, the
//               spot is fuzzy; otherwise, it is hard-edged.
////////////////////////////////////////////////////////////////////
150
static PointerTo< PNMBrush > PNMBrush::make_spot(LColorf const &color, float radius, bool fuzzy, PNMBrush::BrushEffect effect = ::PNMBrush::BE_blend);

513 10 make_image 0 4 664 20 PNMBrush::make_image 0 1 191 537
////////////////////////////////////////////////////////////////////
//     Function: PNMBrush::make_image
//       Access: Published, Static
//  Description: Returns a new brush that paints with the indicated
//               image.  xc and yc indicate the pixel in the center of
//               the brush.
//
//               The brush makes a copy of the image; it is safe to
//               deallocate or modify the image after making this
//               call.
////////////////////////////////////////////////////////////////////
146
static PointerTo< PNMBrush > PNMBrush::make_image(PNMImage const &image, float xc, float yc, PNMBrush::BrushEffect effect = ::PNMBrush::BE_blend);

514 8 PNMImage 0 4 667 18 PNMImage::PNMImage 0 4 192 193 194 195 891
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PNMImage::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PNMImage::Copy Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PNMImage::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
323
inline PNMImage::PNMImage(void);
explicit PNMImage::PNMImage(Filename const &filename, PNMFileType *type = 0);
inline explicit PNMImage::PNMImage(int x_size, int y_size, int num_channels = 3, xelval maxval = 255, PNMFileType *type = 0, ColorSpace color_space = ::CS_linear);
inline PNMImage::PNMImage(PNMImage const &copy);

515 10 operator = 0 4 667 20 PNMImage::operator = 0 1 196 0
55
inline void PNMImage::operator =(PNMImage const &copy);

516 9 ~PNMImage 0 4 667 19 PNMImage::~PNMImage 0 0 219
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::Destructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
33
inline PNMImage::~PNMImage(void);

517 9 clamp_val 0 4 667 19 PNMImage::clamp_val 0 1 197 290
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::clamp_val
//       Access: Published
//  Description: A handy function to clamp values to
//               [0..get_maxval()].
////////////////////////////////////////////////////////////////////
57
inline xelval PNMImage::clamp_val(int input_value) const;

518 6 to_val 0 4 667 16 PNMImage::to_val 0 1 198 379
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::to_val
//       Access: Published
//  Description: A handy function to scale non-alpha values from
//               [0..1] to [0..get_maxval()].  Do not use this for
//               alpha values, see to_alpha_val.
////////////////////////////////////////////////////////////////////
56
inline xelval PNMImage::to_val(float input_value) const;

519 12 to_alpha_val 0 4 667 22 PNMImage::to_alpha_val 0 1 199 311
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::to_alpha_val
//       Access: Published
//  Description: A handy function to scale alpha values from [0..1]
//               to [0..get_maxval()].
////////////////////////////////////////////////////////////////////
62
inline xelval PNMImage::to_alpha_val(float input_value) const;

520 8 from_val 0 4 667 18 PNMImage::from_val 0 1 200 383
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::from_val
//       Access: Published
//  Description: A handy function to scale non-alpha values from
//               [0..get_maxval()] to [0..1].  Do not use this for
//               alpha values, see from_alpha_val.
////////////////////////////////////////////////////////////////////
58
inline float PNMImage::from_val(xelval input_value) const;

521 14 from_alpha_val 0 4 667 24 PNMImage::from_alpha_val 0 1 201 313
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::from_alpha_val
//       Access: Published
//  Description: A handy function to scale alpha values from
//               [0..get_maxval()] to [0..1].
////////////////////////////////////////////////////////////////////
64
inline float PNMImage::from_alpha_val(xelval input_value) const;

522 5 clear 0 4 667 15 PNMImage::clear 0 2 202 203 662
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::clear
//       Access: Published
//  Description: Frees all memory allocated for the image, and clears
//               all its parameters (size, color, type, etc).
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PNMImage::clear
//       Access: Published
//  Description: This flavor of clear() reinitializes the image to an
//               empty (black) image with the given dimensions.
////////////////////////////////////////////////////////////////////
177
void PNMImage::clear(void);
void PNMImage::clear(int x_size, int y_size, int num_channels = 3, xelval maxval = 255, PNMFileType *type = 0, ColorSpace color_space = ::CS_linear);

523 9 copy_from 0 4 667 19 PNMImage::copy_from 0 1 204 269
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::copy_from
//       Access: Published
//  Description: Makes this image become a copy of the other image.
////////////////////////////////////////////////////////////////////
47
void PNMImage::copy_from(PNMImage const &copy);

524 12 copy_channel 0 4 667 22 PNMImage::copy_channel 0 2 205 206 696
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::copy_channel
//       Access: Published
//  Description: Copies a channel from one image into another.
//               Images must be the same size
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PNMImage::copy_channel
//       Access: Published
//  Description: Copies just a single channel from the source image
//               into a single channel of this image, leaving the
//               remaining channels alone.
////////////////////////////////////////////////////////////////////
242
void PNMImage::copy_channel(PNMImage const &copy, int src_channel, int dest_channel);
void PNMImage::copy_channel(PNMImage const &copy, int xto, int yto, int cto, int xfrom = 0, int yfrom = 0, int cfrom = 0, int x_size = -1, int y_size = -1);

525 17 copy_channel_bits 0 4 667 27 PNMImage::copy_channel_bits 0 1 207 522
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::copy_channel_bits
//       Access: Published
//  Description: Copies some subset of the bits of the specified
//               channel from one image into some subset of the bits
//               of the specified channel in another image.  Images
//               must be the same size.
//
//               If right_shift is negative, it means a left shift.
////////////////////////////////////////////////////////////////////
124
void PNMImage::copy_channel_bits(PNMImage const &copy, int src_channel, int dest_channel, xelval src_mask, int right_shift);

526 16 copy_header_from 0 4 667 26 PNMImage::copy_header_from 0 1 208 445
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::copy_header_from
//       Access: Published
//  Description: Copies just the header information into this image.
//               This will blow away any image data stored in the
//               image.  The new image data will be allocated, but
//               left unitialized.
////////////////////////////////////////////////////////////////////
62
void PNMImage::copy_header_from(PNMImageHeader const &header);

527 9 take_from 0 4 667 19 PNMImage::take_from 0 1 209 314
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::take_from
//       Access: Published
//  Description: Move the contents of the other image into this one,
//               and empty the other image.
////////////////////////////////////////////////////////////////////
41
void PNMImage::take_from(PNMImage &orig);

528 4 fill 0 4 667 14 PNMImage::fill 0 2 210 211 610
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::fill
//       Access: Published
//  Description: Sets the entire image (except the alpha channel) to
//               the given color.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PNMImage::fill
//       Access: Published
//  Description: Sets the entire image (except the alpha channel) to
//               the given grayscale level.
////////////////////////////////////////////////////////////////////
109
inline void PNMImage::fill(float red, float green, float blue);
inline void PNMImage::fill(float gray = 0.0);

529 8 fill_val 0 4 667 18 PNMImage::fill_val 0 2 212 213 618
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::fill_val
//       Access: Published
//  Description: Sets the entire image (except the alpha channel) to
//               the given grayscale level.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PNMImage::fill_val
//       Access: Published
//  Description: Sets the entire image (except the alpha channel) to
//               the given color.
////////////////////////////////////////////////////////////////////
112
void PNMImage::fill_val(xelval red, xelval green, xelval blue);
inline void PNMImage::fill_val(xelval gray = 0);

530 10 alpha_fill 0 4 667 20 PNMImage::alpha_fill 0 1 214 269
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::alpha_fill
//       Access: Published
//  Description: Sets the entire alpha channel to the given level.
////////////////////////////////////////////////////////////////////
52
inline void PNMImage::alpha_fill(float alpha = 0.0);

531 14 alpha_fill_val 0 4 667 24 PNMImage::alpha_fill_val 0 1 215 273
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::alpha_fill_val
//       Access: Published
//  Description: Sets the entire alpha channel to the given level.
////////////////////////////////////////////////////////////////////
48
void PNMImage::alpha_fill_val(xelval alpha = 0);

532 13 set_read_size 0 4 667 23 PNMImage::set_read_size 0 1 216 855
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::set_read_size
//       Access: Published
//  Description: Specifies the size to we'd like to scale the image
//               upon reading it.  This will affect the next call to
//               read().  This is usually used to reduce the image
//               size, e.g. for a thumbnail.
//
//               If the file type reader supports it (e.g. JPEG), then
//               this will scale the image during the read operation,
//               consequently reducing memory and CPU utilization.  If
//               the file type reader does not support it, this will
//               load the image normally, and them perform a linear
//               scale after it has been loaded.
////////////////////////////////////////////////////////////////////
60
inline void PNMImage::set_read_size(int x_size, int y_size);

533 15 clear_read_size 0 4 667 25 PNMImage::clear_read_size 0 1 217 298
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::clear_read_size
//       Access: Published
//  Description: Undoes the effect of a previous call to
//               set_read_size().
////////////////////////////////////////////////////////////////////
44
inline void PNMImage::clear_read_size(void);

534 13 has_read_size 0 4 667 23 PNMImage::has_read_size 0 1 218 271
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::has_read_size
//       Access: Published
//  Description: Returns true if set_read_size() has been called.
////////////////////////////////////////////////////////////////////
48
inline bool PNMImage::has_read_size(void) const;

535 15 get_read_x_size 0 4 667 25 PNMImage::get_read_x_size 0 1 219 384
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::get_read_x_size
//       Access: Published
//  Description: Returns the requested x_size of the image if
//               set_read_size() has been called, or the image x_size
//               otherwise (if it is known).
////////////////////////////////////////////////////////////////////
49
inline int PNMImage::get_read_x_size(void) const;

536 15 get_read_y_size 0 4 667 25 PNMImage::get_read_y_size 0 1 220 384
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::get_read_y_size
//       Access: Published
//  Description: Returns the requested y_size of the image if
//               set_read_size() has been called, or the image y_size
//               otherwise (if it is known).
////////////////////////////////////////////////////////////////////
49
inline int PNMImage::get_read_y_size(void) const;

537 15 get_color_space 0 4 667 25 PNMImage::get_color_space 0 1 221 296
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::get_color_space
//       Access: Published
//  Description: Returns the color space in which the image is
//               encoded.
////////////////////////////////////////////////////////////////////
56
inline ColorSpace PNMImage::get_color_space(void) const;

538 4 read 0 4 667 14 PNMImage::read 0 3 222 223 224 1758
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::read
//       Access: Published
//  Description: Reads the indicated image filename.  If type is
//               non-NULL, it is a suggestion for the type of file it
//               is.  Returns true if successful, false on error.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PNMImage::read
//       Access: Published
//  Description: Reads the image data from the indicated stream.
//
//               The filename is advisory only, and may be used
//               to suggest a type if it has a known extension.
//
//               If type is non-NULL, it is a suggestion for the type
//               of file it is (and a non-NULL type will override any
//               magic number test or filename extension lookup).
//
//               Returns true if successful, false on error.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PNMImage::read
//       Access: Published
//  Description: This flavor of read() uses an already-existing
//               PNMReader to read the image file.  You can get a
//               reader via the PNMImageHeader::make_reader() methods.
//               This is a good way to examine the header of a file
//               (for instance, to determine its size) before actually
//               reading the entire image.
//
//               The PNMReader is always deleted upon completion,
//               whether successful or not.
////////////////////////////////////////////////////////////////////
263
bool PNMImage::read(Filename const &filename, PNMFileType *type = 0, bool report_unknown_type = 1);
bool PNMImage::read(istream &data, string const &filename = string(), PNMFileType *type = 0, bool report_unknown_type = 1);
bool PNMImage::read(PNMReader *reader);

539 5 write 0 4 667 15 PNMImage::write 0 3 225 226 227 1386
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::write
//       Access: Published
//  Description: Writes the image to the indicated filename.  If type
//               is non-NULL, it is a suggestion for the type of image
//               file to write.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PNMImage::write
//       Access: Published
//  Description: Writes the image to the indicated ostream.
//
//               The filename is advisory only, and may be used
//               suggest a type if it has a known extension.
//
//               If type is non-NULL, it is a suggestion for the type
//               of image file to write.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PNMImage::write
//       Access: Published
//  Description: This flavor of write() uses an already-existing
//               PNMWriter to write the image file.  You can get a
//               writer via the PNMImageHeader::make_writer() methods.
//
//               The PNMWriter is always deleted upon completion,
//               whether successful or not.
////////////////////////////////////////////////////////////////////
224
bool PNMImage::write(Filename const &filename, PNMFileType *type = 0) const;
bool PNMImage::write(ostream &data, string const &filename = string(), PNMFileType *type = 0) const;
bool PNMImage::write(PNMWriter *writer) const;

540 8 is_valid 0 4 667 18 PNMImage::is_valid 0 1 228 470
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::is_valid
//       Access: Published
//  Description: Returns true if the image has been read in or
//               correctly initialized with a height and width.  If
//               this returns false, virtually all member functions
//               except clear() and read() are invalid function calls.
////////////////////////////////////////////////////////////////////
43
inline bool PNMImage::is_valid(void) const;

541 16 set_num_channels 0 4 667 26 PNMImage::set_num_channels 0 1 229 531
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::set_num_channels
//       Access: Published
//  Description: Changes the number of channels associated with the
//               image.  The new number of channels must be an integer
//               in the range 1 through 4, inclusive.  This will
//               allocate and/or deallocate memory as necessary to
//               accommodate; see set_color_type().
////////////////////////////////////////////////////////////////////
57
inline void PNMImage::set_num_channels(int num_channels);

542 14 set_color_type 0 4 667 24 PNMImage::set_color_type 0 1 230 606
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::set_color_type
//       Access: Published
//  Description: Translates the image to or from grayscale, color, or
//               four-color mode.  Grayscale images are converted to
//               full-color images with R, G, B set to the original
//               gray level; color images are converted to grayscale
//               according to the value of Bright().  The alpha
//               channel, if added, is initialized to zero.
////////////////////////////////////////////////////////////////////
68
void PNMImage::set_color_type(PNMImageHeader::ColorType color_type);

543 15 set_color_space 0 4 667 25 PNMImage::set_color_space 0 1 231 1024
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::set_color_space
//       Access: Published
//  Description: Converts the colors in the image to the indicated
//               color space.  This may be a lossy operation, in
//               particular when going from sRGB to linear.
//               The alpha channel remains untouched.
//
//               Note that, because functions like get_xel() and
//               set_xel() work on linearized floating-point values,
//               this conversion won't affect those values (aside
//               from some minor discrepancies due to storage
//               precision).  It does affect the values used by
//               get_xel_val() and set_xel_val(), though, since
//               those operate on encoded colors.
//
//               Some color spaces, particularly scRGB, may enforce
//               the use of a particular maxval setting.
////////////////////////////////////////////////////////////////////
55
void PNMImage::set_color_space(ColorSpace color_space);

544 9 add_alpha 0 4 667 19 PNMImage::add_alpha 0 1 232 365
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::add_alpha
//       Access: Published
//  Description: Adds an alpha channel to the image, if it does not
//               already have one.  The alpha channel is initialized
//               to zeros.
////////////////////////////////////////////////////////////////////
38
inline void PNMImage::add_alpha(void);

545 12 remove_alpha 0 4 667 22 PNMImage::remove_alpha 0 1 233 270
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::remove_alpha
//       Access: Published
//  Description: Removes the image's alpha channel, if it exists.
////////////////////////////////////////////////////////////////////
41
inline void PNMImage::remove_alpha(void);

546 14 make_grayscale 0 4 667 24 PNMImage::make_grayscale 0 2 234 235 839
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::make_grayscale
//       Access: Published
//  Description: Converts the image from RGB to grayscale.  Any alpha
//               channel, if present, is left undisturbed.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PNMImage::make_grayscale
//       Access: Published
//  Description: Converts the image from RGB to grayscale.  Any alpha
//               channel, if present, is left undisturbed.  The
//               optional rc, gc, bc values represent the relative
//               weights to apply to each channel to convert it to
//               grayscale.
////////////////////////////////////////////////////////////////////
104
inline void PNMImage::make_grayscale(void);
void PNMImage::make_grayscale(float rc, float gc, float bc);

547 8 make_rgb 0 4 667 18 PNMImage::make_rgb 0 1 236 329
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::make_rgb
//       Access: Published
//  Description: Converts the image from grayscale to RGB.  Any alpha
//               channel, if present, is left undisturbed.
////////////////////////////////////////////////////////////////////
37
inline void PNMImage::make_rgb(void);

548 17 premultiply_alpha 0 4 667 27 PNMImage::premultiply_alpha 0 1 237 509
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::premultiply_alpha
//       Access: Published
//  Description: Converts an image in-place to its "premultiplied"
//               form, where, for every pixel in the image, the
//               red, green, and blue components are multiplied by
//               that pixel's alpha value.
//
//               This does not modify any alpha values.
////////////////////////////////////////////////////////////////////
39
void PNMImage::premultiply_alpha(void);

549 19 unpremultiply_alpha 0 4 667 29 PNMImage::unpremultiply_alpha 0 1 238 567
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::unpremultiply_alpha
//       Access: Published
//  Description: Converts an image in-place to its "straight alpha"
//               form (presumably from a "premultiplied" form),
//               where, for every pixel in the image, the red,
//               green, and blue components are divided by that
//               pixel's alpha value.
//
//               This does not modify any alpha values.
////////////////////////////////////////////////////////////////////
41
void PNMImage::unpremultiply_alpha(void);

550 12 reverse_rows 0 4 667 22 PNMImage::reverse_rows 0 1 239 272
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::reverse_rows
//       Access: Published
//  Description: Performs an in-place reversal of the row (y) data.
////////////////////////////////////////////////////////////////////
34
void PNMImage::reverse_rows(void);

551 4 flip 0 4 667 14 PNMImage::flip 0 1 240 662
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::flip
//       Access: Published
//  Description: Reverses, transposes, and/or rotates the image
//               in-place according to the specified parameters.  If
//               flip_x is true, the x axis is reversed; if flip_y is
//               true, the y axis is reversed.  Then, if transpose is
//               true, the x and y axes are exchanged.  These
//               parameters can be used to select any combination of
//               90-degree or 180-degree rotations and flips.
////////////////////////////////////////////////////////////////////
62
void PNMImage::flip(bool flip_x, bool flip_y, bool transpose);

552 10 set_maxval 0 4 667 20 PNMImage::set_maxval 0 1 241 263
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::set_maxval
//       Access: Published
//  Description: Rescales the image to the indicated maxval.
////////////////////////////////////////////////////////////////////
41
void PNMImage::set_maxval(xelval maxval);

553 11 get_xel_val 0 4 667 21 PNMImage::get_xel_val 0 2 242 243 654
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::get_xel_val
//       Access: Published
//  Description: Returns the RGB color at the indicated pixel.  Each
//               component is in the range 0..maxval.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PNMImage::get_xel_val
//       Access: Published
//  Description: Returns the RGB color at the indicated pixel.  Each
//               component is in the range 0..maxval.
////////////////////////////////////////////////////////////////////
102
inline xel &PNMImage::get_xel_val(int x, int y);
inline xel PNMImage::get_xel_val(int x, int y) const;

554 11 set_xel_val 0 4 667 21 PNMImage::set_xel_val 0 3 244 245 246 1570
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::set_xel_val
//       Access: Published
//  Description: Changes the RGB color at the indicated pixel.  Each
//               component is in the range 0..maxval, encoded in
//               the configured color space.  See set_xel if you
//               instead have a linearized and normalized
//               floating-point value.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PNMImage::set_xel_val
//       Access: Published
//  Description: Changes the RGB color at the indicated pixel.  Each
//               component is in the range 0..maxval, encoded in
//               the configured color space.  See set_xel if you
//               instead have a linearized and normalized
//               floating-point value.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PNMImage::set_xel_val
//       Access: Published
//  Description: Changes all three color components at the indicated
//               pixel to the same value.  The value is in the range
//               component is in the range 0..maxval, encoded in
//               the configured color space.  See set_xel if you
//               instead have a linearized and normalized
//               floating-point value.
////////////////////////////////////////////////////////////////////
207
inline void PNMImage::set_xel_val(int x, int y, xel const &value);
inline void PNMImage::set_xel_val(int x, int y, xelval r, xelval g, xelval b);
inline void PNMImage::set_xel_val(int x, int y, xelval gray);

555 11 get_red_val 0 4 667 21 PNMImage::get_red_val 0 1 247 399
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::get_red_val
//       Access: Published
//  Description: Returns the red component color at the indicated
//               pixel.  The value returned is in the range 0..maxval
//               and encoded in the configured color space.
////////////////////////////////////////////////////////////////////
56
inline xelval PNMImage::get_red_val(int x, int y) const;

556 13 get_green_val 0 4 667 23 PNMImage::get_green_val 0 1 248 403
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::get_green_val
//       Access: Published
//  Description: Returns the green component color at the indicated
//               pixel.  The value returned is in the range 0..maxval
//               and encoded in the configured color space.
////////////////////////////////////////////////////////////////////
58
inline xelval PNMImage::get_green_val(int x, int y) const;

557 12 get_blue_val 0 4 667 22 PNMImage::get_blue_val 0 1 249 401
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::get_blue_val
//       Access: Published
//  Description: Returns the blue component color at the indicated
//               pixel.  The value returned is in the range 0..maxval
//               and encoded in the configured color space.
////////////////////////////////////////////////////////////////////
57
inline xelval PNMImage::get_blue_val(int x, int y) const;

558 12 get_gray_val 0 4 667 22 PNMImage::get_gray_val 0 1 250 642
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::get_gray_val
//       Access: Published
//  Description: Returns the gray component color at the indicated
//               pixel.  This only has a meaningful value for
//               grayscale images; for other image types, this returns
//               the value of the blue channel only.  However, also
//               see the get_bright() function.
//               The value returned is in the range 0..maxval and
//               encoded in the configured color space.
////////////////////////////////////////////////////////////////////
57
inline xelval PNMImage::get_gray_val(int x, int y) const;

559 13 get_alpha_val 0 4 667 23 PNMImage::get_alpha_val 0 1 251 453
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::get_alpha_val
//       Access: Published
//  Description: Returns the alpha component color at the indicated
//               pixel.  It is an error to call this unless
//               has_alpha() is true.  The value returned is in the
//               range 0..maxval and always linear.
////////////////////////////////////////////////////////////////////
58
inline xelval PNMImage::get_alpha_val(int x, int y) const;

560 11 set_red_val 0 4 667 21 PNMImage::set_red_val 0 1 252 518
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::set_red_val
//       Access: Published
//  Description: Sets the red component color only at the indicated
//               pixel.  The value given should be in the range
//               0..maxval, encoded in the configured color space.
//               See set_red if you instead have a linearized and
//               normalized floating-point value.
////////////////////////////////////////////////////////////////////
58
inline void PNMImage::set_red_val(int x, int y, xelval r);

561 13 set_green_val 0 4 667 23 PNMImage::set_green_val 0 1 253 524
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::set_green_val
//       Access: Published
//  Description: Sets the green component color only at the indicated
//               pixel.  The value given should be in the range
//               0..maxval, encoded in the configured color space.
//               See set_green if you instead have a linearized and
//               normalized floating-point value.
////////////////////////////////////////////////////////////////////
60
inline void PNMImage::set_green_val(int x, int y, xelval g);

562 12 set_blue_val 0 4 667 22 PNMImage::set_blue_val 0 1 254 521
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::set_blue_val
//       Access: Published
//  Description: Sets the blue component color only at the indicated
//               pixel.  The value given should be in the range
//               0..maxval, encoded in the configured color space.
//               See set_blue if you instead have a linearized and
//               normalized floating-point value.
////////////////////////////////////////////////////////////////////
59
inline void PNMImage::set_blue_val(int x, int y, xelval b);

563 12 set_gray_val 0 4 667 22 PNMImage::set_gray_val 0 1 255 876
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::set_gray_val
//       Access: Published
//  Description: Sets the gray component color at the indicated
//               pixel.  This is only meaningful for grayscale images;
//               for other image types, this simply sets the blue
//               component color.  However, also see set_xel_val(),
//               which can set all the component colors to the same
//               grayscale level, and hence works correctly both for
//               grayscale and color images.  The value given should
//               be in the range 0..maxval, encoded in the configured
//               color space.  See set_gray if you instead have a
//               linearized normalized floating-point value.
////////////////////////////////////////////////////////////////////
62
inline void PNMImage::set_gray_val(int x, int y, xelval gray);

564 13 set_alpha_val 0 4 667 23 PNMImage::set_alpha_val 0 1 256 567
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::set_alpha_val
//       Access: Published
//  Description: Sets the alpha component color only at the indicated
//               pixel.  It is an error to call this unless
//               has_alpha() is true.  The value given should be in
//               the range 0..maxval.
//
//               This value is always linearly encoded, even if the
//               image is set to the sRGB color space.
////////////////////////////////////////////////////////////////////
60
inline void PNMImage::set_alpha_val(int x, int y, xelval a);

565 15 get_channel_val 0 4 667 25 PNMImage::get_channel_val 0 1 257 630
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::get_channel_val
//       Access: Published
//  Description: Returns the nth component color at the indicated
//               pixel.  The channel index should be in the range
//               0..(get_num_channels()-1).  The channels are ordered B,
//               G, R, A.  This is slightly less optimal than
//               accessing the component values directly by named
//               methods.  The value returned is in the range
//               0..maxval.
////////////////////////////////////////////////////////////////////
66
xelval PNMImage::get_channel_val(int x, int y, int channel) const;

566 15 set_channel_val 0 4 667 25 PNMImage::set_channel_val 0 1 258 629
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::set_channel_val
//       Access: Published
//  Description: Sets the nth component color at the indicated
//               pixel.  The channel index should be in the range
//               0..(get_num_channels()-1).  The channels are ordered B,
//               G, R, A.  This is slightly less optimal than
//               setting the component values directly by named
//               methods.  The value given should be in the range
//               0..maxval.
////////////////////////////////////////////////////////////////////
72
void PNMImage::set_channel_val(int x, int y, int channel, xelval value);

567 11 get_channel 0 4 667 21 PNMImage::get_channel 0 1 259 629
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::get_channel
//       Access: Published
//  Description: Returns the nth component color at the indicated
//               pixel.  The channel index should be in the range
//               0..(get_num_channels()-1).  The channels are ordered B,
//               G, R, A.  This is slightly less optimal than
//               accessing the component values directly by named
//               methods.  The value returned is a float in the range
//               0..1.
////////////////////////////////////////////////////////////////////
61
float PNMImage::get_channel(int x, int y, int channel) const;

568 11 set_channel 0 4 667 21 PNMImage::set_channel 0 1 260 628
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::set_channel
//       Access: Published
//  Description: Sets the nth component color at the indicated
//               pixel.  The channel index should be in the range
//               0..(get_num_channels()-1).  The channels are ordered B,
//               G, R, A.  This is slightly less optimal than
//               setting the component values directly by named
//               methods.  The value given should be a float in the
//               range 0..1.
////////////////////////////////////////////////////////////////////
67
void PNMImage::set_channel(int x, int y, int channel, float value);

569 9 get_pixel 0 4 667 19 PNMImage::get_pixel 0 1 261 322
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::get_pixel
//       Access: Published
//  Description: Returns the (r, g, b, a) pixel value at the indicated
//               pixel, using a PixelSpec object.
////////////////////////////////////////////////////////////////////
66
PNMImageHeader::PixelSpec PNMImage::get_pixel(int x, int y) const;

570 9 set_pixel 0 4 667 19 PNMImage::set_pixel 0 1 262 319
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::set_pixel
//       Access: Published
//  Description: Sets the (r, g, b, a) pixel value at the indicated
//               pixel, using a PixelSpec object.
////////////////////////////////////////////////////////////////////
79
void PNMImage::set_pixel(int x, int y, PNMImageHeader::PixelSpec const &pixel);

571 7 get_xel 0 4 667 17 PNMImage::get_xel 0 1 263 336
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::get_xel
//       Access: Published
//  Description: Returns the RGB color at the indicated pixel.  Each
//               component is a linearized float in the range 0..1.
////////////////////////////////////////////////////////////////////
56
inline LRGBColorf PNMImage::get_xel(int x, int y) const;

572 7 set_xel 0 4 667 17 PNMImage::set_xel 0 3 264 265 266 1055
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::set_xel
//       Access: Published
//  Description: Changes the RGB color at the indicated pixel.  Each
//               component is a linearized float in the range 0..1.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PNMImage::set_xel
//       Access: Published
//  Description: Changes the RGB color at the indicated pixel.  Each
//               component is a linearized float in the range 0..1.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PNMImage::set_xel
//       Access: Published
//  Description: Changes all three color components at the indicated
//               pixel to the same value.  The value is a linearized
//               float in the range 0..1.
////////////////////////////////////////////////////////////////////
198
inline void PNMImage::set_xel(int x, int y, LRGBColorf const &value);
inline void PNMImage::set_xel(int x, int y, float r, float g, float b);
inline void PNMImage::set_xel(int x, int y, float gray);

573 9 get_xel_a 0 4 667 19 PNMImage::get_xel_a 0 1 267 339
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::get_xel_a
//       Access: Published
//  Description: Returns the RGBA color at the indicated pixel.  Each
//               component is a linearized float in the range 0..1.
////////////////////////////////////////////////////////////////////
55
inline LColorf PNMImage::get_xel_a(int x, int y) const;

574 9 set_xel_a 0 4 667 19 PNMImage::set_xel_a 0 2 268 269 680
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::set_xel_a
//       Access: Published
//  Description: Changes the RGBA color at the indicated pixel.  Each
//               component is a linearized float in the range 0..1.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PNMImage::set_xel_a
//       Access: Published
//  Description: Changes the RGBA color at the indicated pixel.  Each
//               component is a linearized float in the range 0..1.
////////////////////////////////////////////////////////////////////
151
inline void PNMImage::set_xel_a(int x, int y, LColorf const &value);
inline void PNMImage::set_xel_a(int x, int y, float r, float g, float b, float a);

575 7 get_red 0 4 667 17 PNMImage::get_red 0 1 270 367
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::get_red
//       Access: Published
//  Description: Returns the red component color at the indicated
//               pixel.  The value returned is a linearized float
//               in the range 0..1.
////////////////////////////////////////////////////////////////////
51
inline float PNMImage::get_red(int x, int y) const;

576 9 get_green 0 4 667 19 PNMImage::get_green 0 1 271 371
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::get_green
//       Access: Published
//  Description: Returns the green component color at the indicated
//               pixel.  The value returned is a linearized float
//               in the range 0..1.
////////////////////////////////////////////////////////////////////
53
inline float PNMImage::get_green(int x, int y) const;

577 8 get_blue 0 4 667 18 PNMImage::get_blue 0 1 272 369
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::get_blue
//       Access: Published
//  Description: Returns the blue component color at the indicated
//               pixel.  The value returned is a linearized float
//               in the range 0..1.
////////////////////////////////////////////////////////////////////
52
inline float PNMImage::get_blue(int x, int y) const;

578 8 get_gray 0 4 667 18 PNMImage::get_gray 0 1 273 594
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::get_gray
//       Access: Published
//  Description: Returns the gray component color at the indicated
//               pixel.  This only has a meaningful value for
//               grayscale images; for other image types, this returns
//               the value of the blue channel only.  However, also
//               see the get_bright() function.  The value returned
//               is a linearized float in the range 0..1.
////////////////////////////////////////////////////////////////////
52
inline float PNMImage::get_gray(int x, int y) const;

579 9 get_alpha 0 4 667 19 PNMImage::get_alpha 0 1 274 434
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::get_alpha
//       Access: Published
//  Description: Returns the alpha component color at the indicated
//               pixel.  It is an error to call this unless
//               has_alpha() is true.  The value returned is a float
//               in the range 0..1.
////////////////////////////////////////////////////////////////////
53
inline float PNMImage::get_alpha(int x, int y) const;

580 7 set_red 0 4 667 17 PNMImage::set_red 0 1 275 373
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::set_red
//       Access: Published
//  Description: Sets the red component color only at the indicated
//               pixel.  The value given should be a linearized
//               float in the range 0..1.
////////////////////////////////////////////////////////////////////
53
inline void PNMImage::set_red(int x, int y, float r);

581 9 set_green 0 4 667 19 PNMImage::set_green 0 1 276 377
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::set_green
//       Access: Published
//  Description: Sets the green component color only at the indicated
//               pixel.  The value given should be a linearized
//               float in the range 0..1.
////////////////////////////////////////////////////////////////////
55
inline void PNMImage::set_green(int x, int y, float g);

582 8 set_blue 0 4 667 18 PNMImage::set_blue 0 1 277 375
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::set_blue
//       Access: Published
//  Description: Sets the blue component color only at the indicated
//               pixel.  The value given should be a linearized
//               float in the range 0..1.
////////////////////////////////////////////////////////////////////
54
inline void PNMImage::set_blue(int x, int y, float b);

583 8 set_gray 0 4 667 18 PNMImage::set_gray 0 1 278 729
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::set_gray
//       Access: Published
//  Description: Sets the gray component color at the indicated
//               pixel.  This is only meaningful for grayscale images;
//               for other image types, this simply sets the blue
//               component color.  However, also see set_xel(), which
//               can set all the component colors to the same
//               grayscale level, and hence works correctly both for
//               grayscale and color images.  The value given should
//               be a linearized float in the range 0..1.
////////////////////////////////////////////////////////////////////
57
inline void PNMImage::set_gray(int x, int y, float gray);

584 9 set_alpha 0 4 667 19 PNMImage::set_alpha 0 1 279 432
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::set_alpha
//       Access: Published
//  Description: Sets the alpha component color only at the indicated
//               pixel.  It is an error to call this unless
//               has_alpha() is true.  The value given should be in
//               the range 0..1.
////////////////////////////////////////////////////////////////////
55
inline void PNMImage::set_alpha(int x, int y, float a);

585 10 get_bright 0 4 667 20 PNMImage::get_bright 0 3 280 281 282 1423
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::get_bright
//       Access: Published
//  Description: Returns the linear brightness of the given xel, as a
//               linearized float in the range 0..1.  This flavor of
//               get_bright() returns the correct grayscale brightness
//               level for both full-color and grayscale images.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PNMImage::get_bright
//       Access: Published
//  Description: This flavor of get_bright() works correctly only for
//               color images.  It returns a single brightness value
//               for the RGB color at the indicated pixel, based on
//               the supplied weights for each component.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PNMImage::get_bright
//       Access: Published
//  Description: This flavor of get_bright() works correctly only for
//               four-channel images.  It returns a single brightness
//               value for the RGBA color at the indicated pixel,
//               based on the supplied weights for each component.
////////////////////////////////////////////////////////////////////
234
inline float PNMImage::get_bright(int x, int y) const;
inline float PNMImage::get_bright(int x, int y, float rc, float gc, float bc) const;
inline float PNMImage::get_bright(int x, int y, float rc, float gc, float bc, float ac) const;

586 5 blend 0 4 667 15 PNMImage::blend 0 2 283 284 1080
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::blend
//       Access: Published
//  Description: Smoothly blends the indicated pixel value in with
//               whatever was already in the image, based on the given
//               alpha value.  An alpha of 1.0 is fully opaque and
//               completely replaces whatever was there previously;
//               alpha of 0.0 is fully transparent and does nothing.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PNMImage::blend
//       Access: Published
//  Description: Smoothly blends the indicated pixel value in with
//               whatever was already in the image, based on the given
//               alpha value.  An alpha of 1.0 is fully opaque and
//               completely replaces whatever was there previously;
//               alpha of 0.0 is fully transparent and does nothing.
////////////////////////////////////////////////////////////////////
154
inline void PNMImage::blend(int x, int y, LRGBColorf const &val, float alpha);
void PNMImage::blend(int x, int y, float r, float g, float b, float alpha);

587 14 copy_sub_image 0 4 667 24 PNMImage::copy_sub_image 0 1 285 647
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::copy_sub_image
//       Access: Published
//  Description: Copies a rectangular area of another image into a
//               rectangular area of this image.  Both images must
//               already have been initialized.  The upper-left corner
//               of the region in both images is specified, and the
//               size of the area; if the size is omitted, it defaults
//               to the entire other image, or the largest piece that
//               will fit.
////////////////////////////////////////////////////////////////////
134
void PNMImage::copy_sub_image(PNMImage const &copy, int xto, int yto, int xfrom = 0, int yfrom = 0, int x_size = -1, int y_size = -1);

588 15 blend_sub_image 0 4 667 25 PNMImage::blend_sub_image 0 1 286 770
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::blend_sub_image
//       Access: Published
//  Description: Behaves like copy_sub_image(), except the alpha
//               channel of the copy is used to blend the copy into
//               the destination image, instead of overwriting pixels
//               unconditionally.
//
//               If pixel_scale is not 1.0, it specifies an amount to
//               scale each *alpha* value of the source image before
//               applying it to the target image.
//
//               If pixel_scale is 1.0 and the copy has no alpha
//               channel, this degenerates into copy_sub_image().
////////////////////////////////////////////////////////////////////
160
void PNMImage::blend_sub_image(PNMImage const &copy, int xto, int yto, int xfrom = 0, int yfrom = 0, int x_size = -1, int y_size = -1, float pixel_scale = 1.0);

589 13 add_sub_image 0 4 667 23 PNMImage::add_sub_image 0 1 287 503
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::add_sub_image
//       Access: Published
//  Description: Behaves like copy_sub_image(), except the copy pixels
//               are added to the pixels of the destination, after
//               scaling by the specified pixel_scale.  Unlike
//               blend_sub_image(), the alpha channel is not treated
//               specially.
////////////////////////////////////////////////////////////////////
158
void PNMImage::add_sub_image(PNMImage const &copy, int xto, int yto, int xfrom = 0, int yfrom = 0, int x_size = -1, int y_size = -1, float pixel_scale = 1.0);

590 14 mult_sub_image 0 4 667 24 PNMImage::mult_sub_image 0 1 288 509
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::mult_sub_image
//       Access: Published
//  Description: Behaves like copy_sub_image(), except the copy pixels
//               are multiplied to the pixels of the destination, after
//               scaling by the specified pixel_scale.  Unlike
//               blend_sub_image(), the alpha channel is not treated
//               specially.
////////////////////////////////////////////////////////////////////
159
void PNMImage::mult_sub_image(PNMImage const &copy, int xto, int yto, int xfrom = 0, int yfrom = 0, int x_size = -1, int y_size = -1, float pixel_scale = 1.0);

591 16 darken_sub_image 0 4 667 26 PNMImage::darken_sub_image 0 1 289 770
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::darken_sub_image
//       Access: Published
//  Description: Behaves like copy_sub_image(), but the resulting
//               color will be the darker of the source and
//               destination colors at each pixel (and at each R, G,
//               B, A component value).
//
//               If pixel_scale is not 1.0, it specifies an amount to
//               scale each pixel value of the source image before
//               applying it to the target image.  The scale is
//               applied with the center at 1.0: scaling the pixel
//               value smaller brings it closer to 1.0.
////////////////////////////////////////////////////////////////////
161
void PNMImage::darken_sub_image(PNMImage const &copy, int xto, int yto, int xfrom = 0, int yfrom = 0, int x_size = -1, int y_size = -1, float pixel_scale = 1.0);

592 17 lighten_sub_image 0 4 667 27 PNMImage::lighten_sub_image 0 1 290 635
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::lighten_sub_image
//       Access: Published
//  Description: Behaves like copy_sub_image(), but the resulting
//               color will be the lighter of the source and
//               destination colors at each pixel (and at each R, G,
//               B, A component value).
//
//               If pixel_scale is not 1.0, it specifies an amount to
//               scale each pixel value of the source image before
//               applying it to the target image.
////////////////////////////////////////////////////////////////////
162
void PNMImage::lighten_sub_image(PNMImage const &copy, int xto, int yto, int xfrom = 0, int yfrom = 0, int x_size = -1, int y_size = -1, float pixel_scale = 1.0);

593 9 threshold 0 4 667 19 PNMImage::threshold 0 1 291 1004
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::threshold
//       Access: Published
//  Description: Selectively copies each pixel from either one source
//               or another source, depending on the pixel value of
//               the indicated channel of select_image.
//
//               For each pixel (x, y):
//
//               s = select_image.get_channel(x, y, channel). Set this
//               image's (x, y) to:
//
//               lt.get_xel(x, y) if s < threshold, or
//
//               ge.get_xel(x, y) if s >= threshold
//
//               Any of select_image, lt, or ge may be the same
//               PNMImge object as this image, or the same as each
//               other; or they may all be different. All images must
//               be the same size.  As a special case, lt and ge may
//               both be 1x1 images instead of the source image size.
////////////////////////////////////////////////////////////////////
125
void PNMImage::threshold(PNMImage const &select_image, int channel, float threshold, PNMImage const &lt, PNMImage const &ge);

594 20 fill_distance_inside 0 4 667 30 PNMImage::fill_distance_inside 0 1 292 1231
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::fill_distance_inside
//       Access: Published
//  Description: Replaces this image with a grayscale image whose gray
//               channel represents the linear Manhattan distance from
//               the nearest dark pixel in the given mask image, up to
//               the specified radius value (which also becomes the
//               new maxval).  radius may range from 0 to maxmaxval;
//               smaller values will compute faster.  A dark pixel is
//               defined as one whose pixel value is < threshold.
//
//               If shrink_from_border is true, then the mask image is
//               considered to be surrounded by a border of dark
//               pixels; otherwise, the border isn't considered.
//
//               This can be used, in conjunction with threshold, to
//               shrink a mask image inwards by a certain number of
//               pixels.
//
//               The mask image may be the same image as this one, in
//               which case it is destructively modified by this
//               process.
////////////////////////////////////////////////////////////////////
112
void PNMImage::fill_distance_inside(PNMImage const &mask, float threshold, int radius, bool shrink_from_border);

595 21 fill_distance_outside 0 4 667 31 PNMImage::fill_distance_outside 0 1 293 1030
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::fill_distance_outside
//       Access: Published
//  Description: Replaces this image with a grayscale image whose gray
//               channel represents the linear Manhattan distance from
//               the nearest white pixel in the given mask image, up to
//               the specified radius value (which also becomes the
//               new maxval).  radius may range from 0 to maxmaxval;
//               smaller values will compute faster.  A white pixel is
//               defined as one whose pixel value is >= threshold.
//
//               This can be used, in conjunction with threshold, to
//               grow a mask image outwards by a certain number of
//               pixels.
//
//               The mask image may be the same image as this one, in
//               which case it is destructively modified by this
//               process.
////////////////////////////////////////////////////////////////////
88
void PNMImage::fill_distance_outside(PNMImage const &mask, float threshold, int radius);

596 7 rescale 0 4 667 17 PNMImage::rescale 0 1 294 537
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::rescale
//       Access: Published
//  Description: Rescales the RGB channel values so that any values in
//               the original image between min_val and max_val are
//               expanded to the range 0 .. 1.  Values below min_val
//               are set to 0, and values above max_val are set to 1.
//               Does not affect the alpha channel, if any.
////////////////////////////////////////////////////////////////////
53
void PNMImage::rescale(float min_val, float max_val);

597 11 render_spot 0 4 667 21 PNMImage::render_spot 0 1 295 781
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::render_spot
//       Access: Published
//  Description: Renders a solid-color circle, with a fuzzy edge, into
//               the center of the PNMImage.  If the PNMImage is
//               non-square, this actually renders an ellipse.
//
//               The min_radius and max_radius are in the scale 0..1,
//               where 1.0 means the full width of the image.  If
//               min_radius == max_radius, the edge is sharp (but
//               still antialiased); otherwise, the pixels between
//               min_radius and max_radius are smoothly blended
//               between fg and bg colors.
////////////////////////////////////////////////////////////////////
101
void PNMImage::render_spot(LColorf const &fg, LColorf const &bg, float min_radius, float max_radius);

598 13 expand_border 0 4 667 23 PNMImage::expand_border 0 1 296 472
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::expand_border
//       Access: Published
//  Description: Expands the image by the indicated number of pixels
//               on each edge.  The new pixels are set to the
//               indicated color.
//
//               If any of the values is negative, this actually crops
//               the image.
////////////////////////////////////////////////////////////////////
93
void PNMImage::expand_border(int left, int right, int bottom, int top, LColorf const &color);

599 10 box_filter 0 4 667 20 PNMImage::box_filter 0 1 297 394
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::box_filter
//       Access: Published
//  Description: This flavor of box_filter() will apply the filter
//               over the entire image without resizing or copying;
//               the effect is that of a blur operation.
////////////////////////////////////////////////////////////////////
53
inline void PNMImage::box_filter(float radius = 1.0);

600 15 gaussian_filter 0 4 667 25 PNMImage::gaussian_filter 0 1 298 404
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::gaussian_filter
//       Access: Published
//  Description: This flavor of gaussian_filter() will apply the filter
//               over the entire image without resizing or copying;
//               the effect is that of a blur operation.
////////////////////////////////////////////////////////////////////
58
inline void PNMImage::gaussian_filter(float radius = 1.0);

601 23 unfiltered_stretch_from 0 4 667 33 PNMImage::unfiltered_stretch_from 0 1 299 334
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::unfiltered_stretch_from
//       Access: Published
//  Description: Resizes from the indicated image into this one by
//               performing a nearest-point sample.
////////////////////////////////////////////////////////////////////
61
void PNMImage::unfiltered_stretch_from(PNMImage const &copy);

602 15 box_filter_from 0 4 667 25 PNMImage::box_filter_from 0 1 300 530
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::box_filter_from
//       Access: Public
//  Description: Makes a resized copy of the indicated image into this
//               one using the indicated filter.  The image to be
//               copied is squashed and stretched to match the
//               dimensions of the current image, applying the
//               appropriate filter to perform the stretching.
////////////////////////////////////////////////////////////////////
67
void PNMImage::box_filter_from(float radius, PNMImage const &copy);

603 20 gaussian_filter_from 0 4 667 30 PNMImage::gaussian_filter_from 0 1 301 535
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::gaussian_filter_from
//       Access: Public
//  Description: Makes a resized copy of the indicated image into this
//               one using the indicated filter.  The image to be
//               copied is squashed and stretched to match the
//               dimensions of the current image, applying the
//               appropriate filter to perform the stretching.
////////////////////////////////////////////////////////////////////
72
void PNMImage::gaussian_filter_from(float radius, PNMImage const &copy);

604 17 quick_filter_from 0 4 667 27 PNMImage::quick_filter_from 0 1 302 731
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::quick_filter_from
//       Access: Public
//  Description: Resizes from the given image, with a fixed radius of
//               0.5. This is a very specialized and simple algorithm
//               that doesn't handle dropping below the Nyquist rate
//               very well, but is quite a bit faster than the more
//               general box_filter(), above.  If borders are
//               specified, they will further restrict the size of the
//               resulting image. There's no point in using
//               quick_box_filter() on a single image.
////////////////////////////////////////////////////////////////////
89
void PNMImage::quick_filter_from(PNMImage const &copy, int xborder = 0, int yborder = 0);

605 14 make_histogram 0 4 667 24 PNMImage::make_histogram 0 1 303 294
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::make_histogram
//       Access: Published
//  Description: Computes a histogram of the colors used in the
//               image.
////////////////////////////////////////////////////////////////////
63
void PNMImage::make_histogram(PNMImageHeader::Histogram &hist);

606 17 perlin_noise_fill 0 4 667 27 PNMImage::perlin_noise_fill 0 2 304 305 880
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::perlin_noise_fill
//       Access: Published
//  Description: Fills the image with a grayscale perlin noise
//               pattern based on the indicated parameters.
//               Uses set_xel to set the grayscale values.
//               The sx and sy parameters are in multiples
//               of the size of this image.
//               See also the PerlinNoise2 class in mathutil.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PNMImage::perlin_noise_fill
//       Access: Published
//  Description: Variant of perlin_noise_fill that uses an
//               existing StackedPerlinNoise2 object.
////////////////////////////////////////////////////////////////////
166
void PNMImage::perlin_noise_fill(float sx, float sy, int table_size = 256, unsigned long int seed = 0);
void PNMImage::perlin_noise_fill(StackedPerlinNoise2 &perlin);

607 14 remix_channels 0 4 667 24 PNMImage::remix_channels 0 1 306 370
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::remix_channels
//       Access: Published
//  Description: Transforms every pixel using the operation
//               (Ro,Go,Bo) = conv.xform_point(Ri,Gi,Bi);
//               Input must be a color image.
////////////////////////////////////////////////////////////////////
52
void PNMImage::remix_channels(LMatrix4 const &conv);

608 13 gamma_correct 0 4 667 23 PNMImage::gamma_correct 0 1 307 474
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::gamma_correct
//       Access: Published
//  Description: Assuming the image was constructed with a gamma curve
//               of from_gamma in the RGB channels, converts it to an
//               image with a gamma curve of to_gamma in the RGB
//               channels.  Does not affect the alpha channel.
////////////////////////////////////////////////////////////////////
70
inline void PNMImage::gamma_correct(float from_gamma, float to_gamma);

609 19 gamma_correct_alpha 0 4 667 29 PNMImage::gamma_correct_alpha 0 1 308 481
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::gamma_correct_alpha
//       Access: Published
//  Description: Assuming the image was constructed with a gamma curve
//               of from_gamma in the alpha channel, converts it to an
//               image with a gamma curve of to_gamma in the alpha
//               channel.  Does not affect the RGB channels.
////////////////////////////////////////////////////////////////////
76
inline void PNMImage::gamma_correct_alpha(float from_gamma, float to_gamma);

610 14 apply_exponent 0 4 667 24 PNMImage::apply_exponent 0 4 309 310 311 312 1934
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::apply_exponent
//       Access: Published
//  Description: Adjusts each channel of the image by raising the
//               corresponding component value to the indicated
//               exponent, such that L' = L ^ exponent.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PNMImage::apply_exponent
//       Access: Published
//  Description: Adjusts each channel of the image by raising the
//               corresponding component value to the indicated
//               exponent, such that L' = L ^ exponent.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PNMImage::apply_exponent
//       Access: Published
//  Description: Adjusts each channel of the image by raising the
//               corresponding component value to the indicated
//               exponent, such that L' = L ^ exponent.  For a
//               grayscale image, the blue_exponent value is used for
//               the grayscale value, and red_exponent and
//               green_exponent are unused.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PNMImage::apply_exponent
//       Access: Published
//  Description: Adjusts each channel of the image by raising the
//               corresponding component value to the indicated
//               exponent, such that L' = L ^ exponent.  For a
//               grayscale image, the blue_exponent value is used for
//               the grayscale value, and red_exponent and
//               green_exponent are unused.
////////////////////////////////////////////////////////////////////
356
inline void PNMImage::apply_exponent(float gray_exponent);
inline void PNMImage::apply_exponent(float gray_exponent, float alpha_exponent);
inline void PNMImage::apply_exponent(float red_exponent, float green_exponent, float blue_exponent);
void PNMImage::apply_exponent(float red_exponent, float green_exponent, float blue_exponent, float alpha_exponent);

611 15 get_average_xel 0 4 667 25 PNMImage::get_average_xel 0 1 313 302
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::get_average_xel
//       Access: Published
//  Description: Returns the average color of all of the pixels
//               in the image.
////////////////////////////////////////////////////////////////////
49
LRGBColorf PNMImage::get_average_xel(void) const;

612 17 get_average_xel_a 0 4 667 27 PNMImage::get_average_xel_a 0 1 314 333
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::get_average_xel_a
//       Access: Published
//  Description: Returns the average color of all of the pixels
//               in the image, including the alpha channel.
////////////////////////////////////////////////////////////////////
48
LColorf PNMImage::get_average_xel_a(void) const;

613 16 get_average_gray 0 4 667 26 PNMImage::get_average_gray 0 1 315 317
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::get_average_gray
//       Access: Published
//  Description: Returns the average grayscale component of all of
//               the pixels in the image.
////////////////////////////////////////////////////////////////////
45
float PNMImage::get_average_gray(void) const;

614 16 do_fill_distance 0 4 667 26 PNMImage::do_fill_distance 0 1 316 343
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::do_fill_distance
//       Access: Private
//  Description: Recursively fills in the minimum distance measured
//               from a certain set of points into the gray channel.
////////////////////////////////////////////////////////////////////
55
void PNMImage::do_fill_distance(int xi, int yi, int d);

615 4 size 0 4 668 19 PNMImage::Row::size 0 1 334 255
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::Row::size
//       Access: Published
//  Description: Get the number of pixels in the row.
////////////////////////////////////////////////////////////////////
46
inline size_t PNMImage::Row::size(void) const;

616 11 operator [] 0 4 668 26 PNMImage::Row::operator [] 0 1 335 0
55
inline LColorf PNMImage::Row::operator [](int x) const;

617 11 __setitem__ 0 4 668 26 PNMImage::Row::__setitem__ 0 1 336 376
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::Row::Array Operator
//       Access: Published
//  Description: Set the pixel at the given column in the row.  If
//               the image has no alpha channel, the alpha component
//               is ignored.
////////////////////////////////////////////////////////////////////
64
inline void PNMImage::Row::__setitem__(int x, LColorf const &v);

618 11 get_xel_val 0 4 668 26 PNMImage::Row::get_xel_val 0 1 337 276
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::Row::Array Operator
//       Access: Published
//  Description: Fetch the pixel at the given column in the row.
////////////////////////////////////////////////////////////////////
46
inline xel &PNMImage::Row::get_xel_val(int x);

619 11 set_xel_val 0 4 668 26 PNMImage::Row::set_xel_val 0 1 338 274
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::Row::Array Operator
//       Access: Published
//  Description: Set the pixel at the given column in the row.
////////////////////////////////////////////////////////////////////
60
inline void PNMImage::Row::set_xel_val(int x, xel const &v);

620 13 get_alpha_val 0 4 668 28 PNMImage::Row::get_alpha_val 0 1 339 282
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::Row::Array Operator
//       Access: Published
//  Description: Fetch the alpha value at the given column in the row.
////////////////////////////////////////////////////////////////////
56
inline xelval PNMImage::Row::get_alpha_val(int x) const;

621 13 set_alpha_val 0 4 668 28 PNMImage::Row::set_alpha_val 0 1 340 280
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::Row::Array Operator
//       Access: Published
//  Description: Set the alpha value at the given column in the row.
////////////////////////////////////////////////////////////////////
58
inline void PNMImage::Row::set_alpha_val(int x, xelval v);

622 4 ~Row 0 4 668 19 PNMImage::Row::~Row 0 0 0
26
PNMImage::Row::~Row(void);

623 4 size 0 4 669 20 PNMImage::CRow::size 0 1 341 256
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::CRow::size
//       Access: Published
//  Description: Get the number of pixels in the row.
////////////////////////////////////////////////////////////////////
47
inline size_t PNMImage::CRow::size(void) const;

624 11 operator [] 0 4 669 27 PNMImage::CRow::operator [] 0 1 342 0
56
inline LColorf PNMImage::CRow::operator [](int x) const;

625 11 get_xel_val 0 4 669 27 PNMImage::CRow::get_xel_val 0 1 343 277
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::CRow::Array Operator
//       Access: Published
//  Description: Fetch the pixel at the given column in the row.
////////////////////////////////////////////////////////////////////
52
inline xel PNMImage::CRow::get_xel_val(int x) const;

626 13 get_alpha_val 0 4 669 29 PNMImage::CRow::get_alpha_val 0 1 344 283
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::CRow::Array Operator
//       Access: Published
//  Description: Fetch the alpha value at the given column in the row.
////////////////////////////////////////////////////////////////////
57
inline xelval PNMImage::CRow::get_alpha_val(int x) const;

627 5 ~CRow 0 4 669 21 PNMImage::CRow::~CRow 0 0 0
28
PNMImage::CRow::~CRow(void);

628 11 operator [] 0 4 667 21 PNMImage::operator [] 0 2 317 318 0
108
inline PNMImage::Row PNMImage::operator [](int y);
inline PNMImage::CRow PNMImage::operator [](int y) const;

629 10 operator ~ 0 68 667 20 PNMImage::operator ~ 0 1 319 0
42
PNMImage PNMImage::operator ~(void) const;

630 10 operator + 0 4 667 20 PNMImage::operator + 0 2 320 321 0
132
inline PNMImage PNMImage::operator +(PNMImage const &other) const;
inline PNMImage PNMImage::operator +(LColorf const &other) const;

631 10 operator - 0 4 667 20 PNMImage::operator - 0 2 322 323 0
132
inline PNMImage PNMImage::operator -(PNMImage const &other) const;
inline PNMImage PNMImage::operator -(LColorf const &other) const;

632 10 operator * 0 4 667 20 PNMImage::operator * 0 3 324 325 326 0
194
inline PNMImage PNMImage::operator *(PNMImage const &other) const;
inline PNMImage PNMImage::operator *(float multiplier) const;
inline PNMImage PNMImage::operator *(LColorf const &other) const;

633 11 operator += 0 4 667 21 PNMImage::operator += 0 2 327 328 0
100
void PNMImage::operator +=(PNMImage const &other);
void PNMImage::operator +=(LColorf const &other);

634 11 operator -= 0 4 667 21 PNMImage::operator -= 0 2 329 330 0
100
void PNMImage::operator -=(PNMImage const &other);
void PNMImage::operator -=(LColorf const &other);

635 11 operator *= 0 4 667 21 PNMImage::operator *= 0 3 331 332 333 0
146
void PNMImage::operator *=(PNMImage const &other);
void PNMImage::operator *=(float multiplier);
void PNMImage::operator *=(LColorf const &other);

636 10 PNMPainter 0 4 670 22 PNMPainter::PNMPainter 0 1 345 896
////////////////////////////////////////////////////////////////////
//     Function: PNMPainter::Constructor
//       Access: Published
//  Description: The constructor stores a pointer to the PNMImage you
//               pass it, but it does not take ownership of the
//               object; you are responsible for ensuring that the
//               PNMImage does not destruct during the lifetime of the
//               PNMPainter object.
//
//               The xo, yo coordinates specify an optional offset for
//               fill coordinates.  If you are painting with a pattern
//               fill, these specify the virtual coordinates of the
//               upper-left corner of the image, which can allow you
//               to adjust the pattern to line up with nested images,
//               if necessary.
////////////////////////////////////////////////////////////////////
64
PNMPainter::PNMPainter(PNMImage &image, int xo = 0, int yo = 0);

637 11 ~PNMPainter 0 4 670 23 PNMPainter::~PNMPainter 0 0 222
////////////////////////////////////////////////////////////////////
//     Function: PNMPainter::Destructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
37
inline PNMPainter::~PNMPainter(void);

638 7 set_pen 0 4 670 19 PNMPainter::set_pen 0 1 346 608
////////////////////////////////////////////////////////////////////
//     Function: PNMPainter::set_pen
//       Access: Published
//  Description: Specifies a PNMBrush that will be used for drawing
//               lines and edges.  If the brush is a bitmap brush, its
//               image will be smeared pixelwise along the line.
//
//               Unlike the PNMImage passed to the constructor, the
//               PNMPainter will take ownership of the pen.  It is not
//               necessary to keep a separate pointer to it.
////////////////////////////////////////////////////////////////////
47
inline void PNMPainter::set_pen(PNMBrush *pen);

639 7 get_pen 0 4 670 19 PNMPainter::get_pen 0 1 347 259
////////////////////////////////////////////////////////////////////
//     Function: PNMPainter::get_pen
//       Access: Published
//  Description: Returns the current pen.  See set_pen().
////////////////////////////////////////////////////////////////////
49
inline PNMBrush *PNMPainter::get_pen(void) const;

640 8 set_fill 0 4 670 20 PNMPainter::set_fill 0 1 348 639
////////////////////////////////////////////////////////////////////
//     Function: PNMPainter::set_fill
//       Access: Published
//  Description: Specifies a PNMBrush that will be used for filling
//               in the interiors of objects.  If the brush is a
//               bitmap brush, its image will be tiled throughout the
//               space.
//
//               Unlike the PNMImage passed to the constructor, the
//               PNMPainter will take ownership of the fill brush.  It
//               is not necessary to keep a separate pointer to it.
////////////////////////////////////////////////////////////////////
49
inline void PNMPainter::set_fill(PNMBrush *fill);

641 8 get_fill 0 4 670 20 PNMPainter::get_fill 0 1 349 268
////////////////////////////////////////////////////////////////////
//     Function: PNMPainter::get_fill
//       Access: Published
//  Description: Returns the current fill brush.  See set_fill().
////////////////////////////////////////////////////////////////////
50
inline PNMBrush *PNMPainter::get_fill(void) const;

642 10 draw_point 0 4 670 22 PNMPainter::draw_point 0 1 350 305
////////////////////////////////////////////////////////////////////
//     Function: PNMPainter::draw_point
//       Access: Published
//  Description: Draws an antialiased point on the PNMImage, using the
//               current pen.
////////////////////////////////////////////////////////////////////
53
inline void PNMPainter::draw_point(float x, float y);

643 9 draw_line 0 4 670 21 PNMPainter::draw_line 0 1 351 303
////////////////////////////////////////////////////////////////////
//     Function: PNMPainter::draw_line
//       Access: Published
//  Description: Draws an antialiased line on the PNMImage, using the
//               current pen.
////////////////////////////////////////////////////////////////////
67
void PNMPainter::draw_line(float xa, float ya, float xb, float yb);

644 14 draw_rectangle 0 4 670 26 PNMPainter::draw_rectangle 0 1 352 488
////////////////////////////////////////////////////////////////////
//     Function: PNMPainter::draw_rectangle
//       Access: Published
//  Description: Draws a filled rectangule on the PNMImage, using the
//               current pen for the outline, and the current fill
//               brush for the interior.
//
//               The two coordinates specify any two diagonally
//               opposite corners.
////////////////////////////////////////////////////////////////////
72
void PNMPainter::draw_rectangle(float xa, float ya, float xb, float yb);

352
1 0 0 7 2 671 369 0 0 0 
2 0 0 7 2 671 369 0 0 1 4 fill 1 646  
3 0 0 7 2 671 369 0 0 3 1 r 1 646  1 g 1 646  1 b 1 646  
4 0 0 4 3 673 0 0 0 3 4 this 3 671  1 i 1 672  10 assign_val 1 646  
5 0 0 6 3 646 0 0 0 2 4 this 3 674  1 i 1 672  
6 0 0 7 4 671 369 0 0 2 4 this 3 674  5 other 1 674  
7 0 0 7 5 671 369 0 0 2 4 this 3 674  5 other 1 674  
8 0 0 7 6 671 369 0 0 2 4 this 3 674  4 mult 1 676  
9 0 0 6 7 671 0 0 0 2 4 this 3 671  5 other 1 674  
10 0 0 6 8 671 0 0 0 2 4 this 3 671  5 other 1 674  
11 0 0 6 9 671 0 0 0 2 4 this 3 671  4 mult 1 676  
12 0 0 6 10 672 0 0 0 0 
13 0 0 4 11 673 0 0 0 2 4 this 3 671  3 out 1 678  
14 0 0 4 15 673 0 0 0 2 4 this 3 671  5 value 1 646  
15 0 0 6 14 646 0 0 0 1 4 this 3 674  
16 0 0 4 18 673 0 0 0 2 4 this 3 671  5 value 1 646  
17 0 0 6 17 646 0 0 0 1 4 this 3 674  
18 0 0 4 21 673 0 0 0 2 4 this 3 671  5 value 1 646  
19 0 0 6 20 646 0 0 0 1 4 this 3 674  
20 0 0 6 27 682 0 0 0 1 4 this 3 680  
21 0 0 6 28 672 0 0 360 ////////////////////////////////////////////////////////////////////
//     Function: PNMFileType::get_num_extensions
//       Access: Published, Virtual
//  Description: Returns the number of different possible filename
//               extensions associated with this particular file type.
//////////////////////////////////////////////////////////////////// 1 4 this 3 680  
22 0 0 6 29 682 0 0 378 ////////////////////////////////////////////////////////////////////
//     Function: PNMFileType::get_extension
//       Access: Published, Virtual
//  Description: Returns the nth possible filename extension
//               associated with this particular file type, without a
//               leading dot.
//////////////////////////////////////////////////////////////////// 2 4 this 3 680  1 n 1 672  
23 0 0 6 30 682 0 0 424 ////////////////////////////////////////////////////////////////////
//     Function: PNMFileType::get_suggested_extension
//       Access: Published, Virtual
//  Description: Returns a suitable filename extension (without a
//               leading dot) to suggest for files of this type, or
//               empty string if no suggestions are available.
//////////////////////////////////////////////////////////////////// 1 4 this 3 680  
24 0 0 7 31 684 0 0 0 0 
25 0 0 6 34 672 0 0 279 ////////////////////////////////////////////////////////////////////
//     Function: PNMFileTypeRegistry::get_num_types
//       Access: Published
//  Description: Returns the total number of types registered.
//////////////////////////////////////////////////////////////////// 1 4 this 3 685  
26 0 0 6 35 687 0 0 261 ////////////////////////////////////////////////////////////////////
//     Function: PNMFileTypeRegistry::get_type
//       Access: Published
//  Description: Returns the nth type registered.
//////////////////////////////////////////////////////////////////// 2 4 this 3 685  1 n 1 672  
27 0 0 6 36 687 0 0 481 ////////////////////////////////////////////////////////////////////
//     Function: PNMFileTypeRegistry::get_type_from_extension
//       Access: Published
//  Description: Tries to determine what the PNMFileType is likely to
//               be for a particular image file based on its
//               extension.  Returns a suitable PNMFileType pointer,
//               or NULL if no type can be determined.
//////////////////////////////////////////////////////////////////// 2 4 this 3 685  8 filename 1 682  
28 0 0 6 37 687 0 0 544 ////////////////////////////////////////////////////////////////////
//     Function: PNMFileTypeRegistry::get_type_from_magic_number
//       Access: Published
//  Description: Tries to determine what the PNMFileType is likely to
//               be for a particular image file based on its
//               magic number, the first two bytes read from the
//               file.  Returns a suitable PNMFileType pointer, or
//               NULL if no type can be determined.
//////////////////////////////////////////////////////////////////// 2 4 this 3 685  12 magic_number 1 682  
29 0 0 6 38 687 0 0 444 ////////////////////////////////////////////////////////////////////
//     Function: PNMFileTypeRegistry::get_type_by_handle
//       Access: Published
//  Description: Returns the PNMFileType instance stored in the
//               registry for the given TypeHandle, e.g. as retrieved
//               by a previous call to get_type() on the type
//               instance.
//////////////////////////////////////////////////////////////////// 2 4 this 3 685  6 handle 1 684  
30 0 0 4 39 673 0 0 332 ////////////////////////////////////////////////////////////////////
//     Function: PNMFileTypeRegistry::write
//       Access: Published
//  Description: Writes a list of supported image file types to the
//               indicated output stream, one per line.
//////////////////////////////////////////////////////////////////// 3 4 this 3 685  3 out 1 678  12 indent_level 1 672  
31 0 0 6 40 688 0 0 319 ////////////////////////////////////////////////////////////////////
//     Function: PNMFileTypeRegistry::get_global_ptr
//       Access: Published, Static
//  Description: Returns a pointer to the global PNMFileTypeRegistry
//               object.
//////////////////////////////////////////////////////////////////// 0 
32 0 0 7 42 689 385 0 226 ////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
33 0 0 7 42 689 385 0 231 ////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::Copy Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 690  
34 0 0 6 43 689 0 0 0 2 4 this 3 689  4 copy 1 690  
35 0 0 6 46 653 0 0 397 ////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::get_color_type
//       Access: Published
//  Description: Returns the image type of the image, as an enumerated
//               value.  This is really just the number of channels
//               cast to the enumerated type.
//////////////////////////////////////////////////////////////////// 1 4 this 3 690  
36 0 0 6 47 672 0 0 276 ////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::get_num_channels
//       Access: Published
//  Description: Returns the number of channels in the image.
//////////////////////////////////////////////////////////////////// 1 4 this 3 690  
37 0 0 6 48 692 0 0 551 ////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::is_grayscale
//       Access: Published
//  Description: Returns false if the image is a full-color image, and
//               has red, green, and blue components; true if it is a
//               grayscale image and has only a gray component.  (The
//               gray color is actually stored in the blue channel,
//               and the red and green channels are ignored.)
//////////////////////////////////////////////////////////////////// 1 4 this 3 690  
38 0 0 6 48 692 0 0 395 ////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::is_grayscale
//       Access: Published, Static
//  Description: This static variant of is_grayscale() returns true if
//               the indicated image type represents a grayscale
//               image, false otherwise.
//////////////////////////////////////////////////////////////////// 1 10 color_type 1 653  
39 0 0 6 49 692 0 0 464 ////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::has_alpha
//       Access: Published
//  Description: Returns true if the image includes an alpha channel,
//               false otherwise.  Unlike is_grayscale(), if this
//               returns false it is an error to call any of the
//               functions accessing the alpha channel.
//////////////////////////////////////////////////////////////////// 1 4 this 3 690  
40 0 0 6 49 692 0 0 386 ////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::has_alpha
//       Access: Published, Static
//  Description: This static variant of has_alpha() returns true if
//               the indicated image type includes an alpha channel,
//               false otherwise.
//////////////////////////////////////////////////////////////////// 1 10 color_type 1 653  
41 0 0 6 50 693 0 0 443 ////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::get_maxval
//       Access: Published
//  Description: Returns the maximum channel value allowable for any
//               pixel in this image; for instance, 255 for a typical
//               8-bit-per-channel image.  A pixel with this value is
//               full on.
//////////////////////////////////////////////////////////////////// 1 4 this 3 690  
42 0 0 6 51 694 0 0 331 ////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::get_color_space
//       Access: Published
//  Description: Returns the color space that the image is encoded
//               in, or CS_unspecified if unknown.
//////////////////////////////////////////////////////////////////// 1 4 this 3 690  
43 0 0 6 52 672 0 0 366 ////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::get_x_size
//       Access: Published
//  Description: Returns the number of pixels in the X direction.
//               This is one more than the largest allowable X
//               coordinate.
//////////////////////////////////////////////////////////////////// 1 4 this 3 690  
44 0 0 6 53 672 0 0 366 ////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::get_y_size
//       Access: Published
//  Description: Returns the number of pixels in the Y direction.
//               This is one more than the largest allowable Y
//               coordinate.
//////////////////////////////////////////////////////////////////// 1 4 this 3 690  
45 0 0 6 54 682 0 0 263 ////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::get_comment
//       Access: Published
//  Description: Gets the user comment from the file.
//////////////////////////////////////////////////////////////////// 1 4 this 3 690  
46 0 0 4 55 673 0 0 278 ////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::set_comment
//       Access: Published
//  Description: Writes a user comment string to the image (header).
//////////////////////////////////////////////////////////////////// 2 4 this 3 689  7 comment 1 682  
47 0 0 6 56 692 0 0 315 ////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::has_type
//       Access: Published
//  Description: Returns true if the PNMImageHeader knows what type it
//               is, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 690  
48 0 0 6 57 687 0 0 373 ////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::get_type
//       Access: Published
//  Description: If the file type is known (e.g. has_type() returns
//               true), returns its PNMFileType pointer; otherwise,
//               returns NULL.
//////////////////////////////////////////////////////////////////// 1 4 this 3 690  
49 0 0 4 58 673 0 0 583 ////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::set_type
//       Access: Published
//  Description: Sets the file type of this PNMImage.  This will be
//               the default type used when an image is read, if the
//               type cannot be determined by magic number or inferred
//               by extension, or the type used when the image is
//               written, if the type cannot be inferred from the
//               filename extension.
//////////////////////////////////////////////////////////////////// 2 4 this 3 689  4 type 1 687  
50 0 0 6 59 692 0 0 498 ////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::read_header
//       Access: Published
//  Description: Opens up the image file and tries to read its header
//               information to determine its size, number of
//               channels, etc.  If successful, updates the header
//               information and returns true; otherwise, returns
//               false.
//////////////////////////////////////////////////////////////////// 4 4 this 3 689  8 filename 1 695  4 type 1 687  19 report_unknown_type 1 692  
51 0 0 6 59 692 0 0 714 ////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::read_header
//       Access: Published
//  Description: Reads the image header information only from the
//               indicated stream.
//
//               The filename is advisory only, and may be used
//               to suggest a type if it has a known extension.
//
//               If type is non-NULL, it is a suggestion for the type
//               of file it is (and a non-NULL type will override any
//               magic number test or filename extension lookup).
//
//               Returns true if successful, false on error.
//////////////////////////////////////////////////////////////////// 5 4 this 3 689  4 data 1 698  8 filename 1 682  4 type 1 687  19 report_unknown_type 1 692  
52 0 0 6 60 700 0 0 689 ////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::make_reader
//       Access: Published
//  Description: Returns a newly-allocated PNMReader of the suitable
//               type for reading from the indicated image filename,
//               or NULL if the filename cannot be read for some
//               reason.  The filename "-" always stands for standard
//               input.  If type is specified, it is a suggestion for
//               the file type to use.
//
//               The PNMReader should be deleted when it is no longer
//               needed.
//////////////////////////////////////////////////////////////////// 4 4 this 3 690  8 filename 1 695  4 type 1 687  19 report_unknown_type 1 692  
53 0 0 6 60 700 0 0 1414 ////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::make_reader
//       Access: Published
//  Description: Returns a newly-allocated PNMReader of the suitable
//               type for reading from the already-opened image file,
//               or NULL if the file cannot be read for some reason.
//
//               owns_file should be set true if the PNMReader is to
//               be considered the owner of the stream pointer (in
//               which case the stream will be deleted on completion,
//               whether successful or not), or false if it should not
//               delete it.
//
//               The filename parameter is optional here, since the
//               file has already been opened; it is only used to
//               examine the extension and attempt to guess the file
//               type.
//
//               If magic_number is nonempty, it is assumed to
//               represent the first few bytes that have already been
//               read from the file.  Some file types may have
//               difficulty if this is more than two bytes.
//
//               If type is non-NULL, it is a suggestion for the file
//               type to use.
//
//               The PNMReader should be deleted when it is no longer
//               needed.
//////////////////////////////////////////////////////////////////// 7 4 this 3 690  4 file 1 698  9 owns_file 1 692  8 filename 1 695  12 magic_number 1 682  4 type 1 687  19 report_unknown_type 1 692  
54 0 0 6 61 702 0 0 694 ////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::make_writer
//       Access: Published
//  Description: Returns a newly-allocated PNMWriter of the suitable
//               type for writing an image to the indicated filename,
//               or NULL if the filename cannot be written for some
//               reason.  The filename "-" always stands for standard
//               output.  If type is specified, it is a suggestion for
//               the file type to use.
//
//               The PNMWriter should be deleted when it is no longer
//               needed.
//////////////////////////////////////////////////////////////////// 3 4 this 3 690  8 filename 1 695  4 type 1 687  
55 0 0 6 61 702 0 0 1165 ////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::make_writer
//       Access: Published
//  Description: Returns a newly-allocated PNMWriter of the suitable
//               type for writing to the already-opened image file, or
//               NULL if the file cannot be written for some reason.
//
//               owns_file should be set true if the PNMWriter is to
//               be considered the owner of the stream pointer (in
//               which case the stream will be deleted on completion,
//               whether successful or not), or false if it should not
//               delete it.
//
//               The filename parameter is optional here, since the
//               file has already been opened; it is only used to
//               examine the extension and attempt to guess the
//               intended file type.
//
//               If type is non-NULL, it is a suggestion for the file
//               type to use.
//
//               The PNMWriter should be deleted when it is no longer
//               needed.
//////////////////////////////////////////////////////////////////// 5 4 this 3 690  4 file 1 678  9 owns_file 1 692  8 filename 1 695  4 type 1 687  
56 0 0 6 62 692 0 0 602 ////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::read_magic_number
//       Access: Published, Static
//  Description: Ensures that the first n bytes of the file are read
//               into magic_number.  If magic_number is initially
//               nonempty, assumes these represent the first few bytes
//               already extracted.  Returns true if successful, false
//               if an end of file or error occurred before num_bytes
//               could be read.
//////////////////////////////////////////////////////////////////// 3 4 file 1 698  12 magic_number 1 704  9 num_bytes 1 672  
57 0 0 4 63 673 0 0 221 ////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::output
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 690  3 out 1 678  
58 0 0 7 65 709 421 0 242 ////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::PixelSpec::Copy Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 707  
59 0 0 7 65 709 421 0 237 ////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::PixelSpec::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 3 rgb 1 710  
60 0 0 7 65 709 421 0 237 ////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::PixelSpec::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 3 rgb 1 710  5 alpha 1 693  
61 0 0 7 65 709 421 0 237 ////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::PixelSpec::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 10 gray_value 1 693  
62 0 0 7 65 709 421 0 237 ////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::PixelSpec::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 10 gray_value 1 693  5 alpha 1 693  
63 0 0 7 65 709 421 0 237 ////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::PixelSpec::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 3 red 1 693  5 green 1 693  4 blue 1 693  
64 0 0 7 65 709 421 0 237 ////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::PixelSpec::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 4 3 red 1 693  5 green 1 693  4 blue 1 693  5 alpha 1 693  
65 0 0 6 66 709 0 0 0 2 4 this 3 709  4 copy 1 707  
66 0 0 6 67 692 0 0 0 2 4 this 3 707  5 other 1 707  
67 0 0 6 68 692 0 0 0 2 4 this 3 707  5 other 1 707  
68 0 0 6 69 692 0 0 0 2 4 this 3 707  5 other 1 707  
69 0 0 6 70 672 0 0 236 ////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::PixelSpec::compare_to
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 707  5 other 1 707  
70 0 0 6 71 693 0 0 233 ////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::PixelSpec::get_red
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 707  
71 0 0 6 72 693 0 0 235 ////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::PixelSpec::get_green
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 707  
72 0 0 6 73 693 0 0 234 ////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::PixelSpec::get_blue
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 707  
73 0 0 6 74 693 0 0 235 ////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::PixelSpec::get_alpha
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 707  
74 0 0 4 75 673 0 0 233 ////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::PixelSpec::set_red
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 709  3 red 1 693  
75 0 0 4 76 673 0 0 235 ////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::PixelSpec::set_green
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 709  5 green 1 693  
76 0 0 4 77 673 0 0 234 ////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::PixelSpec::set_blue
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 709  4 blue 1 693  
77 0 0 4 78 673 0 0 235 ////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::PixelSpec::set_alpha
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 709  5 alpha 1 693  
78 0 0 6 79 693 0 0 0 2 4 this 3 707  1 n 1 672  
79 0 0 6 80 672 0 0 394 ////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::PixelSpec::size
//       Access: Published, Static
//  Description: Specifies the number of components in the PixelSpec;
//               this is always 4, regardless of the type of image it
//               was taken from.
//////////////////////////////////////////////////////////////////// 0 
80 0 0 4 81 673 0 0 230 ////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::PixelSpec::output
//       Access: Public
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 707  3 out 1 678  
81 0 0 7 92 712 428 0 237 ////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::Histogram::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
82 0 0 6 93 672 0 0 317 ////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::Histogram::get_num_pixels
//       Access: Published
//  Description: Returns the number of unique pixel colors in the
//               histogram.
//////////////////////////////////////////////////////////////////// 1 4 this 3 713  
83 0 0 6 94 707 0 0 385 ////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::Histogram::get_pixel
//       Access: Published
//  Description: Returns the nth unique pixel color in the histogram.
//               These are ordered by default from most common to
//               least common.
//////////////////////////////////////////////////////////////////// 2 4 this 3 713  1 n 1 672  
84 0 0 6 95 672 0 0 329 ////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::Histogram::get_count
//       Access: Published
//  Description: Returns the number of occurrences in the image of the
//               indicated pixel color.
//////////////////////////////////////////////////////////////////// 2 4 this 3 713  5 pixel 1 707  
85 0 0 6 95 672 0 0 347 ////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::Histogram::get_count
//       Access: Published
//  Description: Returns the number of occurrences in the image of the
//               nth unique pixel color in the histogram.
//////////////////////////////////////////////////////////////////// 2 4 this 3 713  1 n 1 672  
86 0 0 4 96 673 0 0 229 ////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::Histogram::write
//       Access: Public
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 713  3 out 1 678  
87 0 0 7 99 715 509 0 219 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
88 0 0 7 99 715 509 0 224 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::Copy Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 716  
89 0 0 6 100 715 0 0 0 2 4 this 3 715  4 copy 1 716  
90 0 0 4 101 673 0 0 246 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::clear
//       Access: Published
//  Description: Eliminates all data in the file.
//////////////////////////////////////////////////////////////////// 1 4 this 3 715  
91 0 0 4 101 673 0 0 455 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::clear
//       Access: Published
//  Description: Resets to an empty table with a specific size.  The
//               case of num_channels == 0 is allowed only in the case
//               that x_size and y_size are also == 0; and this makes
//               an empty (and invalid) PfmFile.
//////////////////////////////////////////////////////////////////// 4 4 this 3 715  6 x_size 1 672  6 y_size 1 672  12 num_channels 1 672  
92 0 0 6 102 692 0 0 501 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::read
//       Access: Published
//  Description: Reads the PFM data from the indicated file, returning
//               true on success, false on failure.
//
//               This can also handle reading a standard image file
//               supported by PNMImage; it will be quietly converted
//               to a floating-point type.
//////////////////////////////////////////////////////////////////// 2 4 this 3 715  8 fullpath 1 695  
93 0 0 6 102 692 0 0 375 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::read
//       Access: Published
//  Description: Reads the PFM data using the indicated PNMReader.
//
//               The PNMReader is always deleted upon completion,
//               whether successful or not.
//////////////////////////////////////////////////////////////////// 2 4 this 3 715  6 reader 1 700  
94 0 0 6 102 692 0 0 503 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::read
//       Access: Published
//  Description: Reads the PFM data from the indicated stream,
//               returning true on success, false on failure.
//
//               This can also handle reading a standard image file
//               supported by PNMImage; it will be quietly converted
//               to a floating-point type.
//////////////////////////////////////////////////////////////////// 3 4 this 3 715  2 in 1 698  8 fullpath 1 695  
95 0 0 6 103 692 0 0 589 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::write
//       Access: Published
//  Description: Writes the PFM data to the indicated file, returning
//               true on success, false on failure.
//
//               If the type implied by the filename extension
//               supports floating-point, the data will be written
//               directly; otherwise, the floating-point data will be
//               quietly converted to the appropriate integer type.
//////////////////////////////////////////////////////////////////// 2 4 this 3 715  8 fullpath 1 695  
96 0 0 6 103 692 0 0 377 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::write
//       Access: Published
//  Description: Writes the PFM data using the indicated PNMWriter.
//
//               The PNMWriter is always deleted upon completion,
//               whether successful or not.
//////////////////////////////////////////////////////////////////// 2 4 this 3 715  6 writer 1 702  
97 0 0 6 103 692 0 0 320 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::write
//       Access: Published
//  Description: Writes the PFM data to the indicated stream,
//               returning true on success, false on failure.
//////////////////////////////////////////////////////////////////// 3 4 this 3 715  3 out 1 678  8 fullpath 1 695  
98 0 0 6 104 692 0 0 326 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::load
//       Access: Published
//  Description: Fills the PfmFile with the data from the indicated
//               PNMImage, converted to floating-point values.
//////////////////////////////////////////////////////////////////// 2 4 this 3 715  8 pnmimage 1 718  
99 0 0 6 105 692 0 0 299 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::store
//       Access: Published
//  Description: Copies the data to the indicated PNMImage, converting
//               to RGB values.
//////////////////////////////////////////////////////////////////// 2 4 this 3 716  8 pnmimage 1 720  
100 0 0 6 106 692 0 0 433 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::store_mask
//       Access: Published
//  Description: Stores 1 or 0 values into the indicated PNMImage,
//               according to has_point() for each pixel.  Each valid
//               point gets a 1 value; each nonexistent point gets a 0
//               value.
//////////////////////////////////////////////////////////////////// 2 4 this 3 716  8 pnmimage 1 720  
101 0 0 6 107 692 0 0 216 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::is_valid
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 716  
102 0 0 6 108 721 0 0 305 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::get_scale
//       Access: Published
//  Description: The "scale" is reported in the pfm header and is
//               probably meaningless.
//////////////////////////////////////////////////////////////////// 1 4 this 3 716  
103 0 0 4 109 673 0 0 305 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::set_scale
//       Access: Published
//  Description: The "scale" is reported in the pfm header and is
//               probably meaningless.
//////////////////////////////////////////////////////////////////// 2 4 this 3 715  5 scale 1 721  
104 0 0 6 110 692 0 0 457 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::has_point
//       Access: Published
//  Description: Returns true if there is a valid point at x, y.  This
//               always returns true unless a "no data" value has been
//               set, in which case it returns false if the point at
//               x, y is the "no data" value.
//////////////////////////////////////////////////////////////////// 3 4 this 3 716  1 x 1 672  1 y 1 672  
105 0 0 6 111 721 0 0 303 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::get_channel
//       Access: Published
//  Description: Returns the cth channel of the point value at the
//               indicated point.
//////////////////////////////////////////////////////////////////// 4 4 this 3 716  1 x 1 672  1 y 1 672  1 c 1 672  
106 0 0 4 112 673 0 0 304 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::set_channel
//       Access: Published
//  Description: Replaces the cth channel of the point value at the
//               indicated point.
//////////////////////////////////////////////////////////////////// 5 4 this 3 715  1 x 1 672  1 y 1 672  1 c 1 672  5 value 1 721  
107 0 0 6 113 721 0 0 295 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::get_point1
//       Access: Published
//  Description: Returns the 1-component point value at the indicated
//               point.
//////////////////////////////////////////////////////////////////// 3 4 this 3 716  1 x 1 672  1 y 1 672  
108 0 0 4 114 673 0 0 296 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::set_point1
//       Access: Published
//  Description: Replaces the 1-component point value at the indicated
//               point.
//////////////////////////////////////////////////////////////////// 4 4 this 3 715  1 x 1 672  1 y 1 672  5 point 1 721  
109 0 0 6 115 723 0 0 376 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::get_point2
//       Access: Published
//  Description: Returns the 2-component point value at the indicated
//               point.  In a 1-channel image, the channel value is in
//               the x component.
//////////////////////////////////////////////////////////////////// 3 4 this 3 716  1 x 1 672  1 y 1 672  
110 0 0 4 116 673 0 0 377 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::set_point2
//       Access: Published
//  Description: Replaces the 2-component point value at the indicated
//               point.  In a 1-channel image, the channel value is in
//               the x component.
//////////////////////////////////////////////////////////////////// 4 4 this 3 715  1 x 1 672  1 y 1 672  5 point 1 726  
111 0 0 4 116 673 0 0 377 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::set_point2
//       Access: Published
//  Description: Replaces the 2-component point value at the indicated
//               point.  In a 1-channel image, the channel value is in
//               the x component.
//////////////////////////////////////////////////////////////////// 4 4 this 3 715  1 x 1 672  1 y 1 672  5 point 1 729  
112 0 0 6 117 732 0 0 307 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::modify_point2
//       Access: Published
//  Description: Returns a modifiable 2-component point value at the
//               indicated point.
//////////////////////////////////////////////////////////////////// 3 4 this 3 715  1 x 1 672  1 y 1 672  
113 0 0 6 118 733 0 0 375 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::get_point
//       Access: Published
//  Description: Returns the 3-component point value at the indicated
//               point.  In a 1-channel image, the channel value is in
//               the x component.
//////////////////////////////////////////////////////////////////// 3 4 this 3 716  1 x 1 672  1 y 1 672  
114 0 0 4 119 673 0 0 376 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::set_point
//       Access: Published
//  Description: Replaces the 3-component point value at the indicated
//               point.  In a 1-channel image, the channel value is in
//               the x component.
//////////////////////////////////////////////////////////////////// 4 4 this 3 715  1 x 1 672  1 y 1 672  5 point 1 736  
115 0 0 4 119 673 0 0 376 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::set_point
//       Access: Published
//  Description: Replaces the 3-component point value at the indicated
//               point.  In a 1-channel image, the channel value is in
//               the x component.
//////////////////////////////////////////////////////////////////// 4 4 this 3 715  1 x 1 672  1 y 1 672  5 point 1 739  
116 0 0 6 120 742 0 0 306 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::modify_point
//       Access: Published
//  Description: Returns a modifiable 3-component point value at the
//               indicated point.
//////////////////////////////////////////////////////////////////// 3 4 this 3 715  1 x 1 672  1 y 1 672  
117 0 0 6 121 733 0 0 376 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::get_point3
//       Access: Published
//  Description: Returns the 3-component point value at the indicated
//               point.  In a 1-channel image, the channel value is in
//               the x component.
//////////////////////////////////////////////////////////////////// 3 4 this 3 716  1 x 1 672  1 y 1 672  
118 0 0 4 122 673 0 0 377 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::set_point3
//       Access: Published
//  Description: Replaces the 3-component point value at the indicated
//               point.  In a 1-channel image, the channel value is in
//               the x component.
//////////////////////////////////////////////////////////////////// 4 4 this 3 715  1 x 1 672  1 y 1 672  5 point 1 736  
119 0 0 4 122 673 0 0 377 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::set_point3
//       Access: Published
//  Description: Replaces the 3-component point value at the indicated
//               point.  In a 1-channel image, the channel value is in
//               the x component.
//////////////////////////////////////////////////////////////////// 4 4 this 3 715  1 x 1 672  1 y 1 672  5 point 1 739  
120 0 0 6 123 742 0 0 307 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::modify_point3
//       Access: Published
//  Description: Returns a modifiable 3-component point value at the
//               indicated point.
//////////////////////////////////////////////////////////////////// 3 4 this 3 715  1 x 1 672  1 y 1 672  
121 0 0 6 124 743 0 0 376 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::get_point4
//       Access: Published
//  Description: Returns the 4-component point value at the indicated
//               point.  In a 1-channel image, the channel value is in
//               the x component.
//////////////////////////////////////////////////////////////////// 3 4 this 3 716  1 x 1 672  1 y 1 672  
122 0 0 4 125 673 0 0 377 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::set_point4
//       Access: Published
//  Description: Replaces the 4-component point value at the indicated
//               point.  In a 1-channel image, the channel value is in
//               the x component.
//////////////////////////////////////////////////////////////////// 4 4 this 3 715  1 x 1 672  1 y 1 672  5 point 1 746  
123 0 0 4 125 673 0 0 377 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::set_point4
//       Access: Published
//  Description: Replaces the 4-component point value at the indicated
//               point.  In a 1-channel image, the channel value is in
//               the x component.
//////////////////////////////////////////////////////////////////// 4 4 this 3 715  1 x 1 672  1 y 1 672  5 point 1 749  
124 0 0 6 126 752 0 0 307 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::modify_point4
//       Access: Published
//  Description: Returns a modifiable 4-component point value at the
//               indicated point.
//////////////////////////////////////////////////////////////////// 3 4 this 3 715  1 x 1 672  1 y 1 672  
125 0 0 4 127 673 0 0 256 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::fill
//       Access: Published
//  Description: Fills the table with all of the same value.
//////////////////////////////////////////////////////////////////// 2 4 this 3 715  5 value 1 723  
126 0 0 4 127 673 0 0 256 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::fill
//       Access: Published
//  Description: Fills the table with all of the same value.
//////////////////////////////////////////////////////////////////// 2 4 this 3 715  5 value 1 733  
127 0 0 4 127 673 0 0 256 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::fill
//       Access: Published
//  Description: Fills the table with all of the same value.
//////////////////////////////////////////////////////////////////// 2 4 this 3 715  5 value 1 743  
128 0 0 4 127 673 0 0 256 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::fill
//       Access: Published
//  Description: Fills the table with all of the same value.
//////////////////////////////////////////////////////////////////// 2 4 this 3 715  5 value 1 721  
129 0 0 4 128 673 0 0 246 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::fill_nan
//       Access: Published
//  Description: Fills the table with all NaN.
//////////////////////////////////////////////////////////////////// 1 4 this 3 715  
130 0 0 4 129 673 0 0 319 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::fill_no_data_value
//       Access: Published
//  Description: Fills the table with the current no_data value, so
//               that the table is empty.
//////////////////////////////////////////////////////////////////// 1 4 this 3 715  
131 0 0 4 130 673 0 0 331 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::fill_channel
//       Access: Published
//  Description: Fills the indicated channel with all of the same
//               value, leaving the other channels unchanged.
//////////////////////////////////////////////////////////////////// 3 4 this 3 715  7 channel 1 672  5 value 1 721  
132 0 0 4 131 673 0 0 317 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::fill_channel_nan
//       Access: Published
//  Description: Fills the indicated channel with NaN, leaving the
//               other channels unchanged.
//////////////////////////////////////////////////////////////////// 2 4 this 3 715  7 channel 1 672  
133 0 0 4 132 673 0 0 400 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::fill_channel_masked
//       Access: Published
//  Description: Fills the indicated channel with all of the same
//               value, but only where the table already has a data
//               point.  Leaves empty points unchanged.
//////////////////////////////////////////////////////////////////// 3 4 this 3 715  7 channel 1 672  5 value 1 721  
134 0 0 4 133 673 0 0 386 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::fill_channel_masked_nan
//       Access: Published
//  Description: Fills the indicated channel with NaN, but only where
//               the table already has a data point.  Leaves empty
//               points unchanged.
//////////////////////////////////////////////////////////////////// 2 4 this 3 715  7 channel 1 672  
135 0 0 6 134 692 0 0 587 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::calc_average_point
//       Access: Published
//  Description: Computes the unweighted average point of all points
//               within the box centered at (x, y) with the indicated
//               Manhattan-distance radius.  Missing points are
//               assigned the value of their nearest neighbor.
//               Returns true if successful, or false if the point
//               value cannot be determined.
//////////////////////////////////////////////////////////////////// 5 4 this 3 716  6 result 1 742  1 x 1 721  1 y 1 721  6 radius 1 721  
136 0 0 6 135 692 0 0 451 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::calc_bilinear_point
//       Access: Published
//  Description: Computes the weighted average of the four nearest
//               points to the floating-point index (x, y).  Returns
//               true if the point has any contributors, false if the
//               point is unknown.
//////////////////////////////////////////////////////////////////// 4 4 this 3 716  6 result 1 742  1 x 1 721  1 y 1 721  
137 0 0 6 136 692 0 0 515 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::calc_min_max
//       Access: Published
//  Description: Calculates the minimum and maximum x, y, and z depth
//               component values, representing the bounding box of
//               depth values, and places them in the indicated
//               vectors.  Returns true if successful, false if the
//               mesh contains no points.
//////////////////////////////////////////////////////////////////// 3 4 this 3 716  10 min_points 1 753  10 max_points 1 753  
138 0 0 6 137 692 0 0 520 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::calc_autocrop
//       Access: Published
//  Description: Computes the minimum range of x and y across the PFM
//               file that include all points.  If there are no points
//               with no_data_value in the grid--that is, all points
//               are included--then this will return (0, get_x_size(),
//               0, get_y_size()).
//////////////////////////////////////////////////////////////////// 2 4 this 3 716  5 range 1 754  
139 0 0 6 137 692 0 0 520 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::calc_autocrop
//       Access: Published
//  Description: Computes the minimum range of x and y across the PFM
//               file that include all points.  If there are no points
//               with no_data_value in the grid--that is, all points
//               are included--then this will return (0, get_x_size(),
//               0, get_y_size()).
//////////////////////////////////////////////////////////////////// 2 4 this 3 716  5 range 1 755  
140 0 0 6 138 692 0 0 401 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::is_row_empty
//       Access: Published
//  Description: Returns true if all of the points on row y, in the range
//               [x_begin, x_end), are the no_data value, or false if
//               any one of these points has a value.
//////////////////////////////////////////////////////////////////// 4 4 this 3 716  1 y 1 672  7 x_begin 1 672  5 x_end 1 672  
141 0 0 6 139 692 0 0 399 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::is_column_empty
//       Access: Published
//  Description: Returns true if all of the points on column x, from
//               [y_begin, y_end), are the no_data value, or false if
//               any one of these points has a value.
//////////////////////////////////////////////////////////////////// 4 4 this 3 716  1 x 1 672  7 y_begin 1 672  5 y_end 1 672  
142 0 0 4 140 673 0 0 468 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::set_zero_special
//       Access: Published
//  Description: Sets the zero_special flag.  When this flag is true,
//               values of (0, 0, 0) in the pfm file are treated as a
//               special case, and are not processed.
//
//               This is a special case of set_no_data_value().
//////////////////////////////////////////////////////////////////// 2 4 this 3 715  12 zero_special 1 692  
143 0 0 4 141 673 0 0 534 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::set_no_data_chan4
//       Access: Published
//  Description: Sets the no_data_chan4 flag.  When this flag is true,
//               and the pfm file has 4 channels, then a negative
//               value in the fourth channel indicates no data.  When
//               it is false, all points are valid.
//
//               This is a special case of set_no_data_value().
//////////////////////////////////////////////////////////////////// 2 4 this 3 715  5 chan4 1 692  
144 0 0 4 142 673 0 0 562 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::set_no_data_nan
//       Access: Published
//  Description: Sets the no_data_nan flag.  When num_channels is
//               nonzero, then a NaN value in any of the first
//               num_channels channels indicates no data for that
//               point.  If num_channels is zero, then all points are
//               valid.
//
//               This is a special case of set_no_data_value().
//////////////////////////////////////////////////////////////////// 2 4 this 3 715  12 num_channels 1 672  
145 0 0 4 143 673 0 0 319 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::set_no_data_value
//       Access: Published
//  Description: Sets the special value that means "no data" when it
//               appears in the pfm file.
//////////////////////////////////////////////////////////////////// 2 4 this 3 715  13 no_data_value 1 756  
146 0 0 4 143 673 0 0 319 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::set_no_data_value
//       Access: Published
//  Description: Sets the special value that means "no data" when it
//               appears in the pfm file.
//////////////////////////////////////////////////////////////////// 2 4 this 3 715  13 no_data_value 1 743  
147 0 0 4 144 673 0 0 376 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::set_no_data_threshold
//       Access: Published
//  Description: Sets the special threshold value.  Points that are
//               below this value in all components are considered "no
//               value".
//////////////////////////////////////////////////////////////////// 2 4 this 3 715  13 no_data_value 1 756  
148 0 0 4 144 673 0 0 376 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::set_no_data_threshold
//       Access: Published
//  Description: Sets the special threshold value.  Points that are
//               below this value in all components are considered "no
//               value".
//////////////////////////////////////////////////////////////////// 2 4 this 3 715  13 no_data_value 1 743  
149 0 0 4 145 673 0 0 382 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::set_no_data_value
//       Access: Published
//  Description: Removes the special value that means "no data" when it
//               appears in the pfm file.  All points will thus be
//               considered valid.
//////////////////////////////////////////////////////////////////// 1 4 this 3 715  
150 0 0 6 146 692 0 0 321 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::has_no_data_value
//       Access: Published
//  Description: Returns whether a "no data" value has been
//               established by set_no_data_value().
//////////////////////////////////////////////////////////////////// 1 4 this 3 716  
151 0 0 6 147 692 0 0 339 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::has_no_data_threshold
//       Access: Published
//  Description: Returns whether a "no data" threshold value has been
//               established by set_no_data_threshold().
//////////////////////////////////////////////////////////////////// 1 4 this 3 716  
152 0 0 6 148 743 0 0 324 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::get_no_data_value
//       Access: Published
//  Description: If has_no_data_value() returns true, this returns the
//               particular "no data" value.
//////////////////////////////////////////////////////////////////// 1 4 this 3 716  
153 0 0 4 149 673 0 0 422 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::resize
//       Access: Published
//  Description: Applies a simple filter to resample the pfm file
//               in-place to the indicated size.  Don't confuse this
//               with applying a scale to all of the points via
//               xform().
//////////////////////////////////////////////////////////////////// 3 4 this 3 715  10 new_x_size 1 672  10 new_y_size 1 672  
154 0 0 4 150 673 0 0 529 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::box_filter_from
//       Access: Public
//  Description: Makes a resized copy of the indicated image into this
//               one using the indicated filter.  The image to be
//               copied is squashed and stretched to match the
//               dimensions of the current image, applying the
//               appropriate filter to perform the stretching.
//////////////////////////////////////////////////////////////////// 3 4 this 3 715  6 radius 1 722  4 copy 1 716  
155 0 0 4 151 673 0 0 534 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::gaussian_filter_from
//       Access: Public
//  Description: Makes a resized copy of the indicated image into this
//               one using the indicated filter.  The image to be
//               copied is squashed and stretched to match the
//               dimensions of the current image, applying the
//               appropriate filter to perform the stretching.
//////////////////////////////////////////////////////////////////// 3 4 this 3 715  6 radius 1 722  4 copy 1 716  
156 0 0 4 152 673 0 0 528 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::quick_filter_from
//       Access: Public
//  Description: Resizes from the given image, with a fixed radius of
//               0.5. This is a very specialized and simple algorithm
//               that doesn't handle dropping below the Nyquist rate
//               very well, but is quite a bit faster than the more
//               general box_filter(), above.
//////////////////////////////////////////////////////////////////// 2 4 this 3 715  4 copy 1 716  
157 0 0 4 153 673 0 0 271 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::reverse_rows
//       Access: Published
//  Description: Performs an in-place reversal of the row (y) data.
//////////////////////////////////////////////////////////////////// 1 4 this 3 715  
158 0 0 4 154 673 0 0 661 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::flip
//       Access: Published
//  Description: Reverses, transposes, and/or rotates the table
//               in-place according to the specified parameters.  If
//               flip_x is true, the x axis is reversed; if flip_y is
//               true, the y axis is reversed.  Then, if transpose is
//               true, the x and y axes are exchanged.  These
//               parameters can be used to select any combination of
//               90-degree or 180-degree rotations and flips.
//////////////////////////////////////////////////////////////////// 4 4 this 3 715  6 flip_x 1 692  6 flip_y 1 692  9 transpose 1 692  
159 0 0 4 155 673 0 0 293 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::xform
//       Access: Published
//  Description: Applies the indicated transform matrix to all points
//               in-place.
//////////////////////////////////////////////////////////////////// 2 4 this 3 715  9 transform 1 759  
160 0 0 4 155 673 0 0 293 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::xform
//       Access: Published
//  Description: Applies the indicated transform matrix to all points
//               in-place.
//////////////////////////////////////////////////////////////////// 2 4 this 3 715  9 transform 1 762  
161 0 0 4 156 673 0 0 1063 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::forward_distort
//       Access: Published
//  Description: Applies the distortion indicated in the supplied dist
//               map to the current map.  The dist map is understood
//               to be a mapping of points in the range 0..1 in the
//               first two dimensions.
//
//               The operation can be expressed symbolically as:
//
//               this(u, v) = this(dist(u, v))
//
//               If scale_factor is not 1, it should be a value > 1,
//               and it specifies the factor to upscale the working
//               table while processing, to reduce artifacts from
//               integer truncation.
//
//               By convention, the y axis is inverted in the
//               distortion map relative to the coordinates here.  A y
//               value of 0 in the distortion map corresponds with a v
//               value of 1 in this file.
//////////////////////////////////////////////////////////////////// 3 4 this 3 715  4 dist 1 716  12 scale_factor 1 721  
162 0 0 4 157 673 0 0 1063 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::reverse_distort
//       Access: Published
//  Description: Applies the distortion indicated in the supplied dist
//               map to the current map.  The dist map is understood
//               to be a mapping of points in the range 0..1 in the
//               first two dimensions.
//
//               The operation can be expressed symbolically as:
//
//               this(u, v) = dist(this(u, v))
//
//               If scale_factor is not 1, it should be a value > 1,
//               and it specifies the factor to upscale the working
//               table while processing, to reduce artifacts from
//               integer truncation.
//
//               By convention, the y axis in inverted in the
//               distortion map relative to the coordinates here.  A y
//               value of 0 in the distortion map corresponds with a v
//               value of 1 in this file.
//////////////////////////////////////////////////////////////////// 3 4 this 3 715  4 dist 1 716  12 scale_factor 1 721  
163 0 0 4 158 673 0 0 447 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::merge
//       Access: Published
//  Description: Wherever there is missing data in this PfmFile (that
//               is, wherever has_point() returns false), copy data
//               from the other PfmFile, which must be exactly the
//               same dimensions as this one.
//////////////////////////////////////////////////////////////////// 2 4 this 3 715  5 other 1 716  
164 0 0 4 159 673 0 0 558 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::apply_mask
//       Access: Published
//  Description: Wherever there is missing data in the other PfmFile,
//               set this the corresponding point in this PfmFile to
//               missing as well, so that this PfmFile has only points
//               where both files have points.
//
//               The point is set to "missing" by setting it the
//               no_data_value.
//////////////////////////////////////////////////////////////////// 2 4 this 3 715  5 other 1 716  
165 0 0 4 160 673 0 0 400 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::copy_channel
//       Access: Published
//  Description: Copies just the specified channel values from the
//               indicated PfmFile (which could be same as this
//               PfmFile) into the specified channel of this one.
//////////////////////////////////////////////////////////////////// 4 4 this 3 715  10 to_channel 1 672  5 other 1 716  12 from_channel 1 672  
166 0 0 4 161 673 0 0 378 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::copy_channel_masked
//       Access: Published
//  Description: Copies just the specified channel values from the
//               indicated PfmFile, but only where the other file has
//               a data point.
//////////////////////////////////////////////////////////////////// 4 4 this 3 715  10 to_channel 1 672  5 other 1 716  12 from_channel 1 672  
167 0 0 4 162 673 0 0 387 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::apply_crop
//       Access: Published
//  Description: Reduces the PFM file to the cells in the rectangle
//               bounded by (x_begin, x_end, y_begin, y_end), where
//               the _end cells are not included.
//////////////////////////////////////////////////////////////////// 5 4 this 3 715  7 x_begin 1 672  5 x_end 1 672  7 y_begin 1 672  5 y_end 1 672  
168 0 0 4 163 673 0 0 406 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::clear_to_texcoords
//       Access: Published
//  Description: Replaces this PfmFile with a new PfmFile of size
//               x_size x y_size x 3, containing the x y 0 values in
//               the range 0 .. 1 according to the x y index.
//////////////////////////////////////////////////////////////////// 3 4 this 3 715  6 x_size 1 672  6 y_size 1 672  
169 0 0 6 164 672 0 0 528 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::pull_spot
//       Access: Published
//  Description: Applies delta * t to the point values within radius
//               (xr, yr) distance of (xc, yc).  The t value is scaled
//               from 1.0 at the center to 0.0 at radius (xr, yr), and
//               this scale follows the specified exponent.  Returns
//               the number of points affected.
//////////////////////////////////////////////////////////////////// 7 4 this 3 715  5 delta 1 743  2 xc 1 722  2 yc 1 722  2 xr 1 722  2 yr 1 722  8 exponent 1 722  
170 0 0 6 165 692 0 0 487 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::calc_tight_bounds
//       Access: Published
//  Description: Calculates the minimum and maximum vertices of all
//               points within the table.  Assumes the table contains
//               3-D points.
//
//               The return value is true if any points in the table,
//               or false if none are.
//////////////////////////////////////////////////////////////////// 3 4 this 3 716  9 min_point 1 742  9 max_point 1 742  
171 0 0 7 166 769 0 0 1039 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::compute_planar_bounds
//       Access: Published
//  Description: Computes the minmax bounding volume of the points in
//               3-D space, assuming the points represent a
//               mostly-planar surface.
//
//               This algorithm works by sampling the (square)
//               sample_radius pixels at the four point_dist corners
//               around the center (cx - pd, cx + pd) and so on, to
//               approximate the plane of the surface.  Then all of
//               the points are projected into that plane and the
//               bounding volume of the entire mesh within that plane
//               is determined.  If points_only is true, the bounding
//               volume of only those four points is determined.
//
//               center, point_dist and sample_radius are in UV space,
//               i.e. in the range 0..1.
//////////////////////////////////////////////////////////////////// 5 4 this 3 716  6 center 1 766  10 point_dist 1 721  13 sample_radius 1 721  11 points_only 1 692  
172 0 0 7 166 769 0 0 1039 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::compute_planar_bounds
//       Access: Published
//  Description: Computes the minmax bounding volume of the points in
//               3-D space, assuming the points represent a
//               mostly-planar surface.
//
//               This algorithm works by sampling the (square)
//               sample_radius pixels at the four point_dist corners
//               around the center (cx - pd, cx + pd) and so on, to
//               approximate the plane of the surface.  Then all of
//               the points are projected into that plane and the
//               bounding volume of the entire mesh within that plane
//               is determined.  If points_only is true, the bounding
//               volume of only those four points is determined.
//
//               center, point_dist and sample_radius are in UV space,
//               i.e. in the range 0..1.
//////////////////////////////////////////////////////////////////// 5 4 this 3 716  6 center 1 723  10 point_dist 1 721  13 sample_radius 1 721  11 points_only 1 692  
173 0 0 4 167 673 0 0 468 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::compute_sample_point
//       Access: Published
//  Description: Computes the average of all the point within
//               sample_radius (manhattan distance) and the indicated
//               point.
//
//               The point coordinates are given in UV space, in the
//               range 0..1.
//////////////////////////////////////////////////////////////////// 5 4 this 3 716  6 result 1 742  1 x 1 721  1 y 1 721  13 sample_radius 1 721  
174 0 0 4 168 673 0 0 646 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::copy_sub_image
//       Access: Published
//  Description: Copies a rectangular area of another image into a
//               rectangular area of this image.  Both images must
//               already have been initialized.  The upper-left corner
//               of the region in both images is specified, and the
//               size of the area; if the size is omitted, it defaults
//               to the entire other image, or the largest piece that
//               will fit.
//////////////////////////////////////////////////////////////////// 8 4 this 3 715  4 copy 1 716  3 xto 1 672  3 yto 1 672  5 xfrom 1 672  5 yfrom 1 672  6 x_size 1 672  6 y_size 1 672  
175 0 0 4 169 673 0 0 397 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::add_sub_image
//       Access: Published
//  Description: Behaves like copy_sub_image(), except the copy pixels
//               are added to the pixels of the destination, after
//               scaling by the specified pixel_scale.
//////////////////////////////////////////////////////////////////// 9 4 this 3 715  4 copy 1 716  3 xto 1 672  3 yto 1 672  5 xfrom 1 672  5 yfrom 1 672  6 x_size 1 672  6 y_size 1 672  11 pixel_scale 1 722  
176 0 0 4 170 673 0 0 403 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::mult_sub_image
//       Access: Published
//  Description: Behaves like copy_sub_image(), except the copy pixels
//               are multiplied to the pixels of the destination, after
//               scaling by the specified pixel_scale.
//////////////////////////////////////////////////////////////////// 9 4 this 3 715  4 copy 1 716  3 xto 1 672  3 yto 1 672  5 xfrom 1 672  5 yfrom 1 672  6 x_size 1 672  6 y_size 1 672  11 pixel_scale 1 722  
177 0 0 4 171 673 0 0 475 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::divide_sub_image
//       Access: Published
//  Description: Behaves like copy_sub_image(), except the copy pixels
//               are divided into the pixels of the destination, after
//               scaling by the specified pixel_scale.
//               dest(x, y) = dest(x, y) / (copy(x, y) * pixel_scale).
//////////////////////////////////////////////////////////////////// 9 4 this 3 715  4 copy 1 716  3 xto 1 672  3 yto 1 672  5 xfrom 1 672  5 yfrom 1 672  6 x_size 1 672  6 y_size 1 672  11 pixel_scale 1 722  
178 0 0 6 172 715 0 0 0 2 4 this 3 715  10 multiplier 1 722  
179 0 0 4 173 673 0 0 473 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::gamma_correct
//       Access: Published
//  Description: Assuming the image was constructed with a gamma curve
//               of from_gamma in the RGB channels, converts it to an
//               image with a gamma curve of to_gamma in the RGB
//               channels.  Does not affect the alpha channel.
//////////////////////////////////////////////////////////////////// 3 4 this 3 715  10 from_gamma 1 722  8 to_gamma 1 722  
180 0 0 4 174 673 0 0 480 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::gamma_correct_alpha
//       Access: Published
//  Description: Assuming the image was constructed with a gamma curve
//               of from_gamma in the alpha channel, converts it to an
//               image with a gamma curve of to_gamma in the alpha
//               channel.  Does not affect the RGB channels.
//////////////////////////////////////////////////////////////////// 3 4 this 3 715  10 from_gamma 1 722  8 to_gamma 1 722  
181 0 0 4 175 673 0 0 391 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::apply_exponent
//       Access: Published
//  Description: Adjusts each channel of the image by raising the
//               corresponding component value to the indicated
//               exponent, such that L' = L ^ exponent.
//////////////////////////////////////////////////////////////////// 2 4 this 3 715  13 gray_exponent 1 722  
182 0 0 4 175 673 0 0 391 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::apply_exponent
//       Access: Published
//  Description: Adjusts each channel of the image by raising the
//               corresponding component value to the indicated
//               exponent, such that L' = L ^ exponent.
//////////////////////////////////////////////////////////////////// 3 4 this 3 715  13 gray_exponent 1 722  14 alpha_exponent 1 722  
183 0 0 4 175 673 0 0 571 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::apply_exponent
//       Access: Published
//  Description: Adjusts each channel of the image by raising the
//               corresponding component value to the indicated
//               exponent, such that L' = L ^ exponent.  For a
//               grayscale image, the blue_exponent value is used for
//               the grayscale value, and red_exponent and
//               green_exponent are unused.
//////////////////////////////////////////////////////////////////// 4 4 this 3 715  11 c0_exponent 1 722  11 c1_exponent 1 722  11 c2_exponent 1 722  
184 0 0 4 175 673 0 0 391 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::apply_exponent
//       Access: Published
//  Description: Adjusts each channel of the image by raising the
//               corresponding component value to the indicated
//               exponent, such that L' = L ^ exponent.
//////////////////////////////////////////////////////////////////// 5 4 this 3 715  11 c0_exponent 1 722  11 c1_exponent 1 722  11 c2_exponent 1 722  11 c3_exponent 1 722  
185 0 0 4 176 673 0 0 214 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::output
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 716  3 out 1 678  
186 0 0 6 177 770 0 0 0 1 4 this 3 716  
187 0 0 6 178 672 0 0 0 3 4 this 3 716  4 view 1 773  5 flags 1 672  
188 0 0 7 183 775 0 0 414 ////////////////////////////////////////////////////////////////////
//     Function: PNMBrush::make_transparent
//       Access: Published, Static
//  Description: Returns a new brush that does not paint anything.
//               Can be used as either a pen or a fill brush to make
//               borderless or unfilled shapes, respectively.
//////////////////////////////////////////////////////////////////// 0 
189 0 0 7 184 775 0 0 384 ////////////////////////////////////////////////////////////////////
//     Function: PNMBrush::make_pixel
//       Access: Published, Static
//  Description: Returns a new brush that paints a single pixel of the
//               indicated color on a border, or paints a solid color
//               in an interior.
//////////////////////////////////////////////////////////////////// 2 5 color 1 776  6 effect 1 666  
190 0 0 7 185 775 0 0 401 ////////////////////////////////////////////////////////////////////
//     Function: PNMBrush::make_spot
//       Access: Published, Static
//  Description: Returns a new brush that paints a spot of the
//               indicated color and radius.  If fuzzy is true, the
//               spot is fuzzy; otherwise, it is hard-edged.
//////////////////////////////////////////////////////////////////// 4 5 color 1 776  6 radius 1 722  5 fuzzy 1 692  6 effect 1 666  
191 0 0 7 186 775 0 0 537 ////////////////////////////////////////////////////////////////////
//     Function: PNMBrush::make_image
//       Access: Published, Static
//  Description: Returns a new brush that paints with the indicated
//               image.  xc and yc indicate the pixel in the center of
//               the brush.
//
//               The brush makes a copy of the image; it is safe to
//               deallocate or modify the image after making this
//               call.
//////////////////////////////////////////////////////////////////// 4 5 image 1 718  2 xc 1 722  2 yc 1 722  6 effect 1 666  
192 0 0 7 188 720 516 0 220 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
193 0 0 7 188 720 516 0 220 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 8 filename 1 695  4 type 1 687  
194 0 0 7 188 720 516 0 225 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::Copy Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 718  
195 0 0 7 188 720 516 0 220 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 6 6 x_size 1 672  6 y_size 1 672  12 num_channels 1 672  6 maxval 1 693  4 type 1 687  11 color_space 1 694  
196 0 0 6 189 720 0 0 0 2 4 this 3 720  4 copy 1 718  
197 0 0 6 191 693 0 0 290 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::clamp_val
//       Access: Published
//  Description: A handy function to clamp values to
//               [0..get_maxval()].
//////////////////////////////////////////////////////////////////// 2 4 this 3 718  11 input_value 1 672  
198 0 0 6 192 693 0 0 379 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::to_val
//       Access: Published
//  Description: A handy function to scale non-alpha values from
//               [0..1] to [0..get_maxval()].  Do not use this for
//               alpha values, see to_alpha_val.
//////////////////////////////////////////////////////////////////// 2 4 this 3 718  11 input_value 1 722  
199 0 0 6 193 693 0 0 311 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::to_alpha_val
//       Access: Published
//  Description: A handy function to scale alpha values from [0..1]
//               to [0..get_maxval()].
//////////////////////////////////////////////////////////////////// 2 4 this 3 718  11 input_value 1 722  
200 0 0 6 194 722 0 0 383 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::from_val
//       Access: Published
//  Description: A handy function to scale non-alpha values from
//               [0..get_maxval()] to [0..1].  Do not use this for
//               alpha values, see from_alpha_val.
//////////////////////////////////////////////////////////////////// 2 4 this 3 718  11 input_value 1 693  
201 0 0 6 195 722 0 0 313 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::from_alpha_val
//       Access: Published
//  Description: A handy function to scale alpha values from
//               [0..get_maxval()] to [0..1].
//////////////////////////////////////////////////////////////////// 2 4 this 3 718  11 input_value 1 693  
202 0 0 4 196 673 0 0 329 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::clear
//       Access: Published
//  Description: Frees all memory allocated for the image, and clears
//               all its parameters (size, color, type, etc).
//////////////////////////////////////////////////////////////////// 1 4 this 3 720  
203 0 0 4 196 673 0 0 331 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::clear
//       Access: Published
//  Description: This flavor of clear() reinitializes the image to an
//               empty (black) image with the given dimensions.
//////////////////////////////////////////////////////////////////// 7 4 this 3 720  6 x_size 1 672  6 y_size 1 672  12 num_channels 1 672  6 maxval 1 693  4 type 1 687  11 color_space 1 694  
204 0 0 4 197 673 0 0 269 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::copy_from
//       Access: Published
//  Description: Makes this image become a copy of the other image.
//////////////////////////////////////////////////////////////////// 2 4 this 3 720  4 copy 1 718  
205 0 0 4 198 673 0 0 313 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::copy_channel
//       Access: Published
//  Description: Copies a channel from one image into another.
//               Images must be the same size
//////////////////////////////////////////////////////////////////// 4 4 this 3 720  4 copy 1 718  11 src_channel 1 672  12 dest_channel 1 672  
206 0 0 4 198 673 0 0 381 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::copy_channel
//       Access: Published
//  Description: Copies just a single channel from the source image
//               into a single channel of this image, leaving the
//               remaining channels alone.
//////////////////////////////////////////////////////////////////// 10 4 this 3 720  4 copy 1 718  3 xto 1 672  3 yto 1 672  3 cto 1 672  5 xfrom 1 672  5 yfrom 1 672  5 cfrom 1 672  6 x_size 1 672  6 y_size 1 672  
207 0 0 4 199 673 0 0 522 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::copy_channel_bits
//       Access: Published
//  Description: Copies some subset of the bits of the specified
//               channel from one image into some subset of the bits
//               of the specified channel in another image.  Images
//               must be the same size.
//
//               If right_shift is negative, it means a left shift.
//////////////////////////////////////////////////////////////////// 6 4 this 3 720  4 copy 1 718  11 src_channel 1 672  12 dest_channel 1 672  8 src_mask 1 693  11 right_shift 1 672  
208 0 0 4 200 673 0 0 445 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::copy_header_from
//       Access: Published
//  Description: Copies just the header information into this image.
//               This will blow away any image data stored in the
//               image.  The new image data will be allocated, but
//               left unitialized.
//////////////////////////////////////////////////////////////////// 2 4 this 3 720  6 header 1 690  
209 0 0 4 201 673 0 0 314 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::take_from
//       Access: Published
//  Description: Move the contents of the other image into this one,
//               and empty the other image.
//////////////////////////////////////////////////////////////////// 2 4 this 3 720  4 orig 1 720  
210 0 0 4 202 673 0 0 309 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::fill
//       Access: Published
//  Description: Sets the entire image (except the alpha channel) to
//               the given grayscale level.
//////////////////////////////////////////////////////////////////// 2 4 this 3 720  4 gray 1 722  
211 0 0 4 202 673 0 0 299 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::fill
//       Access: Published
//  Description: Sets the entire image (except the alpha channel) to
//               the given color.
//////////////////////////////////////////////////////////////////// 4 4 this 3 720  3 red 1 722  5 green 1 722  4 blue 1 722  
212 0 0 4 203 673 0 0 313 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::fill_val
//       Access: Published
//  Description: Sets the entire image (except the alpha channel) to
//               the given grayscale level.
//////////////////////////////////////////////////////////////////// 2 4 this 3 720  4 gray 1 693  
213 0 0 4 203 673 0 0 303 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::fill_val
//       Access: Published
//  Description: Sets the entire image (except the alpha channel) to
//               the given color.
//////////////////////////////////////////////////////////////////// 4 4 this 3 720  3 red 1 693  5 green 1 693  4 blue 1 693  
214 0 0 4 204 673 0 0 269 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::alpha_fill
//       Access: Published
//  Description: Sets the entire alpha channel to the given level.
//////////////////////////////////////////////////////////////////// 2 4 this 3 720  5 alpha 1 722  
215 0 0 4 205 673 0 0 273 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::alpha_fill_val
//       Access: Published
//  Description: Sets the entire alpha channel to the given level.
//////////////////////////////////////////////////////////////////// 2 4 this 3 720  5 alpha 1 693  
216 0 0 4 206 673 0 0 855 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::set_read_size
//       Access: Published
//  Description: Specifies the size to we'd like to scale the image
//               upon reading it.  This will affect the next call to
//               read().  This is usually used to reduce the image
//               size, e.g. for a thumbnail.
//
//               If the file type reader supports it (e.g. JPEG), then
//               this will scale the image during the read operation,
//               consequently reducing memory and CPU utilization.  If
//               the file type reader does not support it, this will
//               load the image normally, and them perform a linear
//               scale after it has been loaded.
//////////////////////////////////////////////////////////////////// 3 4 this 3 720  6 x_size 1 672  6 y_size 1 672  
217 0 0 4 207 673 0 0 298 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::clear_read_size
//       Access: Published
//  Description: Undoes the effect of a previous call to
//               set_read_size().
//////////////////////////////////////////////////////////////////// 1 4 this 3 720  
218 0 0 6 208 692 0 0 271 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::has_read_size
//       Access: Published
//  Description: Returns true if set_read_size() has been called.
//////////////////////////////////////////////////////////////////// 1 4 this 3 718  
219 0 0 6 209 672 0 0 384 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::get_read_x_size
//       Access: Published
//  Description: Returns the requested x_size of the image if
//               set_read_size() has been called, or the image x_size
//               otherwise (if it is known).
//////////////////////////////////////////////////////////////////// 1 4 this 3 718  
220 0 0 6 210 672 0 0 384 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::get_read_y_size
//       Access: Published
//  Description: Returns the requested y_size of the image if
//               set_read_size() has been called, or the image y_size
//               otherwise (if it is known).
//////////////////////////////////////////////////////////////////// 1 4 this 3 718  
221 0 0 6 211 694 0 0 296 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::get_color_space
//       Access: Published
//  Description: Returns the color space in which the image is
//               encoded.
//////////////////////////////////////////////////////////////////// 1 4 this 3 718  
222 0 0 6 212 692 0 0 397 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::read
//       Access: Published
//  Description: Reads the indicated image filename.  If type is
//               non-NULL, it is a suggestion for the type of file it
//               is.  Returns true if successful, false on error.
//////////////////////////////////////////////////////////////////// 4 4 this 3 720  8 filename 1 695  4 type 1 687  19 report_unknown_type 1 692  
223 0 0 6 212 692 0 0 692 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::read
//       Access: Published
//  Description: This flavor of read() uses an already-existing
//               PNMReader to read the image file.  You can get a
//               reader via the PNMImageHeader::make_reader() methods.
//               This is a good way to examine the header of a file
//               (for instance, to determine its size) before actually
//               reading the entire image.
//
//               The PNMReader is always deleted upon completion,
//               whether successful or not.
//////////////////////////////////////////////////////////////////// 2 4 this 3 720  6 reader 1 700  
224 0 0 6 212 692 0 0 665 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::read
//       Access: Published
//  Description: Reads the image data from the indicated stream.
//
//               The filename is advisory only, and may be used
//               to suggest a type if it has a known extension.
//
//               If type is non-NULL, it is a suggestion for the type
//               of file it is (and a non-NULL type will override any
//               magic number test or filename extension lookup).
//
//               Returns true if successful, false on error.
//////////////////////////////////////////////////////////////////// 5 4 this 3 720  4 data 1 698  8 filename 1 682  4 type 1 687  19 report_unknown_type 1 692  
225 0 0 6 213 692 0 0 370 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::write
//       Access: Published
//  Description: Writes the image to the indicated filename.  If type
//               is non-NULL, it is a suggestion for the type of image
//               file to write.
//////////////////////////////////////////////////////////////////// 3 4 this 3 718  8 filename 1 695  4 type 1 687  
226 0 0 6 213 692 0 0 513 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::write
//       Access: Published
//  Description: This flavor of write() uses an already-existing
//               PNMWriter to write the image file.  You can get a
//               writer via the PNMImageHeader::make_writer() methods.
//
//               The PNMWriter is always deleted upon completion,
//               whether successful or not.
//////////////////////////////////////////////////////////////////// 2 4 this 3 718  6 writer 1 702  
227 0 0 6 213 692 0 0 499 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::write
//       Access: Published
//  Description: Writes the image to the indicated ostream.
//
//               The filename is advisory only, and may be used
//               suggest a type if it has a known extension.
//
//               If type is non-NULL, it is a suggestion for the type
//               of image file to write.
//////////////////////////////////////////////////////////////////// 4 4 this 3 718  4 data 1 678  8 filename 1 682  4 type 1 687  
228 0 0 6 214 692 0 0 470 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::is_valid
//       Access: Published
//  Description: Returns true if the image has been read in or
//               correctly initialized with a height and width.  If
//               this returns false, virtually all member functions
//               except clear() and read() are invalid function calls.
//////////////////////////////////////////////////////////////////// 1 4 this 3 718  
229 0 0 4 215 673 0 0 531 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::set_num_channels
//       Access: Published
//  Description: Changes the number of channels associated with the
//               image.  The new number of channels must be an integer
//               in the range 1 through 4, inclusive.  This will
//               allocate and/or deallocate memory as necessary to
//               accommodate; see set_color_type().
//////////////////////////////////////////////////////////////////// 2 4 this 3 720  12 num_channels 1 672  
230 0 0 4 216 673 0 0 606 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::set_color_type
//       Access: Published
//  Description: Translates the image to or from grayscale, color, or
//               four-color mode.  Grayscale images are converted to
//               full-color images with R, G, B set to the original
//               gray level; color images are converted to grayscale
//               according to the value of Bright().  The alpha
//               channel, if added, is initialized to zero.
//////////////////////////////////////////////////////////////////// 2 4 this 3 720  10 color_type 1 653  
231 0 0 4 217 673 0 0 1024 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::set_color_space
//       Access: Published
//  Description: Converts the colors in the image to the indicated
//               color space.  This may be a lossy operation, in
//               particular when going from sRGB to linear.
//               The alpha channel remains untouched.
//
//               Note that, because functions like get_xel() and
//               set_xel() work on linearized floating-point values,
//               this conversion won't affect those values (aside
//               from some minor discrepancies due to storage
//               precision).  It does affect the values used by
//               get_xel_val() and set_xel_val(), though, since
//               those operate on encoded colors.
//
//               Some color spaces, particularly scRGB, may enforce
//               the use of a particular maxval setting.
//////////////////////////////////////////////////////////////////// 2 4 this 3 720  11 color_space 1 694  
232 0 0 4 218 673 0 0 365 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::add_alpha
//       Access: Published
//  Description: Adds an alpha channel to the image, if it does not
//               already have one.  The alpha channel is initialized
//               to zeros.
//////////////////////////////////////////////////////////////////// 1 4 this 3 720  
233 0 0 4 219 673 0 0 270 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::remove_alpha
//       Access: Published
//  Description: Removes the image's alpha channel, if it exists.
//////////////////////////////////////////////////////////////////// 1 4 this 3 720  
234 0 0 4 220 673 0 0 335 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::make_grayscale
//       Access: Published
//  Description: Converts the image from RGB to grayscale.  Any alpha
//               channel, if present, is left undisturbed.
//////////////////////////////////////////////////////////////////// 1 4 this 3 720  
235 0 0 4 220 673 0 0 502 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::make_grayscale
//       Access: Published
//  Description: Converts the image from RGB to grayscale.  Any alpha
//               channel, if present, is left undisturbed.  The
//               optional rc, gc, bc values represent the relative
//               weights to apply to each channel to convert it to
//               grayscale.
//////////////////////////////////////////////////////////////////// 4 4 this 3 720  2 rc 1 722  2 gc 1 722  2 bc 1 722  
236 0 0 4 221 673 0 0 329 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::make_rgb
//       Access: Published
//  Description: Converts the image from grayscale to RGB.  Any alpha
//               channel, if present, is left undisturbed.
//////////////////////////////////////////////////////////////////// 1 4 this 3 720  
237 0 0 4 222 673 0 0 509 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::premultiply_alpha
//       Access: Published
//  Description: Converts an image in-place to its "premultiplied"
//               form, where, for every pixel in the image, the
//               red, green, and blue components are multiplied by
//               that pixel's alpha value.
//
//               This does not modify any alpha values.
//////////////////////////////////////////////////////////////////// 1 4 this 3 720  
238 0 0 4 223 673 0 0 567 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::unpremultiply_alpha
//       Access: Published
//  Description: Converts an image in-place to its "straight alpha"
//               form (presumably from a "premultiplied" form),
//               where, for every pixel in the image, the red,
//               green, and blue components are divided by that
//               pixel's alpha value.
//
//               This does not modify any alpha values.
//////////////////////////////////////////////////////////////////// 1 4 this 3 720  
239 0 0 4 224 673 0 0 272 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::reverse_rows
//       Access: Published
//  Description: Performs an in-place reversal of the row (y) data.
//////////////////////////////////////////////////////////////////// 1 4 this 3 720  
240 0 0 4 225 673 0 0 662 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::flip
//       Access: Published
//  Description: Reverses, transposes, and/or rotates the image
//               in-place according to the specified parameters.  If
//               flip_x is true, the x axis is reversed; if flip_y is
//               true, the y axis is reversed.  Then, if transpose is
//               true, the x and y axes are exchanged.  These
//               parameters can be used to select any combination of
//               90-degree or 180-degree rotations and flips.
//////////////////////////////////////////////////////////////////// 4 4 this 3 720  6 flip_x 1 692  6 flip_y 1 692  9 transpose 1 692  
241 0 0 4 226 673 0 0 263 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::set_maxval
//       Access: Published
//  Description: Rescales the image to the indicated maxval.
//////////////////////////////////////////////////////////////////// 2 4 this 3 720  6 maxval 1 693  
242 0 0 6 227 779 0 0 326 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::get_xel_val
//       Access: Published
//  Description: Returns the RGB color at the indicated pixel.  Each
//               component is in the range 0..maxval.
//////////////////////////////////////////////////////////////////// 3 4 this 3 720  1 x 1 672  1 y 1 672  
243 0 0 7 227 779 0 0 326 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::get_xel_val
//       Access: Published
//  Description: Returns the RGB color at the indicated pixel.  Each
//               component is in the range 0..maxval.
//////////////////////////////////////////////////////////////////// 3 4 this 3 718  1 x 1 672  1 y 1 672  
244 0 0 4 228 673 0 0 499 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::set_xel_val
//       Access: Published
//  Description: Changes the RGB color at the indicated pixel.  Each
//               component is in the range 0..maxval, encoded in
//               the configured color space.  See set_xel if you
//               instead have a linearized and normalized
//               floating-point value.
//////////////////////////////////////////////////////////////////// 4 4 this 3 720  1 x 1 672  1 y 1 672  5 value 1 710  
245 0 0 4 228 673 0 0 568 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::set_xel_val
//       Access: Published
//  Description: Changes all three color components at the indicated
//               pixel to the same value.  The value is in the range
//               component is in the range 0..maxval, encoded in
//               the configured color space.  See set_xel if you
//               instead have a linearized and normalized
//               floating-point value.
//////////////////////////////////////////////////////////////////// 4 4 this 3 720  1 x 1 672  1 y 1 672  4 gray 1 693  
246 0 0 4 228 673 0 0 499 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::set_xel_val
//       Access: Published
//  Description: Changes the RGB color at the indicated pixel.  Each
//               component is in the range 0..maxval, encoded in
//               the configured color space.  See set_xel if you
//               instead have a linearized and normalized
//               floating-point value.
//////////////////////////////////////////////////////////////////// 6 4 this 3 720  1 x 1 672  1 y 1 672  1 r 1 693  1 g 1 693  1 b 1 693  
247 0 0 6 229 693 0 0 399 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::get_red_val
//       Access: Published
//  Description: Returns the red component color at the indicated
//               pixel.  The value returned is in the range 0..maxval
//               and encoded in the configured color space.
//////////////////////////////////////////////////////////////////// 3 4 this 3 718  1 x 1 672  1 y 1 672  
248 0 0 6 230 693 0 0 403 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::get_green_val
//       Access: Published
//  Description: Returns the green component color at the indicated
//               pixel.  The value returned is in the range 0..maxval
//               and encoded in the configured color space.
//////////////////////////////////////////////////////////////////// 3 4 this 3 718  1 x 1 672  1 y 1 672  
249 0 0 6 231 693 0 0 401 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::get_blue_val
//       Access: Published
//  Description: Returns the blue component color at the indicated
//               pixel.  The value returned is in the range 0..maxval
//               and encoded in the configured color space.
//////////////////////////////////////////////////////////////////// 3 4 this 3 718  1 x 1 672  1 y 1 672  
250 0 0 6 232 693 0 0 642 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::get_gray_val
//       Access: Published
//  Description: Returns the gray component color at the indicated
//               pixel.  This only has a meaningful value for
//               grayscale images; for other image types, this returns
//               the value of the blue channel only.  However, also
//               see the get_bright() function.
//               The value returned is in the range 0..maxval and
//               encoded in the configured color space.
//////////////////////////////////////////////////////////////////// 3 4 this 3 718  1 x 1 672  1 y 1 672  
251 0 0 6 233 693 0 0 453 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::get_alpha_val
//       Access: Published
//  Description: Returns the alpha component color at the indicated
//               pixel.  It is an error to call this unless
//               has_alpha() is true.  The value returned is in the
//               range 0..maxval and always linear.
//////////////////////////////////////////////////////////////////// 3 4 this 3 718  1 x 1 672  1 y 1 672  
252 0 0 4 234 673 0 0 518 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::set_red_val
//       Access: Published
//  Description: Sets the red component color only at the indicated
//               pixel.  The value given should be in the range
//               0..maxval, encoded in the configured color space.
//               See set_red if you instead have a linearized and
//               normalized floating-point value.
//////////////////////////////////////////////////////////////////// 4 4 this 3 720  1 x 1 672  1 y 1 672  1 r 1 693  
253 0 0 4 235 673 0 0 524 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::set_green_val
//       Access: Published
//  Description: Sets the green component color only at the indicated
//               pixel.  The value given should be in the range
//               0..maxval, encoded in the configured color space.
//               See set_green if you instead have a linearized and
//               normalized floating-point value.
//////////////////////////////////////////////////////////////////// 4 4 this 3 720  1 x 1 672  1 y 1 672  1 g 1 693  
254 0 0 4 236 673 0 0 521 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::set_blue_val
//       Access: Published
//  Description: Sets the blue component color only at the indicated
//               pixel.  The value given should be in the range
//               0..maxval, encoded in the configured color space.
//               See set_blue if you instead have a linearized and
//               normalized floating-point value.
//////////////////////////////////////////////////////////////////// 4 4 this 3 720  1 x 1 672  1 y 1 672  1 b 1 693  
255 0 0 4 237 673 0 0 876 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::set_gray_val
//       Access: Published
//  Description: Sets the gray component color at the indicated
//               pixel.  This is only meaningful for grayscale images;
//               for other image types, this simply sets the blue
//               component color.  However, also see set_xel_val(),
//               which can set all the component colors to the same
//               grayscale level, and hence works correctly both for
//               grayscale and color images.  The value given should
//               be in the range 0..maxval, encoded in the configured
//               color space.  See set_gray if you instead have a
//               linearized normalized floating-point value.
//////////////////////////////////////////////////////////////////// 4 4 this 3 720  1 x 1 672  1 y 1 672  4 gray 1 693  
256 0 0 4 238 673 0 0 567 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::set_alpha_val
//       Access: Published
//  Description: Sets the alpha component color only at the indicated
//               pixel.  It is an error to call this unless
//               has_alpha() is true.  The value given should be in
//               the range 0..maxval.
//
//               This value is always linearly encoded, even if the
//               image is set to the sRGB color space.
//////////////////////////////////////////////////////////////////// 4 4 this 3 720  1 x 1 672  1 y 1 672  1 a 1 693  
257 0 0 6 239 693 0 0 630 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::get_channel_val
//       Access: Published
//  Description: Returns the nth component color at the indicated
//               pixel.  The channel index should be in the range
//               0..(get_num_channels()-1).  The channels are ordered B,
//               G, R, A.  This is slightly less optimal than
//               accessing the component values directly by named
//               methods.  The value returned is in the range
//               0..maxval.
//////////////////////////////////////////////////////////////////// 4 4 this 3 718  1 x 1 672  1 y 1 672  7 channel 1 672  
258 0 0 4 240 673 0 0 629 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::set_channel_val
//       Access: Published
//  Description: Sets the nth component color at the indicated
//               pixel.  The channel index should be in the range
//               0..(get_num_channels()-1).  The channels are ordered B,
//               G, R, A.  This is slightly less optimal than
//               setting the component values directly by named
//               methods.  The value given should be in the range
//               0..maxval.
//////////////////////////////////////////////////////////////////// 5 4 this 3 720  1 x 1 672  1 y 1 672  7 channel 1 672  5 value 1 693  
259 0 0 6 241 722 0 0 629 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::get_channel
//       Access: Published
//  Description: Returns the nth component color at the indicated
//               pixel.  The channel index should be in the range
//               0..(get_num_channels()-1).  The channels are ordered B,
//               G, R, A.  This is slightly less optimal than
//               accessing the component values directly by named
//               methods.  The value returned is a float in the range
//               0..1.
//////////////////////////////////////////////////////////////////// 4 4 this 3 718  1 x 1 672  1 y 1 672  7 channel 1 672  
260 0 0 4 242 673 0 0 628 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::set_channel
//       Access: Published
//  Description: Sets the nth component color at the indicated
//               pixel.  The channel index should be in the range
//               0..(get_num_channels()-1).  The channels are ordered B,
//               G, R, A.  This is slightly less optimal than
//               setting the component values directly by named
//               methods.  The value given should be a float in the
//               range 0..1.
//////////////////////////////////////////////////////////////////// 5 4 this 3 720  1 x 1 672  1 y 1 672  7 channel 1 672  5 value 1 722  
261 0 0 7 243 709 421 0 322 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::get_pixel
//       Access: Published
//  Description: Returns the (r, g, b, a) pixel value at the indicated
//               pixel, using a PixelSpec object.
//////////////////////////////////////////////////////////////////// 3 4 this 3 718  1 x 1 672  1 y 1 672  
262 0 0 4 244 673 0 0 319 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::set_pixel
//       Access: Published
//  Description: Sets the (r, g, b, a) pixel value at the indicated
//               pixel, using a PixelSpec object.
//////////////////////////////////////////////////////////////////// 4 4 this 3 720  1 x 1 672  1 y 1 672  5 pixel 1 707  
263 0 0 7 245 781 0 0 336 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::get_xel
//       Access: Published
//  Description: Returns the RGB color at the indicated pixel.  Each
//               component is a linearized float in the range 0..1.
//////////////////////////////////////////////////////////////////// 3 4 this 3 718  1 x 1 672  1 y 1 672  
264 0 0 4 246 673 0 0 336 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::set_xel
//       Access: Published
//  Description: Changes the RGB color at the indicated pixel.  Each
//               component is a linearized float in the range 0..1.
//////////////////////////////////////////////////////////////////// 4 4 this 3 720  1 x 1 672  1 y 1 672  5 value 1 782  
265 0 0 4 246 673 0 0 379 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::set_xel
//       Access: Published
//  Description: Changes all three color components at the indicated
//               pixel to the same value.  The value is a linearized
//               float in the range 0..1.
//////////////////////////////////////////////////////////////////// 4 4 this 3 720  1 x 1 672  1 y 1 672  4 gray 1 722  
266 0 0 4 246 673 0 0 336 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::set_xel
//       Access: Published
//  Description: Changes the RGB color at the indicated pixel.  Each
//               component is a linearized float in the range 0..1.
//////////////////////////////////////////////////////////////////// 6 4 this 3 720  1 x 1 672  1 y 1 672  1 r 1 722  1 g 1 722  1 b 1 722  
267 0 0 7 247 784 0 0 339 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::get_xel_a
//       Access: Published
//  Description: Returns the RGBA color at the indicated pixel.  Each
//               component is a linearized float in the range 0..1.
//////////////////////////////////////////////////////////////////// 3 4 this 3 718  1 x 1 672  1 y 1 672  
268 0 0 4 248 673 0 0 339 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::set_xel_a
//       Access: Published
//  Description: Changes the RGBA color at the indicated pixel.  Each
//               component is a linearized float in the range 0..1.
//////////////////////////////////////////////////////////////////// 4 4 this 3 720  1 x 1 672  1 y 1 672  5 value 1 776  
269 0 0 4 248 673 0 0 339 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::set_xel_a
//       Access: Published
//  Description: Changes the RGBA color at the indicated pixel.  Each
//               component is a linearized float in the range 0..1.
//////////////////////////////////////////////////////////////////// 7 4 this 3 720  1 x 1 672  1 y 1 672  1 r 1 722  1 g 1 722  1 b 1 722  1 a 1 722  
270 0 0 6 249 722 0 0 367 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::get_red
//       Access: Published
//  Description: Returns the red component color at the indicated
//               pixel.  The value returned is a linearized float
//               in the range 0..1.
//////////////////////////////////////////////////////////////////// 3 4 this 3 718  1 x 1 672  1 y 1 672  
271 0 0 6 250 722 0 0 371 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::get_green
//       Access: Published
//  Description: Returns the green component color at the indicated
//               pixel.  The value returned is a linearized float
//               in the range 0..1.
//////////////////////////////////////////////////////////////////// 3 4 this 3 718  1 x 1 672  1 y 1 672  
272 0 0 6 251 722 0 0 369 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::get_blue
//       Access: Published
//  Description: Returns the blue component color at the indicated
//               pixel.  The value returned is a linearized float
//               in the range 0..1.
//////////////////////////////////////////////////////////////////// 3 4 this 3 718  1 x 1 672  1 y 1 672  
273 0 0 6 252 722 0 0 594 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::get_gray
//       Access: Published
//  Description: Returns the gray component color at the indicated
//               pixel.  This only has a meaningful value for
//               grayscale images; for other image types, this returns
//               the value of the blue channel only.  However, also
//               see the get_bright() function.  The value returned
//               is a linearized float in the range 0..1.
//////////////////////////////////////////////////////////////////// 3 4 this 3 718  1 x 1 672  1 y 1 672  
274 0 0 6 253 722 0 0 434 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::get_alpha
//       Access: Published
//  Description: Returns the alpha component color at the indicated
//               pixel.  It is an error to call this unless
//               has_alpha() is true.  The value returned is a float
//               in the range 0..1.
//////////////////////////////////////////////////////////////////// 3 4 this 3 718  1 x 1 672  1 y 1 672  
275 0 0 4 254 673 0 0 373 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::set_red
//       Access: Published
//  Description: Sets the red component color only at the indicated
//               pixel.  The value given should be a linearized
//               float in the range 0..1.
//////////////////////////////////////////////////////////////////// 4 4 this 3 720  1 x 1 672  1 y 1 672  1 r 1 722  
276 0 0 4 255 673 0 0 377 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::set_green
//       Access: Published
//  Description: Sets the green component color only at the indicated
//               pixel.  The value given should be a linearized
//               float in the range 0..1.
//////////////////////////////////////////////////////////////////// 4 4 this 3 720  1 x 1 672  1 y 1 672  1 g 1 722  
277 0 0 4 256 673 0 0 375 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::set_blue
//       Access: Published
//  Description: Sets the blue component color only at the indicated
//               pixel.  The value given should be a linearized
//               float in the range 0..1.
//////////////////////////////////////////////////////////////////// 4 4 this 3 720  1 x 1 672  1 y 1 672  1 b 1 722  
278 0 0 4 257 673 0 0 729 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::set_gray
//       Access: Published
//  Description: Sets the gray component color at the indicated
//               pixel.  This is only meaningful for grayscale images;
//               for other image types, this simply sets the blue
//               component color.  However, also see set_xel(), which
//               can set all the component colors to the same
//               grayscale level, and hence works correctly both for
//               grayscale and color images.  The value given should
//               be a linearized float in the range 0..1.
//////////////////////////////////////////////////////////////////// 4 4 this 3 720  1 x 1 672  1 y 1 672  4 gray 1 722  
279 0 0 4 258 673 0 0 432 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::set_alpha
//       Access: Published
//  Description: Sets the alpha component color only at the indicated
//               pixel.  It is an error to call this unless
//               has_alpha() is true.  The value given should be in
//               the range 0..1.
//////////////////////////////////////////////////////////////////// 4 4 this 3 720  1 x 1 672  1 y 1 672  1 a 1 722  
280 0 0 6 259 722 0 0 477 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::get_bright
//       Access: Published
//  Description: Returns the linear brightness of the given xel, as a
//               linearized float in the range 0..1.  This flavor of
//               get_bright() returns the correct grayscale brightness
//               level for both full-color and grayscale images.
//////////////////////////////////////////////////////////////////// 3 4 this 3 718  1 x 1 672  1 y 1 672  
281 0 0 6 259 722 0 0 467 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::get_bright
//       Access: Published
//  Description: This flavor of get_bright() works correctly only for
//               color images.  It returns a single brightness value
//               for the RGB color at the indicated pixel, based on
//               the supplied weights for each component.
//////////////////////////////////////////////////////////////////// 6 4 this 3 718  1 x 1 672  1 y 1 672  2 rc 1 722  2 gc 1 722  2 bc 1 722  
282 0 0 6 259 722 0 0 475 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::get_bright
//       Access: Published
//  Description: This flavor of get_bright() works correctly only for
//               four-channel images.  It returns a single brightness
//               value for the RGBA color at the indicated pixel,
//               based on the supplied weights for each component.
//////////////////////////////////////////////////////////////////// 7 4 this 3 718  1 x 1 672  1 y 1 672  2 rc 1 722  2 gc 1 722  2 bc 1 722  2 ac 1 722  
283 0 0 4 260 673 0 0 539 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::blend
//       Access: Published
//  Description: Smoothly blends the indicated pixel value in with
//               whatever was already in the image, based on the given
//               alpha value.  An alpha of 1.0 is fully opaque and
//               completely replaces whatever was there previously;
//               alpha of 0.0 is fully transparent and does nothing.
//////////////////////////////////////////////////////////////////// 5 4 this 3 720  1 x 1 672  1 y 1 672  3 val 1 782  5 alpha 1 722  
284 0 0 4 260 673 0 0 539 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::blend
//       Access: Published
//  Description: Smoothly blends the indicated pixel value in with
//               whatever was already in the image, based on the given
//               alpha value.  An alpha of 1.0 is fully opaque and
//               completely replaces whatever was there previously;
//               alpha of 0.0 is fully transparent and does nothing.
//////////////////////////////////////////////////////////////////// 7 4 this 3 720  1 x 1 672  1 y 1 672  1 r 1 722  1 g 1 722  1 b 1 722  5 alpha 1 722  
285 0 0 4 261 673 0 0 647 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::copy_sub_image
//       Access: Published
//  Description: Copies a rectangular area of another image into a
//               rectangular area of this image.  Both images must
//               already have been initialized.  The upper-left corner
//               of the region in both images is specified, and the
//               size of the area; if the size is omitted, it defaults
//               to the entire other image, or the largest piece that
//               will fit.
//////////////////////////////////////////////////////////////////// 8 4 this 3 720  4 copy 1 718  3 xto 1 672  3 yto 1 672  5 xfrom 1 672  5 yfrom 1 672  6 x_size 1 672  6 y_size 1 672  
286 0 0 4 262 673 0 0 770 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::blend_sub_image
//       Access: Published
//  Description: Behaves like copy_sub_image(), except the alpha
//               channel of the copy is used to blend the copy into
//               the destination image, instead of overwriting pixels
//               unconditionally.
//
//               If pixel_scale is not 1.0, it specifies an amount to
//               scale each *alpha* value of the source image before
//               applying it to the target image.
//
//               If pixel_scale is 1.0 and the copy has no alpha
//               channel, this degenerates into copy_sub_image().
//////////////////////////////////////////////////////////////////// 9 4 this 3 720  4 copy 1 718  3 xto 1 672  3 yto 1 672  5 xfrom 1 672  5 yfrom 1 672  6 x_size 1 672  6 y_size 1 672  11 pixel_scale 1 722  
287 0 0 4 263 673 0 0 503 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::add_sub_image
//       Access: Published
//  Description: Behaves like copy_sub_image(), except the copy pixels
//               are added to the pixels of the destination, after
//               scaling by the specified pixel_scale.  Unlike
//               blend_sub_image(), the alpha channel is not treated
//               specially.
//////////////////////////////////////////////////////////////////// 9 4 this 3 720  4 copy 1 718  3 xto 1 672  3 yto 1 672  5 xfrom 1 672  5 yfrom 1 672  6 x_size 1 672  6 y_size 1 672  11 pixel_scale 1 722  
288 0 0 4 264 673 0 0 509 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::mult_sub_image
//       Access: Published
//  Description: Behaves like copy_sub_image(), except the copy pixels
//               are multiplied to the pixels of the destination, after
//               scaling by the specified pixel_scale.  Unlike
//               blend_sub_image(), the alpha channel is not treated
//               specially.
//////////////////////////////////////////////////////////////////// 9 4 this 3 720  4 copy 1 718  3 xto 1 672  3 yto 1 672  5 xfrom 1 672  5 yfrom 1 672  6 x_size 1 672  6 y_size 1 672  11 pixel_scale 1 722  
289 0 0 4 265 673 0 0 770 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::darken_sub_image
//       Access: Published
//  Description: Behaves like copy_sub_image(), but the resulting
//               color will be the darker of the source and
//               destination colors at each pixel (and at each R, G,
//               B, A component value).
//
//               If pixel_scale is not 1.0, it specifies an amount to
//               scale each pixel value of the source image before
//               applying it to the target image.  The scale is
//               applied with the center at 1.0: scaling the pixel
//               value smaller brings it closer to 1.0.
//////////////////////////////////////////////////////////////////// 9 4 this 3 720  4 copy 1 718  3 xto 1 672  3 yto 1 672  5 xfrom 1 672  5 yfrom 1 672  6 x_size 1 672  6 y_size 1 672  11 pixel_scale 1 722  
290 0 0 4 266 673 0 0 635 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::lighten_sub_image
//       Access: Published
//  Description: Behaves like copy_sub_image(), but the resulting
//               color will be the lighter of the source and
//               destination colors at each pixel (and at each R, G,
//               B, A component value).
//
//               If pixel_scale is not 1.0, it specifies an amount to
//               scale each pixel value of the source image before
//               applying it to the target image.
//////////////////////////////////////////////////////////////////// 9 4 this 3 720  4 copy 1 718  3 xto 1 672  3 yto 1 672  5 xfrom 1 672  5 yfrom 1 672  6 x_size 1 672  6 y_size 1 672  11 pixel_scale 1 722  
291 0 0 4 267 673 0 0 1004 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::threshold
//       Access: Published
//  Description: Selectively copies each pixel from either one source
//               or another source, depending on the pixel value of
//               the indicated channel of select_image.
//
//               For each pixel (x, y):
//
//               s = select_image.get_channel(x, y, channel). Set this
//               image's (x, y) to:
//
//               lt.get_xel(x, y) if s < threshold, or
//
//               ge.get_xel(x, y) if s >= threshold
//
//               Any of select_image, lt, or ge may be the same
//               PNMImge object as this image, or the same as each
//               other; or they may all be different. All images must
//               be the same size.  As a special case, lt and ge may
//               both be 1x1 images instead of the source image size.
//////////////////////////////////////////////////////////////////// 6 4 this 3 720  12 select_image 1 718  7 channel 1 672  9 threshold 1 722  2 lt 1 718  2 ge 1 718  
292 0 0 4 268 673 0 0 1231 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::fill_distance_inside
//       Access: Published
//  Description: Replaces this image with a grayscale image whose gray
//               channel represents the linear Manhattan distance from
//               the nearest dark pixel in the given mask image, up to
//               the specified radius value (which also becomes the
//               new maxval).  radius may range from 0 to maxmaxval;
//               smaller values will compute faster.  A dark pixel is
//               defined as one whose pixel value is < threshold.
//
//               If shrink_from_border is true, then the mask image is
//               considered to be surrounded by a border of dark
//               pixels; otherwise, the border isn't considered.
//
//               This can be used, in conjunction with threshold, to
//               shrink a mask image inwards by a certain number of
//               pixels.
//
//               The mask image may be the same image as this one, in
//               which case it is destructively modified by this
//               process.
//////////////////////////////////////////////////////////////////// 5 4 this 3 720  4 mask 1 718  9 threshold 1 722  6 radius 1 672  18 shrink_from_border 1 692  
293 0 0 4 269 673 0 0 1030 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::fill_distance_outside
//       Access: Published
//  Description: Replaces this image with a grayscale image whose gray
//               channel represents the linear Manhattan distance from
//               the nearest white pixel in the given mask image, up to
//               the specified radius value (which also becomes the
//               new maxval).  radius may range from 0 to maxmaxval;
//               smaller values will compute faster.  A white pixel is
//               defined as one whose pixel value is >= threshold.
//
//               This can be used, in conjunction with threshold, to
//               grow a mask image outwards by a certain number of
//               pixels.
//
//               The mask image may be the same image as this one, in
//               which case it is destructively modified by this
//               process.
//////////////////////////////////////////////////////////////////// 4 4 this 3 720  4 mask 1 718  9 threshold 1 722  6 radius 1 672  
294 0 0 4 270 673 0 0 537 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::rescale
//       Access: Published
//  Description: Rescales the RGB channel values so that any values in
//               the original image between min_val and max_val are
//               expanded to the range 0 .. 1.  Values below min_val
//               are set to 0, and values above max_val are set to 1.
//               Does not affect the alpha channel, if any.
//////////////////////////////////////////////////////////////////// 3 4 this 3 720  7 min_val 1 722  7 max_val 1 722  
295 0 0 4 271 673 0 0 781 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::render_spot
//       Access: Published
//  Description: Renders a solid-color circle, with a fuzzy edge, into
//               the center of the PNMImage.  If the PNMImage is
//               non-square, this actually renders an ellipse.
//
//               The min_radius and max_radius are in the scale 0..1,
//               where 1.0 means the full width of the image.  If
//               min_radius == max_radius, the edge is sharp (but
//               still antialiased); otherwise, the pixels between
//               min_radius and max_radius are smoothly blended
//               between fg and bg colors.
//////////////////////////////////////////////////////////////////// 5 4 this 3 720  2 fg 1 776  2 bg 1 776  10 min_radius 1 722  10 max_radius 1 722  
296 0 0 4 272 673 0 0 472 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::expand_border
//       Access: Published
//  Description: Expands the image by the indicated number of pixels
//               on each edge.  The new pixels are set to the
//               indicated color.
//
//               If any of the values is negative, this actually crops
//               the image.
//////////////////////////////////////////////////////////////////// 6 4 this 3 720  4 left 1 672  5 right 1 672  6 bottom 1 672  3 top 1 672  5 color 1 776  
297 0 0 4 273 673 0 0 394 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::box_filter
//       Access: Published
//  Description: This flavor of box_filter() will apply the filter
//               over the entire image without resizing or copying;
//               the effect is that of a blur operation.
//////////////////////////////////////////////////////////////////// 2 4 this 3 720  6 radius 1 722  
298 0 0 4 274 673 0 0 404 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::gaussian_filter
//       Access: Published
//  Description: This flavor of gaussian_filter() will apply the filter
//               over the entire image without resizing or copying;
//               the effect is that of a blur operation.
//////////////////////////////////////////////////////////////////// 2 4 this 3 720  6 radius 1 722  
299 0 0 4 275 673 0 0 334 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::unfiltered_stretch_from
//       Access: Published
//  Description: Resizes from the indicated image into this one by
//               performing a nearest-point sample.
//////////////////////////////////////////////////////////////////// 2 4 this 3 720  4 copy 1 718  
300 0 0 4 276 673 0 0 530 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::box_filter_from
//       Access: Public
//  Description: Makes a resized copy of the indicated image into this
//               one using the indicated filter.  The image to be
//               copied is squashed and stretched to match the
//               dimensions of the current image, applying the
//               appropriate filter to perform the stretching.
//////////////////////////////////////////////////////////////////// 3 4 this 3 720  6 radius 1 722  4 copy 1 718  
301 0 0 4 277 673 0 0 535 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::gaussian_filter_from
//       Access: Public
//  Description: Makes a resized copy of the indicated image into this
//               one using the indicated filter.  The image to be
//               copied is squashed and stretched to match the
//               dimensions of the current image, applying the
//               appropriate filter to perform the stretching.
//////////////////////////////////////////////////////////////////// 3 4 this 3 720  6 radius 1 722  4 copy 1 718  
302 0 0 4 278 673 0 0 731 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::quick_filter_from
//       Access: Public
//  Description: Resizes from the given image, with a fixed radius of
//               0.5. This is a very specialized and simple algorithm
//               that doesn't handle dropping below the Nyquist rate
//               very well, but is quite a bit faster than the more
//               general box_filter(), above.  If borders are
//               specified, they will further restrict the size of the
//               resulting image. There's no point in using
//               quick_box_filter() on a single image.
//////////////////////////////////////////////////////////////////// 4 4 this 3 720  4 copy 1 718  7 xborder 1 672  7 yborder 1 672  
303 0 0 4 279 673 0 0 294 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::make_histogram
//       Access: Published
//  Description: Computes a histogram of the colors used in the
//               image.
//////////////////////////////////////////////////////////////////// 2 4 this 3 720  4 hist 1 712  
304 0 0 4 280 673 0 0 322 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::perlin_noise_fill
//       Access: Published
//  Description: Variant of perlin_noise_fill that uses an
//               existing StackedPerlinNoise2 object.
//////////////////////////////////////////////////////////////////// 2 4 this 3 720  6 perlin 1 785  
305 0 0 4 280 673 0 0 556 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::perlin_noise_fill
//       Access: Published
//  Description: Fills the image with a grayscale perlin noise
//               pattern based on the indicated parameters.
//               Uses set_xel to set the grayscale values.
//               The sx and sy parameters are in multiples
//               of the size of this image.
//               See also the PerlinNoise2 class in mathutil.
//////////////////////////////////////////////////////////////////// 5 4 this 3 720  2 sx 1 722  2 sy 1 722  10 table_size 1 672  4 seed 1 787  
306 0 0 4 281 673 0 0 370 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::remix_channels
//       Access: Published
//  Description: Transforms every pixel using the operation
//               (Ro,Go,Bo) = conv.xform_point(Ri,Gi,Bi);
//               Input must be a color image.
//////////////////////////////////////////////////////////////////// 2 4 this 3 720  4 conv 1 788  
307 0 0 4 282 673 0 0 474 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::gamma_correct
//       Access: Published
//  Description: Assuming the image was constructed with a gamma curve
//               of from_gamma in the RGB channels, converts it to an
//               image with a gamma curve of to_gamma in the RGB
//               channels.  Does not affect the alpha channel.
//////////////////////////////////////////////////////////////////// 3 4 this 3 720  10 from_gamma 1 722  8 to_gamma 1 722  
308 0 0 4 283 673 0 0 481 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::gamma_correct_alpha
//       Access: Published
//  Description: Assuming the image was constructed with a gamma curve
//               of from_gamma in the alpha channel, converts it to an
//               image with a gamma curve of to_gamma in the alpha
//               channel.  Does not affect the RGB channels.
//////////////////////////////////////////////////////////////////// 3 4 this 3 720  10 from_gamma 1 722  8 to_gamma 1 722  
309 0 0 4 284 673 0 0 392 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::apply_exponent
//       Access: Published
//  Description: Adjusts each channel of the image by raising the
//               corresponding component value to the indicated
//               exponent, such that L' = L ^ exponent.
//////////////////////////////////////////////////////////////////// 2 4 this 3 720  13 gray_exponent 1 722  
310 0 0 4 284 673 0 0 392 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::apply_exponent
//       Access: Published
//  Description: Adjusts each channel of the image by raising the
//               corresponding component value to the indicated
//               exponent, such that L' = L ^ exponent.
//////////////////////////////////////////////////////////////////// 3 4 this 3 720  13 gray_exponent 1 722  14 alpha_exponent 1 722  
311 0 0 4 284 673 0 0 572 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::apply_exponent
//       Access: Published
//  Description: Adjusts each channel of the image by raising the
//               corresponding component value to the indicated
//               exponent, such that L' = L ^ exponent.  For a
//               grayscale image, the blue_exponent value is used for
//               the grayscale value, and red_exponent and
//               green_exponent are unused.
//////////////////////////////////////////////////////////////////// 4 4 this 3 720  12 red_exponent 1 722  14 green_exponent 1 722  13 blue_exponent 1 722  
312 0 0 4 284 673 0 0 572 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::apply_exponent
//       Access: Published
//  Description: Adjusts each channel of the image by raising the
//               corresponding component value to the indicated
//               exponent, such that L' = L ^ exponent.  For a
//               grayscale image, the blue_exponent value is used for
//               the grayscale value, and red_exponent and
//               green_exponent are unused.
//////////////////////////////////////////////////////////////////// 5 4 this 3 720  12 red_exponent 1 722  14 green_exponent 1 722  13 blue_exponent 1 722  14 alpha_exponent 1 722  
313 0 0 7 285 781 0 0 302 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::get_average_xel
//       Access: Published
//  Description: Returns the average color of all of the pixels
//               in the image.
//////////////////////////////////////////////////////////////////// 1 4 this 3 718  
314 0 0 7 286 784 0 0 333 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::get_average_xel_a
//       Access: Published
//  Description: Returns the average color of all of the pixels
//               in the image, including the alpha channel.
//////////////////////////////////////////////////////////////////// 1 4 this 3 718  
315 0 0 6 287 722 0 0 317 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::get_average_gray
//       Access: Published
//  Description: Returns the average grayscale component of all of
//               the pixels in the image.
//////////////////////////////////////////////////////////////////// 1 4 this 3 718  
316 0 0 4 288 673 0 0 343 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::do_fill_distance
//       Access: Private
//  Description: Recursively fills in the minimum distance measured
//               from a certain set of points into the gray channel.
//////////////////////////////////////////////////////////////////// 4 4 this 3 720  2 xi 1 672  2 yi 1 672  1 d 1 672  
317 0 0 7 304 791 622 0 0 2 4 this 3 720  1 y 1 672  
318 0 0 7 304 792 627 0 0 2 4 this 3 718  1 y 1 672  
319 0 0 7 305 720 516 0 0 1 4 this 3 718  
320 0 0 7 306 720 516 0 0 2 4 this 3 718  5 other 1 776  
321 0 0 7 306 720 516 0 0 2 4 this 3 718  5 other 1 718  
322 0 0 7 307 720 516 0 0 2 4 this 3 718  5 other 1 776  
323 0 0 7 307 720 516 0 0 2 4 this 3 718  5 other 1 718  
324 0 0 7 308 720 516 0 0 2 4 this 3 718  5 other 1 776  
325 0 0 7 308 720 516 0 0 2 4 this 3 718  5 other 1 718  
326 0 0 7 308 720 516 0 0 2 4 this 3 718  10 multiplier 1 722  
327 0 0 6 309 720 0 0 0 2 4 this 3 720  5 other 1 776  
328 0 0 6 309 720 0 0 0 2 4 this 3 720  5 other 1 718  
329 0 0 6 310 720 0 0 0 2 4 this 3 720  5 other 1 776  
330 0 0 6 310 720 0 0 0 2 4 this 3 720  5 other 1 718  
331 0 0 6 311 720 0 0 0 2 4 this 3 720  5 other 1 776  
332 0 0 6 311 720 0 0 0 2 4 this 3 720  5 other 1 718  
333 0 0 6 311 720 0 0 0 2 4 this 3 720  10 multiplier 1 722  
334 0 0 6 290 795 0 0 255 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::Row::size
//       Access: Published
//  Description: Get the number of pixels in the row.
//////////////////////////////////////////////////////////////////// 1 4 this 3 793  
335 0 0 7 291 784 0 0 0 2 4 this 3 793  1 x 1 672  
336 0 0 4 292 673 0 0 376 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::Row::Array Operator
//       Access: Published
//  Description: Set the pixel at the given column in the row.  If
//               the image has no alpha channel, the alpha component
//               is ignored.
//////////////////////////////////////////////////////////////////// 3 4 this 3 791  1 x 1 672  1 v 1 776  
337 0 0 6 293 779 0 0 276 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::Row::Array Operator
//       Access: Published
//  Description: Fetch the pixel at the given column in the row.
//////////////////////////////////////////////////////////////////// 2 4 this 3 791  1 x 1 672  
338 0 0 4 294 673 0 0 274 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::Row::Array Operator
//       Access: Published
//  Description: Set the pixel at the given column in the row.
//////////////////////////////////////////////////////////////////// 3 4 this 3 791  1 x 1 672  1 v 1 710  
339 0 0 6 295 693 0 0 282 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::Row::Array Operator
//       Access: Published
//  Description: Fetch the alpha value at the given column in the row.
//////////////////////////////////////////////////////////////////// 2 4 this 3 793  1 x 1 672  
340 0 0 4 296 673 0 0 280 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::Row::Array Operator
//       Access: Published
//  Description: Set the alpha value at the given column in the row.
//////////////////////////////////////////////////////////////////// 3 4 this 3 791  1 x 1 672  1 v 1 693  
341 0 0 6 299 795 0 0 256 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::CRow::size
//       Access: Published
//  Description: Get the number of pixels in the row.
//////////////////////////////////////////////////////////////////// 1 4 this 3 796  
342 0 0 7 300 784 0 0 0 2 4 this 3 796  1 x 1 672  
343 0 0 7 301 779 0 0 277 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::CRow::Array Operator
//       Access: Published
//  Description: Fetch the pixel at the given column in the row.
//////////////////////////////////////////////////////////////////// 2 4 this 3 796  1 x 1 672  
344 0 0 6 302 693 0 0 283 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::CRow::Array Operator
//       Access: Published
//  Description: Fetch the alpha value at the given column in the row.
//////////////////////////////////////////////////////////////////// 2 4 this 3 796  1 x 1 672  
345 0 0 7 313 798 637 0 896 ////////////////////////////////////////////////////////////////////
//     Function: PNMPainter::Constructor
//       Access: Published
//  Description: The constructor stores a pointer to the PNMImage you
//               pass it, but it does not take ownership of the
//               object; you are responsible for ensuring that the
//               PNMImage does not destruct during the lifetime of the
//               PNMPainter object.
//
//               The xo, yo coordinates specify an optional offset for
//               fill coordinates.  If you are painting with a pattern
//               fill, these specify the virtual coordinates of the
//               upper-left corner of the image, which can allow you
//               to adjust the pattern to line up with nested images,
//               if necessary.
//////////////////////////////////////////////////////////////////// 3 5 image 1 720  2 xo 1 672  2 yo 1 672  
346 0 0 4 315 673 0 0 608 ////////////////////////////////////////////////////////////////////
//     Function: PNMPainter::set_pen
//       Access: Published
//  Description: Specifies a PNMBrush that will be used for drawing
//               lines and edges.  If the brush is a bitmap brush, its
//               image will be smeared pixelwise along the line.
//
//               Unlike the PNMImage passed to the constructor, the
//               PNMPainter will take ownership of the pen.  It is not
//               necessary to keep a separate pointer to it.
//////////////////////////////////////////////////////////////////// 2 4 this 3 798  3 pen 1 775  
347 0 0 7 316 775 0 0 259 ////////////////////////////////////////////////////////////////////
//     Function: PNMPainter::get_pen
//       Access: Published
//  Description: Returns the current pen.  See set_pen().
//////////////////////////////////////////////////////////////////// 1 4 this 3 799  
348 0 0 4 317 673 0 0 639 ////////////////////////////////////////////////////////////////////
//     Function: PNMPainter::set_fill
//       Access: Published
//  Description: Specifies a PNMBrush that will be used for filling
//               in the interiors of objects.  If the brush is a
//               bitmap brush, its image will be tiled throughout the
//               space.
//
//               Unlike the PNMImage passed to the constructor, the
//               PNMPainter will take ownership of the fill brush.  It
//               is not necessary to keep a separate pointer to it.
//////////////////////////////////////////////////////////////////// 2 4 this 3 798  4 fill 1 775  
349 0 0 7 318 775 0 0 268 ////////////////////////////////////////////////////////////////////
//     Function: PNMPainter::get_fill
//       Access: Published
//  Description: Returns the current fill brush.  See set_fill().
//////////////////////////////////////////////////////////////////// 1 4 this 3 799  
350 0 0 4 319 673 0 0 305 ////////////////////////////////////////////////////////////////////
//     Function: PNMPainter::draw_point
//       Access: Published
//  Description: Draws an antialiased point on the PNMImage, using the
//               current pen.
//////////////////////////////////////////////////////////////////// 3 4 this 3 798  1 x 1 722  1 y 1 722  
351 0 0 4 320 673 0 0 303 ////////////////////////////////////////////////////////////////////
//     Function: PNMPainter::draw_line
//       Access: Published
//  Description: Draws an antialiased line on the PNMImage, using the
//               current pen.
//////////////////////////////////////////////////////////////////// 5 4 this 3 798  2 xa 1 722  2 ya 1 722  2 xb 1 722  2 yb 1 722  
352 0 0 4 321 673 0 0 488 ////////////////////////////////////////////////////////////////////
//     Function: PNMPainter::draw_rectangle
//       Access: Published
//  Description: Draws a filled rectangule on the PNMImage, using the
//               current pen for the outline, and the current fill
//               brush for the interior.
//
//               The two coordinates specify any two diagonally
//               opposite corners.
//////////////////////////////////////////////////////////////////// 5 4 this 3 798  2 xa 1 722  2 ya 1 722  2 xb 1 722  2 yb 1 722  
156
645 5 pixel 0 140289 5 pixel 5 pixel 0 0 0 1 353 369 3 801 802 803 9 354 355 356 357 358 359 360 361 362 0 0 0 0 0 0

646 4 gray 0 2105344 4 gray 4 gray 0 0 647 0 0 0 0 0 0 0 0 0 0

647 18 unsigned short int 0 8262 18 unsigned short int 18 unsigned short int 0 1 0 0 0 0 0 0 0 0 0 0 0

648 3 xel 0 2105345 3 xel 3 xel 0 0 645 0 0 0 0 0 0 0 0 0 0

649 11 PNMFileType 0 75777 11 PNMFileType 11 PNMFileType 0 0 0 0 0 0 5 370 371 372 373 374 1 804 0 1 0 650 0 0 0 0 330
////////////////////////////////////////////////////////////////////
//       Class : PNMFileType
// Description : This is the base class of a family of classes that
//               represent particular image file types that PNMImage
//               supports.
////////////////////////////////////////////////////////////////////

650 13 TypedWritable 0 2049 13 TypedWritable 13 TypedWritable 0 0 0 0 0 0 0 0 0 0 0 0 341
////////////////////////////////////////////////////////////////////
//       Class : TypedWritable
// Description : Base class for objects that can be written to and
//               read from Bam files.
//
//               See also TypedObject for detailed instructions.
////////////////////////////////////////////////////////////////////

651 19 PNMFileTypeRegistry 0 26625 19 PNMFileTypeRegistry 19 PNMFileTypeRegistry 0 0 0 0 375 0 7 376 377 378 379 380 381 382 1 805 0 0 0 0 280
////////////////////////////////////////////////////////////////////
//       Class : PNMFileTypeRegistry
// Description : This class maintains the set of all known
//               PNMFileTypes in the universe.
////////////////////////////////////////////////////////////////////

652 14 PNMImageHeader 0 26625 14 PNMImageHeader 14 PNMImageHeader 0 0 0 1 383 385 0 19 384 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 0 0 0 0 7 653 654 655 656 658 660 662 616
////////////////////////////////////////////////////////////////////
//       Class : PNMImageHeader
// Description : This is the base class of PNMImage, PNMReader, and
//               PNMWriter.  It encapsulates all the information
//               associated with an image that describes its size,
//               number of channels, etc; that is, all the information
//               about the image except the image data itself.  It's
//               the sort of information you typically read from the
//               image file's header.
////////////////////////////////////////////////////////////////////

653 9 ColorType 0 794624 25 PNMImageHeader::ColorType 25 PNMImageHeader::ColorType 652 0 0 0 0 0 0 0 0 0 5 10 CT_invalid 26 PNMImageHeader::CT_invalid 0
0 12 CT_grayscale 28 PNMImageHeader::CT_grayscale 0
1 14 CT_two_channel 30 PNMImageHeader::CT_two_channel 0
2 8 CT_color 24 PNMImageHeader::CT_color 0
3 15 CT_four_channel 31 PNMImageHeader::CT_four_channel 0
4 0 198
// This enumerated type indicates the number of channels in the
// image, and also implies an image type.  You can treat it either
// as an integer number of channels or as an enumerated image type.

654 9 PixelSpec 0 403457 25 PNMImageHeader::PixelSpec 25 PNMImageHeader::PixelSpec 652 0 0 1 404 421 0 16 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 0 0 0 0 0 179
// Contains a single pixel specification used in compute_histogram()
// and make_histogram().  Note that pixels are stored by integer
// value, not by floating-point scaled value.

655 14 PixelSpecCount 0 403457 30 PNMImageHeader::PixelSpecCount 30 PNMImageHeader::PixelSpecCount 652 0 0 0 422 0 0 0 0 0 0 0 93
// Associates a pixel specification with an appearance count, for
// use in Histogram, below.

656 7 HistMap 0 2367488 23 PNMImageHeader::HistMap 23 PNMImageHeader::HistMap 652 0 657 0 0 0 0 0 0 0 0 0 0

657 21 map< PixelSpec, int > 0 2048 37 map< PNMImageHeader::PixelSpec, int > 37 map< PNMImageHeader::PixelSpec, int > 0 0 0 0 0 0 0 0 0 0 0 0 0

658 10 PixelCount 0 2367488 26 PNMImageHeader::PixelCount 26 PNMImageHeader::PixelCount 652 0 659 0 0 0 0 0 0 0 0 0 0

659 24 vector< PixelSpecCount > 0 2048 40 vector< PNMImageHeader::PixelSpecCount > 40 vector< PNMImageHeader::PixelSpecCount > 0 0 0 0 0 0 0 0 0 0 0 0 0

660 7 Palette 0 2367488 23 PNMImageHeader::Palette 23 PNMImageHeader::Palette 652 0 661 0 0 0 0 0 0 0 0 0 0

661 19 vector< PixelSpec > 0 2048 35 vector< PNMImageHeader::PixelSpec > 35 vector< PNMImageHeader::PixelSpec > 0 0 0 0 0 0 0 0 0 0 0 0 0

662 9 Histogram 0 403457 25 PNMImageHeader::Histogram 25 PNMImageHeader::Histogram 652 0 0 1 423 428 0 4 424 425 426 427 1 806 0 0 0 0 65
// Used to return a pixel histogram in PNMImage::get_histogram().

663 7 PfmFile 0 141313 7 PfmFile 7 PfmFile 0 0 0 1 429 509 0 79 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 508 0 0 1 0 652 0 0 0 0 355
////////////////////////////////////////////////////////////////////
//       Class : PfmFile
// Description : Defines a pfm file, a 2-d table of floating-point
//               numbers, either 3-component or 1-component, or with a
//               special extension, 2- or 4-component.
////////////////////////////////////////////////////////////////////

664 8 PNMBrush 0 75777 8 PNMBrush 8 PNMBrush 0 0 0 0 0 0 4 510 511 512 513 0 0 1 0 665 0 0 0 1 666 836
////////////////////////////////////////////////////////////////////
//       Class : PNMBrush
// Description : This class is used to control the shape and color of
//               the drawing operations performed by a PNMPainter
//               object.
//
//               Normally, you don't create a PNMBrush directly;
//               instead, use one of the static PNMBrush::make_*()
//               methods provided here.
//
//               A PNMBrush is used to draw the border of a polygon or
//               rectangle, as well as for filling its interior.  When
//               it is used to draw a border, the brush is "smeared"
//               over the border; when it is used to fill the
//               interior, it is tiled through the interior.
////////////////////////////////////////////////////////////////////

665 14 ReferenceCount 0 2049 14 ReferenceCount 14 ReferenceCount 0 0 0 0 0 0 0 0 0 0 0 0 425
////////////////////////////////////////////////////////////////////
//       Class : ReferenceCount
// Description : A base class for all things that want to be
//               reference-counted.  ReferenceCount works in
//               conjunction with PointerTo to automatically delete
//               objects when the last pointer to them goes away.
////////////////////////////////////////////////////////////////////

666 11 BrushEffect 0 794624 21 PNMBrush::BrushEffect 21 PNMBrush::BrushEffect 664 0 0 0 0 0 0 0 0 0 4 6 BE_set 16 PNMBrush::BE_set 0
0 8 BE_blend 18 PNMBrush::BE_blend 0
1 9 BE_darken 19 PNMBrush::BE_darken 0
2 10 BE_lighten 20 PNMBrush::BE_lighten 0
3 0 0

667 8 PNMImage 0 26625 8 PNMImage 8 PNMImage 0 0 0 1 514 516 0 107 515 517 518 519 520 521 522 523 524 525 526 527 528 529 530 531 532 533 534 535 536 537 538 539 540 541 542 543 544 545 546 547 548 549 550 551 552 553 554 555 556 557 558 559 560 561 562 563 564 565 566 567 568 569 570 571 572 573 574 575 576 577 578 579 580 581 582 583 584 585 586 587 588 589 590 591 592 593 594 595 596 597 598 599 600 601 602 603 604 605 606 607 608 609 610 611 612 613 614 628 629 630 631 632 633 634 635 0 0 1 0 652 0 0 0 2 668 669 2116
////////////////////////////////////////////////////////////////////
//       Class : PNMImage
// Description : The name of this class derives from the fact that we
//               originally implemented it as a layer on top of the
//               "pnm library", based on netpbm, which was built to
//               implement pbm, pgm, and pbm files, and is the
//               underlying support of a number of public-domain image
//               file converters.  Nowadays we are no longer derived
//               directly from the pnm library, mainly to allow
//               support of C++ iostreams instead of the C stdio FILE
//               interface.
//
//               Conceptually, a PNMImage is a two-dimensional array
//               of xels, which are the PNM-defined generic pixel
//               type.  Each xel may have a red, green, and blue
//               component, or (if the image is grayscale) a gray
//               component.  The image may be read in, the individual
//               xels manipulated, and written out again, or a black
//               image may be constructed from scratch.
//
//               A PNMImage has a color space and a maxval, the
//               combination of which defines how a floating-point
//               linear color value is encoded as an integer value in
//               memory.  The functions ending in _val operate on
//               encoded colors, whereas the regular ones work with
//               linear floating-point values.  All operations are
//               color space correct unless otherwise specified.
//
//               The image is of size XSize() by YSize() xels,
//               numbered from top to bottom, left to right, beginning
//               at zero.
//
//               Files can be specified by filename, or by an iostream
//               pointer.  The filename "-" refers to stdin or stdout.
//
//               This class is not inherently thread-safe; use it
//               from a single thread or protect access using a mutex.
////////////////////////////////////////////////////////////////////

668 3 Row 0 403457 13 PNMImage::Row 13 PNMImage::Row 667 0 0 0 622 0 7 615 616 617 618 619 620 621 0 0 0 0 0 96
// Provides an accessor for reading or writing the contents of one row
// of the image in-place.

669 4 CRow 0 403457 14 PNMImage::CRow 14 PNMImage::CRow 667 0 0 0 627 0 4 623 624 625 626 0 0 0 0 0 85
// Provides an accessor for reading the contents of one row of the
// image in-place.

670 10 PNMPainter 0 26625 10 PNMPainter 10 PNMPainter 0 0 0 1 636 637 0 7 638 639 640 641 642 643 644 0 0 0 0 0 596
////////////////////////////////////////////////////////////////////
//       Class : PNMPainter
// Description : This class provides a number of convenient methods
//               for painting drawings directly into a PNMImage.
//
//               It stores a pointer to the PNMImage you pass it, but
//               it does not take ownership of the object; you are
//               responsible for ensuring that the PNMImage does not
//               destruct during the lifetime of the PNMPainter
//               object.
////////////////////////////////////////////////////////////////////

671 7 pixel * 0 8576 7 pixel * 7 pixel * 0 0 645 0 0 0 0 0 0 0 0 0 0

672 3 int 0 8194 3 int 3 int 0 1 0 0 0 0 0 0 0 0 0 0 0

673 4 void 0 8194 4 void 4 void 0 6 0 0 0 0 0 0 0 0 0 0 0

674 13 pixel const * 0 8576 13 pixel const * 13 pixel const * 0 0 675 0 0 0 0 0 0 0 0 0 0

675 11 pixel const 0 8832 11 pixel const 11 pixel const 0 0 645 0 0 0 0 0 0 0 0 0 0

676 12 double const 0 8832 12 double const 12 double const 0 0 677 0 0 0 0 0 0 0 0 0 0

677 6 double 0 8194 6 double 6 double 0 3 0 0 0 0 0 0 0 0 0 0 0

678 9 ostream * 0 8576 9 ostream * 9 ostream * 0 0 679 0 0 0 0 0 0 0 0 0 0

679 7 ostream 0 2048 7 ostream 7 ostream 0 0 0 0 0 0 0 0 0 0 0 0 0

680 19 PNMFileType const * 0 8576 19 PNMFileType const * 19 PNMFileType const * 0 0 681 0 0 0 0 0 0 0 0 0 0

681 17 PNMFileType const 0 8832 17 PNMFileType const 17 PNMFileType const 0 0 649 0 0 0 0 0 0 0 0 0 0

682 13 atomic string 0 2 13 atomic string 13 atomic string 0 7 0 0 0 0 0 0 0 0 0 0 0

683 10 TypeHandle 0 2048 10 TypeHandle 10 TypeHandle 0 0 0 0 0 0 0 0 0 0 0 0 1098
////////////////////////////////////////////////////////////////////
//       Class : TypeHandle
// Description : TypeHandle is the identifier used to differentiate
//               C++ class types.  Any C++ classes that inherit from
//               some base class, and must be differentiated at run
//               time, should store a static TypeHandle object that
//               can be queried through a static member function
//               named get_class_type().  Most of the time, it is also
//               desirable to inherit from TypedObject, which provides
//               some virtual functions to return the TypeHandle for a
//               particular instance.
//
//               At its essence, a TypeHandle is simply a unique
//               identifier that is assigned by the TypeRegistry.  The
//               TypeRegistry stores a tree of TypeHandles, so that
//               ancestry of a particular type may be queried, and the
//               type name may be retrieved for run-time display.
////////////////////////////////////////////////////////////////////

684 12 TypeHandle * 0 8576 12 TypeHandle * 12 TypeHandle * 0 0 683 0 0 0 0 0 0 0 0 0 0

685 27 PNMFileTypeRegistry const * 0 8576 27 PNMFileTypeRegistry const * 27 PNMFileTypeRegistry const * 0 0 686 0 0 0 0 0 0 0 0 0 0

686 25 PNMFileTypeRegistry const 0 8832 25 PNMFileTypeRegistry const 25 PNMFileTypeRegistry const 0 0 651 0 0 0 0 0 0 0 0 0 0

687 13 PNMFileType * 0 8576 13 PNMFileType * 13 PNMFileType * 0 0 649 0 0 0 0 0 0 0 0 0 0

688 21 PNMFileTypeRegistry * 0 8576 21 PNMFileTypeRegistry * 21 PNMFileTypeRegistry * 0 0 651 0 0 0 0 0 0 0 0 0 0

689 16 PNMImageHeader * 0 8576 16 PNMImageHeader * 16 PNMImageHeader * 0 0 652 0 0 0 0 0 0 0 0 0 0

690 22 PNMImageHeader const * 0 8576 22 PNMImageHeader const * 22 PNMImageHeader const * 0 0 691 0 0 0 0 0 0 0 0 0 0

691 20 PNMImageHeader const 0 8832 20 PNMImageHeader const 20 PNMImageHeader const 0 0 652 0 0 0 0 0 0 0 0 0 0

692 4 bool 0 8194 4 bool 4 bool 0 4 0 0 0 0 0 0 0 0 0 0 0

693 6 xelval 0 2105344 6 xelval 6 xelval 0 0 646 0 0 0 0 0 0 0 0 0 0

694 10 ColorSpace 0 532480 10 ColorSpace 10 ColorSpace 0 0 0 0 0 0 0 0 0 0 4 14 CS_unspecified 14 CS_unspecified 105
// This value is not a color space, but is used to indicate that
// a color space has not been specified.
0 9 CS_linear 9 CS_linear 388
// CS_linear is not a color space per se, but represents the
// working color space of graphics APIs, which is linearized.  Since
// the conversion from sRGB to linear is defined, one could posit
// that it has the ITU-R BT.709 primaries, but this isn't meaningful
// as modern graphics APIs do not perform color management.
// All colors in Panda3D are linear unless otherwise specified.
1 7 CS_sRGB 7 CS_sRGB 107
// This is the standard, gamma-2.2-corrected sRGB color space, as
// used by the majority of image formats.
2 8 CS_scRGB 8 CS_scRGB 110
// This is a 16-bit encoded linear color space capable of encoding
// color values in the -0.5...7.4999 range.
3 0 0

695 16 Filename const * 0 8576 16 Filename const * 16 Filename const * 0 0 696 0 0 0 0 0 0 0 0 0 0

696 14 Filename const 0 8832 14 Filename const 14 Filename const 0 0 697 0 0 0 0 0 0 0 0 0 0

697 8 Filename 0 2048 8 Filename 8 Filename 0 0 0 0 0 0 0 0 0 0 0 0 869
////////////////////////////////////////////////////////////////////
//       Class : Filename
// Description : The name of a file, such as a texture file or an Egg
//               file.  Stores the full pathname, and includes
//               functions for extracting out the directory prefix
//               part and the file extension and stuff.
//
//               A Filename is also aware of the mapping between the
//               Unix-like filename convention we use internally, and
//               the local OS's specific filename convention, and it
//               knows how to perform basic OS-specific I/O, like
//               testing for file existence and searching a
//               searchpath, as well as the best way to open an
//               fstream for reading or writing.
////////////////////////////////////////////////////////////////////

698 9 istream * 0 8576 9 istream * 9 istream * 0 0 699 0 0 0 0 0 0 0 0 0 0

699 7 istream 0 2048 7 istream 7 istream 0 0 0 0 0 0 0 0 0 0 0 0 0

700 11 PNMReader * 0 8576 11 PNMReader * 11 PNMReader * 0 0 701 0 0 0 0 0 0 0 0 0 0

701 9 PNMReader 0 1050624 9 PNMReader 9 PNMReader 0 0 0 0 0 0 0 0 0 0 0 0 458
////////////////////////////////////////////////////////////////////
//       Class : PNMReader
// Description : This is an abstract base class that defines the
//               interface for reading image files of various types.
//               Any particular image file type that can be read must
//               define a class that inherits from PNMReader to read
//               it.
////////////////////////////////////////////////////////////////////

702 11 PNMWriter * 0 8576 11 PNMWriter * 11 PNMWriter * 0 0 703 0 0 0 0 0 0 0 0 0 0

703 9 PNMWriter 0 1050624 9 PNMWriter 9 PNMWriter 0 0 0 0 0 0 0 0 0 0 0 0 462
////////////////////////////////////////////////////////////////////
//       Class : PNMWriter
// Description : This is an abstract base class that defines the
//               interface for writing image files of various types.
//               Any particular image file type that can be written
//               must define a class that inherits from PNMWriter to
//               write it.
////////////////////////////////////////////////////////////////////

704 8 string * 0 8576 8 string * 8 string * 0 0 705 0 0 0 0 0 0 0 0 0 0

705 6 string 0 2105344 6 string 6 string 0 0 706 0 0 0 0 0 0 0 0 0 0

706 20 basic_string< char > 0 2048 20 basic_string< char > 20 basic_string< char > 0 0 0 0 0 0 0 0 0 0 0 0 0

707 17 PixelSpec const * 0 8576 33 PNMImageHeader::PixelSpec const * 33 PNMImageHeader::PixelSpec const * 0 0 708 0 0 0 0 0 0 0 0 0 0

708 15 PixelSpec const 0 8832 31 PNMImageHeader::PixelSpec const 31 PNMImageHeader::PixelSpec const 0 0 654 0 0 0 0 0 0 0 0 0 0

709 11 PixelSpec * 0 8576 27 PNMImageHeader::PixelSpec * 27 PNMImageHeader::PixelSpec * 0 0 654 0 0 0 0 0 0 0 0 0 0

710 11 xel const * 0 8576 11 xel const * 11 xel const * 0 0 711 0 0 0 0 0 0 0 0 0 0

711 9 xel const 0 8832 9 xel const 9 xel const 0 0 648 0 0 0 0 0 0 0 0 0 0

712 11 Histogram * 0 8576 27 PNMImageHeader::Histogram * 27 PNMImageHeader::Histogram * 0 0 662 0 0 0 0 0 0 0 0 0 0

713 17 Histogram const * 0 8576 33 PNMImageHeader::Histogram const * 33 PNMImageHeader::Histogram const * 0 0 714 0 0 0 0 0 0 0 0 0 0

714 15 Histogram const 0 8832 31 PNMImageHeader::Histogram const 31 PNMImageHeader::Histogram const 0 0 662 0 0 0 0 0 0 0 0 0 0

715 9 PfmFile * 0 8576 9 PfmFile * 9 PfmFile * 0 0 663 0 0 0 0 0 0 0 0 0 0

716 15 PfmFile const * 0 8576 15 PfmFile const * 15 PfmFile const * 0 0 717 0 0 0 0 0 0 0 0 0 0

717 13 PfmFile const 0 8832 13 PfmFile const 13 PfmFile const 0 0 663 0 0 0 0 0 0 0 0 0 0

718 16 PNMImage const * 0 8576 16 PNMImage const * 16 PNMImage const * 0 0 719 0 0 0 0 0 0 0 0 0 0

719 14 PNMImage const 0 8832 14 PNMImage const 14 PNMImage const 0 0 667 0 0 0 0 0 0 0 0 0 0

720 10 PNMImage * 0 8576 10 PNMImage * 10 PNMImage * 0 0 667 0 0 0 0 0 0 0 0 0 0

721 10 PN_float32 0 2105344 10 PN_float32 10 PN_float32 0 0 722 0 0 0 0 0 0 0 0 0 0

722 5 float 0 8194 5 float 5 float 0 2 0 0 0 0 0 0 0 0 0 0 0

723 16 LPoint2f const * 0 8576 16 LPoint2f const * 16 LPoint2f const * 0 0 724 0 0 0 0 0 0 0 0 0 0

724 14 LPoint2f const 0 8832 14 LPoint2f const 14 LPoint2f const 0 0 725 0 0 0 0 0 0 0 0 0 0

725 8 LPoint2f 0 2048 8 LPoint2f 8 LPoint2f 0 0 0 0 0 0 0 0 0 0 0 0 219
////////////////////////////////////////////////////////////////////
//       Class : LPoint2
// Description : This is a two-component point in space.
////////////////////////////////////////////////////////////////////

726 18 LVecBase2d const * 0 8576 18 LVecBase2d const * 18 LVecBase2d const * 0 0 727 0 0 0 0 0 0 0 0 0 0

727 16 LVecBase2d const 0 8832 16 LVecBase2d const 16 LVecBase2d const 0 0 728 0 0 0 0 0 0 0 0 0 0

728 10 LVecBase2d 0 2048 10 LVecBase2d 10 LVecBase2d 0 0 0 0 0 0 0 0 0 0 0 0 263
////////////////////////////////////////////////////////////////////
//       Class : LVecBase2
// Description : This is the base class for all two-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

729 18 LVecBase2f const * 0 8576 18 LVecBase2f const * 18 LVecBase2f const * 0 0 730 0 0 0 0 0 0 0 0 0 0

730 16 LVecBase2f const 0 8832 16 LVecBase2f const 16 LVecBase2f const 0 0 731 0 0 0 0 0 0 0 0 0 0

731 10 LVecBase2f 0 2048 10 LVecBase2f 10 LVecBase2f 0 0 0 0 0 0 0 0 0 0 0 0 263
////////////////////////////////////////////////////////////////////
//       Class : LVecBase2
// Description : This is the base class for all two-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

732 10 LPoint2f * 0 8576 10 LPoint2f * 10 LPoint2f * 0 0 725 0 0 0 0 0 0 0 0 0 0

733 16 LPoint3f const * 0 8576 16 LPoint3f const * 16 LPoint3f const * 0 0 734 0 0 0 0 0 0 0 0 0 0

734 14 LPoint3f const 0 8832 14 LPoint3f const 14 LPoint3f const 0 0 735 0 0 0 0 0 0 0 0 0 0

735 8 LPoint3f 0 2048 8 LPoint3f 8 LPoint3f 0 0 0 0 0 0 0 0 0 0 0 0 596
////////////////////////////////////////////////////////////////////
//       Class : LPoint3
// Description : This is a three-component point in space (as opposed
//               to a three-component vector, which represents a
//               direction and a distance).  Some of the methods are
//               slightly different between LPoint3 and LVector3; in
//               particular, subtraction of two points yields a
//               vector, while addition of a vector and a point yields
//               a point.
////////////////////////////////////////////////////////////////////

736 18 LVecBase3d const * 0 8576 18 LVecBase3d const * 18 LVecBase3d const * 0 0 737 0 0 0 0 0 0 0 0 0 0

737 16 LVecBase3d const 0 8832 16 LVecBase3d const 16 LVecBase3d const 0 0 738 0 0 0 0 0 0 0 0 0 0

738 10 LVecBase3d 0 2048 10 LVecBase3d 10 LVecBase3d 0 0 0 0 0 0 0 0 0 0 0 0 265
////////////////////////////////////////////////////////////////////
//       Class : LVecBase3
// Description : This is the base class for all three-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

739 18 LVecBase3f const * 0 8576 18 LVecBase3f const * 18 LVecBase3f const * 0 0 740 0 0 0 0 0 0 0 0 0 0

740 16 LVecBase3f const 0 8832 16 LVecBase3f const 16 LVecBase3f const 0 0 741 0 0 0 0 0 0 0 0 0 0

741 10 LVecBase3f 0 2048 10 LVecBase3f 10 LVecBase3f 0 0 0 0 0 0 0 0 0 0 0 0 265
////////////////////////////////////////////////////////////////////
//       Class : LVecBase3
// Description : This is the base class for all three-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

742 10 LPoint3f * 0 8576 10 LPoint3f * 10 LPoint3f * 0 0 735 0 0 0 0 0 0 0 0 0 0

743 16 LPoint4f const * 0 8576 16 LPoint4f const * 16 LPoint4f const * 0 0 744 0 0 0 0 0 0 0 0 0 0

744 14 LPoint4f const 0 8832 14 LPoint4f const 14 LPoint4f const 0 0 745 0 0 0 0 0 0 0 0 0 0

745 8 LPoint4f 0 2048 8 LPoint4f 8 LPoint4f 0 0 0 0 0 0 0 0 0 0 0 0 220
////////////////////////////////////////////////////////////////////
//       Class : LPoint4
// Description : This is a four-component point in space.
////////////////////////////////////////////////////////////////////

746 18 LVecBase4d const * 0 8576 18 LVecBase4d const * 18 LVecBase4d const * 0 0 747 0 0 0 0 0 0 0 0 0 0

747 16 LVecBase4d const 0 8832 16 LVecBase4d const 16 LVecBase4d const 0 0 748 0 0 0 0 0 0 0 0 0 0

748 10 LVecBase4d 0 2048 10 LVecBase4d 10 LVecBase4d 0 0 0 0 0 0 0 0 0 0 0 0 265
////////////////////////////////////////////////////////////////////
//       Class : LVecBase4
// Description : This is the base class for all three-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

749 18 LVecBase4f const * 0 8576 18 LVecBase4f const * 18 LVecBase4f const * 0 0 750 0 0 0 0 0 0 0 0 0 0

750 16 LVecBase4f const 0 8832 16 LVecBase4f const 16 LVecBase4f const 0 0 751 0 0 0 0 0 0 0 0 0 0

751 10 LVecBase4f 0 2048 10 LVecBase4f 10 LVecBase4f 0 0 0 0 0 0 0 0 0 0 0 0 265
////////////////////////////////////////////////////////////////////
//       Class : LVecBase4
// Description : This is the base class for all three-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

752 10 LPoint4f * 0 8576 10 LPoint4f * 10 LPoint4f * 0 0 745 0 0 0 0 0 0 0 0 0 0

753 12 LVecBase3f * 0 8576 12 LVecBase3f * 12 LVecBase3f * 0 0 741 0 0 0 0 0 0 0 0 0 0

754 12 LVecBase4d * 0 8576 12 LVecBase4d * 12 LVecBase4d * 0 0 748 0 0 0 0 0 0 0 0 0 0

755 12 LVecBase4f * 0 8576 12 LVecBase4f * 12 LVecBase4f * 0 0 751 0 0 0 0 0 0 0 0 0 0

756 16 LPoint4d const * 0 8576 16 LPoint4d const * 16 LPoint4d const * 0 0 757 0 0 0 0 0 0 0 0 0 0

757 14 LPoint4d const 0 8832 14 LPoint4d const 14 LPoint4d const 0 0 758 0 0 0 0 0 0 0 0 0 0

758 8 LPoint4d 0 2048 8 LPoint4d 8 LPoint4d 0 0 0 0 0 0 0 0 0 0 0 0 220
////////////////////////////////////////////////////////////////////
//       Class : LPoint4
// Description : This is a four-component point in space.
////////////////////////////////////////////////////////////////////

759 17 LMatrix4d const * 0 8576 17 LMatrix4d const * 17 LMatrix4d const * 0 0 760 0 0 0 0 0 0 0 0 0 0

760 15 LMatrix4d const 0 8832 15 LMatrix4d const 15 LMatrix4d const 0 0 761 0 0 0 0 0 0 0 0 0 0

761 9 LMatrix4d 0 2048 9 LMatrix4d 9 LMatrix4d 0 0 0 0 0 0 0 3 807 808 809 0 0 0 0 215
////////////////////////////////////////////////////////////////////
//       Class : LMatrix4
// Description : This is a 4-by-4 transform matrix.
////////////////////////////////////////////////////////////////////

762 17 LMatrix4f const * 0 8576 17 LMatrix4f const * 17 LMatrix4f const * 0 0 763 0 0 0 0 0 0 0 0 0 0

763 15 LMatrix4f const 0 8832 15 LMatrix4f const 15 LMatrix4f const 0 0 764 0 0 0 0 0 0 0 0 0 0

764 9 LMatrix4f 0 2048 9 LMatrix4f 9 LMatrix4f 0 0 0 0 0 0 0 3 810 811 812 0 0 0 0 215
////////////////////////////////////////////////////////////////////
//       Class : LMatrix4
// Description : This is a 4-by-4 transform matrix.
////////////////////////////////////////////////////////////////////

765 18 BoundingHexahedron 0 2048 18 BoundingHexahedron 18 BoundingHexahedron 0 0 0 0 0 0 0 2 813 814 0 0 0 0 556
////////////////////////////////////////////////////////////////////
//       Class : BoundingHexahedron
// Description : This defines a bounding convex hexahedron.  It is
//               typically used to represent a frustum, but may
//               represent any enclosing convex hexahedron, including
//               simple boxes.  However, if all you want is an
//               axis-aligned bounding box, you may be better off with
//               the simpler BoundingBox class.
////////////////////////////////////////////////////////////////////

766 16 LPoint2d const * 0 8576 16 LPoint2d const * 16 LPoint2d const * 0 0 767 0 0 0 0 0 0 0 0 0 0

767 14 LPoint2d const 0 8832 14 LPoint2d const 14 LPoint2d const 0 0 768 0 0 0 0 0 0 0 0 0 0

768 8 LPoint2d 0 2048 8 LPoint2d 8 LPoint2d 0 0 0 0 0 0 0 0 0 0 0 0 219
////////////////////////////////////////////////////////////////////
//       Class : LPoint2
// Description : This is a two-component point in space.
////////////////////////////////////////////////////////////////////

769 20 BoundingHexahedron * 0 8576 20 BoundingHexahedron * 20 BoundingHexahedron * 0 0 765 0 0 0 0 0 0 0 0 0 0

770 10 PyObject * 0 8576 10 PyObject * 10 PyObject * 0 0 771 0 0 0 0 0 0 0 0 0 0

771 8 PyObject 0 2105344 8 PyObject 8 PyObject 0 0 772 0 0 0 0 0 0 0 0 0 0

772 7 _object 0 1024 7 _object 7 _object 0 0 0 0 0 0 0 0 0 0 0 0 0

773 11 Py_buffer * 0 8576 11 Py_buffer * 11 Py_buffer * 0 0 774 0 0 0 0 0 0 0 0 0 0

774 9 Py_buffer 0 1024 9 Py_buffer 9 Py_buffer 0 0 0 0 0 0 0 0 0 0 0 0 0

775 10 PNMBrush * 0 8576 10 PNMBrush * 10 PNMBrush * 0 0 664 0 0 0 0 0 0 0 0 0 0

776 15 LColorf const * 0 8576 15 LColorf const * 15 LColorf const * 0 0 777 0 0 0 0 0 0 0 0 0 0

777 13 LColorf const 0 8832 13 LColorf const 13 LColorf const 0 0 778 0 0 0 0 0 0 0 0 0 0

778 7 LColorf 0 2105344 7 LColorf 7 LColorf 0 0 751 0 0 0 0 0 0 0 0 0 0

779 5 xel * 0 8576 5 xel * 5 xel * 0 0 648 0 0 0 0 0 0 0 0 0 0

780 10 LRGBColorf 0 2105344 10 LRGBColorf 10 LRGBColorf 0 0 741 0 0 0 0 0 0 0 0 0 0

781 12 LRGBColorf * 0 8576 12 LRGBColorf * 12 LRGBColorf * 0 0 780 0 0 0 0 0 0 0 0 0 0

782 18 LRGBColorf const * 0 8576 18 LRGBColorf const * 18 LRGBColorf const * 0 0 783 0 0 0 0 0 0 0 0 0 0

783 16 LRGBColorf const 0 8832 16 LRGBColorf const 16 LRGBColorf const 0 0 780 0 0 0 0 0 0 0 0 0 0

784 9 LColorf * 0 8576 9 LColorf * 9 LColorf * 0 0 778 0 0 0 0 0 0 0 0 0 0

785 21 StackedPerlinNoise2 * 0 8576 21 StackedPerlinNoise2 * 21 StackedPerlinNoise2 * 0 0 786 0 0 0 0 0 0 0 0 0 0

786 19 StackedPerlinNoise2 0 2048 19 StackedPerlinNoise2 19 StackedPerlinNoise2 0 0 0 0 0 0 0 0 0 0 0 0 359
////////////////////////////////////////////////////////////////////
//       Class : StackedPerlinNoise2
// Description : Implements a multi-layer PerlinNoise, with one or
//               more high-frequency noise functions added to a
//               lower-frequency base noise function.
////////////////////////////////////////////////////////////////////

787 17 unsigned long int 0 8214 17 unsigned long int 17 unsigned long int 0 1 0 0 0 0 0 0 0 0 0 0 0

788 16 LMatrix4 const * 0 8576 16 LMatrix4 const * 16 LMatrix4 const * 0 0 789 0 0 0 0 0 0 0 0 0 0

789 14 LMatrix4 const 0 8832 14 LMatrix4 const 14 LMatrix4 const 0 0 790 0 0 0 0 0 0 0 0 0 0

790 8 LMatrix4 0 2105344 8 LMatrix4 8 LMatrix4 0 0 764 0 0 0 0 0 0 0 0 0 0

791 5 Row * 0 8576 15 PNMImage::Row * 15 PNMImage::Row * 0 0 668 0 0 0 0 0 0 0 0 0 0

792 6 CRow * 0 8576 16 PNMImage::CRow * 16 PNMImage::CRow * 0 0 669 0 0 0 0 0 0 0 0 0 0

793 11 Row const * 0 8576 21 PNMImage::Row const * 21 PNMImage::Row const * 0 0 794 0 0 0 0 0 0 0 0 0 0

794 9 Row const 0 8832 19 PNMImage::Row const 19 PNMImage::Row const 0 0 668 0 0 0 0 0 0 0 0 0 0

795 6 size_t 0 2105344 6 size_t 6 size_t 0 0 787 0 0 0 0 0 0 0 0 0 0

796 12 CRow const * 0 8576 22 PNMImage::CRow const * 22 PNMImage::CRow const * 0 0 797 0 0 0 0 0 0 0 0 0 0

797 10 CRow const 0 8832 20 PNMImage::CRow const 20 PNMImage::CRow const 0 0 669 0 0 0 0 0 0 0 0 0 0

798 12 PNMPainter * 0 8576 12 PNMPainter * 12 PNMPainter * 0 0 670 0 0 0 0 0 0 0 0 0 0

799 18 PNMPainter const * 0 8576 18 PNMPainter const * 18 PNMPainter const * 0 0 800 0 0 0 0 0 0 0 0 0 0

800 16 PNMPainter const 0 8832 16 PNMPainter const 16 PNMPainter const 0 0 670 0 0 0 0 0 0 0 0 0 0

0
3
801 1 b 0 6 646 363 364 8 pixel::b 0

802 1 g 0 6 646 365 366 8 pixel::g 0

803 1 r 0 6 646 367 368 8 pixel::r 0

11
804 0 0 25 14 get_extensions 18 get_num_extensions 13 get_extension 
805 0 0 32 9 get_types 13 get_num_types 8 get_type 
806 0 0 91 10 get_pixels 14 get_num_pixels 9 get_pixel 
807 0 0 574 8 get_rows 4 size 7 get_row 
808 0 0 574 8 get_cols 4 size 7 get_col 
809 0 0 574 9 get_row3s 4 size 8 get_row3 
810 0 0 578 8 get_rows 4 size 7 get_row 
811 0 0 578 8 get_cols 4 size 7 get_col 
812 0 0 578 9 get_row3s 4 size 8 get_row3 
813 0 0 589 10 get_points 14 get_num_points 9 get_point 
814 0 0 589 10 get_planes 14 get_num_planes 9 get_plane 
