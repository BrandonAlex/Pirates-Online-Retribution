1436948369
2 3
12 libp3collide 4 dlaq 12 panda3d.core 
261
270 20 get_collision_origin 0 6 531 36 CollisionSolid::get_collision_origin 0 1 1 0
69
virtual LPoint3 CollisionSolid::get_collision_origin(void) const = 0;

271 12 set_tangible 0 4 531 28 CollisionSolid::set_tangible 0 1 2 588
////////////////////////////////////////////////////////////////////
//     Function: CollisionSolid::set_tangible
//       Access: Published
//  Description: Sets the current state of the 'tangible' flag.  Set
//               this true to make the solid tangible, so that a
//               CollisionHandlerPusher will not allow another object
//               to intersect it, or false to make it intangible, so
//               that a CollisionHandlerPusher will ignore it except
//               to throw an event.
////////////////////////////////////////////////////////////////////
56
inline void CollisionSolid::set_tangible(bool tangible);

272 11 is_tangible 0 4 531 27 CollisionSolid::is_tangible 0 1 3 541
////////////////////////////////////////////////////////////////////
//     Function: CollisionSolid::is_tangible
//       Access: Published
//  Description: Returns whether the solid is considered 'tangible' or
//               not.  An intangible solid has no effect in a
//               CollisionHandlerPusher (except to throw an event);
//               it's useful for defining 'trigger' planes and
//               spheres, that cause an effect when passed through.
////////////////////////////////////////////////////////////////////
52
inline bool CollisionSolid::is_tangible(void) const;

273 20 set_effective_normal 0 4 531 36 CollisionSolid::set_effective_normal 0 1 4 720
////////////////////////////////////////////////////////////////////
//     Function: CollisionSolid::set_effective_normal
//       Access: Published
//  Description: Records a false normal for this CollisionSolid that
//               will be reported by the collision system with all
//               collisions into it, instead of its actual normal.
//               This is useful as a workaround for the problem of an
//               avatar wanting to stand on a sloping ground; by
//               storing a false normal, the ground appears to be
//               perfectly level, and the avatar does not tend to
//               slide down it.
////////////////////////////////////////////////////////////////////
83
inline void CollisionSolid::set_effective_normal(LVector3 const &effective_normal);

274 22 clear_effective_normal 0 4 531 38 CollisionSolid::clear_effective_normal 0 1 5 315
////////////////////////////////////////////////////////////////////
//     Function: CollisionSolid::clear_effective_normal
//       Access: Published
//  Description: Removes the normal previously set by
//               set_effective_normal().
////////////////////////////////////////////////////////////////////
57
inline void CollisionSolid::clear_effective_normal(void);

275 20 has_effective_normal 0 4 531 36 CollisionSolid::has_effective_normal 0 1 6 337
////////////////////////////////////////////////////////////////////
//     Function: CollisionSolid::has_effective_normal
//       Access: Published
//  Description: Returns true if a special normal was set by
//               set_effective_normal(), false otherwise.
////////////////////////////////////////////////////////////////////
61
inline bool CollisionSolid::has_effective_normal(void) const;

276 20 get_effective_normal 0 4 531 36 CollisionSolid::get_effective_normal 0 1 7 401
////////////////////////////////////////////////////////////////////
//     Function: CollisionSolid::get_effective_normal
//       Access: Published
//  Description: Returns the normal that was set by
//               set_effective_normal().  It is an error to call this
//               unless has_effective_normal() returns true.
////////////////////////////////////////////////////////////////////
72
inline LVector3 const &CollisionSolid::get_effective_normal(void) const;

277 28 set_respect_effective_normal 0 4 531 44 CollisionSolid::set_respect_effective_normal 0 1 8 605
////////////////////////////////////////////////////////////////////
//     Function: CollisionSolid::set_respect_effective_normal
//       Access: Published
//  Description: This is only meaningful for CollisionSolids that will
//               be added to a traverser as colliders.  It is normally
//               true, but if set false, it means that this particular
//               solid does not care about the "effective" normal of
//               other solids it meets, but rather always uses the
//               true normal.
////////////////////////////////////////////////////////////////////
88
inline void CollisionSolid::set_respect_effective_normal(bool respect_effective_normal);

278 28 get_respect_effective_normal 0 4 531 44 CollisionSolid::get_respect_effective_normal 0 1 9 279
////////////////////////////////////////////////////////////////////
//     Function: CollisionSolid::get_respect_effective_normal
//       Access: Published
//  Description: See set_respect_effective_normal().
////////////////////////////////////////////////////////////////////
69
inline bool CollisionSolid::get_respect_effective_normal(void) const;

279 10 get_bounds 0 4 531 26 CollisionSolid::get_bounds 0 1 10 262
////////////////////////////////////////////////////////////////////
//     Function: CollisionSolid::get_bounds
//       Access: Protected
//  Description: Returns the solid's bounding volume.
////////////////////////////////////////////////////////////////////
72
ConstPointerTo< BoundingVolume > CollisionSolid::get_bounds(void) const;

280 10 set_bounds 0 4 531 26 CollisionSolid::set_bounds 0 1 11 262
////////////////////////////////////////////////////////////////////
//     Function: CollisionSolid::set_bounds
//       Access: Protected
//  Description: Returns the solid's bounding volume.
////////////////////////////////////////////////////////////////////
71
void CollisionSolid::set_bounds(BoundingVolume const &bounding_volume);

281 6 output 0 6 531 22 CollisionSolid::output 0 1 12 227
////////////////////////////////////////////////////////////////////
//     Function: CollisionSolid::output
//       Access: Public, Virtual
//  Description:
////////////////////////////////////////////////////////////////////
56
virtual void CollisionSolid::output(ostream &out) const;

282 5 write 0 6 531 21 CollisionSolid::write 0 1 13 226
////////////////////////////////////////////////////////////////////
//     Function: CollisionSolid::write
//       Access: Public, Virtual
//  Description:
////////////////////////////////////////////////////////////////////
77
virtual void CollisionSolid::write(ostream &out, int indent_level = 0) const;

283 14 get_class_type 0 4 531 30 CollisionSolid::get_class_type 0 1 14 0
55
static TypeHandle CollisionSolid::get_class_type(void);

284 12 CollisionBox 0 4 533 26 CollisionBox::CollisionBox 0 2 15 16 1150
////////////////////////////////////////////////////////////////////
//     Function: CollisionBox::Constructor
//       Access: Public
//  Description: Create the Box by giving a Center and distances of
//               of each of the sides of box from the Center.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: CollisionBox::Constructor
//       Access: Public
//  Description: Create the Box by Specifying the Diagonal Points
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: CollisionBox::Default constructor
//       Access: Protected
//  Description: Creates an invalid Box.  Only used when reading
//               from a bam file.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: CollisionBox::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
177
inline CollisionBox::CollisionBox(LPoint3 const &center, PN_stdfloat x, PN_stdfloat y, PN_stdfloat z);
inline CollisionBox::CollisionBox(LPoint3 const &min, LPoint3 const &max);

285 14 get_num_points 0 4 533 28 CollisionBox::get_num_points 0 1 17 285
////////////////////////////////////////////////////////////////////
//     Function: CollisionBox::get_num_points
//       Access: Published
//  Description: Returns 8: the number of vertices of a rectangular solid.
////////////////////////////////////////////////////////////////////
52
inline int CollisionBox::get_num_points(void) const;

286 14 get_point_aabb 0 4 533 28 CollisionBox::get_point_aabb 0 1 18 284
////////////////////////////////////////////////////////////////////
//     Function: CollisionBox::get_point_aabb
//       Access: Published
//  Description: Returns the nth vertex of the Axis Aligned Bounding Box.
////////////////////////////////////////////////////////////////////
57
inline LPoint3 CollisionBox::get_point_aabb(int n) const;

287 9 get_point 0 4 533 23 CollisionBox::get_point 0 1 19 257
////////////////////////////////////////////////////////////////////
//     Function: CollisionBox::get_point
//       Access: Published
//  Description: Returns the nth vertex of the OBB.
////////////////////////////////////////////////////////////////////
52
inline LPoint3 CollisionBox::get_point(int n) const;

288 14 get_num_planes 0 4 533 28 CollisionBox::get_num_planes 0 1 20 282
////////////////////////////////////////////////////////////////////
//     Function: CollisionBox::get_num_planes
//       Access: Published
//  Description: Returns 6: the number of faces of a rectangular solid.
////////////////////////////////////////////////////////////////////
52
inline int CollisionBox::get_num_planes(void) const;

289 9 set_plane 0 4 533 23 CollisionBox::set_plane 0 1 21 269
////////////////////////////////////////////////////////////////////
//     Function: CollisionBox::set_plane
//       Access: Published
//  Description: Creates the nth face of the rectangular solid.
////////////////////////////////////////////////////////////////////
51
inline LPlane CollisionBox::set_plane(int n) const;

290 9 get_plane 0 4 533 23 CollisionBox::get_plane 0 1 22 269
////////////////////////////////////////////////////////////////////
//     Function: CollisionBox::get_plane
//       Access: Published
//  Description: Returns the nth face of the rectangular solid.
////////////////////////////////////////////////////////////////////
51
inline LPlane CollisionBox::get_plane(int n) const;

291 10 set_center 0 4 533 24 CollisionBox::set_center 0 2 23 24 448
////////////////////////////////////////////////////////////////////
//     Function: CollisionBox::set_center
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: CollisionBox::set_center
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
143
inline void CollisionBox::set_center(LPoint3 const &center);
inline void CollisionBox::set_center(PN_stdfloat x, PN_stdfloat y, PN_stdfloat z);

292 10 get_center 0 4 533 24 CollisionBox::get_center 0 1 25 223
////////////////////////////////////////////////////////////////////
//     Function: CollisionBox::get_center
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
59
inline LPoint3 const &CollisionBox::get_center(void) const;

293 10 get_radius 0 4 533 24 CollisionBox::get_radius 0 1 26 223
////////////////////////////////////////////////////////////////////
//     Function: CollisionBox::get_radius
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
56
inline PN_stdfloat CollisionBox::get_radius(void) const;

294 14 get_class_type 0 4 533 28 CollisionBox::get_class_type 0 1 27 0
53
static TypeHandle CollisionBox::get_class_type(void);

295 13 ~CollisionBox 0 4 533 27 CollisionBox::~CollisionBox 0 0 0
34
CollisionBox::~CollisionBox(void);

296 14 get_class_type 0 4 534 32 CollisionHandler::get_class_type 0 1 28 0
57
static TypeHandle CollisionHandler::get_class_type(void);

297 17 ~CollisionHandler 0 4 534 35 CollisionHandler::~CollisionHandler 0 0 0
42
CollisionHandler::~CollisionHandler(void);

298 13 CollisionNode 0 4 536 28 CollisionNode::CollisionNode 0 1 29 454
////////////////////////////////////////////////////////////////////
//     Function: CollisionNode::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: CollisionNode::Copy Constructor
//       Access: Protected
//  Description:
////////////////////////////////////////////////////////////////////
49
CollisionNode::CollisionNode(string const &name);

299 16 set_collide_mask 0 4 536 31 CollisionNode::set_collide_mask 0 1 30 332
////////////////////////////////////////////////////////////////////
//     Function: CollisionNode::set_collide_mask
//       Access: Published
//  Description: Simultaneously sets both the "from" and "into"
//               CollideMask values to the same thing.
////////////////////////////////////////////////////////////////////
62
inline void CollisionNode::set_collide_mask(CollideMask mask);

300 21 set_from_collide_mask 0 4 536 36 CollisionNode::set_from_collide_mask 0 1 31 509
////////////////////////////////////////////////////////////////////
//     Function: CollisionNode::set_from_collide_mask
//       Access: Published
//  Description: Sets the "from" CollideMask.  In order for a
//               collision to be detected from this object into
//               another object, the intersection of this object's
//               "from" mask and the other object's "into" mask must
//               be nonzero.
////////////////////////////////////////////////////////////////////
60
void CollisionNode::set_from_collide_mask(CollideMask mask);

301 21 set_into_collide_mask 0 4 536 36 CollisionNode::set_into_collide_mask 0 1 32 509
////////////////////////////////////////////////////////////////////
//     Function: CollisionNode::set_into_collide_mask
//       Access: Published
//  Description: Sets the "into" CollideMask.  In order for a
//               collision to be detected from another object into
//               this object, the intersection of the other object's
//               "from" mask and this object's "into" mask must be
//               nonzero.
////////////////////////////////////////////////////////////////////
67
inline void CollisionNode::set_into_collide_mask(CollideMask mask);

302 21 get_from_collide_mask 0 4 536 36 CollisionNode::get_from_collide_mask 0 1 33 520
////////////////////////////////////////////////////////////////////
//     Function: CollisionNode::get_from_collide_mask
//       Access: Published
//  Description: Returns the current "from" CollideMask.  In order for
//               a collision to be detected from this object into
//               another object, the intersection of this object's
//               "from" mask and the other object's "into" mask must
//               be nonzero.
////////////////////////////////////////////////////////////////////
68
inline CollideMask CollisionNode::get_from_collide_mask(void) const;

303 21 get_into_collide_mask 0 4 536 36 CollisionNode::get_into_collide_mask 0 1 34 520
////////////////////////////////////////////////////////////////////
//     Function: CollisionNode::get_into_collide_mask
//       Access: Published
//  Description: Returns the current "into" CollideMask.  In order for
//               a collision to be detected from another object into
//               this object, the intersection of the other object's
//               "from" mask and this object's "into" mask must be
//               nonzero.
////////////////////////////////////////////////////////////////////
68
inline CollideMask CollisionNode::get_into_collide_mask(void) const;

304 12 clear_solids 0 4 536 27 CollisionNode::clear_solids 0 1 35 260
////////////////////////////////////////////////////////////////////
//     Function: CollisionNode::clear_solids
//       Access: Published
//  Description: Removes all solids from the node.
////////////////////////////////////////////////////////////////////
46
inline void CollisionNode::clear_solids(void);

305 14 get_num_solids 0 4 536 29 CollisionNode::get_num_solids 0 1 36 228
////////////////////////////////////////////////////////////////////
//     Function: CollisionNode::get_num_solids
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
53
inline int CollisionNode::get_num_solids(void) const;

306 9 get_solid 0 4 536 24 CollisionNode::get_solid 0 1 37 223
////////////////////////////////////////////////////////////////////
//     Function: CollisionNode::get_solid
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
78
inline ConstPointerTo< CollisionSolid > CollisionNode::get_solid(int n) const;

307 12 modify_solid 0 4 536 27 CollisionNode::modify_solid 0 1 38 226
////////////////////////////////////////////////////////////////////
//     Function: CollisionNode::modify_solid
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
70
inline PointerTo< CollisionSolid > CollisionNode::modify_solid(int n);

308 9 set_solid 0 4 536 24 CollisionNode::set_solid 0 1 39 268
////////////////////////////////////////////////////////////////////
//     Function: CollisionNode::set_solid
//       Access: Published
//  Description: Replaces the solid with the indicated index.
////////////////////////////////////////////////////////////////////
67
inline void CollisionNode::set_solid(int n, CollisionSolid *solid);

309 12 remove_solid 0 4 536 27 CollisionNode::remove_solid 0 1 40 340
////////////////////////////////////////////////////////////////////
//     Function: CollisionNode::remove_solid
//       Access: Published
//  Description: Removes the solid with the indicated index.  This
//               will shift all subsequent indices down by one.
////////////////////////////////////////////////////////////////////
47
inline void CollisionNode::remove_solid(int n);

310 9 add_solid 0 4 536 24 CollisionNode::add_solid 0 1 41 365
////////////////////////////////////////////////////////////////////
//     Function: CollisionNode::add_solid
//       Access: Published
//  Description: Adds the indicated solid to the node.  Returns the
//               index of the new solid within the node's list of
//               solids.
////////////////////////////////////////////////////////////////////
65
inline int CollisionNode::add_solid(CollisionSolid const *solid);

311 17 get_collider_sort 0 4 536 32 CollisionNode::get_collider_sort 0 1 42 350
////////////////////////////////////////////////////////////////////
//     Function: CollisionNode::get_collider_sort
//       Access: Published
//  Description: Returns the collider_sort value that has been set for
//               this particular node.  See set_collider_sort().
////////////////////////////////////////////////////////////////////
56
inline int CollisionNode::get_collider_sort(void) const;

312 17 set_collider_sort 0 4 536 32 CollisionNode::set_collider_sort 0 1 43 977
////////////////////////////////////////////////////////////////////
//     Function: CollisionNode::set_collider_sort
//       Access: Published
//  Description: Sets a particular collider_sort value on this node.
//               This controls the order in which colliders (that is,
//               "from nodes") are grouped together for the collision
//               traversal.
//
//               If there are 32 or fewer colliders added to any
//               particular CollisionTraverser, then this value has no
//               meaning.  It is only useful if there are many
//               colliders, which may force the CollisionTraverser to
//               make multiple passes through the data; in that case,
//               it may be a useful optimization to group colliders
//               that have similar bounding volumes together (by
//               giving them similar sort values).
////////////////////////////////////////////////////////////////////
55
inline void CollisionNode::set_collider_sort(int sort);

313 24 get_default_collide_mask 0 4 536 39 CollisionNode::get_default_collide_mask 0 1 44 333
////////////////////////////////////////////////////////////////////
//     Function: CollisionNode::get_default_collide_mask
//       Access: Published, Static
//  Description: Returns the default into_collide_mask assigned to new
//               CollisionNodes.
////////////////////////////////////////////////////////////////////
72
static inline CollideMask CollisionNode::get_default_collide_mask(void);

314 14 get_class_type 0 4 536 29 CollisionNode::get_class_type 0 1 45 0
54
static TypeHandle CollisionNode::get_class_type(void);

315 18 CollisionTraverser 0 4 538 38 CollisionTraverser::CollisionTraverser 0 1 46 230
////////////////////////////////////////////////////////////////////
//     Function: CollisionTraverser::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
69
CollisionTraverser::CollisionTraverser(string const &name = "ctrav");

316 19 ~CollisionTraverser 0 4 538 39 CollisionTraverser::~CollisionTraverser 0 0 229
////////////////////////////////////////////////////////////////////
//     Function: CollisionTraverser::Destructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
46
CollisionTraverser::~CollisionTraverser(void);

317 26 set_respect_prev_transform 0 4 538 46 CollisionTraverser::set_respect_prev_transform 0 1 47 712
////////////////////////////////////////////////////////////////////
//     Function: CollisionTraverser::set_respect_prev_transform
//       Access: Published
//  Description: Sets the flag that indicates whether the
//               prev_transform stored on a node (as updated via
//               set_fluid_pos(), etc.) is respected to calculate
//               collisions.  If this is true, certain types of
//               collision tests will be enhanced by the information
//               about objects in motion.  If this is false, objects
//               are always considered to be static.  The default is
//               false.
////////////////////////////////////////////////////////////////////
70
inline void CollisionTraverser::set_respect_prev_transform(bool flag);

318 26 get_respect_prev_transform 0 4 538 46 CollisionTraverser::get_respect_prev_transform 0 1 48 445
////////////////////////////////////////////////////////////////////
//     Function: CollisionTraverser::get_respect_prev_transform
//       Access: Published
//  Description: Returns the flag that indicates whether the
//               prev_transform stored on a node is respected to
//               calculate collisions.  See
//               set_respect_prev_transform().
////////////////////////////////////////////////////////////////////
71
inline bool CollisionTraverser::get_respect_prev_transform(void) const;

319 12 add_collider 0 4 538 32 CollisionTraverser::add_collider 0 1 49 779
////////////////////////////////////////////////////////////////////
//     Function: CollisionTraverser::add_collider
//       Access: Published
//  Description: Adds a new CollisionNode, representing an object that
//               will be tested for collisions into other objects,
//               along with the handler that will serve each detected
//               collision.  Each CollisionNode may be served by only
//               one handler at a time, but a given handler may serve
//               many CollisionNodes.
//
//               The handler that serves a particular node may be
//               changed from time to time by calling add_collider()
//               again on the same node.
////////////////////////////////////////////////////////////////////
91
void CollisionTraverser::add_collider(NodePath const &collider, CollisionHandler *handler);

320 15 remove_collider 0 4 538 35 CollisionTraverser::remove_collider 0 1 50 545
////////////////////////////////////////////////////////////////////
//     Function: CollisionTraverser::remove_collider
//       Access: Published
//  Description: Removes the collider (and its associated handler)
//               from the set of CollisionNodes that will be tested
//               each frame for collisions into other objects.
//               Returns true if the definition was found and removed,
//               false if it wasn't present to begin with.
////////////////////////////////////////////////////////////////////
67
bool CollisionTraverser::remove_collider(NodePath const &collider);

321 12 has_collider 0 4 538 32 CollisionTraverser::has_collider 0 1 51 397
////////////////////////////////////////////////////////////////////
//     Function: CollisionTraverser::has_collider
//       Access: Published
//  Description: Returns true if the indicated node is current in the
//               set of nodes that will be tested each frame for
//               collisions into other objects.
////////////////////////////////////////////////////////////////////
70
bool CollisionTraverser::has_collider(NodePath const &collider) const;

322 17 get_num_colliders 0 4 538 37 CollisionTraverser::get_num_colliders 0 1 52 348
////////////////////////////////////////////////////////////////////
//     Function: CollisionTraverser::get_num_colliders
//       Access: Published
//  Description: Returns the number of CollisionNodes that have been
//               added to the traverser via add_collider().
////////////////////////////////////////////////////////////////////
54
int CollisionTraverser::get_num_colliders(void) const;

323 12 get_collider 0 4 538 32 CollisionTraverser::get_collider 0 1 53 335
////////////////////////////////////////////////////////////////////
//     Function: CollisionTraverser::get_collider
//       Access: Published
//  Description: Returns the nth CollisionNode that has been
//               added to the traverser via add_collider().
////////////////////////////////////////////////////////////////////
55
NodePath CollisionTraverser::get_collider(int n) const;

324 11 get_handler 0 4 538 31 CollisionTraverser::get_handler 0 1 54 417
////////////////////////////////////////////////////////////////////
//     Function: CollisionTraverser::get_handler
//       Access: Published
//  Description: Returns the handler that is currently assigned to
//               serve the indicated collision node, or NULL if the
//               node is not on the traverser's set of active nodes.
////////////////////////////////////////////////////////////////////
82
CollisionHandler *CollisionTraverser::get_handler(NodePath const &collider) const;

325 15 clear_colliders 0 4 538 35 CollisionTraverser::clear_colliders 0 1 55 328
////////////////////////////////////////////////////////////////////
//     Function: CollisionTraverser::clear_colliders
//       Access: Published
//  Description: Completely empties the set of collision nodes and
//               their associated handlers.
////////////////////////////////////////////////////////////////////
47
void CollisionTraverser::clear_colliders(void);

326 8 traverse 0 4 538 28 CollisionTraverser::traverse 0 1 56 227
////////////////////////////////////////////////////////////////////
//     Function: CollisionTraverser::traverse
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
56
void CollisionTraverser::traverse(NodePath const &root);

327 12 set_recorder 0 4 538 32 CollisionTraverser::set_recorder 0 1 57 1220
////////////////////////////////////////////////////////////////////
//     Function: CollisionTraverser::set_recorder
//       Access: Published
//  Description: Uses the indicated CollisionRecorder object to start
//               recording the intersection tests made by each
//               subsequent call to traverse() on this object.  A
//               particular CollisionRecorder object can only record
//               one traverser at a time; if this object has already
//               been assigned to another traverser, that assignment
//               is broken.
//
//               This is intended to be used in a debugging mode to
//               try to determine what work is being performed by the
//               collision traversal.  Usually, attaching a recorder
//               will impose significant runtime overhead.
//
//               This does not transfer ownership of the
//               CollisionRecorder pointer; maintenance of that
//               remains the caller's responsibility.  If the
//               CollisionRecorder is destructed, it will cleanly
//               remove itself from the traverser.
////////////////////////////////////////////////////////////////////
67
void CollisionTraverser::set_recorder(CollisionRecorder *recorder);

328 12 has_recorder 0 4 538 32 CollisionTraverser::has_recorder 0 1 58 372
////////////////////////////////////////////////////////////////////
//     Function: CollisionTraverser::has_recorder
//       Access: Published
//  Description: Returns true if the CollisionTraverser has a
//               CollisionRecorder object currently assigned, false
//               otherwise.
////////////////////////////////////////////////////////////////////
57
inline bool CollisionTraverser::has_recorder(void) const;

329 12 get_recorder 0 4 538 32 CollisionTraverser::get_recorder 0 1 59 334
////////////////////////////////////////////////////////////////////
//     Function: CollisionTraverser::get_recorder
//       Access: Published
//  Description: Returns the CollisionRecorder currently assigned, or
//               NULL if no recorder is assigned.
////////////////////////////////////////////////////////////////////
71
inline CollisionRecorder *CollisionTraverser::get_recorder(void) const;

330 14 clear_recorder 0 4 538 34 CollisionTraverser::clear_recorder 0 1 60 343
////////////////////////////////////////////////////////////////////
//     Function: CollisionTraverser::clear_recorder
//       Access: Published
//  Description: Removes the CollisionRecorder from the traverser and
//               restores normal low-overhead operation.
////////////////////////////////////////////////////////////////////
53
inline void CollisionTraverser::clear_recorder(void);

331 15 show_collisions 0 4 538 35 CollisionTraverser::show_collisions 0 1 61 600
////////////////////////////////////////////////////////////////////
//     Function: CollisionTraverser::show_collisions
//       Access: Published
//  Description: This is a high-level function to create a
//               CollisionVisualizer object to render the collision
//               tests performed by this traverser.  The supplied root
//               should be any node in the scene graph; typically, the
//               top node (e.g. render).  The CollisionVisualizer will
//               be attached to this node.
////////////////////////////////////////////////////////////////////
79
CollisionVisualizer *CollisionTraverser::show_collisions(NodePath const &root);

332 15 hide_collisions 0 4 538 35 CollisionTraverser::hide_collisions 0 1 62 310
////////////////////////////////////////////////////////////////////
//     Function: CollisionTraverser::hide_collisions
//       Access: Published
//  Description: Undoes the effect of a previous call to
//               show_collisions().
////////////////////////////////////////////////////////////////////
47
void CollisionTraverser::hide_collisions(void);

333 6 output 0 4 538 26 CollisionTraverser::output 0 1 63 225
////////////////////////////////////////////////////////////////////
//     Function: CollisionTraverser::output
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
52
void CollisionTraverser::output(ostream &out) const;

334 5 write 0 4 538 25 CollisionTraverser::write 0 1 64 224
////////////////////////////////////////////////////////////////////
//     Function: CollisionTraverser::write
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
69
void CollisionTraverser::write(ostream &out, int indent_level) const;

335 14 get_class_type 0 4 538 34 CollisionTraverser::get_class_type 0 1 65 0
59
static TypeHandle CollisionTraverser::get_class_type(void);

336 6 output 0 4 540 25 CollisionRecorder::output 0 1 66 222
////////////////////////////////////////////////////////////////////
//     Function: CollisionRecorder::output
//       Access: Public
//  Description: 
////////////////////////////////////////////////////////////////////
51
void CollisionRecorder::output(ostream &out) const;

337 14 get_class_type 0 4 540 33 CollisionRecorder::get_class_type 0 1 67 0
58
static TypeHandle CollisionRecorder::get_class_type(void);

338 8 get_from 0 4 542 24 CollisionEntry::get_from 0 1 68 331
////////////////////////////////////////////////////////////////////
//     Function: CollisionEntry::get_from
//       Access: Published
//  Description: Returns the CollisionSolid pointer for the particular
//               solid that triggered this collision.
////////////////////////////////////////////////////////////////////
66
inline CollisionSolid const *CollisionEntry::get_from(void) const;

339 8 has_into 0 4 542 24 CollisionEntry::has_into 0 1 69 578
////////////////////////////////////////////////////////////////////
//     Function: CollisionEntry::has_into
//       Access: Published
//  Description: Returns true if the "into" solid is, in fact, a
//               CollisionSolid, and its pointer is known (in which
//               case get_into() may be called to retrieve it).  If
//               this returns false, the collision was detected into a
//               GeomNode, and there is no CollisionSolid pointer to
//               be retrieved.
////////////////////////////////////////////////////////////////////
49
inline bool CollisionEntry::has_into(void) const;

340 8 get_into 0 4 542 24 CollisionEntry::get_into 0 1 70 515
////////////////////////////////////////////////////////////////////
//     Function: CollisionEntry::get_into
//       Access: Published
//  Description: Returns the CollisionSolid pointer for the particular
//               solid was collided into.  This pointer might be NULL
//               if the collision was into a piece of visible
//               geometry, instead of a normal CollisionSolid
//               collision; see has_into().
////////////////////////////////////////////////////////////////////
66
inline CollisionSolid const *CollisionEntry::get_into(void) const;

341 13 get_from_node 0 4 542 29 CollisionEntry::get_from_node 0 1 71 445
////////////////////////////////////////////////////////////////////
//     Function: CollisionEntry::get_from_node
//       Access: Published
//  Description: Returns the node that contains the CollisionSolid
//               that triggered this collision.  This will be a node
//               that has been added to a CollisionTraverser via
//               add_collider().
////////////////////////////////////////////////////////////////////
64
inline CollisionNode *CollisionEntry::get_from_node(void) const;

342 13 get_into_node 0 4 542 29 CollisionEntry::get_into_node 0 1 72 532
////////////////////////////////////////////////////////////////////
//     Function: CollisionEntry::get_into_node
//       Access: Published
//  Description: Returns the node that contains the CollisionSolid
//               that was collided into.  This returns a PandaNode
//               pointer instead of something more specific, because
//               it might be either a CollisionNode or a GeomNode.
//
//               Also see get_into_node_path().
////////////////////////////////////////////////////////////////////
60
inline PandaNode *CollisionEntry::get_into_node(void) const;

343 18 get_from_node_path 0 4 542 34 CollisionEntry::get_from_node_path 0 1 73 509
////////////////////////////////////////////////////////////////////
//     Function: CollisionEntry::get_from_node_path
//       Access: Published
//  Description: Returns the NodePath that represents the
//               CollisionNode that contains the CollisionSolid that
//               triggered this collision.  This will be a NodePath
//               that has been added to a CollisionTraverser via
//               add_collider().
////////////////////////////////////////////////////////////////////
63
inline NodePath CollisionEntry::get_from_node_path(void) const;

344 18 get_into_node_path 0 4 542 34 CollisionEntry::get_into_node_path 0 1 74 651
////////////////////////////////////////////////////////////////////
//     Function: CollisionEntry::get_into_node_path
//       Access: Published
//  Description: Returns the NodePath that represents the specific
//               CollisionNode or GeomNode instance that was collided
//               into.  This is the same node returned by
//               get_into_node(), represented as a NodePath; however,
//               it may be more useful because the NodePath can
//               resolve the particular instance of the node, if there
//               is more than one.
////////////////////////////////////////////////////////////////////
63
inline NodePath CollisionEntry::get_into_node_path(void) const;

345 5 set_t 0 4 542 21 CollisionEntry::set_t 0 1 75 309
////////////////////////////////////////////////////////////////////
//     Function: CollisionEntry::set_t
//       Access: Published
//  Description: Sets a time value for this collision relative to
//               other CollisionEntries
////////////////////////////////////////////////////////////////////
49
inline void CollisionEntry::set_t(PN_stdfloat t);

346 5 get_t 0 4 542 21 CollisionEntry::get_t 0 1 76 310
////////////////////////////////////////////////////////////////////
//     Function: CollisionEntry::set_t
//       Access: Published
//  Description: returns time value for this collision relative to
//               other CollisionEntries
////////////////////////////////////////////////////////////////////
53
inline PN_stdfloat CollisionEntry::get_t(void) const;

347 8 collided 0 4 542 24 CollisionEntry::collided 0 1 77 446
////////////////////////////////////////////////////////////////////
//     Function: CollisionEntry::collided
//       Access: Published
//  Description: returns true if this represents an actual collision
//               as opposed to a potential collision, needed for
//               iterative collision resolution where path of
//               collider changes mid-frame
////////////////////////////////////////////////////////////////////
49
inline bool CollisionEntry::collided(void) const;

348 14 reset_collided 0 4 542 30 CollisionEntry::reset_collided 0 1 78 264
////////////////////////////////////////////////////////////////////
//     Function: CollisionEntry::reset_collided
//       Access: Published
//  Description: prepare for another collision test
////////////////////////////////////////////////////////////////////
49
inline void CollisionEntry::reset_collided(void);

349 26 get_respect_prev_transform 0 4 542 42 CollisionEntry::get_respect_prev_transform 0 1 79 479
////////////////////////////////////////////////////////////////////
//     Function: CollisionEntry::get_respect_prev_transform
//       Access: Published
//  Description: Returns true if the collision was detected by a
//               CollisionTraverser whose respect_prev_transform
//               flag was set true, meaning we should consider motion
//               significant in evaluating collisions.
////////////////////////////////////////////////////////////////////
67
inline bool CollisionEntry::get_respect_prev_transform(void) const;

350 17 set_surface_point 0 4 542 33 CollisionEntry::set_surface_point 0 1 80 445
////////////////////////////////////////////////////////////////////
//     Function: CollisionEntry::set_surface_point
//       Access: Published
//  Description: Stores the point, on the surface of the "into"
//               object, at which a collision is detected.
//
//               This point is specified in the coordinate space of
//               the "into" object.
////////////////////////////////////////////////////////////////////
68
inline void CollisionEntry::set_surface_point(LPoint3 const &point);

351 18 set_surface_normal 0 4 542 34 CollisionEntry::set_surface_normal 0 1 81 439
////////////////////////////////////////////////////////////////////
//     Function: CollisionEntry::set_surface_normal
//       Access: Published
//  Description: Stores the surface normal of the "into" object at the
//               point of the intersection.
//
//               This normal is specified in the coordinate space of
//               the "into" object.
////////////////////////////////////////////////////////////////////
71
inline void CollisionEntry::set_surface_normal(LVector3 const &normal);

352 18 set_interior_point 0 4 542 34 CollisionEntry::set_interior_point 0 1 82 682
////////////////////////////////////////////////////////////////////
//     Function: CollisionEntry::set_interior_point
//       Access: Published
//  Description: Stores the point, within the interior of the "into"
//               object, which represents the depth to which the
//               "from" object has penetrated.  This can also be
//               described as the intersection point on the surface of
//               the "from" object (which is inside the "into"
//               object).
//
//               This point is specified in the coordinate space of
//               the "into" object.
////////////////////////////////////////////////////////////////////
69
inline void CollisionEntry::set_interior_point(LPoint3 const &point);

353 17 has_surface_point 0 4 542 33 CollisionEntry::has_surface_point 0 1 83 441
////////////////////////////////////////////////////////////////////
//     Function: CollisionEntry::has_surface_point
//       Access: Published
//  Description: Returns true if the surface point has been specified,
//               false otherwise.  See get_surface_point().  Some
//               types of collisions may not compute the surface
//               point.
////////////////////////////////////////////////////////////////////
58
inline bool CollisionEntry::has_surface_point(void) const;

354 18 has_surface_normal 0 4 542 34 CollisionEntry::has_surface_normal 0 1 84 445
////////////////////////////////////////////////////////////////////
//     Function: CollisionEntry::has_surface_normal
//       Access: Published
//  Description: Returns true if the surface normal has been specified,
//               false otherwise.  See get_surface_normal().  Some
//               types of collisions may not compute the surface
//               normal.
////////////////////////////////////////////////////////////////////
59
inline bool CollisionEntry::has_surface_normal(void) const;

355 18 has_interior_point 0 4 542 34 CollisionEntry::has_interior_point 0 1 85 445
////////////////////////////////////////////////////////////////////
//     Function: CollisionEntry::has_interior_point
//       Access: Published
//  Description: Returns true if the interior point has been specified,
//               false otherwise.  See get_interior_point().  Some
//               types of collisions may not compute the interior
//               point.
////////////////////////////////////////////////////////////////////
59
inline bool CollisionEntry::has_interior_point(void) const;

356 15 set_contact_pos 0 4 542 31 CollisionEntry::set_contact_pos 0 1 86 455
////////////////////////////////////////////////////////////////////
//     Function: CollisionEntry::set_contact_pos
//       Access: Published
//  Description: Stores the position of the "from" object at the
//               instant at which the collision is first detected.
//
//               This position is specified in the coordinate space of
//               the "into" object.
////////////////////////////////////////////////////////////////////
64
inline void CollisionEntry::set_contact_pos(LPoint3 const &pos);

357 18 set_contact_normal 0 4 542 34 CollisionEntry::set_contact_normal 0 1 87 425
////////////////////////////////////////////////////////////////////
//     Function: CollisionEntry::set_contact_normal
//       Access: Published
//  Description: Stores the surface normal of the "into" object at the
//               contact pos.
//
//               This normal is specified in the coordinate space of
//               the "into" object.
////////////////////////////////////////////////////////////////////
71
inline void CollisionEntry::set_contact_normal(LVector3 const &normal);

358 15 has_contact_pos 0 4 542 31 CollisionEntry::has_contact_pos 0 1 88 438
////////////////////////////////////////////////////////////////////
//     Function: CollisionEntry::has_contact_pos
//       Access: Published
//  Description: Returns true if the contact position has been specified,
//               false otherwise.  See get_contact_pos().  Some
//               types of collisions may not compute the contact
//               pos.
////////////////////////////////////////////////////////////////////
56
inline bool CollisionEntry::has_contact_pos(void) const;

359 18 has_contact_normal 0 4 542 34 CollisionEntry::has_contact_normal 0 1 89 445
////////////////////////////////////////////////////////////////////
//     Function: CollisionEntry::has_contact_normal
//       Access: Published
//  Description: Returns true if the contact normal has been specified,
//               false otherwise.  See get_contact_normal().  Some
//               types of collisions may not compute the contact
//               normal.
////////////////////////////////////////////////////////////////////
59
inline bool CollisionEntry::has_contact_normal(void) const;

360 17 get_surface_point 0 4 542 33 CollisionEntry::get_surface_point 0 1 90 638
////////////////////////////////////////////////////////////////////
//     Function: CollisionEntry::get_surface_point
//       Access: Published
//  Description: Returns the point, on the surface of the "into"
//               object, at which a collision is detected.  This can
//               be thought of as the first point of intersection.
//               However the contact point is the actual first point of
//               intersection.
//
//               The point will be converted into whichever coordinate
//               space the caller specifies.
////////////////////////////////////////////////////////////////////
71
LPoint3 CollisionEntry::get_surface_point(NodePath const &space) const;

361 18 get_surface_normal 0 4 542 34 CollisionEntry::get_surface_normal 0 1 91 465
////////////////////////////////////////////////////////////////////
//     Function: CollisionEntry::get_surface_normal
//       Access: Published
//  Description: Returns the surface normal of the "into" object at
//               the point at which a collision is detected.
//
//               The normal will be converted into whichever coordinate
//               space the caller specifies.
////////////////////////////////////////////////////////////////////
73
LVector3 CollisionEntry::get_surface_normal(NodePath const &space) const;

362 18 get_interior_point 0 4 542 34 CollisionEntry::get_interior_point 0 1 92 772
////////////////////////////////////////////////////////////////////
//     Function: CollisionEntry::get_interior_point
//       Access: Published
//  Description: Returns the point, within the interior of the "into"
//               object, which represents the depth to which the
//               "from" object has penetrated.  This can also be
//               described as the intersection point on the surface of
//               the "from" object (which is inside the "into"
//               object).  It can be thought of as the deepest point
//               of intersection.
//
//               The point will be converted into whichever coordinate
//               space the caller specifies.
////////////////////////////////////////////////////////////////////
72
LPoint3 CollisionEntry::get_interior_point(NodePath const &space) const;

363 7 get_all 0 4 542 23 CollisionEntry::get_all 0 1 93 515
////////////////////////////////////////////////////////////////////
//     Function: CollisionEntry::get_all
//       Access: Published
//  Description: Simultaneously transforms the surface point, surface
//               normal, and interior point of the collision into the
//               indicated coordinate space.
//
//               Returns true if all three properties are available,
//               or false if any one of them is not.
////////////////////////////////////////////////////////////////////
133
bool CollisionEntry::get_all(NodePath const &space, LPoint3 &surface_point, LVector3 &surface_normal, LPoint3 &interior_point) const;

364 15 get_contact_pos 0 4 542 31 CollisionEntry::get_contact_pos 0 1 94 462
////////////////////////////////////////////////////////////////////
//     Function: CollisionEntry::get_contact_pos
//       Access: Published
//  Description: Returns the position of the "from" object at the instant
//               that a collision is first detected.
//
//               The position will be converted into whichever coordinate
//               space the caller specifies.
////////////////////////////////////////////////////////////////////
69
LPoint3 CollisionEntry::get_contact_pos(NodePath const &space) const;

365 18 get_contact_normal 0 4 542 34 CollisionEntry::get_contact_normal 0 1 95 443
////////////////////////////////////////////////////////////////////
//     Function: CollisionEntry::get_contact_normal
//       Access: Published
//  Description: Returns the surface normal of the "into" object at
//               the contact position.
//
//               The normal will be converted into whichever coordinate
//               space the caller specifies.
////////////////////////////////////////////////////////////////////
73
LVector3 CollisionEntry::get_contact_normal(NodePath const &space) const;

366 20 get_all_contact_info 0 4 542 36 CollisionEntry::get_all_contact_info 0 1 96 514
////////////////////////////////////////////////////////////////////
//     Function: CollisionEntry::get_all_contact_info
//       Access: Published
//  Description: Simultaneously transforms the contact position and
//               contact normal of the collision into the
//               indicated coordinate space.
//
//               Returns true if all three properties are available,
//               or false if any one of them is not.
////////////////////////////////////////////////////////////////////
119
bool CollisionEntry::get_all_contact_info(NodePath const &space, LPoint3 &contact_pos, LVector3 &contact_normal) const;

367 6 output 0 4 542 22 CollisionEntry::output 0 1 97 222
////////////////////////////////////////////////////////////////////
//     Function: CollisionEntry::output
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
48
void CollisionEntry::output(ostream &out) const;

368 5 write 0 4 542 21 CollisionEntry::write 0 1 98 221
////////////////////////////////////////////////////////////////////
//     Function: CollisionEntry::write
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
69
void CollisionEntry::write(ostream &out, int indent_level = 0) const;

369 14 get_class_type 0 4 542 30 CollisionEntry::get_class_type 0 1 99 0
55
static TypeHandle CollisionEntry::get_class_type(void);

370 15 ~CollisionEntry 0 4 542 31 CollisionEntry::~CollisionEntry 0 0 0
38
CollisionEntry::~CollisionEntry(void);

371 14 CollisionPlane 0 4 544 30 CollisionPlane::CollisionPlane 0 2 100 101 853
////////////////////////////////////////////////////////////////////
//     Function: CollisionPlane::Default Constructor
//       Access: Protected
//  Description: This is only for the convenience of CollisionPolygon.
//               Normally, you should not attempt to create an
//               uninitialized CollisionPlane.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: CollisionPlane::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: CollisionPlane::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
126
inline CollisionPlane::CollisionPlane(LPlane const &plane);
inline CollisionPlane::CollisionPlane(CollisionPlane const &copy);

372 10 get_normal 0 4 544 26 CollisionPlane::get_normal 0 1 102 225
////////////////////////////////////////////////////////////////////
//     Function: CollisionPlane::get_normal
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
55
inline LVector3 CollisionPlane::get_normal(void) const;

373 13 dist_to_plane 0 4 544 29 CollisionPlane::dist_to_plane 0 1 103 228
////////////////////////////////////////////////////////////////////
//     Function: CollisionPlane::dist_to_plane
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
77
inline PN_stdfloat CollisionPlane::dist_to_plane(LPoint3 const &point) const;

374 9 set_plane 0 4 544 25 CollisionPlane::set_plane 0 1 104 224
////////////////////////////////////////////////////////////////////
//     Function: CollisionPlane::set_plane
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
59
inline void CollisionPlane::set_plane(LPlane const &plane);

375 9 get_plane 0 4 544 25 CollisionPlane::get_plane 0 1 105 224
////////////////////////////////////////////////////////////////////
//     Function: CollisionPlane::get_plane
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
59
inline LPlane const &CollisionPlane::get_plane(void) const;

376 4 flip 0 4 544 20 CollisionPlane::flip 0 1 106 266
////////////////////////////////////////////////////////////////////
//     Function: CollisionPlane::flip
//       Access: Published
//  Description: Convenience method to flip the plane in-place.
////////////////////////////////////////////////////////////////////
39
inline void CollisionPlane::flip(void);

377 14 get_class_type 0 4 544 30 CollisionPlane::get_class_type 0 1 107 0
55
static TypeHandle CollisionPlane::get_class_type(void);

378 15 ~CollisionPlane 0 4 544 31 CollisionPlane::~CollisionPlane 0 0 0
38
CollisionPlane::~CollisionPlane(void);

379 18 CollisionFloorMesh 0 4 545 38 CollisionFloorMesh::CollisionFloorMesh 0 1 108 632
////////////////////////////////////////////////////////////////////
//     Function: CollisionPlane::Default Constructor
//       Access: Protected
//  Description: This is only for the convenience of CollisionPolygon.
//               Normally, you should not attempt to create an
//               uninitialized CollisionPlane.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: CollisionFloorMesh::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
52
inline CollisionFloorMesh::CollisionFloorMesh(void);

380 10 add_vertex 0 4 545 30 CollisionFloorMesh::add_vertex 0 1 109 266
////////////////////////////////////////////////////////////////////
//     Function: CollisionFloorMesh::add_vertex
//       Access: Published
//  Description: store away a vertex to index against
////////////////////////////////////////////////////////////////////
64
inline void CollisionFloorMesh::add_vertex(LPoint3 const &vert);

381 12 add_triangle 0 4 545 32 CollisionFloorMesh::add_triangle 0 1 110 263
////////////////////////////////////////////////////////////////////
//     Function: CollisionFloorMesh::add_triangle
//       Access: Published
//  Description: store a triangle for processing
////////////////////////////////////////////////////////////////////
101
void CollisionFloorMesh::add_triangle(unsigned int pointA, unsigned int pointB, unsigned int pointC);

382 16 get_num_vertices 0 4 545 36 CollisionFloorMesh::get_num_vertices 0 1 111 0
69
inline unsigned int CollisionFloorMesh::get_num_vertices(void) const;

383 10 get_vertex 0 4 545 30 CollisionFloorMesh::get_vertex 0 1 112 0
79
inline LPoint3 const &CollisionFloorMesh::get_vertex(unsigned int index) const;

384 17 get_num_triangles 0 4 545 37 CollisionFloorMesh::get_num_triangles 0 1 113 0
70
inline unsigned int CollisionFloorMesh::get_num_triangles(void) const;

385 12 get_triangle 0 4 545 32 CollisionFloorMesh::get_triangle 0 1 114 0
75
inline LPoint3i CollisionFloorMesh::get_triangle(unsigned int index) const;

386 14 get_class_type 0 4 545 34 CollisionFloorMesh::get_class_type 0 1 115 0
59
static TypeHandle CollisionFloorMesh::get_class_type(void);

387 19 ~CollisionFloorMesh 0 4 545 39 CollisionFloorMesh::~CollisionFloorMesh 0 0 0
46
CollisionFloorMesh::~CollisionFloorMesh(void);

388 16 CollisionPolygon 0 4 546 34 CollisionPolygon::CollisionPolygon 0 3 116 117 118 1234
////////////////////////////////////////////////////////////////////
//     Function: CollisionPolygon::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: CollisionPolygon::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: CollisionPolygon::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: CollisionPolygon::Constructor
//       Access: Private
//  Description: Creates an invalid polygon.  Only used when reading
//               from a bam file.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: CollisionPolygon::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
310
inline CollisionPolygon::CollisionPolygon(LVecBase3 const &a, LVecBase3 const &b, LVecBase3 const &c);
inline CollisionPolygon::CollisionPolygon(LVecBase3 const &a, LVecBase3 const &b, LVecBase3 const &c, LVecBase3 const &d);
inline CollisionPolygon::CollisionPolygon(LPoint3 const *begin, LPoint3 const *end);

389 14 get_num_points 0 4 546 32 CollisionPolygon::get_num_points 0 1 119 304
////////////////////////////////////////////////////////////////////
//     Function: CollisionPolygon::get_num_points
//       Access: Published
//  Description: Returns the number of vertices of the
//               CollisionPolygon.
////////////////////////////////////////////////////////////////////
56
inline int CollisionPolygon::get_num_points(void) const;

390 9 get_point 0 4 546 27 CollisionPolygon::get_point 0 1 120 315
////////////////////////////////////////////////////////////////////
//     Function: CollisionPolygon::get_point
//       Access: Published
//  Description: Returns the nth vertex of the CollisionPolygon,
//               expressed in 3-D space.
////////////////////////////////////////////////////////////////////
56
inline LPoint3 CollisionPolygon::get_point(int n) const;

391 13 verify_points 0 4 546 31 CollisionPolygon::verify_points 0 3 121 122 123 1500
////////////////////////////////////////////////////////////////////
//     Function: CollisionPolygon::verify_points
//       Access: Published, Static
//  Description: Verifies that the indicated set of points will define
//               a valid CollisionPolygon: that is, at least three
//               non-collinear points, with no points repeated.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: CollisionPolygon::verify_points
//       Access: Published, Static
//  Description: Verifies that the indicated set of points will define
//               a valid CollisionPolygon: that is, at least three
//               non-collinear points, with no points repeated.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: CollisionPolygon::verify_points
//       Access: Public, Static
//  Description: Verifies that the indicated set of points will define
//               a valid CollisionPolygon: that is, at least three
//               non-collinear points, with no points repeated.
//
//               This does not check that the polygon defined is
//               convex; that check is made later, once we have
//               projected the points to 2-d space where the decision
//               is easier.
////////////////////////////////////////////////////////////////////
316
static inline bool CollisionPolygon::verify_points(LPoint3 const &a, LPoint3 const &b, LPoint3 const &c);
static inline bool CollisionPolygon::verify_points(LPoint3 const &a, LPoint3 const &b, LPoint3 const &c, LPoint3 const &d);
static bool CollisionPolygon::verify_points(LPoint3 const *begin, LPoint3 const *end);

392 8 is_valid 0 4 546 26 CollisionPolygon::is_valid 0 1 124 365
////////////////////////////////////////////////////////////////////
//     Function: CollisionPolygon::is_valid
//       Access: Public
//  Description: Returns true if the CollisionPolygon is valid
//               (that is, it has at least three vertices), or false
//               otherwise.
////////////////////////////////////////////////////////////////////
44
bool CollisionPolygon::is_valid(void) const;

393 10 is_concave 0 4 546 28 CollisionPolygon::is_concave 0 1 125 334
////////////////////////////////////////////////////////////////////
//     Function: CollisionPolygon::is_concave
//       Access: Public
//  Description: Returns true if the CollisionPolygon appears to be
//               concave, or false if it is safely convex.
////////////////////////////////////////////////////////////////////
46
bool CollisionPolygon::is_concave(void) const;

394 14 get_class_type 0 4 546 32 CollisionPolygon::get_class_type 0 1 126 0
57
static TypeHandle CollisionPolygon::get_class_type(void);

395 17 ~CollisionPolygon 0 4 546 35 CollisionPolygon::~CollisionPolygon 0 0 0
42
CollisionPolygon::~CollisionPolygon(void);

396 21 CollisionHandlerEvent 0 4 547 44 CollisionHandlerEvent::CollisionHandlerEvent 0 1 127 416
////////////////////////////////////////////////////////////////////
//     Function: CollisionHandlerEvent::Constructor
//       Access: Public
//  Description: The default CollisionHandlerEvent will throw no
//               events.  Its pattern strings must first be set via a
//               call to add_in_pattern() and/or add_out_pattern().
////////////////////////////////////////////////////////////////////
51
CollisionHandlerEvent::CollisionHandlerEvent(void);

397 17 clear_in_patterns 0 4 547 40 CollisionHandlerEvent::clear_in_patterns 0 1 128 323
////////////////////////////////////////////////////////////////////
//     Function: CollisionHandlerEvent::clear_in_patterns
//       Access: Public
//  Description: Removes all of the previously-added in patterns.  See
//               add_in_pattern.
////////////////////////////////////////////////////////////////////
59
inline void CollisionHandlerEvent::clear_in_patterns(void);

398 14 add_in_pattern 0 4 547 37 CollisionHandlerEvent::add_in_pattern 0 1 129 2355
////////////////////////////////////////////////////////////////////
//     Function: CollisionHandlerEvent::add_in_pattern
//       Access: Public
//  Description: Adds a pattern string to the list of events that will
//               be generated in response to a collision.  The pattern
//               string describes how the event name will be composed.
//               It is a string that may contain any of the following:
//
//                  %fn  - the name of the "from" object's node
//                  %in  - the name of the "into" object's node
//                  %fs  - 't' if "from" is tangible, 'i' if intangible
//                  %is  - 't' if "into" is tangible, 'i' if intangible
//                  %ig  - 'c' if the collision is into a
//                          CollisionNode, 'g' if it is a geom.
//
//                  %(tag)fh - generate event only if "from" node has
//                          the indicated net tag.
//                  %(tag)fx - generate event only if "from" node does 
//                          not have the indicated net tag.
//                  %(tag)ih - generate event only if "into" node has
//                          the indicated net tag.
//                  %(tag)ix - generate event only if "into" node does 
//                          not have the indicated net tag.
//                  %(tag)ft - the indicated net tag value of the "from" node.
//                  %(tag)it - the indicated net tag value of the "into" node.
//
//               Parentheses in the above are literal and should be
//               included in the actual pattern.
//
//               The event name will be based on the in_pattern
//               string specified here, with all occurrences of the
//               above strings replaced with the corresponding values.
//
//               In general, the in_pattern event is thrown on the
//               first detection of a collision between two particular
//               nodes.  In subsequent passes, as long as a collision
//               between those two nodes continues to be detected each
//               frame, the again_pattern is thrown.  The first frame
//               in which the collision is no longer detected, the
//               out_pattern event is thrown.
////////////////////////////////////////////////////////////////////
76
inline void CollisionHandlerEvent::add_in_pattern(string const &in_pattern);

399 14 set_in_pattern 0 4 547 37 CollisionHandlerEvent::set_in_pattern 0 1 130 395
////////////////////////////////////////////////////////////////////
//     Function: CollisionHandlerEvent::set_in_pattern
//       Access: Public
//  Description: This method is deprecated; it completely replaces all
//               the in patterns that have previously been set with
//               the indicated pattern.
////////////////////////////////////////////////////////////////////
76
inline void CollisionHandlerEvent::set_in_pattern(string const &in_pattern);

400 19 get_num_in_patterns 0 4 547 42 CollisionHandlerEvent::get_num_in_patterns 0 1 131 318
////////////////////////////////////////////////////////////////////
//     Function: CollisionHandlerEvent::get_num_in_patterns
//       Access: Public
//  Description: Returns the number of in pattern strings that have
//               been added.
////////////////////////////////////////////////////////////////////
66
inline int CollisionHandlerEvent::get_num_in_patterns(void) const;

401 14 get_in_pattern 0 4 547 37 CollisionHandlerEvent::get_in_pattern 0 1 132 399
////////////////////////////////////////////////////////////////////
//     Function: CollisionHandlerEvent::get_in_pattern
//       Access: Public
//  Description: Returns the nth pattern string that indicates how the
//               event names are generated for each collision
//               detected.  See add_in_pattern().
////////////////////////////////////////////////////////////////////
65
inline string CollisionHandlerEvent::get_in_pattern(int n) const;

402 20 clear_again_patterns 0 4 547 43 CollisionHandlerEvent::clear_again_patterns 0 1 133 329
////////////////////////////////////////////////////////////////////
//     Function: CollisionHandlerEvent::clear_again_patterns
//       Access: Public
//  Description: Removes all of the previously-added in patterns.  See
//               add_again_pattern.
////////////////////////////////////////////////////////////////////
62
inline void CollisionHandlerEvent::clear_again_patterns(void);

403 17 add_again_pattern 0 4 547 40 CollisionHandlerEvent::add_again_pattern 0 1 134 1055
////////////////////////////////////////////////////////////////////
//     Function: CollisionHandlerEvent::add_again_pattern
//       Access: Public
//  Description: Adds the pattern string that indicates how the event
//               names are generated when a collision between two
//               particular nodes is *still* detected.  This event is
//               thrown each consecutive time a collision between two
//               particular nodes is detected, starting with the
//               second time.
//
//               In general, the in_pattern event is thrown on the
//               first detection of a collision between two particular
//               nodes.  In subsequent passes, as long as a collision
//               between those two nodes continues to be detected each
//               frame, the again_pattern is thrown.  The first frame
//               in which the collision is no longer detected, the
//               out_pattern event is thrown.
////////////////////////////////////////////////////////////////////
82
inline void CollisionHandlerEvent::add_again_pattern(string const &again_pattern);

404 17 set_again_pattern 0 4 547 40 CollisionHandlerEvent::set_again_pattern 0 1 135 398
////////////////////////////////////////////////////////////////////
//     Function: CollisionHandlerEvent::set_again_pattern
//       Access: Public
//  Description: This method is deprecated; it completely replaces all
//               the in patterns that have previously been set with
//               the indicated pattern.
////////////////////////////////////////////////////////////////////
82
inline void CollisionHandlerEvent::set_again_pattern(string const &again_pattern);

405 22 get_num_again_patterns 0 4 547 45 CollisionHandlerEvent::get_num_again_patterns 0 1 136 321
////////////////////////////////////////////////////////////////////
//     Function: CollisionHandlerEvent::get_num_again_patterns
//       Access: Public
//  Description: Returns the number of in pattern strings that have
//               been added.
////////////////////////////////////////////////////////////////////
69
inline int CollisionHandlerEvent::get_num_again_patterns(void) const;

406 17 get_again_pattern 0 4 547 40 CollisionHandlerEvent::get_again_pattern 0 1 137 405
////////////////////////////////////////////////////////////////////
//     Function: CollisionHandlerEvent::get_again_pattern
//       Access: Public
//  Description: Returns the nth pattern string that indicates how the
//               event names are generated for each collision
//               detected.  See add_again_pattern().
////////////////////////////////////////////////////////////////////
68
inline string CollisionHandlerEvent::get_again_pattern(int n) const;

407 18 clear_out_patterns 0 4 547 41 CollisionHandlerEvent::clear_out_patterns 0 1 138 325
////////////////////////////////////////////////////////////////////
//     Function: CollisionHandlerEvent::clear_out_patterns
//       Access: Public
//  Description: Removes all of the previously-added in patterns.  See
//               add_out_pattern.
////////////////////////////////////////////////////////////////////
60
inline void CollisionHandlerEvent::clear_out_patterns(void);

408 15 add_out_pattern 0 4 547 38 CollisionHandlerEvent::add_out_pattern 0 1 139 877
////////////////////////////////////////////////////////////////////
//     Function: CollisionHandlerEvent::add_out_pattern
//       Access: Public
//  Description: Adds the pattern string that indicates how the event
//               names are generated when a collision between two
//               particular nodes is *no longer* detected.
//
//               In general, the in_pattern event is thrown on the
//               first detection of a collision between two particular
//               nodes.  In subsequent passes, as long as a collision
//               between those two nodes continues to be detected each
//               frame, the again_pattern is thrown.  The first frame
//               in which the collision is no longer detected, the
//               out_pattern event is thrown.
////////////////////////////////////////////////////////////////////
78
inline void CollisionHandlerEvent::add_out_pattern(string const &out_pattern);

409 15 set_out_pattern 0 4 547 38 CollisionHandlerEvent::set_out_pattern 0 1 140 396
////////////////////////////////////////////////////////////////////
//     Function: CollisionHandlerEvent::set_out_pattern
//       Access: Public
//  Description: This method is deprecated; it completely replaces all
//               the in patterns that have previously been set with
//               the indicated pattern.
////////////////////////////////////////////////////////////////////
78
inline void CollisionHandlerEvent::set_out_pattern(string const &out_pattern);

410 20 get_num_out_patterns 0 4 547 43 CollisionHandlerEvent::get_num_out_patterns 0 1 141 319
////////////////////////////////////////////////////////////////////
//     Function: CollisionHandlerEvent::get_num_out_patterns
//       Access: Public
//  Description: Returns the number of in pattern strings that have
//               been added.
////////////////////////////////////////////////////////////////////
67
inline int CollisionHandlerEvent::get_num_out_patterns(void) const;

411 15 get_out_pattern 0 4 547 38 CollisionHandlerEvent::get_out_pattern 0 1 142 401
////////////////////////////////////////////////////////////////////
//     Function: CollisionHandlerEvent::get_out_pattern
//       Access: Public
//  Description: Returns the nth pattern string that indicates how the
//               event names are generated for each collision
//               detected.  See add_out_pattern().
////////////////////////////////////////////////////////////////////
66
inline string CollisionHandlerEvent::get_out_pattern(int n) const;

412 5 clear 0 4 547 28 CollisionHandlerEvent::clear 0 1 143 887
////////////////////////////////////////////////////////////////////
//     Function: CollisionHandlerEvent::clear
//       Access: Public
//  Description: Empties the list of elements that all colliders are
//               known to be colliding with.  No "out" events will be
//               thrown; if the same collision is detected next frame,
//               a new "in" event will be thrown for each collision.
//
//               This can be called each frame to defeat the
//               persistent "in" event mechanism, which prevents the
//               same "in" event from being thrown repeatedly.
//               However, also see add_again_pattern(), which can be
//               used to set the event that is thrown when a collision
//               is detected for two or more consecutive frames.
////////////////////////////////////////////////////////////////////
40
void CollisionHandlerEvent::clear(void);

413 5 flush 0 4 547 28 CollisionHandlerEvent::flush 0 1 144 272
////////////////////////////////////////////////////////////////////
//     Function: CollisionHandlerEvent::flush
//       Access: Public
//  Description: Same as clear() except "out" events are thrown.
////////////////////////////////////////////////////////////////////
40
void CollisionHandlerEvent::flush(void);

414 14 get_class_type 0 4 547 37 CollisionHandlerEvent::get_class_type 0 1 145 0
62
static TypeHandle CollisionHandlerEvent::get_class_type(void);

415 22 ~CollisionHandlerEvent 0 4 547 45 CollisionHandlerEvent::~CollisionHandlerEvent 0 0 0
52
CollisionHandlerEvent::~CollisionHandlerEvent(void);

416 12 add_collider 0 4 548 38 CollisionHandlerPhysical::add_collider 0 2 146 147 1159
////////////////////////////////////////////////////////////////////
//     Function: CollisionHandlerPhysical::add_collider
//       Access: Published
//  Description: Adds a new collider to the list with a NodePath
//               that will be updated with the collider's new
//               position, or updates the existing collider with a new
//               NodePath object.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: CollisionHandlerPhysical::add_collider
//       Access: Published
//  Description: Adds a new collider to the list with a NodePath
//               that will be updated with the collider's new
//               position, or updates the existing collider with a new
//               NodePath object.
//
//               The indicated DriveInterface will also be updated
//               with the target's new transform each frame.  This
//               method should be used when the target is directly
//               controlled by a DriveInterface.
////////////////////////////////////////////////////////////////////
222
void CollisionHandlerPhysical::add_collider(NodePath const &collider, NodePath const &target);
void CollisionHandlerPhysical::add_collider(NodePath const &collider, NodePath const &target, DriveInterface *drive_interface);

417 15 remove_collider 0 4 548 41 CollisionHandlerPhysical::remove_collider 0 1 148 336
////////////////////////////////////////////////////////////////////
//     Function: CollisionHandlerPhysical::remove_collider
//       Access: Published
//  Description: Removes the collider from the list of colliders that
//               this handler knows about.
////////////////////////////////////////////////////////////////////
73
bool CollisionHandlerPhysical::remove_collider(NodePath const &collider);

418 12 has_collider 0 4 548 38 CollisionHandlerPhysical::has_collider 0 1 149 335
////////////////////////////////////////////////////////////////////
//     Function: CollisionHandlerPhysical::has_collider
//       Access: Published
//  Description: Returns true if the handler knows about the indicated
//               collider, false otherwise.
////////////////////////////////////////////////////////////////////
76
bool CollisionHandlerPhysical::has_collider(NodePath const &collider) const;

419 15 clear_colliders 0 4 548 41 CollisionHandlerPhysical::clear_colliders 0 1 150 324
////////////////////////////////////////////////////////////////////
//     Function: CollisionHandlerPhysical::clear_colliders
//       Access: Published
//  Description: Completely empties the list of colliders this handler
//               knows about.
////////////////////////////////////////////////////////////////////
53
void CollisionHandlerPhysical::clear_colliders(void);

420 10 set_center 0 4 548 36 CollisionHandlerPhysical::set_center 0 1 151 553
////////////////////////////////////////////////////////////////////
//     Function: CollisionHandlerPhysical::set_center
//       Access: Published
//  Description: Specifies an arbitrary NodePath that the handler is
//               always considered to be facing.  It does not detect
//               collisions with surfaces that appear to be facing
//               away from this NodePath.  This works best when the
//               collision surfaces in question are polygons.
////////////////////////////////////////////////////////////////////
73
inline void CollisionHandlerPhysical::set_center(NodePath const &center);

421 12 clear_center 0 4 548 38 CollisionHandlerPhysical::clear_center 0 1 152 291
////////////////////////////////////////////////////////////////////
//     Function: CollisionHandlerPhysical::clear_center
//       Access: Published
//  Description: Clears the center NodePath specified with set_center.
////////////////////////////////////////////////////////////////////
57
inline void CollisionHandlerPhysical::clear_center(void);

422 10 get_center 0 4 548 36 CollisionHandlerPhysical::get_center 0 1 153 353
////////////////////////////////////////////////////////////////////
//     Function: CollisionHandlerPhysical::get_center
//       Access: Published
//  Description: Returns the NodePath specified with set_center, or
//               the empty NodePath if nothing has been specified.
////////////////////////////////////////////////////////////////////
72
inline NodePath const &CollisionHandlerPhysical::get_center(void) const;

423 10 has_center 0 4 548 36 CollisionHandlerPhysical::has_center 0 1 154 334
////////////////////////////////////////////////////////////////////
//     Function: CollisionHandlerPhysical::has_center
//       Access: Published
//  Description: Returns true if a NodePath has been specified with
//               set_center(), false otherwise.
////////////////////////////////////////////////////////////////////
61
inline bool CollisionHandlerPhysical::has_center(void) const;

424 11 has_contact 0 4 548 37 CollisionHandlerPhysical::has_contact 0 1 155 537
////////////////////////////////////////////////////////////////////
//     Function: CollisionHandlerPhysical::has_contact
//       Access: Public
//  Description: Did the handler make any contacts with anything
//               on the last collision pass?  Depending on how your
//               world is setup, this can be used to tell if the
//               handler is out of the world (i.e. out of bounds).
//               That is the original use of this call.
////////////////////////////////////////////////////////////////////
62
inline bool CollisionHandlerPhysical::has_contact(void) const;

425 14 get_class_type 0 4 548 40 CollisionHandlerPhysical::get_class_type 0 1 156 0
65
static TypeHandle CollisionHandlerPhysical::get_class_type(void);

426 21 CollisionHandlerFloor 0 4 549 44 CollisionHandlerFloor::CollisionHandlerFloor 0 1 157 230
////////////////////////////////////////////////////////////////////
//     Function: CollisionHandlerFloor::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
51
CollisionHandlerFloor::CollisionHandlerFloor(void);

427 10 set_offset 0 4 549 33 CollisionHandlerFloor::set_offset 0 1 158 413
////////////////////////////////////////////////////////////////////
//     Function: CollisionHandlerFloor::set_offset
//       Access: Public
//  Description: Sets the linear offset to add to (or subtract from)
//               the highest detected collision point to determine the
//               actual height at which to set the collider.
////////////////////////////////////////////////////////////////////
66
inline void CollisionHandlerFloor::set_offset(PN_stdfloat offset);

428 10 get_offset 0 4 549 33 CollisionHandlerFloor::get_offset 0 1 159 416
////////////////////////////////////////////////////////////////////
//     Function: CollisionHandlerFloor::get_offset
//       Access: Public
//  Description: Returns the linear offset to add to (or subtract from)
//               the highest detected collision point to determine the
//               actual height at which to set the collider.
////////////////////////////////////////////////////////////////////
65
inline PN_stdfloat CollisionHandlerFloor::get_offset(void) const;

429 9 set_reach 0 4 549 32 CollisionHandlerFloor::set_reach 0 1 160 317
////////////////////////////////////////////////////////////////////
//     Function: CollisionHandlerFloor::set_reach
//       Access: Public
//  Description: Sets the reach to add to (or subtract from)
//               the highest collision point
////////////////////////////////////////////////////////////////////
64
inline void CollisionHandlerFloor::set_reach(PN_stdfloat reach);

430 9 get_reach 0 4 549 32 CollisionHandlerFloor::get_reach 0 1 161 320
////////////////////////////////////////////////////////////////////
//     Function: CollisionHandlerFloor::get_reach
//       Access: Public
//  Description: Returns the reach to add to (or subtract from)
//               the highest collision point
////////////////////////////////////////////////////////////////////
64
inline PN_stdfloat CollisionHandlerFloor::get_reach(void) const;

431 16 set_max_velocity 0 4 549 39 CollisionHandlerFloor::set_max_velocity 0 1 162 469
////////////////////////////////////////////////////////////////////
//     Function: CollisionHandlerFloor::set_max_velocity
//       Access: Public
//  Description: Sets the maximum speed at which the object will be
//               allowed to descend towards a floor below it, in units
//               per second.  Set this to zero to allow it to
//               instantly teleport any distance.
////////////////////////////////////////////////////////////////////
73
inline void CollisionHandlerFloor::set_max_velocity(PN_stdfloat max_vel);

432 16 get_max_velocity 0 4 549 39 CollisionHandlerFloor::get_max_velocity 0 1 163 416
////////////////////////////////////////////////////////////////////
//     Function: CollisionHandlerFloor::get_max_velocity
//       Access: Public
//  Description: Retrieves the maximum speed at which the object will
//               be allowed to descend towards a floor below it, in
//               units per second.  See set_max_velocity().
////////////////////////////////////////////////////////////////////
71
inline PN_stdfloat CollisionHandlerFloor::get_max_velocity(void) const;

433 14 get_class_type 0 4 549 37 CollisionHandlerFloor::get_class_type 0 1 164 0
62
static TypeHandle CollisionHandlerFloor::get_class_type(void);

434 22 CollisionHandlerPusher 0 4 550 46 CollisionHandlerPusher::CollisionHandlerPusher 0 1 165 231
////////////////////////////////////////////////////////////////////
//     Function: CollisionHandlerPusher::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
53
CollisionHandlerPusher::CollisionHandlerPusher(void);

435 14 set_horizontal 0 4 550 38 CollisionHandlerPusher::set_horizontal 0 1 166 234
////////////////////////////////////////////////////////////////////
//     Function: CollisionHandlerPusher::set_horizontal
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
62
inline void CollisionHandlerPusher::set_horizontal(bool flag);

436 14 get_horizontal 0 4 550 38 CollisionHandlerPusher::get_horizontal 0 1 167 234
////////////////////////////////////////////////////////////////////
//     Function: CollisionHandlerPusher::get_horizontal
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
63
inline bool CollisionHandlerPusher::get_horizontal(void) const;

437 14 get_class_type 0 4 550 38 CollisionHandlerPusher::get_class_type 0 1 168 0
63
static TypeHandle CollisionHandlerPusher::get_class_type(void);

438 27 CollisionHandlerFluidPusher 0 4 551 56 CollisionHandlerFluidPusher::CollisionHandlerFluidPusher 0 1 169 236
////////////////////////////////////////////////////////////////////
//     Function: CollisionHandlerFluidPusher::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
63
CollisionHandlerFluidPusher::CollisionHandlerFluidPusher(void);

439 14 get_class_type 0 4 551 43 CollisionHandlerFluidPusher::get_class_type 0 1 170 0
68
static TypeHandle CollisionHandlerFluidPusher::get_class_type(void);

440 28 ~CollisionHandlerFluidPusher 0 4 551 57 CollisionHandlerFluidPusher::~CollisionHandlerFluidPusher 0 0 0
64
CollisionHandlerFluidPusher::~CollisionHandlerFluidPusher(void);

441 23 CollisionHandlerGravity 0 4 552 48 CollisionHandlerGravity::CollisionHandlerGravity 0 1 171 232
////////////////////////////////////////////////////////////////////
//     Function: CollisionHandlerGravity::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
55
CollisionHandlerGravity::CollisionHandlerGravity(void);

442 10 set_offset 0 4 552 35 CollisionHandlerGravity::set_offset 0 1 172 415
////////////////////////////////////////////////////////////////////
//     Function: CollisionHandlerGravity::set_offset
//       Access: Public
//  Description: Sets the linear offset to add to (or subtract from)
//               the highest detected collision point to determine the
//               actual height at which to set the collider.
////////////////////////////////////////////////////////////////////
68
inline void CollisionHandlerGravity::set_offset(PN_stdfloat offset);

443 10 get_offset 0 4 552 35 CollisionHandlerGravity::get_offset 0 1 173 418
////////////////////////////////////////////////////////////////////
//     Function: CollisionHandlerGravity::get_offset
//       Access: Public
//  Description: Returns the linear offset to add to (or subtract from)
//               the highest detected collision point to determine the
//               actual height at which to set the collider.
////////////////////////////////////////////////////////////////////
67
inline PN_stdfloat CollisionHandlerGravity::get_offset(void) const;

444 9 set_reach 0 4 552 34 CollisionHandlerGravity::set_reach 0 1 174 319
////////////////////////////////////////////////////////////////////
//     Function: CollisionHandlerGravity::set_reach
//       Access: Public
//  Description: Sets the reach to add to (or subtract from)
//               the highest collision point
////////////////////////////////////////////////////////////////////
66
inline void CollisionHandlerGravity::set_reach(PN_stdfloat reach);

445 9 get_reach 0 4 552 34 CollisionHandlerGravity::get_reach 0 1 175 322
////////////////////////////////////////////////////////////////////
//     Function: CollisionHandlerGravity::get_reach
//       Access: Public
//  Description: Returns the reach to add to (or subtract from)
//               the highest collision point
////////////////////////////////////////////////////////////////////
66
inline PN_stdfloat CollisionHandlerGravity::get_reach(void) const;

446 19 get_airborne_height 0 4 552 44 CollisionHandlerGravity::get_airborne_height 0 1 176 527
////////////////////////////////////////////////////////////////////
//     Function: CollisionHandlerGravity::get_airborne_height
//       Access: Public
//  Description: Return the height of the object from the ground.
//
//               The object might not necessarily be at rest.  Use
//               is_on_ground() if you want to know whether the
//               object is on the ground and at rest.
//
//               See Also: is_in_outer_space()
////////////////////////////////////////////////////////////////////
76
inline PN_stdfloat CollisionHandlerGravity::get_airborne_height(void) const;

447 12 is_on_ground 0 4 552 37 CollisionHandlerGravity::is_on_ground 0 1 177 256
////////////////////////////////////////////////////////////////////
//     Function: CollisionHandlerGravity::is_on_ground
//       Access: Public
//  Description: Is the object at rest?
////////////////////////////////////////////////////////////////////
62
inline bool CollisionHandlerGravity::is_on_ground(void) const;

448 19 get_impact_velocity 0 4 552 44 CollisionHandlerGravity::get_impact_velocity 0 1 178 586
////////////////////////////////////////////////////////////////////
//     Function: CollisionHandlerGravity::get_impact_velocity
//       Access: Public
//  Description: How hard did the object hit the ground.
//               This value is set on impact with the ground.
//               You may want to watch (poll) on is_on_groun() and
//               when that is true, call get_impact_velocity().
//               Normally I avoid polling, but we are calling
//               is_on_ground() frequently anyway.
////////////////////////////////////////////////////////////////////
76
inline PN_stdfloat CollisionHandlerGravity::get_impact_velocity(void) const;

449 18 get_contact_normal 0 4 552 43 CollisionHandlerGravity::get_contact_normal 0 1 179 240
////////////////////////////////////////////////////////////////////
//    Function : CollisionHandlerGravity::get_contact_normal
//      Access : Public
// Description : 
////////////////////////////////////////////////////////////////////
79
inline LVector3 const &CollisionHandlerGravity::get_contact_normal(void) const;

450 12 add_velocity 0 4 552 37 CollisionHandlerGravity::add_velocity 0 1 180 451
////////////////////////////////////////////////////////////////////
//     Function: CollisionHandlerGravity::add_velocity
//       Access: Public
//  Description: Adds the sepcified amount to the current velocity.
//               This is mostly here allow this common operation to
//               be faster for scripting, but it's also more concise
//               even in cpp.
////////////////////////////////////////////////////////////////////
72
inline void CollisionHandlerGravity::add_velocity(PN_stdfloat velocity);

451 12 set_velocity 0 4 552 37 CollisionHandlerGravity::set_velocity 0 1 181 269
////////////////////////////////////////////////////////////////////
//     Function: CollisionHandlerGravity::set_velocity
//       Access: Public
//  Description: Sets the current vertical velocity.
////////////////////////////////////////////////////////////////////
72
inline void CollisionHandlerGravity::set_velocity(PN_stdfloat velocity);

452 12 get_velocity 0 4 552 37 CollisionHandlerGravity::get_velocity 0 1 182 681
////////////////////////////////////////////////////////////////////
//     Function: CollisionHandlerGravity::get_velocity
//       Access: Public
//  Description: Gets the current vertical velocity.
//
//               Generally, negative values mean the object is in
//               free fall; while postive values mean the object has
//               vertical thrust.
//
//               A zero value does not necessarily mean the object
//               on the ground, it may also be weightless and/or at
//               the apex of its jump.
//
//               See Also: is_on_ground() and get_gravity()
////////////////////////////////////////////////////////////////////
69
inline PN_stdfloat CollisionHandlerGravity::get_velocity(void) const;

453 11 set_gravity 0 4 552 36 CollisionHandlerGravity::set_gravity 0 1 183 278
////////////////////////////////////////////////////////////////////
//     Function: CollisionHandlerGravity::set_gravity
//       Access: Public
//  Description: Sets the linear gravity force (always plumb).
////////////////////////////////////////////////////////////////////
70
inline void CollisionHandlerGravity::set_gravity(PN_stdfloat gravity);

454 11 get_gravity 0 4 552 36 CollisionHandlerGravity::get_gravity 0 1 184 278
////////////////////////////////////////////////////////////////////
//     Function: CollisionHandlerGravity::get_gravity
//       Access: Public
//  Description: Gets the linear gravity force (always plumb).
////////////////////////////////////////////////////////////////////
68
inline PN_stdfloat CollisionHandlerGravity::get_gravity(void) const;

455 16 set_max_velocity 0 4 552 41 CollisionHandlerGravity::set_max_velocity 0 1 185 471
////////////////////////////////////////////////////////////////////
//     Function: CollisionHandlerGravity::set_max_velocity
//       Access: Public
//  Description: Sets the maximum speed at which the object will be
//               allowed to descend towards a floor below it, in units
//               per second.  Set this to zero to allow it to
//               instantly teleport any distance.
////////////////////////////////////////////////////////////////////
75
inline void CollisionHandlerGravity::set_max_velocity(PN_stdfloat max_vel);

456 16 get_max_velocity 0 4 552 41 CollisionHandlerGravity::get_max_velocity 0 1 186 418
////////////////////////////////////////////////////////////////////
//     Function: CollisionHandlerGravity::get_max_velocity
//       Access: Public
//  Description: Retrieves the maximum speed at which the object will
//               be allowed to descend towards a floor below it, in
//               units per second.  See set_max_velocity().
////////////////////////////////////////////////////////////////////
73
inline PN_stdfloat CollisionHandlerGravity::get_max_velocity(void) const;

457 15 set_legacy_mode 0 4 552 40 CollisionHandlerGravity::set_legacy_mode 0 1 187 517
////////////////////////////////////////////////////////////////////
//     Function: CollisionHandlerGravity::set_legacy_mode
//       Access: Public
//  Description: Enables old behavior required by Toontown
//               (Sellbot Factory lava room is good test case,
//               lava and conveyor belt specifically). Behavior
//               is to throw enter/exit events only for floor
//               that the toon is in contact with
////////////////////////////////////////////////////////////////////
71
inline void CollisionHandlerGravity::set_legacy_mode(bool legacy_mode);

458 15 get_legacy_mode 0 4 552 40 CollisionHandlerGravity::get_legacy_mode 0 1 188 275
////////////////////////////////////////////////////////////////////
//     Function: CollisionHandlerGravity::get_legacy_mode
//       Access: Public
//  Description: returns true if legacy mode is enabled
////////////////////////////////////////////////////////////////////
65
inline bool CollisionHandlerGravity::get_legacy_mode(void) const;

459 14 get_class_type 0 4 552 39 CollisionHandlerGravity::get_class_type 0 1 189 0
64
static TypeHandle CollisionHandlerGravity::get_class_type(void);

460 28 CollisionHandlerHighestEvent 0 4 553 58 CollisionHandlerHighestEvent::CollisionHandlerHighestEvent 0 1 190 416
////////////////////////////////////////////////////////////////////
//     Function: CollisionHandlerEvent::Constructor
//       Access: Public
//  Description: The default CollisionHandlerEvent will throw no
//               events.  Its pattern strings must first be set via a
//               call to add_in_pattern() and/or add_out_pattern().
////////////////////////////////////////////////////////////////////
65
CollisionHandlerHighestEvent::CollisionHandlerHighestEvent(void);

461 14 get_class_type 0 4 553 44 CollisionHandlerHighestEvent::get_class_type 0 1 191 0
69
static TypeHandle CollisionHandlerHighestEvent::get_class_type(void);

462 29 ~CollisionHandlerHighestEvent 0 4 553 59 CollisionHandlerHighestEvent::~CollisionHandlerHighestEvent 0 0 0
66
CollisionHandlerHighestEvent::~CollisionHandlerHighestEvent(void);

463 21 CollisionHandlerQueue 0 4 554 44 CollisionHandlerQueue::CollisionHandlerQueue 0 1 192 233
////////////////////////////////////////////////////////////////////
//     Function: CollisionHandlerQueue::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
51
CollisionHandlerQueue::CollisionHandlerQueue(void);

464 12 sort_entries 0 4 554 35 CollisionHandlerQueue::sort_entries 0 1 193 540
////////////////////////////////////////////////////////////////////
//     Function: CollisionHandlerQueue::sort_entries
//       Access: Published
//  Description: Sorts all the detected collisions front-to-back by
//               from_intersection_point() so that those intersection
//               points closest to the collider's origin (e.g., the
//               center of the CollisionSphere, or the point_a of a
//               CollisionSegment) appear first.
////////////////////////////////////////////////////////////////////
47
void CollisionHandlerQueue::sort_entries(void);

465 13 clear_entries 0 4 554 36 CollisionHandlerQueue::clear_entries 0 1 194 275
////////////////////////////////////////////////////////////////////
//     Function: CollisionHandlerQueue::clear_entries
//       Access: Published
//  Description: Removes all the entries from the queue.
////////////////////////////////////////////////////////////////////
48
void CollisionHandlerQueue::clear_entries(void);

466 15 get_num_entries 0 4 554 38 CollisionHandlerQueue::get_num_entries 0 1 195 313
////////////////////////////////////////////////////////////////////
//     Function: CollisionHandlerQueue::get_num_entries
//       Access: Published
//  Description: Returns the number of CollisionEntries detected last
//               pass.
////////////////////////////////////////////////////////////////////
55
int CollisionHandlerQueue::get_num_entries(void) const;

467 9 get_entry 0 4 554 32 CollisionHandlerQueue::get_entry 0 1 196 282
////////////////////////////////////////////////////////////////////
//     Function: CollisionHandlerQueue::get_entry
//       Access: Published
//  Description: Returns the nth CollisionEntry detected last pass.
////////////////////////////////////////////////////////////////////
62
CollisionEntry *CollisionHandlerQueue::get_entry(int n) const;

468 6 output 0 4 554 29 CollisionHandlerQueue::output 0 1 197 229
////////////////////////////////////////////////////////////////////
//     Function: CollisionHandlerQueue::output
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
55
void CollisionHandlerQueue::output(ostream &out) const;

469 5 write 0 4 554 28 CollisionHandlerQueue::write 0 1 198 228
////////////////////////////////////////////////////////////////////
//     Function: CollisionHandlerQueue::write
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
76
void CollisionHandlerQueue::write(ostream &out, int indent_level = 0) const;

470 14 get_class_type 0 4 554 37 CollisionHandlerQueue::get_class_type 0 1 199 0
62
static TypeHandle CollisionHandlerQueue::get_class_type(void);

471 22 ~CollisionHandlerQueue 0 4 554 45 CollisionHandlerQueue::~CollisionHandlerQueue 0 0 0
52
CollisionHandlerQueue::~CollisionHandlerQueue(void);

472 15 CollisionSphere 0 4 555 32 CollisionSphere::CollisionSphere 0 2 200 201 1003
////////////////////////////////////////////////////////////////////
//     Function: CollisionSphere::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: CollisionSphere::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: CollisionSphere::Default constructor
//       Access: Protected
//  Description: Creates an invalid sphere.  Only used when reading
//               from a bam file.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: CollisionSphere::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
192
inline CollisionSphere::CollisionSphere(LPoint3 const &center, PN_stdfloat radius);
inline CollisionSphere::CollisionSphere(PN_stdfloat cx, PN_stdfloat cy, PN_stdfloat cz, PN_stdfloat radius);

473 10 set_center 0 4 555 27 CollisionSphere::set_center 0 2 202 203 454
////////////////////////////////////////////////////////////////////
//     Function: CollisionSphere::set_center
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: CollisionSphere::set_center
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
149
inline void CollisionSphere::set_center(LPoint3 const &center);
inline void CollisionSphere::set_center(PN_stdfloat x, PN_stdfloat y, PN_stdfloat z);

474 10 get_center 0 4 555 27 CollisionSphere::get_center 0 1 204 226
////////////////////////////////////////////////////////////////////
//     Function: CollisionSphere::get_center
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
62
inline LPoint3 const &CollisionSphere::get_center(void) const;

475 10 set_radius 0 4 555 27 CollisionSphere::set_radius 0 1 205 226
////////////////////////////////////////////////////////////////////
//     Function: CollisionSphere::set_radius
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
60
inline void CollisionSphere::set_radius(PN_stdfloat radius);

476 10 get_radius 0 4 555 27 CollisionSphere::get_radius 0 1 206 226
////////////////////////////////////////////////////////////////////
//     Function: CollisionSphere::get_radius
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
59
inline PN_stdfloat CollisionSphere::get_radius(void) const;

477 14 get_class_type 0 4 555 31 CollisionSphere::get_class_type 0 1 207 0
56
static TypeHandle CollisionSphere::get_class_type(void);

478 16 ~CollisionSphere 0 4 555 33 CollisionSphere::~CollisionSphere 0 0 0
40
CollisionSphere::~CollisionSphere(void);

479 18 CollisionInvSphere 0 4 556 38 CollisionInvSphere::CollisionInvSphere 0 2 208 209 1015
////////////////////////////////////////////////////////////////////
//     Function: CollisionInvSphere::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: CollisionInvSphere::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: CollisionInvSphere::Default constructor
//       Access: Protected
//  Description: Creates an invalid sphere.  Only used when reading
//               from a bam file.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: CollisionInvSphere::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
204
inline CollisionInvSphere::CollisionInvSphere(LPoint3 const &center, PN_stdfloat radius);
inline CollisionInvSphere::CollisionInvSphere(PN_stdfloat cx, PN_stdfloat cy, PN_stdfloat cz, PN_stdfloat radius);

480 14 get_class_type 0 4 556 34 CollisionInvSphere::get_class_type 0 1 210 0
59
static TypeHandle CollisionInvSphere::get_class_type(void);

481 19 ~CollisionInvSphere 0 4 556 39 CollisionInvSphere::~CollisionInvSphere 0 0 0
46
CollisionInvSphere::~CollisionInvSphere(void);

482 12 CollisionRay 0 4 557 26 CollisionRay::CollisionRay 0 3 211 212 213 1121
////////////////////////////////////////////////////////////////////
//     Function: CollisionRay::Default Constructor
//       Access: Public
//  Description: Creates an invalid ray.  This isn't terribly useful;
//               it's expected that the user will subsequently adjust
//               the ray via set_origin()/set_direction() or
//               set_from_lens().
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: CollisionRay::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: CollisionRay::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: CollisionRay::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
256
inline CollisionRay::CollisionRay(void);
inline CollisionRay::CollisionRay(LPoint3 const &origin, LVector3 const &direction);
inline CollisionRay::CollisionRay(PN_stdfloat ox, PN_stdfloat oy, PN_stdfloat oz, PN_stdfloat dx, PN_stdfloat dy, PN_stdfloat dz);

483 10 set_origin 0 4 557 24 CollisionRay::set_origin 0 2 214 215 442
////////////////////////////////////////////////////////////////////
//     Function: CollisionRay::set_origin
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: CollisionRay::set_origin
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
143
inline void CollisionRay::set_origin(LPoint3 const &origin);
inline void CollisionRay::set_origin(PN_stdfloat x, PN_stdfloat y, PN_stdfloat z);

484 10 get_origin 0 4 557 24 CollisionRay::get_origin 0 1 216 220
////////////////////////////////////////////////////////////////////
//     Function: CollisionRay::get_origin
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
59
inline LPoint3 const &CollisionRay::get_origin(void) const;

485 13 set_direction 0 4 557 27 CollisionRay::set_direction 0 2 217 218 448
////////////////////////////////////////////////////////////////////
//     Function: CollisionRay::set_direction
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: CollisionRay::set_direction
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
153
inline void CollisionRay::set_direction(LVector3 const &direction);
inline void CollisionRay::set_direction(PN_stdfloat x, PN_stdfloat y, PN_stdfloat z);

486 13 get_direction 0 4 557 27 CollisionRay::get_direction 0 1 219 223
////////////////////////////////////////////////////////////////////
//     Function: CollisionRay::get_direction
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
63
inline LVector3 const &CollisionRay::get_direction(void) const;

487 13 set_from_lens 0 4 557 27 CollisionRay::set_from_lens 0 2 220 221 1166
////////////////////////////////////////////////////////////////////
//     Function: CollisionRay::set_from_lens
//       Access: Public
//  Description: Accepts a LensNode and a 2-d point in the range
//               [-1,1].  Sets the CollisionRay so that it begins at
//               the LensNode's near plane and extends to
//               infinity, making it suitable for picking objects from
//               the screen given a camera and a mouse location.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: CollisionRay::set_from_lens
//       Access: Public
//  Description: Accepts a LensNode and a 2-d point in the range
//               [-1,1].  Sets the CollisionRay so that it begins at
//               the LensNode's near plane and extends to
//               infinity, making it suitable for picking objects from
//               the screen given a camera and a mouse location.
//
//               Returns true if the point was acceptable, false
//               otherwise.
////////////////////////////////////////////////////////////////////
164
bool CollisionRay::set_from_lens(LensNode *camera, LPoint2 const &point);
inline bool CollisionRay::set_from_lens(LensNode *camera, PN_stdfloat px, PN_stdfloat py);

488 14 get_class_type 0 4 557 28 CollisionRay::get_class_type 0 1 222 0
53
static TypeHandle CollisionRay::get_class_type(void);

489 13 ~CollisionRay 0 4 557 27 CollisionRay::~CollisionRay 0 0 0
34
CollisionRay::~CollisionRay(void);

490 13 CollisionLine 0 4 558 28 CollisionLine::CollisionLine 0 3 223 224 225 1127
////////////////////////////////////////////////////////////////////
//     Function: CollisionLine::Default Constructor
//       Access: Public
//  Description: Creates an invalid line.  This isn't terribly useful;
//               it's expected that the user will subsequently adjust
//               the line via set_origin()/set_direction() or
//               set_from_lens().
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: CollisionLine::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: CollisionLine::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: CollisionLine::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
262
inline CollisionLine::CollisionLine(void);
inline CollisionLine::CollisionLine(LPoint3 const &origin, LVector3 const &direction);
inline CollisionLine::CollisionLine(PN_stdfloat ox, PN_stdfloat oy, PN_stdfloat oz, PN_stdfloat dx, PN_stdfloat dy, PN_stdfloat dz);

491 14 get_class_type 0 4 558 29 CollisionLine::get_class_type 0 1 226 0
54
static TypeHandle CollisionLine::get_class_type(void);

492 14 ~CollisionLine 0 4 558 29 CollisionLine::~CollisionLine 0 0 0
36
CollisionLine::~CollisionLine(void);

493 17 CollisionParabola 0 4 559 36 CollisionParabola::CollisionParabola 0 2 227 228 845
////////////////////////////////////////////////////////////////////
//     Function: CollisionParabola::Default Constructor
//       Access: Published
//  Description: Creates an invalid parabola.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: CollisionParabola::Constructor
//       Access: Published
//  Description: Creates a parabola with the endpoints between t1 and
//               t2 in the parametric space of the parabola.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: CollisionParabola::Copy Constructor
//       Access: Public
//  Description: 
////////////////////////////////////////////////////////////////////
154
inline CollisionParabola::CollisionParabola(void);
inline CollisionParabola::CollisionParabola(LParabola const &parabola, PN_stdfloat t1, PN_stdfloat t2);

494 12 set_parabola 0 4 559 31 CollisionParabola::set_parabola 0 1 229 274
////////////////////////////////////////////////////////////////////
//     Function: CollisionParabola::set_parabola
//       Access: Public
//  Description: Replaces the parabola specified by this solid.
////////////////////////////////////////////////////////////////////
71
inline void CollisionParabola::set_parabola(LParabola const &parabola);

495 12 get_parabola 0 4 559 31 CollisionParabola::get_parabola 0 1 230 273
////////////////////////////////////////////////////////////////////
//     Function: CollisionParabola::get_parabola
//       Access: Public
//  Description: Returns the parabola specified by this solid.
////////////////////////////////////////////////////////////////////
68
inline LParabola const &CollisionParabola::get_parabola(void) const;

496 6 set_t1 0 4 559 25 CollisionParabola::set_t1 0 1 231 265
////////////////////////////////////////////////////////////////////
//     Function: CollisionParabola::set_t1
//       Access: Public
//  Description: Changes the starting point on the parabola.
////////////////////////////////////////////////////////////////////
54
inline void CollisionParabola::set_t1(PN_stdfloat t1);

497 6 get_t1 0 4 559 25 CollisionParabola::get_t1 0 1 232 265
////////////////////////////////////////////////////////////////////
//     Function: CollisionParabola::get_t1
//       Access: Public
//  Description: Returns the starting point on the parabola.
////////////////////////////////////////////////////////////////////
57
inline PN_stdfloat CollisionParabola::get_t1(void) const;

498 6 set_t2 0 4 559 25 CollisionParabola::set_t2 0 1 233 263
////////////////////////////////////////////////////////////////////
//     Function: CollisionParabola::set_t2
//       Access: Public
//  Description: Changes the ending point on the parabola.
////////////////////////////////////////////////////////////////////
54
inline void CollisionParabola::set_t2(PN_stdfloat t2);

499 6 get_t2 0 4 559 25 CollisionParabola::get_t2 0 1 234 263
////////////////////////////////////////////////////////////////////
//     Function: CollisionParabola::get_t2
//       Access: Public
//  Description: Returns the ending point on the parabola.
////////////////////////////////////////////////////////////////////
57
inline PN_stdfloat CollisionParabola::get_t2(void) const;

500 14 get_class_type 0 4 559 33 CollisionParabola::get_class_type 0 1 235 0
58
static TypeHandle CollisionParabola::get_class_type(void);

501 18 ~CollisionParabola 0 4 559 37 CollisionParabola::~CollisionParabola 0 0 0
44
CollisionParabola::~CollisionParabola(void);

502 16 CollisionSegment 0 4 560 34 CollisionSegment::CollisionSegment 0 3 236 237 238 1145
////////////////////////////////////////////////////////////////////
//     Function: CollisionSegment::Default Constructor
//       Access: Public
//  Description: Creates an invalid segment.  This isn't terribly useful;
//               it's expected that the user will subsequently adjust
//               the segment via set_origin()/set_direction() or
//               set_from_lens().
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: CollisionSegment::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: CollisionSegment::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: CollisionSegment::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
267
inline CollisionSegment::CollisionSegment(void);
inline CollisionSegment::CollisionSegment(LPoint3 const &a, LPoint3 const &db);
inline CollisionSegment::CollisionSegment(PN_stdfloat ax, PN_stdfloat ay, PN_stdfloat az, PN_stdfloat bx, PN_stdfloat by, PN_stdfloat bz);

503 11 set_point_a 0 4 560 29 CollisionSegment::set_point_a 0 2 239 240 452
////////////////////////////////////////////////////////////////////
//     Function: CollisionSegment::set_point_a
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: CollisionSegment::set_point_a
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
148
inline void CollisionSegment::set_point_a(LPoint3 const &a);
inline void CollisionSegment::set_point_a(PN_stdfloat x, PN_stdfloat y, PN_stdfloat z);

504 11 get_point_a 0 4 560 29 CollisionSegment::get_point_a 0 1 241 225
////////////////////////////////////////////////////////////////////
//     Function: CollisionSegment::get_point_a
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
64
inline LPoint3 const &CollisionSegment::get_point_a(void) const;

505 11 set_point_b 0 4 560 29 CollisionSegment::set_point_b 0 2 242 243 452
////////////////////////////////////////////////////////////////////
//     Function: CollisionSegment::set_point_b
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: CollisionSegment::set_point_b
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
148
inline void CollisionSegment::set_point_b(LPoint3 const &b);
inline void CollisionSegment::set_point_b(PN_stdfloat x, PN_stdfloat y, PN_stdfloat z);

506 11 get_point_b 0 4 560 29 CollisionSegment::get_point_b 0 1 244 225
////////////////////////////////////////////////////////////////////
//     Function: CollisionSegment::get_point_b
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
64
inline LPoint3 const &CollisionSegment::get_point_b(void) const;

507 13 set_from_lens 0 4 560 31 CollisionSegment::set_from_lens 0 2 245 246 1192
////////////////////////////////////////////////////////////////////
//     Function: CollisionSegment::set_from_lens
//       Access: Public
//  Description: Accepts a LensNode and a 2-d point in the range
//               [-1,1].  Sets the CollisionSegment so that it begins at
//               the LensNode's near plane and extends to the
//               far plane, making it suitable for picking objects
//               from the screen given a camera and a mouse location.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: CollisionSegment::set_from_lens
//       Access: Public
//  Description: Accepts a LensNode and a 2-d point in the range
//               [-1,1].  Sets the CollisionSegment so that it begins at
//               the LensNode's near plane and extends to the
//               far plane, making it suitable for picking objects
//               from the screen given a camera and a mouse location.
//
//               Returns true if the point was acceptable, false
//               otherwise.
////////////////////////////////////////////////////////////////////
172
bool CollisionSegment::set_from_lens(LensNode *camera, LPoint2 const &point);
inline bool CollisionSegment::set_from_lens(LensNode *camera, PN_stdfloat px, PN_stdfloat py);

508 14 get_class_type 0 4 560 32 CollisionSegment::get_class_type 0 1 247 0
57
static TypeHandle CollisionSegment::get_class_type(void);

509 17 ~CollisionSegment 0 4 560 35 CollisionSegment::~CollisionSegment 0 0 0
42
CollisionSegment::~CollisionSegment(void);

510 13 CollisionTube 0 4 561 28 CollisionTube::CollisionTube 0 2 248 249 991
////////////////////////////////////////////////////////////////////
//     Function: CollisionTube::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: CollisionTube::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: CollisionTube::Default constructor
//       Access: Private
//  Description: Creates an invalid tube.  Only used when reading
//               from a bam file.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: CollisionTube::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
246
inline CollisionTube::CollisionTube(LPoint3 const &a, LPoint3 const &db, PN_stdfloat radius);
inline CollisionTube::CollisionTube(PN_stdfloat ax, PN_stdfloat ay, PN_stdfloat az, PN_stdfloat bx, PN_stdfloat by, PN_stdfloat bz, PN_stdfloat radius);

511 11 set_point_a 0 4 561 26 CollisionTube::set_point_a 0 2 250 251 452
////////////////////////////////////////////////////////////////////
//     Function: CollisionTube::set_point_a
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: CollisionTube::set_point_a
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
142
inline void CollisionTube::set_point_a(LPoint3 const &a);
inline void CollisionTube::set_point_a(PN_stdfloat x, PN_stdfloat y, PN_stdfloat z);

512 11 get_point_a 0 4 561 26 CollisionTube::get_point_a 0 1 252 225
////////////////////////////////////////////////////////////////////
//     Function: CollisionTube::get_point_a
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
61
inline LPoint3 const &CollisionTube::get_point_a(void) const;

513 11 set_point_b 0 4 561 26 CollisionTube::set_point_b 0 2 253 254 452
////////////////////////////////////////////////////////////////////
//     Function: CollisionTube::set_point_b
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: CollisionTube::set_point_b
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
142
inline void CollisionTube::set_point_b(LPoint3 const &b);
inline void CollisionTube::set_point_b(PN_stdfloat x, PN_stdfloat y, PN_stdfloat z);

514 11 get_point_b 0 4 561 26 CollisionTube::get_point_b 0 1 255 225
////////////////////////////////////////////////////////////////////
//     Function: CollisionTube::get_point_b
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
61
inline LPoint3 const &CollisionTube::get_point_b(void) const;

515 10 set_radius 0 4 561 25 CollisionTube::set_radius 0 1 256 224
////////////////////////////////////////////////////////////////////
//     Function: CollisionTube::set_radius
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
58
inline void CollisionTube::set_radius(PN_stdfloat radius);

516 10 get_radius 0 4 561 25 CollisionTube::get_radius 0 1 257 224
////////////////////////////////////////////////////////////////////
//     Function: CollisionTube::get_radius
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
57
inline PN_stdfloat CollisionTube::get_radius(void) const;

517 14 get_class_type 0 4 561 29 CollisionTube::get_class_type 0 1 258 0
54
static TypeHandle CollisionTube::get_class_type(void);

518 14 ~CollisionTube 0 4 561 29 CollisionTube::~CollisionTube 0 0 0
36
CollisionTube::~CollisionTube(void);

519 19 upcast_to_PandaNode 0 12 562 40 CollisionVisualizer::upcast_to_PandaNode 0 1 266 44
upcast from CollisionVisualizer to PandaNode
58
PandaNode *CollisionVisualizer::upcast_to_PandaNode(void);

520 31 downcast_to_CollisionVisualizer 0 12 537 42 PandaNode::downcast_to_CollisionVisualizer 0 1 267 46
downcast from PandaNode to CollisionVisualizer
70
CollisionVisualizer *PandaNode::downcast_to_CollisionVisualizer(void);

521 27 upcast_to_CollisionRecorder 0 12 562 48 CollisionVisualizer::upcast_to_CollisionRecorder 0 1 268 52
upcast from CollisionVisualizer to CollisionRecorder
74
CollisionRecorder *CollisionVisualizer::upcast_to_CollisionRecorder(void);

522 31 downcast_to_CollisionVisualizer 0 12 540 50 CollisionRecorder::downcast_to_CollisionVisualizer 0 1 269 54
downcast from CollisionRecorder to CollisionVisualizer
78
CollisionVisualizer *CollisionRecorder::downcast_to_CollisionVisualizer(void);

523 19 CollisionVisualizer 0 4 562 40 CollisionVisualizer::CollisionVisualizer 0 1 259 231
////////////////////////////////////////////////////////////////////
//     Function: CollisionVisualizer::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
61
CollisionVisualizer::CollisionVisualizer(string const &name);

524 20 ~CollisionVisualizer 0 6 562 41 CollisionVisualizer::~CollisionVisualizer 0 0 239
////////////////////////////////////////////////////////////////////
//     Function: CollisionVisualizer::Destructor
//       Access: Published, Virtual
//  Description:
////////////////////////////////////////////////////////////////////
56
virtual CollisionVisualizer::~CollisionVisualizer(void);

525 15 set_point_scale 0 4 562 36 CollisionVisualizer::set_point_scale 0 1 260 741
////////////////////////////////////////////////////////////////////
//     Function: CollisionVisualizer::set_point_scale
//       Access: Published
//  Description: Scales the points that are drawn to represent the
//               surface and interior intersection points of the
//               collisions.  By default, these objects are drawn at
//               an arbitrary scale which is appropriate if the window
//               units are the default range -1 .. 1.  Change this
//               scale accordinatly if the window units are measured
//               on some other scale or if you need to observe these
//               objects in a smaller window.
////////////////////////////////////////////////////////////////////
74
inline void CollisionVisualizer::set_point_scale(PN_stdfloat point_scale);

526 15 get_point_scale 0 4 562 36 CollisionVisualizer::get_point_scale 0 1 261 284
////////////////////////////////////////////////////////////////////
//     Function: CollisionVisualizer::get_point_scale
//       Access: Published
//  Description: Returns the value last set by set_point_scale().
////////////////////////////////////////////////////////////////////
68
inline PN_stdfloat CollisionVisualizer::get_point_scale(void) const;

527 16 set_normal_scale 0 4 562 37 CollisionVisualizer::set_normal_scale 0 1 262 685
////////////////////////////////////////////////////////////////////
//     Function: CollisionVisualizer::set_normal_scale
//       Access: Published
//  Description: Scales the line segments that are drawn to represent
//               the normals of the collisions.  By default, these
//               objects are drawn at an arbitrary scale which is
//               appropriate if the scene units are measured in feet.
//               Change this scale accordinatly if the scene units are
//               measured on some other scale or if you need to
//               observe these normals from farther away.
////////////////////////////////////////////////////////////////////
76
inline void CollisionVisualizer::set_normal_scale(PN_stdfloat normal_scale);

528 16 get_normal_scale 0 4 562 37 CollisionVisualizer::get_normal_scale 0 1 263 286
////////////////////////////////////////////////////////////////////
//     Function: CollisionVisualizer::get_normal_scale
//       Access: Published
//  Description: Returns the value last set by set_normal_scale().
////////////////////////////////////////////////////////////////////
69
inline PN_stdfloat CollisionVisualizer::get_normal_scale(void) const;

529 5 clear 0 4 562 26 CollisionVisualizer::clear 0 1 264 339
////////////////////////////////////////////////////////////////////
//     Function: CollisionVisualizer::clear
//       Access: Published
//  Description: Removes all the visualization data from a previous
//               traversal and resets the visualizer to empty.
////////////////////////////////////////////////////////////////////
38
void CollisionVisualizer::clear(void);

530 14 get_class_type 0 4 562 35 CollisionVisualizer::get_class_type 0 1 265 0
60
static TypeHandle CollisionVisualizer::get_class_type(void);

269
1 0 0 7 3 567 0 0 0 1 4 this 3 565  
2 0 0 4 4 570 0 0 588 ////////////////////////////////////////////////////////////////////
//     Function: CollisionSolid::set_tangible
//       Access: Published
//  Description: Sets the current state of the 'tangible' flag.  Set
//               this true to make the solid tangible, so that a
//               CollisionHandlerPusher will not allow another object
//               to intersect it, or false to make it intangible, so
//               that a CollisionHandlerPusher will ignore it except
//               to throw an event.
//////////////////////////////////////////////////////////////////// 2 4 this 3 568  8 tangible 1 569  
3 0 0 6 5 569 0 0 541 ////////////////////////////////////////////////////////////////////
//     Function: CollisionSolid::is_tangible
//       Access: Published
//  Description: Returns whether the solid is considered 'tangible' or
//               not.  An intangible solid has no effect in a
//               CollisionHandlerPusher (except to throw an event);
//               it's useful for defining 'trigger' planes and
//               spheres, that cause an effect when passed through.
//////////////////////////////////////////////////////////////////// 1 4 this 3 565  
4 0 0 4 6 570 0 0 720 ////////////////////////////////////////////////////////////////////
//     Function: CollisionSolid::set_effective_normal
//       Access: Published
//  Description: Records a false normal for this CollisionSolid that
//               will be reported by the collision system with all
//               collisions into it, instead of its actual normal.
//               This is useful as a workaround for the problem of an
//               avatar wanting to stand on a sloping ground; by
//               storing a false normal, the ground appears to be
//               perfectly level, and the avatar does not tend to
//               slide down it.
//////////////////////////////////////////////////////////////////// 2 4 this 3 568  16 effective_normal 1 571  
5 0 0 4 7 570 0 0 315 ////////////////////////////////////////////////////////////////////
//     Function: CollisionSolid::clear_effective_normal
//       Access: Published
//  Description: Removes the normal previously set by
//               set_effective_normal().
//////////////////////////////////////////////////////////////////// 1 4 this 3 568  
6 0 0 6 8 569 0 0 337 ////////////////////////////////////////////////////////////////////
//     Function: CollisionSolid::has_effective_normal
//       Access: Published
//  Description: Returns true if a special normal was set by
//               set_effective_normal(), false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 565  
7 0 0 6 9 571 0 0 401 ////////////////////////////////////////////////////////////////////
//     Function: CollisionSolid::get_effective_normal
//       Access: Published
//  Description: Returns the normal that was set by
//               set_effective_normal().  It is an error to call this
//               unless has_effective_normal() returns true.
//////////////////////////////////////////////////////////////////// 1 4 this 3 565  
8 0 0 4 10 570 0 0 605 ////////////////////////////////////////////////////////////////////
//     Function: CollisionSolid::set_respect_effective_normal
//       Access: Published
//  Description: This is only meaningful for CollisionSolids that will
//               be added to a traverser as colliders.  It is normally
//               true, but if set false, it means that this particular
//               solid does not care about the "effective" normal of
//               other solids it meets, but rather always uses the
//               true normal.
//////////////////////////////////////////////////////////////////// 2 4 this 3 568  24 respect_effective_normal 1 569  
9 0 0 6 11 569 0 0 279 ////////////////////////////////////////////////////////////////////
//     Function: CollisionSolid::get_respect_effective_normal
//       Access: Published
//  Description: See set_respect_effective_normal().
//////////////////////////////////////////////////////////////////// 1 4 this 3 565  
10 0 0 7 12 577 0 0 262 ////////////////////////////////////////////////////////////////////
//     Function: CollisionSolid::get_bounds
//       Access: Protected
//  Description: Returns the solid's bounding volume.
//////////////////////////////////////////////////////////////////// 1 4 this 3 565  
11 0 0 4 13 570 0 0 262 ////////////////////////////////////////////////////////////////////
//     Function: CollisionSolid::set_bounds
//       Access: Protected
//  Description: Returns the solid's bounding volume.
//////////////////////////////////////////////////////////////////// 2 4 this 3 568  15 bounding_volume 1 577  
12 0 0 4 14 570 0 0 227 ////////////////////////////////////////////////////////////////////
//     Function: CollisionSolid::output
//       Access: Public, Virtual
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 565  3 out 1 578  
13 0 0 4 15 570 0 0 226 ////////////////////////////////////////////////////////////////////
//     Function: CollisionSolid::write
//       Access: Public, Virtual
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 565  3 out 1 578  12 indent_level 1 580  
14 0 0 7 16 582 0 0 0 0 
15 0 0 7 18 585 295 0 270 ////////////////////////////////////////////////////////////////////
//     Function: CollisionBox::Constructor
//       Access: Public
//  Description: Create the Box by Specifying the Diagonal Points
//////////////////////////////////////////////////////////////////// 2 3 min 1 583  3 max 1 583  
16 0 0 7 18 585 295 0 334 ////////////////////////////////////////////////////////////////////
//     Function: CollisionBox::Constructor
//       Access: Public
//  Description: Create the Box by giving a Center and distances of
//               of each of the sides of box from the Center.
//////////////////////////////////////////////////////////////////// 4 6 center 1 583  1 x 1 586  1 y 1 586  1 z 1 586  
17 0 0 6 19 580 0 0 285 ////////////////////////////////////////////////////////////////////
//     Function: CollisionBox::get_num_points
//       Access: Published
//  Description: Returns 8: the number of vertices of a rectangular solid.
//////////////////////////////////////////////////////////////////// 1 4 this 3 588  
18 0 0 7 20 567 0 0 284 ////////////////////////////////////////////////////////////////////
//     Function: CollisionBox::get_point_aabb
//       Access: Published
//  Description: Returns the nth vertex of the Axis Aligned Bounding Box.
//////////////////////////////////////////////////////////////////// 2 4 this 3 588  1 n 1 580  
19 0 0 7 21 567 0 0 257 ////////////////////////////////////////////////////////////////////
//     Function: CollisionBox::get_point
//       Access: Published
//  Description: Returns the nth vertex of the OBB.
//////////////////////////////////////////////////////////////////// 2 4 this 3 588  1 n 1 580  
20 0 0 6 22 580 0 0 282 ////////////////////////////////////////////////////////////////////
//     Function: CollisionBox::get_num_planes
//       Access: Published
//  Description: Returns 6: the number of faces of a rectangular solid.
//////////////////////////////////////////////////////////////////// 1 4 this 3 588  
21 0 0 7 23 592 0 0 269 ////////////////////////////////////////////////////////////////////
//     Function: CollisionBox::set_plane
//       Access: Published
//  Description: Creates the nth face of the rectangular solid.
//////////////////////////////////////////////////////////////////// 2 4 this 3 588  1 n 1 580  
22 0 0 7 24 592 0 0 269 ////////////////////////////////////////////////////////////////////
//     Function: CollisionBox::get_plane
//       Access: Published
//  Description: Returns the nth face of the rectangular solid.
//////////////////////////////////////////////////////////////////// 2 4 this 3 588  1 n 1 580  
23 0 0 4 25 570 0 0 223 ////////////////////////////////////////////////////////////////////
//     Function: CollisionBox::set_center
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 585  6 center 1 583  
24 0 0 4 25 570 0 0 223 ////////////////////////////////////////////////////////////////////
//     Function: CollisionBox::set_center
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 4 4 this 3 585  1 x 1 586  1 y 1 586  1 z 1 586  
25 0 0 6 26 583 0 0 223 ////////////////////////////////////////////////////////////////////
//     Function: CollisionBox::get_center
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 588  
26 0 0 6 27 586 0 0 223 ////////////////////////////////////////////////////////////////////
//     Function: CollisionBox::get_radius
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 588  
27 0 0 7 28 582 0 0 0 0 
28 0 0 7 32 582 0 0 0 0 
29 0 0 7 36 594 0 0 222 ////////////////////////////////////////////////////////////////////
//     Function: CollisionNode::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 name 1 593  
30 0 0 4 37 570 0 0 332 ////////////////////////////////////////////////////////////////////
//     Function: CollisionNode::set_collide_mask
//       Access: Published
//  Description: Simultaneously sets both the "from" and "into"
//               CollideMask values to the same thing.
//////////////////////////////////////////////////////////////////// 2 4 this 3 594  4 mask 1 595  
31 0 0 4 38 570 0 0 509 ////////////////////////////////////////////////////////////////////
//     Function: CollisionNode::set_from_collide_mask
//       Access: Published
//  Description: Sets the "from" CollideMask.  In order for a
//               collision to be detected from this object into
//               another object, the intersection of this object's
//               "from" mask and the other object's "into" mask must
//               be nonzero.
//////////////////////////////////////////////////////////////////// 2 4 this 3 594  4 mask 1 595  
32 0 0 4 39 570 0 0 509 ////////////////////////////////////////////////////////////////////
//     Function: CollisionNode::set_into_collide_mask
//       Access: Published
//  Description: Sets the "into" CollideMask.  In order for a
//               collision to be detected from another object into
//               this object, the intersection of the other object's
//               "from" mask and this object's "into" mask must be
//               nonzero.
//////////////////////////////////////////////////////////////////// 2 4 this 3 594  4 mask 1 595  
33 0 0 7 40 595 0 0 520 ////////////////////////////////////////////////////////////////////
//     Function: CollisionNode::get_from_collide_mask
//       Access: Published
//  Description: Returns the current "from" CollideMask.  In order for
//               a collision to be detected from this object into
//               another object, the intersection of this object's
//               "from" mask and the other object's "into" mask must
//               be nonzero.
//////////////////////////////////////////////////////////////////// 1 4 this 3 599  
34 0 0 7 41 595 0 0 520 ////////////////////////////////////////////////////////////////////
//     Function: CollisionNode::get_into_collide_mask
//       Access: Published
//  Description: Returns the current "into" CollideMask.  In order for
//               a collision to be detected from another object into
//               this object, the intersection of the other object's
//               "from" mask and this object's "into" mask must be
//               nonzero.
//////////////////////////////////////////////////////////////////// 1 4 this 3 599  
35 0 0 4 42 570 0 0 260 ////////////////////////////////////////////////////////////////////
//     Function: CollisionNode::clear_solids
//       Access: Published
//  Description: Removes all solids from the node.
//////////////////////////////////////////////////////////////////// 1 4 this 3 594  
36 0 0 6 43 580 0 0 228 ////////////////////////////////////////////////////////////////////
//     Function: CollisionNode::get_num_solids
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 599  
37 0 0 7 44 565 0 0 223 ////////////////////////////////////////////////////////////////////
//     Function: CollisionNode::get_solid
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 599  1 n 1 580  
38 0 0 7 45 568 0 0 226 ////////////////////////////////////////////////////////////////////
//     Function: CollisionNode::modify_solid
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 594  1 n 1 580  
39 0 0 4 46 570 0 0 268 ////////////////////////////////////////////////////////////////////
//     Function: CollisionNode::set_solid
//       Access: Published
//  Description: Replaces the solid with the indicated index.
//////////////////////////////////////////////////////////////////// 3 4 this 3 594  1 n 1 580  5 solid 1 568  
40 0 0 4 47 570 0 0 340 ////////////////////////////////////////////////////////////////////
//     Function: CollisionNode::remove_solid
//       Access: Published
//  Description: Removes the solid with the indicated index.  This
//               will shift all subsequent indices down by one.
//////////////////////////////////////////////////////////////////// 2 4 this 3 594  1 n 1 580  
41 0 0 6 48 580 0 0 365 ////////////////////////////////////////////////////////////////////
//     Function: CollisionNode::add_solid
//       Access: Published
//  Description: Adds the indicated solid to the node.  Returns the
//               index of the new solid within the node's list of
//               solids.
//////////////////////////////////////////////////////////////////// 2 4 this 3 594  5 solid 1 565  
42 0 0 6 49 580 0 0 350 ////////////////////////////////////////////////////////////////////
//     Function: CollisionNode::get_collider_sort
//       Access: Published
//  Description: Returns the collider_sort value that has been set for
//               this particular node.  See set_collider_sort().
//////////////////////////////////////////////////////////////////// 1 4 this 3 599  
43 0 0 4 50 570 0 0 977 ////////////////////////////////////////////////////////////////////
//     Function: CollisionNode::set_collider_sort
//       Access: Published
//  Description: Sets a particular collider_sort value on this node.
//               This controls the order in which colliders (that is,
//               "from nodes") are grouped together for the collision
//               traversal.
//
//               If there are 32 or fewer colliders added to any
//               particular CollisionTraverser, then this value has no
//               meaning.  It is only useful if there are many
//               colliders, which may force the CollisionTraverser to
//               make multiple passes through the data; in that case,
//               it may be a useful optimization to group colliders
//               that have similar bounding volumes together (by
//               giving them similar sort values).
//////////////////////////////////////////////////////////////////// 2 4 this 3 594  4 sort 1 580  
44 0 0 7 51 595 0 0 333 ////////////////////////////////////////////////////////////////////
//     Function: CollisionNode::get_default_collide_mask
//       Access: Published, Static
//  Description: Returns the default into_collide_mask assigned to new
//               CollisionNodes.
//////////////////////////////////////////////////////////////////// 0 
45 0 0 7 52 582 0 0 0 0 
46 0 0 7 55 601 316 0 230 ////////////////////////////////////////////////////////////////////
//     Function: CollisionTraverser::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 name 1 593  
47 0 0 4 57 570 0 0 712 ////////////////////////////////////////////////////////////////////
//     Function: CollisionTraverser::set_respect_prev_transform
//       Access: Published
//  Description: Sets the flag that indicates whether the
//               prev_transform stored on a node (as updated via
//               set_fluid_pos(), etc.) is respected to calculate
//               collisions.  If this is true, certain types of
//               collision tests will be enhanced by the information
//               about objects in motion.  If this is false, objects
//               are always considered to be static.  The default is
//               false.
//////////////////////////////////////////////////////////////////// 2 4 this 3 601  4 flag 1 569  
48 0 0 6 58 569 0 0 445 ////////////////////////////////////////////////////////////////////
//     Function: CollisionTraverser::get_respect_prev_transform
//       Access: Published
//  Description: Returns the flag that indicates whether the
//               prev_transform stored on a node is respected to
//               calculate collisions.  See
//               set_respect_prev_transform().
//////////////////////////////////////////////////////////////////// 1 4 this 3 602  
49 0 0 4 59 570 0 0 779 ////////////////////////////////////////////////////////////////////
//     Function: CollisionTraverser::add_collider
//       Access: Published
//  Description: Adds a new CollisionNode, representing an object that
//               will be tested for collisions into other objects,
//               along with the handler that will serve each detected
//               collision.  Each CollisionNode may be served by only
//               one handler at a time, but a given handler may serve
//               many CollisionNodes.
//
//               The handler that serves a particular node may be
//               changed from time to time by calling add_collider()
//               again on the same node.
//////////////////////////////////////////////////////////////////// 3 4 this 3 601  8 collider 1 604  7 handler 1 607  
50 0 0 6 60 569 0 0 545 ////////////////////////////////////////////////////////////////////
//     Function: CollisionTraverser::remove_collider
//       Access: Published
//  Description: Removes the collider (and its associated handler)
//               from the set of CollisionNodes that will be tested
//               each frame for collisions into other objects.
//               Returns true if the definition was found and removed,
//               false if it wasn't present to begin with.
//////////////////////////////////////////////////////////////////// 2 4 this 3 601  8 collider 1 604  
51 0 0 6 61 569 0 0 397 ////////////////////////////////////////////////////////////////////
//     Function: CollisionTraverser::has_collider
//       Access: Published
//  Description: Returns true if the indicated node is current in the
//               set of nodes that will be tested each frame for
//               collisions into other objects.
//////////////////////////////////////////////////////////////////// 2 4 this 3 602  8 collider 1 604  
52 0 0 6 62 580 0 0 348 ////////////////////////////////////////////////////////////////////
//     Function: CollisionTraverser::get_num_colliders
//       Access: Published
//  Description: Returns the number of CollisionNodes that have been
//               added to the traverser via add_collider().
//////////////////////////////////////////////////////////////////// 1 4 this 3 602  
53 0 0 7 63 608 0 0 335 ////////////////////////////////////////////////////////////////////
//     Function: CollisionTraverser::get_collider
//       Access: Published
//  Description: Returns the nth CollisionNode that has been
//               added to the traverser via add_collider().
//////////////////////////////////////////////////////////////////// 2 4 this 3 602  1 n 1 580  
54 0 0 7 64 607 297 0 417 ////////////////////////////////////////////////////////////////////
//     Function: CollisionTraverser::get_handler
//       Access: Published
//  Description: Returns the handler that is currently assigned to
//               serve the indicated collision node, or NULL if the
//               node is not on the traverser's set of active nodes.
//////////////////////////////////////////////////////////////////// 2 4 this 3 602  8 collider 1 604  
55 0 0 4 65 570 0 0 328 ////////////////////////////////////////////////////////////////////
//     Function: CollisionTraverser::clear_colliders
//       Access: Published
//  Description: Completely empties the set of collision nodes and
//               their associated handlers.
//////////////////////////////////////////////////////////////////// 1 4 this 3 601  
56 0 0 4 66 570 0 0 227 ////////////////////////////////////////////////////////////////////
//     Function: CollisionTraverser::traverse
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 601  4 root 1 604  
57 0 0 4 67 570 0 0 1220 ////////////////////////////////////////////////////////////////////
//     Function: CollisionTraverser::set_recorder
//       Access: Published
//  Description: Uses the indicated CollisionRecorder object to start
//               recording the intersection tests made by each
//               subsequent call to traverse() on this object.  A
//               particular CollisionRecorder object can only record
//               one traverser at a time; if this object has already
//               been assigned to another traverser, that assignment
//               is broken.
//
//               This is intended to be used in a debugging mode to
//               try to determine what work is being performed by the
//               collision traversal.  Usually, attaching a recorder
//               will impose significant runtime overhead.
//
//               This does not transfer ownership of the
//               CollisionRecorder pointer; maintenance of that
//               remains the caller's responsibility.  If the
//               CollisionRecorder is destructed, it will cleanly
//               remove itself from the traverser.
//////////////////////////////////////////////////////////////////// 2 4 this 3 601  8 recorder 1 609  
58 0 0 6 68 569 0 0 372 ////////////////////////////////////////////////////////////////////
//     Function: CollisionTraverser::has_recorder
//       Access: Published
//  Description: Returns true if the CollisionTraverser has a
//               CollisionRecorder object currently assigned, false
//               otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 602  
59 0 0 6 69 609 0 0 334 ////////////////////////////////////////////////////////////////////
//     Function: CollisionTraverser::get_recorder
//       Access: Published
//  Description: Returns the CollisionRecorder currently assigned, or
//               NULL if no recorder is assigned.
//////////////////////////////////////////////////////////////////// 1 4 this 3 602  
60 0 0 4 70 570 0 0 343 ////////////////////////////////////////////////////////////////////
//     Function: CollisionTraverser::clear_recorder
//       Access: Published
//  Description: Removes the CollisionRecorder from the traverser and
//               restores normal low-overhead operation.
//////////////////////////////////////////////////////////////////// 1 4 this 3 601  
61 0 0 7 71 610 524 0 600 ////////////////////////////////////////////////////////////////////
//     Function: CollisionTraverser::show_collisions
//       Access: Published
//  Description: This is a high-level function to create a
//               CollisionVisualizer object to render the collision
//               tests performed by this traverser.  The supplied root
//               should be any node in the scene graph; typically, the
//               top node (e.g. render).  The CollisionVisualizer will
//               be attached to this node.
//////////////////////////////////////////////////////////////////// 2 4 this 3 601  4 root 1 604  
62 0 0 4 72 570 0 0 310 ////////////////////////////////////////////////////////////////////
//     Function: CollisionTraverser::hide_collisions
//       Access: Published
//  Description: Undoes the effect of a previous call to
//               show_collisions().
//////////////////////////////////////////////////////////////////// 1 4 this 3 601  
63 0 0 4 73 570 0 0 225 ////////////////////////////////////////////////////////////////////
//     Function: CollisionTraverser::output
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 602  3 out 1 578  
64 0 0 4 74 570 0 0 224 ////////////////////////////////////////////////////////////////////
//     Function: CollisionTraverser::write
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 602  3 out 1 578  12 indent_level 1 580  
65 0 0 7 75 582 0 0 0 0 
66 0 0 4 78 570 0 0 222 ////////////////////////////////////////////////////////////////////
//     Function: CollisionRecorder::output
//       Access: Public
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 611  3 out 1 578  
67 0 0 7 79 582 0 0 0 0 
68 0 0 7 82 565 0 0 331 ////////////////////////////////////////////////////////////////////
//     Function: CollisionEntry::get_from
//       Access: Published
//  Description: Returns the CollisionSolid pointer for the particular
//               solid that triggered this collision.
//////////////////////////////////////////////////////////////////// 1 4 this 3 613  
69 0 0 6 83 569 0 0 578 ////////////////////////////////////////////////////////////////////
//     Function: CollisionEntry::has_into
//       Access: Published
//  Description: Returns true if the "into" solid is, in fact, a
//               CollisionSolid, and its pointer is known (in which
//               case get_into() may be called to retrieve it).  If
//               this returns false, the collision was detected into a
//               GeomNode, and there is no CollisionSolid pointer to
//               be retrieved.
//////////////////////////////////////////////////////////////////// 1 4 this 3 613  
70 0 0 7 84 565 0 0 515 ////////////////////////////////////////////////////////////////////
//     Function: CollisionEntry::get_into
//       Access: Published
//  Description: Returns the CollisionSolid pointer for the particular
//               solid was collided into.  This pointer might be NULL
//               if the collision was into a piece of visible
//               geometry, instead of a normal CollisionSolid
//               collision; see has_into().
//////////////////////////////////////////////////////////////////// 1 4 this 3 613  
71 0 0 7 85 594 0 0 445 ////////////////////////////////////////////////////////////////////
//     Function: CollisionEntry::get_from_node
//       Access: Published
//  Description: Returns the node that contains the CollisionSolid
//               that triggered this collision.  This will be a node
//               that has been added to a CollisionTraverser via
//               add_collider().
//////////////////////////////////////////////////////////////////// 1 4 this 3 613  
72 0 0 7 86 615 0 0 532 ////////////////////////////////////////////////////////////////////
//     Function: CollisionEntry::get_into_node
//       Access: Published
//  Description: Returns the node that contains the CollisionSolid
//               that was collided into.  This returns a PandaNode
//               pointer instead of something more specific, because
//               it might be either a CollisionNode or a GeomNode.
//
//               Also see get_into_node_path().
//////////////////////////////////////////////////////////////////// 1 4 this 3 613  
73 0 0 7 87 608 0 0 509 ////////////////////////////////////////////////////////////////////
//     Function: CollisionEntry::get_from_node_path
//       Access: Published
//  Description: Returns the NodePath that represents the
//               CollisionNode that contains the CollisionSolid that
//               triggered this collision.  This will be a NodePath
//               that has been added to a CollisionTraverser via
//               add_collider().
//////////////////////////////////////////////////////////////////// 1 4 this 3 613  
74 0 0 7 88 608 0 0 651 ////////////////////////////////////////////////////////////////////
//     Function: CollisionEntry::get_into_node_path
//       Access: Published
//  Description: Returns the NodePath that represents the specific
//               CollisionNode or GeomNode instance that was collided
//               into.  This is the same node returned by
//               get_into_node(), represented as a NodePath; however,
//               it may be more useful because the NodePath can
//               resolve the particular instance of the node, if there
//               is more than one.
//////////////////////////////////////////////////////////////////// 1 4 this 3 613  
75 0 0 4 89 570 0 0 309 ////////////////////////////////////////////////////////////////////
//     Function: CollisionEntry::set_t
//       Access: Published
//  Description: Sets a time value for this collision relative to
//               other CollisionEntries
//////////////////////////////////////////////////////////////////// 2 4 this 3 616  1 t 1 586  
76 0 0 6 90 586 0 0 310 ////////////////////////////////////////////////////////////////////
//     Function: CollisionEntry::set_t
//       Access: Published
//  Description: returns time value for this collision relative to
//               other CollisionEntries
//////////////////////////////////////////////////////////////////// 1 4 this 3 613  
77 0 0 6 91 569 0 0 446 ////////////////////////////////////////////////////////////////////
//     Function: CollisionEntry::collided
//       Access: Published
//  Description: returns true if this represents an actual collision
//               as opposed to a potential collision, needed for
//               iterative collision resolution where path of
//               collider changes mid-frame
//////////////////////////////////////////////////////////////////// 1 4 this 3 613  
78 0 0 4 92 570 0 0 264 ////////////////////////////////////////////////////////////////////
//     Function: CollisionEntry::reset_collided
//       Access: Published
//  Description: prepare for another collision test
//////////////////////////////////////////////////////////////////// 1 4 this 3 616  
79 0 0 6 93 569 0 0 479 ////////////////////////////////////////////////////////////////////
//     Function: CollisionEntry::get_respect_prev_transform
//       Access: Published
//  Description: Returns true if the collision was detected by a
//               CollisionTraverser whose respect_prev_transform
//               flag was set true, meaning we should consider motion
//               significant in evaluating collisions.
//////////////////////////////////////////////////////////////////// 1 4 this 3 613  
80 0 0 4 94 570 0 0 445 ////////////////////////////////////////////////////////////////////
//     Function: CollisionEntry::set_surface_point
//       Access: Published
//  Description: Stores the point, on the surface of the "into"
//               object, at which a collision is detected.
//
//               This point is specified in the coordinate space of
//               the "into" object.
//////////////////////////////////////////////////////////////////// 2 4 this 3 616  5 point 1 583  
81 0 0 4 95 570 0 0 439 ////////////////////////////////////////////////////////////////////
//     Function: CollisionEntry::set_surface_normal
//       Access: Published
//  Description: Stores the surface normal of the "into" object at the
//               point of the intersection.
//
//               This normal is specified in the coordinate space of
//               the "into" object.
//////////////////////////////////////////////////////////////////// 2 4 this 3 616  6 normal 1 571  
82 0 0 4 96 570 0 0 682 ////////////////////////////////////////////////////////////////////
//     Function: CollisionEntry::set_interior_point
//       Access: Published
//  Description: Stores the point, within the interior of the "into"
//               object, which represents the depth to which the
//               "from" object has penetrated.  This can also be
//               described as the intersection point on the surface of
//               the "from" object (which is inside the "into"
//               object).
//
//               This point is specified in the coordinate space of
//               the "into" object.
//////////////////////////////////////////////////////////////////// 2 4 this 3 616  5 point 1 583  
83 0 0 6 97 569 0 0 441 ////////////////////////////////////////////////////////////////////
//     Function: CollisionEntry::has_surface_point
//       Access: Published
//  Description: Returns true if the surface point has been specified,
//               false otherwise.  See get_surface_point().  Some
//               types of collisions may not compute the surface
//               point.
//////////////////////////////////////////////////////////////////// 1 4 this 3 613  
84 0 0 6 98 569 0 0 445 ////////////////////////////////////////////////////////////////////
//     Function: CollisionEntry::has_surface_normal
//       Access: Published
//  Description: Returns true if the surface normal has been specified,
//               false otherwise.  See get_surface_normal().  Some
//               types of collisions may not compute the surface
//               normal.
//////////////////////////////////////////////////////////////////// 1 4 this 3 613  
85 0 0 6 99 569 0 0 445 ////////////////////////////////////////////////////////////////////
//     Function: CollisionEntry::has_interior_point
//       Access: Published
//  Description: Returns true if the interior point has been specified,
//               false otherwise.  See get_interior_point().  Some
//               types of collisions may not compute the interior
//               point.
//////////////////////////////////////////////////////////////////// 1 4 this 3 613  
86 0 0 4 100 570 0 0 455 ////////////////////////////////////////////////////////////////////
//     Function: CollisionEntry::set_contact_pos
//       Access: Published
//  Description: Stores the position of the "from" object at the
//               instant at which the collision is first detected.
//
//               This position is specified in the coordinate space of
//               the "into" object.
//////////////////////////////////////////////////////////////////// 2 4 this 3 616  3 pos 1 583  
87 0 0 4 101 570 0 0 425 ////////////////////////////////////////////////////////////////////
//     Function: CollisionEntry::set_contact_normal
//       Access: Published
//  Description: Stores the surface normal of the "into" object at the
//               contact pos.
//
//               This normal is specified in the coordinate space of
//               the "into" object.
//////////////////////////////////////////////////////////////////// 2 4 this 3 616  6 normal 1 571  
88 0 0 6 102 569 0 0 438 ////////////////////////////////////////////////////////////////////
//     Function: CollisionEntry::has_contact_pos
//       Access: Published
//  Description: Returns true if the contact position has been specified,
//               false otherwise.  See get_contact_pos().  Some
//               types of collisions may not compute the contact
//               pos.
//////////////////////////////////////////////////////////////////// 1 4 this 3 613  
89 0 0 6 103 569 0 0 445 ////////////////////////////////////////////////////////////////////
//     Function: CollisionEntry::has_contact_normal
//       Access: Published
//  Description: Returns true if the contact normal has been specified,
//               false otherwise.  See get_contact_normal().  Some
//               types of collisions may not compute the contact
//               normal.
//////////////////////////////////////////////////////////////////// 1 4 this 3 613  
90 0 0 7 104 567 0 0 638 ////////////////////////////////////////////////////////////////////
//     Function: CollisionEntry::get_surface_point
//       Access: Published
//  Description: Returns the point, on the surface of the "into"
//               object, at which a collision is detected.  This can
//               be thought of as the first point of intersection.
//               However the contact point is the actual first point of
//               intersection.
//
//               The point will be converted into whichever coordinate
//               space the caller specifies.
//////////////////////////////////////////////////////////////////// 2 4 this 3 613  5 space 1 604  
91 0 0 7 105 617 0 0 465 ////////////////////////////////////////////////////////////////////
//     Function: CollisionEntry::get_surface_normal
//       Access: Published
//  Description: Returns the surface normal of the "into" object at
//               the point at which a collision is detected.
//
//               The normal will be converted into whichever coordinate
//               space the caller specifies.
//////////////////////////////////////////////////////////////////// 2 4 this 3 613  5 space 1 604  
92 0 0 7 106 567 0 0 772 ////////////////////////////////////////////////////////////////////
//     Function: CollisionEntry::get_interior_point
//       Access: Published
//  Description: Returns the point, within the interior of the "into"
//               object, which represents the depth to which the
//               "from" object has penetrated.  This can also be
//               described as the intersection point on the surface of
//               the "from" object (which is inside the "into"
//               object).  It can be thought of as the deepest point
//               of intersection.
//
//               The point will be converted into whichever coordinate
//               space the caller specifies.
//////////////////////////////////////////////////////////////////// 2 4 this 3 613  5 space 1 604  
93 0 0 6 107 569 0 0 515 ////////////////////////////////////////////////////////////////////
//     Function: CollisionEntry::get_all
//       Access: Published
//  Description: Simultaneously transforms the surface point, surface
//               normal, and interior point of the collision into the
//               indicated coordinate space.
//
//               Returns true if all three properties are available,
//               or false if any one of them is not.
//////////////////////////////////////////////////////////////////// 5 4 this 3 613  5 space 1 604  13 surface_point 1 567  14 surface_normal 1 617  14 interior_point 1 567  
94 0 0 7 108 567 0 0 462 ////////////////////////////////////////////////////////////////////
//     Function: CollisionEntry::get_contact_pos
//       Access: Published
//  Description: Returns the position of the "from" object at the instant
//               that a collision is first detected.
//
//               The position will be converted into whichever coordinate
//               space the caller specifies.
//////////////////////////////////////////////////////////////////// 2 4 this 3 613  5 space 1 604  
95 0 0 7 109 617 0 0 443 ////////////////////////////////////////////////////////////////////
//     Function: CollisionEntry::get_contact_normal
//       Access: Published
//  Description: Returns the surface normal of the "into" object at
//               the contact position.
//
//               The normal will be converted into whichever coordinate
//               space the caller specifies.
//////////////////////////////////////////////////////////////////// 2 4 this 3 613  5 space 1 604  
96 0 0 6 110 569 0 0 514 ////////////////////////////////////////////////////////////////////
//     Function: CollisionEntry::get_all_contact_info
//       Access: Published
//  Description: Simultaneously transforms the contact position and
//               contact normal of the collision into the
//               indicated coordinate space.
//
//               Returns true if all three properties are available,
//               or false if any one of them is not.
//////////////////////////////////////////////////////////////////// 4 4 this 3 613  5 space 1 604  11 contact_pos 1 567  14 contact_normal 1 617  
97 0 0 4 111 570 0 0 222 ////////////////////////////////////////////////////////////////////
//     Function: CollisionEntry::output
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 613  3 out 1 578  
98 0 0 4 112 570 0 0 221 ////////////////////////////////////////////////////////////////////
//     Function: CollisionEntry::write
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 3 4 this 3 613  3 out 1 578  12 indent_level 1 580  
99 0 0 7 113 582 0 0 0 0 
100 0 0 7 116 620 378 0 228 ////////////////////////////////////////////////////////////////////
//     Function: CollisionPlane::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 618  
101 0 0 7 116 620 378 0 223 ////////////////////////////////////////////////////////////////////
//     Function: CollisionPlane::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 5 plane 1 621  
102 0 0 7 117 617 0 0 225 ////////////////////////////////////////////////////////////////////
//     Function: CollisionPlane::get_normal
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 618  
103 0 0 6 118 586 0 0 228 ////////////////////////////////////////////////////////////////////
//     Function: CollisionPlane::dist_to_plane
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 618  5 point 1 583  
104 0 0 4 119 570 0 0 224 ////////////////////////////////////////////////////////////////////
//     Function: CollisionPlane::set_plane
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 620  5 plane 1 621  
105 0 0 6 120 621 0 0 224 ////////////////////////////////////////////////////////////////////
//     Function: CollisionPlane::get_plane
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 618  
106 0 0 4 121 570 0 0 266 ////////////////////////////////////////////////////////////////////
//     Function: CollisionPlane::flip
//       Access: Published
//  Description: Convenience method to flip the plane in-place.
//////////////////////////////////////////////////////////////////// 1 4 this 3 620  
107 0 0 7 122 582 0 0 0 0 
108 0 0 7 125 623 387 0 398 ////////////////////////////////////////////////////////////////////
//     Function: CollisionPlane::Default Constructor
//       Access: Protected
//  Description: This is only for the convenience of CollisionPolygon.
//               Normally, you should not attempt to create an
//               uninitialized CollisionPlane.
//////////////////////////////////////////////////////////////////// 0 
109 0 0 4 126 570 0 0 266 ////////////////////////////////////////////////////////////////////
//     Function: CollisionFloorMesh::add_vertex
//       Access: Published
//  Description: store away a vertex to index against
//////////////////////////////////////////////////////////////////// 2 4 this 3 623  4 vert 1 583  
110 0 0 4 127 570 0 0 263 ////////////////////////////////////////////////////////////////////
//     Function: CollisionFloorMesh::add_triangle
//       Access: Published
//  Description: store a triangle for processing
//////////////////////////////////////////////////////////////////// 4 4 this 3 623  6 pointA 1 624  6 pointB 1 624  6 pointC 1 624  
111 0 0 6 128 624 0 0 0 1 4 this 3 625  
112 0 0 6 129 583 0 0 0 2 4 this 3 625  5 index 1 624  
113 0 0 6 130 624 0 0 0 1 4 this 3 625  
114 0 0 7 131 628 0 0 0 2 4 this 3 625  5 index 1 624  
115 0 0 7 132 582 0 0 0 0 
116 0 0 7 135 629 395 0 228 ////////////////////////////////////////////////////////////////////
//     Function: CollisionPolygon::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 5 begin 1 583  3 end 1 583  
117 0 0 7 135 629 395 0 228 ////////////////////////////////////////////////////////////////////
//     Function: CollisionPolygon::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 1 a 1 630  1 b 1 630  1 c 1 630  
118 0 0 7 135 629 395 0 228 ////////////////////////////////////////////////////////////////////
//     Function: CollisionPolygon::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 4 1 a 1 630  1 b 1 630  1 c 1 630  1 d 1 630  
119 0 0 6 136 580 0 0 304 ////////////////////////////////////////////////////////////////////
//     Function: CollisionPolygon::get_num_points
//       Access: Published
//  Description: Returns the number of vertices of the
//               CollisionPolygon.
//////////////////////////////////////////////////////////////////// 1 4 this 3 634  
120 0 0 7 137 567 0 0 315 ////////////////////////////////////////////////////////////////////
//     Function: CollisionPolygon::get_point
//       Access: Published
//  Description: Returns the nth vertex of the CollisionPolygon,
//               expressed in 3-D space.
//////////////////////////////////////////////////////////////////// 2 4 this 3 634  1 n 1 580  
121 0 0 6 138 569 0 0 650 ////////////////////////////////////////////////////////////////////
//     Function: CollisionPolygon::verify_points
//       Access: Public, Static
//  Description: Verifies that the indicated set of points will define
//               a valid CollisionPolygon: that is, at least three
//               non-collinear points, with no points repeated.
//
//               This does not check that the polygon defined is
//               convex; that check is made later, once we have
//               projected the points to 2-d space where the decision
//               is easier.
//////////////////////////////////////////////////////////////////// 2 5 begin 1 583  3 end 1 583  
122 0 0 6 138 569 0 0 423 ////////////////////////////////////////////////////////////////////
//     Function: CollisionPolygon::verify_points
//       Access: Published, Static
//  Description: Verifies that the indicated set of points will define
//               a valid CollisionPolygon: that is, at least three
//               non-collinear points, with no points repeated.
//////////////////////////////////////////////////////////////////// 3 1 a 1 583  1 b 1 583  1 c 1 583  
123 0 0 6 138 569 0 0 423 ////////////////////////////////////////////////////////////////////
//     Function: CollisionPolygon::verify_points
//       Access: Published, Static
//  Description: Verifies that the indicated set of points will define
//               a valid CollisionPolygon: that is, at least three
//               non-collinear points, with no points repeated.
//////////////////////////////////////////////////////////////////// 4 1 a 1 583  1 b 1 583  1 c 1 583  1 d 1 583  
124 0 0 6 139 569 0 0 365 ////////////////////////////////////////////////////////////////////
//     Function: CollisionPolygon::is_valid
//       Access: Public
//  Description: Returns true if the CollisionPolygon is valid
//               (that is, it has at least three vertices), or false
//               otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 634  
125 0 0 6 140 569 0 0 334 ////////////////////////////////////////////////////////////////////
//     Function: CollisionPolygon::is_concave
//       Access: Public
//  Description: Returns true if the CollisionPolygon appears to be
//               concave, or false if it is safely convex.
//////////////////////////////////////////////////////////////////// 1 4 this 3 634  
126 0 0 7 141 582 0 0 0 0 
127 0 0 7 144 636 415 0 416 ////////////////////////////////////////////////////////////////////
//     Function: CollisionHandlerEvent::Constructor
//       Access: Public
//  Description: The default CollisionHandlerEvent will throw no
//               events.  Its pattern strings must first be set via a
//               call to add_in_pattern() and/or add_out_pattern().
//////////////////////////////////////////////////////////////////// 0 
128 0 0 4 145 570 0 0 323 ////////////////////////////////////////////////////////////////////
//     Function: CollisionHandlerEvent::clear_in_patterns
//       Access: Public
//  Description: Removes all of the previously-added in patterns.  See
//               add_in_pattern.
//////////////////////////////////////////////////////////////////// 1 4 this 3 636  
129 0 0 4 146 570 0 0 2355 ////////////////////////////////////////////////////////////////////
//     Function: CollisionHandlerEvent::add_in_pattern
//       Access: Public
//  Description: Adds a pattern string to the list of events that will
//               be generated in response to a collision.  The pattern
//               string describes how the event name will be composed.
//               It is a string that may contain any of the following:
//
//                  %fn  - the name of the "from" object's node
//                  %in  - the name of the "into" object's node
//                  %fs  - 't' if "from" is tangible, 'i' if intangible
//                  %is  - 't' if "into" is tangible, 'i' if intangible
//                  %ig  - 'c' if the collision is into a
//                          CollisionNode, 'g' if it is a geom.
//
//                  %(tag)fh - generate event only if "from" node has
//                          the indicated net tag.
//                  %(tag)fx - generate event only if "from" node does 
//                          not have the indicated net tag.
//                  %(tag)ih - generate event only if "into" node has
//                          the indicated net tag.
//                  %(tag)ix - generate event only if "into" node does 
//                          not have the indicated net tag.
//                  %(tag)ft - the indicated net tag value of the "from" node.
//                  %(tag)it - the indicated net tag value of the "into" node.
//
//               Parentheses in the above are literal and should be
//               included in the actual pattern.
//
//               The event name will be based on the in_pattern
//               string specified here, with all occurrences of the
//               above strings replaced with the corresponding values.
//
//               In general, the in_pattern event is thrown on the
//               first detection of a collision between two particular
//               nodes.  In subsequent passes, as long as a collision
//               between those two nodes continues to be detected each
//               frame, the again_pattern is thrown.  The first frame
//               in which the collision is no longer detected, the
//               out_pattern event is thrown.
//////////////////////////////////////////////////////////////////// 2 4 this 3 636  10 in_pattern 1 593  
130 0 0 4 147 570 0 0 395 ////////////////////////////////////////////////////////////////////
//     Function: CollisionHandlerEvent::set_in_pattern
//       Access: Public
//  Description: This method is deprecated; it completely replaces all
//               the in patterns that have previously been set with
//               the indicated pattern.
//////////////////////////////////////////////////////////////////// 2 4 this 3 636  10 in_pattern 1 593  
131 0 0 6 148 580 0 0 318 ////////////////////////////////////////////////////////////////////
//     Function: CollisionHandlerEvent::get_num_in_patterns
//       Access: Public
//  Description: Returns the number of in pattern strings that have
//               been added.
//////////////////////////////////////////////////////////////////// 1 4 this 3 637  
132 0 0 6 149 593 0 0 399 ////////////////////////////////////////////////////////////////////
//     Function: CollisionHandlerEvent::get_in_pattern
//       Access: Public
//  Description: Returns the nth pattern string that indicates how the
//               event names are generated for each collision
//               detected.  See add_in_pattern().
//////////////////////////////////////////////////////////////////// 2 4 this 3 637  1 n 1 580  
133 0 0 4 150 570 0 0 329 ////////////////////////////////////////////////////////////////////
//     Function: CollisionHandlerEvent::clear_again_patterns
//       Access: Public
//  Description: Removes all of the previously-added in patterns.  See
//               add_again_pattern.
//////////////////////////////////////////////////////////////////// 1 4 this 3 636  
134 0 0 4 151 570 0 0 1055 ////////////////////////////////////////////////////////////////////
//     Function: CollisionHandlerEvent::add_again_pattern
//       Access: Public
//  Description: Adds the pattern string that indicates how the event
//               names are generated when a collision between two
//               particular nodes is *still* detected.  This event is
//               thrown each consecutive time a collision between two
//               particular nodes is detected, starting with the
//               second time.
//
//               In general, the in_pattern event is thrown on the
//               first detection of a collision between two particular
//               nodes.  In subsequent passes, as long as a collision
//               between those two nodes continues to be detected each
//               frame, the again_pattern is thrown.  The first frame
//               in which the collision is no longer detected, the
//               out_pattern event is thrown.
//////////////////////////////////////////////////////////////////// 2 4 this 3 636  13 again_pattern 1 593  
135 0 0 4 152 570 0 0 398 ////////////////////////////////////////////////////////////////////
//     Function: CollisionHandlerEvent::set_again_pattern
//       Access: Public
//  Description: This method is deprecated; it completely replaces all
//               the in patterns that have previously been set with
//               the indicated pattern.
//////////////////////////////////////////////////////////////////// 2 4 this 3 636  13 again_pattern 1 593  
136 0 0 6 153 580 0 0 321 ////////////////////////////////////////////////////////////////////
//     Function: CollisionHandlerEvent::get_num_again_patterns
//       Access: Public
//  Description: Returns the number of in pattern strings that have
//               been added.
//////////////////////////////////////////////////////////////////// 1 4 this 3 637  
137 0 0 6 154 593 0 0 405 ////////////////////////////////////////////////////////////////////
//     Function: CollisionHandlerEvent::get_again_pattern
//       Access: Public
//  Description: Returns the nth pattern string that indicates how the
//               event names are generated for each collision
//               detected.  See add_again_pattern().
//////////////////////////////////////////////////////////////////// 2 4 this 3 637  1 n 1 580  
138 0 0 4 155 570 0 0 325 ////////////////////////////////////////////////////////////////////
//     Function: CollisionHandlerEvent::clear_out_patterns
//       Access: Public
//  Description: Removes all of the previously-added in patterns.  See
//               add_out_pattern.
//////////////////////////////////////////////////////////////////// 1 4 this 3 636  
139 0 0 4 156 570 0 0 877 ////////////////////////////////////////////////////////////////////
//     Function: CollisionHandlerEvent::add_out_pattern
//       Access: Public
//  Description: Adds the pattern string that indicates how the event
//               names are generated when a collision between two
//               particular nodes is *no longer* detected.
//
//               In general, the in_pattern event is thrown on the
//               first detection of a collision between two particular
//               nodes.  In subsequent passes, as long as a collision
//               between those two nodes continues to be detected each
//               frame, the again_pattern is thrown.  The first frame
//               in which the collision is no longer detected, the
//               out_pattern event is thrown.
//////////////////////////////////////////////////////////////////// 2 4 this 3 636  11 out_pattern 1 593  
140 0 0 4 157 570 0 0 396 ////////////////////////////////////////////////////////////////////
//     Function: CollisionHandlerEvent::set_out_pattern
//       Access: Public
//  Description: This method is deprecated; it completely replaces all
//               the in patterns that have previously been set with
//               the indicated pattern.
//////////////////////////////////////////////////////////////////// 2 4 this 3 636  11 out_pattern 1 593  
141 0 0 6 158 580 0 0 319 ////////////////////////////////////////////////////////////////////
//     Function: CollisionHandlerEvent::get_num_out_patterns
//       Access: Public
//  Description: Returns the number of in pattern strings that have
//               been added.
//////////////////////////////////////////////////////////////////// 1 4 this 3 637  
142 0 0 6 159 593 0 0 401 ////////////////////////////////////////////////////////////////////
//     Function: CollisionHandlerEvent::get_out_pattern
//       Access: Public
//  Description: Returns the nth pattern string that indicates how the
//               event names are generated for each collision
//               detected.  See add_out_pattern().
//////////////////////////////////////////////////////////////////// 2 4 this 3 637  1 n 1 580  
143 0 0 4 160 570 0 0 887 ////////////////////////////////////////////////////////////////////
//     Function: CollisionHandlerEvent::clear
//       Access: Public
//  Description: Empties the list of elements that all colliders are
//               known to be colliding with.  No "out" events will be
//               thrown; if the same collision is detected next frame,
//               a new "in" event will be thrown for each collision.
//
//               This can be called each frame to defeat the
//               persistent "in" event mechanism, which prevents the
//               same "in" event from being thrown repeatedly.
//               However, also see add_again_pattern(), which can be
//               used to set the event that is thrown when a collision
//               is detected for two or more consecutive frames.
//////////////////////////////////////////////////////////////////// 1 4 this 3 636  
144 0 0 4 161 570 0 0 272 ////////////////////////////////////////////////////////////////////
//     Function: CollisionHandlerEvent::flush
//       Access: Public
//  Description: Same as clear() except "out" events are thrown.
//////////////////////////////////////////////////////////////////// 1 4 this 3 636  
145 0 0 7 162 582 0 0 0 0 
146 0 0 4 165 570 0 0 452 ////////////////////////////////////////////////////////////////////
//     Function: CollisionHandlerPhysical::add_collider
//       Access: Published
//  Description: Adds a new collider to the list with a NodePath
//               that will be updated with the collider's new
//               position, or updates the existing collider with a new
//               NodePath object.
//////////////////////////////////////////////////////////////////// 3 4 this 3 639  8 collider 1 604  6 target 1 604  
147 0 0 4 165 570 0 0 705 ////////////////////////////////////////////////////////////////////
//     Function: CollisionHandlerPhysical::add_collider
//       Access: Published
//  Description: Adds a new collider to the list with a NodePath
//               that will be updated with the collider's new
//               position, or updates the existing collider with a new
//               NodePath object.
//
//               The indicated DriveInterface will also be updated
//               with the target's new transform each frame.  This
//               method should be used when the target is directly
//               controlled by a DriveInterface.
//////////////////////////////////////////////////////////////////// 4 4 this 3 639  8 collider 1 604  6 target 1 604  15 drive_interface 1 640  
148 0 0 6 166 569 0 0 336 ////////////////////////////////////////////////////////////////////
//     Function: CollisionHandlerPhysical::remove_collider
//       Access: Published
//  Description: Removes the collider from the list of colliders that
//               this handler knows about.
//////////////////////////////////////////////////////////////////// 2 4 this 3 639  8 collider 1 604  
149 0 0 6 167 569 0 0 335 ////////////////////////////////////////////////////////////////////
//     Function: CollisionHandlerPhysical::has_collider
//       Access: Published
//  Description: Returns true if the handler knows about the indicated
//               collider, false otherwise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 642  8 collider 1 604  
150 0 0 4 168 570 0 0 324 ////////////////////////////////////////////////////////////////////
//     Function: CollisionHandlerPhysical::clear_colliders
//       Access: Published
//  Description: Completely empties the list of colliders this handler
//               knows about.
//////////////////////////////////////////////////////////////////// 1 4 this 3 639  
151 0 0 4 169 570 0 0 553 ////////////////////////////////////////////////////////////////////
//     Function: CollisionHandlerPhysical::set_center
//       Access: Published
//  Description: Specifies an arbitrary NodePath that the handler is
//               always considered to be facing.  It does not detect
//               collisions with surfaces that appear to be facing
//               away from this NodePath.  This works best when the
//               collision surfaces in question are polygons.
//////////////////////////////////////////////////////////////////// 2 4 this 3 639  6 center 1 604  
152 0 0 4 170 570 0 0 291 ////////////////////////////////////////////////////////////////////
//     Function: CollisionHandlerPhysical::clear_center
//       Access: Published
//  Description: Clears the center NodePath specified with set_center.
//////////////////////////////////////////////////////////////////// 1 4 this 3 639  
153 0 0 6 171 604 0 0 353 ////////////////////////////////////////////////////////////////////
//     Function: CollisionHandlerPhysical::get_center
//       Access: Published
//  Description: Returns the NodePath specified with set_center, or
//               the empty NodePath if nothing has been specified.
//////////////////////////////////////////////////////////////////// 1 4 this 3 642  
154 0 0 6 172 569 0 0 334 ////////////////////////////////////////////////////////////////////
//     Function: CollisionHandlerPhysical::has_center
//       Access: Published
//  Description: Returns true if a NodePath has been specified with
//               set_center(), false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 642  
155 0 0 6 173 569 0 0 537 ////////////////////////////////////////////////////////////////////
//     Function: CollisionHandlerPhysical::has_contact
//       Access: Public
//  Description: Did the handler make any contacts with anything
//               on the last collision pass?  Depending on how your
//               world is setup, this can be used to tell if the
//               handler is out of the world (i.e. out of bounds).
//               That is the original use of this call.
//////////////////////////////////////////////////////////////////// 1 4 this 3 642  
156 0 0 7 174 582 0 0 0 0 
157 0 0 7 176 644 415 0 230 ////////////////////////////////////////////////////////////////////
//     Function: CollisionHandlerFloor::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
158 0 0 4 177 570 0 0 413 ////////////////////////////////////////////////////////////////////
//     Function: CollisionHandlerFloor::set_offset
//       Access: Public
//  Description: Sets the linear offset to add to (or subtract from)
//               the highest detected collision point to determine the
//               actual height at which to set the collider.
//////////////////////////////////////////////////////////////////// 2 4 this 3 644  6 offset 1 586  
159 0 0 6 178 586 0 0 416 ////////////////////////////////////////////////////////////////////
//     Function: CollisionHandlerFloor::get_offset
//       Access: Public
//  Description: Returns the linear offset to add to (or subtract from)
//               the highest detected collision point to determine the
//               actual height at which to set the collider.
//////////////////////////////////////////////////////////////////// 1 4 this 3 645  
160 0 0 4 179 570 0 0 317 ////////////////////////////////////////////////////////////////////
//     Function: CollisionHandlerFloor::set_reach
//       Access: Public
//  Description: Sets the reach to add to (or subtract from)
//               the highest collision point
//////////////////////////////////////////////////////////////////// 2 4 this 3 644  5 reach 1 586  
161 0 0 6 180 586 0 0 320 ////////////////////////////////////////////////////////////////////
//     Function: CollisionHandlerFloor::get_reach
//       Access: Public
//  Description: Returns the reach to add to (or subtract from)
//               the highest collision point
//////////////////////////////////////////////////////////////////// 1 4 this 3 645  
162 0 0 4 181 570 0 0 469 ////////////////////////////////////////////////////////////////////
//     Function: CollisionHandlerFloor::set_max_velocity
//       Access: Public
//  Description: Sets the maximum speed at which the object will be
//               allowed to descend towards a floor below it, in units
//               per second.  Set this to zero to allow it to
//               instantly teleport any distance.
//////////////////////////////////////////////////////////////////// 2 4 this 3 644  7 max_vel 1 586  
163 0 0 6 182 586 0 0 416 ////////////////////////////////////////////////////////////////////
//     Function: CollisionHandlerFloor::get_max_velocity
//       Access: Public
//  Description: Retrieves the maximum speed at which the object will
//               be allowed to descend towards a floor below it, in
//               units per second.  See set_max_velocity().
//////////////////////////////////////////////////////////////////// 1 4 this 3 645  
164 0 0 7 183 582 0 0 0 0 
165 0 0 7 185 647 415 0 231 ////////////////////////////////////////////////////////////////////
//     Function: CollisionHandlerPusher::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
166 0 0 4 186 570 0 0 234 ////////////////////////////////////////////////////////////////////
//     Function: CollisionHandlerPusher::set_horizontal
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 647  4 flag 1 569  
167 0 0 6 187 569 0 0 234 ////////////////////////////////////////////////////////////////////
//     Function: CollisionHandlerPusher::get_horizontal
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 648  
168 0 0 7 188 582 0 0 0 0 
169 0 0 7 190 650 440 0 236 ////////////////////////////////////////////////////////////////////
//     Function: CollisionHandlerFluidPusher::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
170 0 0 7 191 582 0 0 0 0 
171 0 0 7 194 651 415 0 232 ////////////////////////////////////////////////////////////////////
//     Function: CollisionHandlerGravity::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
172 0 0 4 195 570 0 0 415 ////////////////////////////////////////////////////////////////////
//     Function: CollisionHandlerGravity::set_offset
//       Access: Public
//  Description: Sets the linear offset to add to (or subtract from)
//               the highest detected collision point to determine the
//               actual height at which to set the collider.
//////////////////////////////////////////////////////////////////// 2 4 this 3 651  6 offset 1 586  
173 0 0 6 196 586 0 0 418 ////////////////////////////////////////////////////////////////////
//     Function: CollisionHandlerGravity::get_offset
//       Access: Public
//  Description: Returns the linear offset to add to (or subtract from)
//               the highest detected collision point to determine the
//               actual height at which to set the collider.
//////////////////////////////////////////////////////////////////// 1 4 this 3 652  
174 0 0 4 197 570 0 0 319 ////////////////////////////////////////////////////////////////////
//     Function: CollisionHandlerGravity::set_reach
//       Access: Public
//  Description: Sets the reach to add to (or subtract from)
//               the highest collision point
//////////////////////////////////////////////////////////////////// 2 4 this 3 651  5 reach 1 586  
175 0 0 6 198 586 0 0 322 ////////////////////////////////////////////////////////////////////
//     Function: CollisionHandlerGravity::get_reach
//       Access: Public
//  Description: Returns the reach to add to (or subtract from)
//               the highest collision point
//////////////////////////////////////////////////////////////////// 1 4 this 3 652  
176 0 0 6 199 586 0 0 527 ////////////////////////////////////////////////////////////////////
//     Function: CollisionHandlerGravity::get_airborne_height
//       Access: Public
//  Description: Return the height of the object from the ground.
//
//               The object might not necessarily be at rest.  Use
//               is_on_ground() if you want to know whether the
//               object is on the ground and at rest.
//
//               See Also: is_in_outer_space()
//////////////////////////////////////////////////////////////////// 1 4 this 3 652  
177 0 0 6 200 569 0 0 256 ////////////////////////////////////////////////////////////////////
//     Function: CollisionHandlerGravity::is_on_ground
//       Access: Public
//  Description: Is the object at rest?
//////////////////////////////////////////////////////////////////// 1 4 this 3 652  
178 0 0 6 201 586 0 0 586 ////////////////////////////////////////////////////////////////////
//     Function: CollisionHandlerGravity::get_impact_velocity
//       Access: Public
//  Description: How hard did the object hit the ground.
//               This value is set on impact with the ground.
//               You may want to watch (poll) on is_on_groun() and
//               when that is true, call get_impact_velocity().
//               Normally I avoid polling, but we are calling
//               is_on_ground() frequently anyway.
//////////////////////////////////////////////////////////////////// 1 4 this 3 652  
179 0 0 6 202 571 0 0 240 ////////////////////////////////////////////////////////////////////
//    Function : CollisionHandlerGravity::get_contact_normal
//      Access : Public
// Description : 
//////////////////////////////////////////////////////////////////// 1 4 this 3 652  
180 0 0 4 203 570 0 0 451 ////////////////////////////////////////////////////////////////////
//     Function: CollisionHandlerGravity::add_velocity
//       Access: Public
//  Description: Adds the sepcified amount to the current velocity.
//               This is mostly here allow this common operation to
//               be faster for scripting, but it's also more concise
//               even in cpp.
//////////////////////////////////////////////////////////////////// 2 4 this 3 651  8 velocity 1 586  
181 0 0 4 204 570 0 0 269 ////////////////////////////////////////////////////////////////////
//     Function: CollisionHandlerGravity::set_velocity
//       Access: Public
//  Description: Sets the current vertical velocity.
//////////////////////////////////////////////////////////////////// 2 4 this 3 651  8 velocity 1 586  
182 0 0 6 205 586 0 0 681 ////////////////////////////////////////////////////////////////////
//     Function: CollisionHandlerGravity::get_velocity
//       Access: Public
//  Description: Gets the current vertical velocity.
//
//               Generally, negative values mean the object is in
//               free fall; while postive values mean the object has
//               vertical thrust.
//
//               A zero value does not necessarily mean the object
//               on the ground, it may also be weightless and/or at
//               the apex of its jump.
//
//               See Also: is_on_ground() and get_gravity()
//////////////////////////////////////////////////////////////////// 1 4 this 3 652  
183 0 0 4 206 570 0 0 278 ////////////////////////////////////////////////////////////////////
//     Function: CollisionHandlerGravity::set_gravity
//       Access: Public
//  Description: Sets the linear gravity force (always plumb).
//////////////////////////////////////////////////////////////////// 2 4 this 3 651  7 gravity 1 586  
184 0 0 6 207 586 0 0 278 ////////////////////////////////////////////////////////////////////
//     Function: CollisionHandlerGravity::get_gravity
//       Access: Public
//  Description: Gets the linear gravity force (always plumb).
//////////////////////////////////////////////////////////////////// 1 4 this 3 652  
185 0 0 4 208 570 0 0 471 ////////////////////////////////////////////////////////////////////
//     Function: CollisionHandlerGravity::set_max_velocity
//       Access: Public
//  Description: Sets the maximum speed at which the object will be
//               allowed to descend towards a floor below it, in units
//               per second.  Set this to zero to allow it to
//               instantly teleport any distance.
//////////////////////////////////////////////////////////////////// 2 4 this 3 651  7 max_vel 1 586  
186 0 0 6 209 586 0 0 418 ////////////////////////////////////////////////////////////////////
//     Function: CollisionHandlerGravity::get_max_velocity
//       Access: Public
//  Description: Retrieves the maximum speed at which the object will
//               be allowed to descend towards a floor below it, in
//               units per second.  See set_max_velocity().
//////////////////////////////////////////////////////////////////// 1 4 this 3 652  
187 0 0 4 210 570 0 0 517 ////////////////////////////////////////////////////////////////////
//     Function: CollisionHandlerGravity::set_legacy_mode
//       Access: Public
//  Description: Enables old behavior required by Toontown
//               (Sellbot Factory lava room is good test case,
//               lava and conveyor belt specifically). Behavior
//               is to throw enter/exit events only for floor
//               that the toon is in contact with
//////////////////////////////////////////////////////////////////// 2 4 this 3 651  11 legacy_mode 1 569  
188 0 0 6 211 569 0 0 275 ////////////////////////////////////////////////////////////////////
//     Function: CollisionHandlerGravity::get_legacy_mode
//       Access: Public
//  Description: returns true if legacy mode is enabled
//////////////////////////////////////////////////////////////////// 1 4 this 3 652  
189 0 0 7 212 582 0 0 0 0 
190 0 0 7 214 654 462 0 416 ////////////////////////////////////////////////////////////////////
//     Function: CollisionHandlerEvent::Constructor
//       Access: Public
//  Description: The default CollisionHandlerEvent will throw no
//               events.  Its pattern strings must first be set via a
//               call to add_in_pattern() and/or add_out_pattern().
//////////////////////////////////////////////////////////////////// 0 
191 0 0 7 215 582 0 0 0 0 
192 0 0 7 218 655 471 0 233 ////////////////////////////////////////////////////////////////////
//     Function: CollisionHandlerQueue::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
193 0 0 4 219 570 0 0 540 ////////////////////////////////////////////////////////////////////
//     Function: CollisionHandlerQueue::sort_entries
//       Access: Published
//  Description: Sorts all the detected collisions front-to-back by
//               from_intersection_point() so that those intersection
//               points closest to the collider's origin (e.g., the
//               center of the CollisionSphere, or the point_a of a
//               CollisionSegment) appear first.
//////////////////////////////////////////////////////////////////// 1 4 this 3 655  
194 0 0 4 220 570 0 0 275 ////////////////////////////////////////////////////////////////////
//     Function: CollisionHandlerQueue::clear_entries
//       Access: Published
//  Description: Removes all the entries from the queue.
//////////////////////////////////////////////////////////////////// 1 4 this 3 655  
195 0 0 6 221 580 0 0 313 ////////////////////////////////////////////////////////////////////
//     Function: CollisionHandlerQueue::get_num_entries
//       Access: Published
//  Description: Returns the number of CollisionEntries detected last
//               pass.
//////////////////////////////////////////////////////////////////// 1 4 this 3 656  
196 0 0 7 222 616 370 0 282 ////////////////////////////////////////////////////////////////////
//     Function: CollisionHandlerQueue::get_entry
//       Access: Published
//  Description: Returns the nth CollisionEntry detected last pass.
//////////////////////////////////////////////////////////////////// 2 4 this 3 656  1 n 1 580  
197 0 0 4 223 570 0 0 229 ////////////////////////////////////////////////////////////////////
//     Function: CollisionHandlerQueue::output
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 656  3 out 1 578  
198 0 0 4 224 570 0 0 228 ////////////////////////////////////////////////////////////////////
//     Function: CollisionHandlerQueue::write
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 3 4 this 3 656  3 out 1 578  12 indent_level 1 580  
199 0 0 7 225 582 0 0 0 0 
200 0 0 7 228 658 478 0 224 ////////////////////////////////////////////////////////////////////
//     Function: CollisionSphere::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 6 center 1 583  6 radius 1 586  
201 0 0 7 228 658 478 0 224 ////////////////////////////////////////////////////////////////////
//     Function: CollisionSphere::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 4 2 cx 1 586  2 cy 1 586  2 cz 1 586  6 radius 1 586  
202 0 0 4 229 570 0 0 226 ////////////////////////////////////////////////////////////////////
//     Function: CollisionSphere::set_center
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 658  6 center 1 583  
203 0 0 4 229 570 0 0 226 ////////////////////////////////////////////////////////////////////
//     Function: CollisionSphere::set_center
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 4 4 this 3 658  1 x 1 586  1 y 1 586  1 z 1 586  
204 0 0 6 230 583 0 0 226 ////////////////////////////////////////////////////////////////////
//     Function: CollisionSphere::get_center
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 659  
205 0 0 4 231 570 0 0 226 ////////////////////////////////////////////////////////////////////
//     Function: CollisionSphere::set_radius
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 658  6 radius 1 586  
206 0 0 6 232 586 0 0 226 ////////////////////////////////////////////////////////////////////
//     Function: CollisionSphere::get_radius
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 659  
207 0 0 7 233 582 0 0 0 0 
208 0 0 7 236 661 481 0 227 ////////////////////////////////////////////////////////////////////
//     Function: CollisionInvSphere::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 6 center 1 583  6 radius 1 586  
209 0 0 7 236 661 481 0 227 ////////////////////////////////////////////////////////////////////
//     Function: CollisionInvSphere::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 4 2 cx 1 586  2 cy 1 586  2 cz 1 586  6 radius 1 586  
210 0 0 7 237 582 0 0 0 0 
211 0 0 7 240 662 489 0 447 ////////////////////////////////////////////////////////////////////
//     Function: CollisionRay::Default Constructor
//       Access: Public
//  Description: Creates an invalid ray.  This isn't terribly useful;
//               it's expected that the user will subsequently adjust
//               the ray via set_origin()/set_direction() or
//               set_from_lens().
//////////////////////////////////////////////////////////////////// 0 
212 0 0 7 240 662 489 0 221 ////////////////////////////////////////////////////////////////////
//     Function: CollisionRay::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 6 origin 1 583  9 direction 1 571  
213 0 0 7 240 662 489 0 221 ////////////////////////////////////////////////////////////////////
//     Function: CollisionRay::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 6 2 ox 1 586  2 oy 1 586  2 oz 1 586  2 dx 1 586  2 dy 1 586  2 dz 1 586  
214 0 0 4 241 570 0 0 220 ////////////////////////////////////////////////////////////////////
//     Function: CollisionRay::set_origin
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 662  6 origin 1 583  
215 0 0 4 241 570 0 0 220 ////////////////////////////////////////////////////////////////////
//     Function: CollisionRay::set_origin
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 4 4 this 3 662  1 x 1 586  1 y 1 586  1 z 1 586  
216 0 0 6 242 583 0 0 220 ////////////////////////////////////////////////////////////////////
//     Function: CollisionRay::get_origin
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 663  
217 0 0 4 243 570 0 0 223 ////////////////////////////////////////////////////////////////////
//     Function: CollisionRay::set_direction
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 662  9 direction 1 571  
218 0 0 4 243 570 0 0 223 ////////////////////////////////////////////////////////////////////
//     Function: CollisionRay::set_direction
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 4 4 this 3 662  1 x 1 586  1 y 1 586  1 z 1 586  
219 0 0 6 244 571 0 0 223 ////////////////////////////////////////////////////////////////////
//     Function: CollisionRay::get_direction
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 663  
220 0 0 6 245 569 0 0 630 ////////////////////////////////////////////////////////////////////
//     Function: CollisionRay::set_from_lens
//       Access: Public
//  Description: Accepts a LensNode and a 2-d point in the range
//               [-1,1].  Sets the CollisionRay so that it begins at
//               the LensNode's near plane and extends to
//               infinity, making it suitable for picking objects from
//               the screen given a camera and a mouse location.
//
//               Returns true if the point was acceptable, false
//               otherwise.
//////////////////////////////////////////////////////////////////// 3 4 this 3 662  6 camera 1 665  5 point 1 667  
221 0 0 6 245 569 0 0 534 ////////////////////////////////////////////////////////////////////
//     Function: CollisionRay::set_from_lens
//       Access: Public
//  Description: Accepts a LensNode and a 2-d point in the range
//               [-1,1].  Sets the CollisionRay so that it begins at
//               the LensNode's near plane and extends to
//               infinity, making it suitable for picking objects from
//               the screen given a camera and a mouse location.
//////////////////////////////////////////////////////////////////// 4 4 this 3 662  6 camera 1 665  2 px 1 586  2 py 1 586  
222 0 0 7 246 582 0 0 0 0 
223 0 0 7 249 671 492 0 450 ////////////////////////////////////////////////////////////////////
//     Function: CollisionLine::Default Constructor
//       Access: Public
//  Description: Creates an invalid line.  This isn't terribly useful;
//               it's expected that the user will subsequently adjust
//               the line via set_origin()/set_direction() or
//               set_from_lens().
//////////////////////////////////////////////////////////////////// 0 
224 0 0 7 249 671 492 0 222 ////////////////////////////////////////////////////////////////////
//     Function: CollisionLine::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 6 origin 1 583  9 direction 1 571  
225 0 0 7 249 671 492 0 222 ////////////////////////////////////////////////////////////////////
//     Function: CollisionLine::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 6 2 ox 1 586  2 oy 1 586  2 oz 1 586  2 dx 1 586  2 dy 1 586  2 dz 1 586  
226 0 0 7 250 582 0 0 0 0 
227 0 0 7 253 672 501 0 266 ////////////////////////////////////////////////////////////////////
//     Function: CollisionParabola::Default Constructor
//       Access: Published
//  Description: Creates an invalid parabola.
//////////////////////////////////////////////////////////////////// 0 
228 0 0 7 253 672 501 0 343 ////////////////////////////////////////////////////////////////////
//     Function: CollisionParabola::Constructor
//       Access: Published
//  Description: Creates a parabola with the endpoints between t1 and
//               t2 in the parametric space of the parabola.
//////////////////////////////////////////////////////////////////// 3 8 parabola 1 673  2 t1 1 586  2 t2 1 586  
229 0 0 4 254 570 0 0 274 ////////////////////////////////////////////////////////////////////
//     Function: CollisionParabola::set_parabola
//       Access: Public
//  Description: Replaces the parabola specified by this solid.
//////////////////////////////////////////////////////////////////// 2 4 this 3 672  8 parabola 1 673  
230 0 0 6 255 673 0 0 273 ////////////////////////////////////////////////////////////////////
//     Function: CollisionParabola::get_parabola
//       Access: Public
//  Description: Returns the parabola specified by this solid.
//////////////////////////////////////////////////////////////////// 1 4 this 3 677  
231 0 0 4 256 570 0 0 265 ////////////////////////////////////////////////////////////////////
//     Function: CollisionParabola::set_t1
//       Access: Public
//  Description: Changes the starting point on the parabola.
//////////////////////////////////////////////////////////////////// 2 4 this 3 672  2 t1 1 586  
232 0 0 6 257 586 0 0 265 ////////////////////////////////////////////////////////////////////
//     Function: CollisionParabola::get_t1
//       Access: Public
//  Description: Returns the starting point on the parabola.
//////////////////////////////////////////////////////////////////// 1 4 this 3 677  
233 0 0 4 258 570 0 0 263 ////////////////////////////////////////////////////////////////////
//     Function: CollisionParabola::set_t2
//       Access: Public
//  Description: Changes the ending point on the parabola.
//////////////////////////////////////////////////////////////////// 2 4 this 3 672  2 t2 1 586  
234 0 0 6 259 586 0 0 263 ////////////////////////////////////////////////////////////////////
//     Function: CollisionParabola::get_t2
//       Access: Public
//  Description: Returns the ending point on the parabola.
//////////////////////////////////////////////////////////////////// 1 4 this 3 677  
235 0 0 7 260 582 0 0 0 0 
236 0 0 7 263 679 509 0 459 ////////////////////////////////////////////////////////////////////
//     Function: CollisionSegment::Default Constructor
//       Access: Public
//  Description: Creates an invalid segment.  This isn't terribly useful;
//               it's expected that the user will subsequently adjust
//               the segment via set_origin()/set_direction() or
//               set_from_lens().
//////////////////////////////////////////////////////////////////// 0 
237 0 0 7 263 679 509 0 225 ////////////////////////////////////////////////////////////////////
//     Function: CollisionSegment::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 1 a 1 583  2 db 1 583  
238 0 0 7 263 679 509 0 225 ////////////////////////////////////////////////////////////////////
//     Function: CollisionSegment::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 6 2 ax 1 586  2 ay 1 586  2 az 1 586  2 bx 1 586  2 by 1 586  2 bz 1 586  
239 0 0 4 264 570 0 0 225 ////////////////////////////////////////////////////////////////////
//     Function: CollisionSegment::set_point_a
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 679  1 a 1 583  
240 0 0 4 264 570 0 0 225 ////////////////////////////////////////////////////////////////////
//     Function: CollisionSegment::set_point_a
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 4 4 this 3 679  1 x 1 586  1 y 1 586  1 z 1 586  
241 0 0 6 265 583 0 0 225 ////////////////////////////////////////////////////////////////////
//     Function: CollisionSegment::get_point_a
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 680  
242 0 0 4 266 570 0 0 225 ////////////////////////////////////////////////////////////////////
//     Function: CollisionSegment::set_point_b
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 679  1 b 1 583  
243 0 0 4 266 570 0 0 225 ////////////////////////////////////////////////////////////////////
//     Function: CollisionSegment::set_point_b
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 4 4 this 3 679  1 x 1 586  1 y 1 586  1 z 1 586  
244 0 0 6 267 583 0 0 225 ////////////////////////////////////////////////////////////////////
//     Function: CollisionSegment::get_point_b
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 680  
245 0 0 6 268 569 0 0 643 ////////////////////////////////////////////////////////////////////
//     Function: CollisionSegment::set_from_lens
//       Access: Public
//  Description: Accepts a LensNode and a 2-d point in the range
//               [-1,1].  Sets the CollisionSegment so that it begins at
//               the LensNode's near plane and extends to the
//               far plane, making it suitable for picking objects
//               from the screen given a camera and a mouse location.
//
//               Returns true if the point was acceptable, false
//               otherwise.
//////////////////////////////////////////////////////////////////// 3 4 this 3 679  6 camera 1 665  5 point 1 667  
246 0 0 6 268 569 0 0 547 ////////////////////////////////////////////////////////////////////
//     Function: CollisionSegment::set_from_lens
//       Access: Public
//  Description: Accepts a LensNode and a 2-d point in the range
//               [-1,1].  Sets the CollisionSegment so that it begins at
//               the LensNode's near plane and extends to the
//               far plane, making it suitable for picking objects
//               from the screen given a camera and a mouse location.
//////////////////////////////////////////////////////////////////// 4 4 this 3 679  6 camera 1 665  2 px 1 586  2 py 1 586  
247 0 0 7 269 582 0 0 0 0 
248 0 0 7 272 682 518 0 222 ////////////////////////////////////////////////////////////////////
//     Function: CollisionTube::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 3 1 a 1 583  2 db 1 583  6 radius 1 586  
249 0 0 7 272 682 518 0 222 ////////////////////////////////////////////////////////////////////
//     Function: CollisionTube::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 7 2 ax 1 586  2 ay 1 586  2 az 1 586  2 bx 1 586  2 by 1 586  2 bz 1 586  6 radius 1 586  
250 0 0 4 273 570 0 0 225 ////////////////////////////////////////////////////////////////////
//     Function: CollisionTube::set_point_a
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 682  1 a 1 583  
251 0 0 4 273 570 0 0 225 ////////////////////////////////////////////////////////////////////
//     Function: CollisionTube::set_point_a
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 4 4 this 3 682  1 x 1 586  1 y 1 586  1 z 1 586  
252 0 0 6 274 583 0 0 225 ////////////////////////////////////////////////////////////////////
//     Function: CollisionTube::get_point_a
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 683  
253 0 0 4 275 570 0 0 225 ////////////////////////////////////////////////////////////////////
//     Function: CollisionTube::set_point_b
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 682  1 b 1 583  
254 0 0 4 275 570 0 0 225 ////////////////////////////////////////////////////////////////////
//     Function: CollisionTube::set_point_b
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 4 4 this 3 682  1 x 1 586  1 y 1 586  1 z 1 586  
255 0 0 6 276 583 0 0 225 ////////////////////////////////////////////////////////////////////
//     Function: CollisionTube::get_point_b
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 683  
256 0 0 4 277 570 0 0 224 ////////////////////////////////////////////////////////////////////
//     Function: CollisionTube::set_radius
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 682  6 radius 1 586  
257 0 0 6 278 586 0 0 224 ////////////////////////////////////////////////////////////////////
//     Function: CollisionTube::get_radius
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 683  
258 0 0 7 279 582 0 0 0 0 
259 0 0 7 286 610 524 0 231 ////////////////////////////////////////////////////////////////////
//     Function: CollisionVisualizer::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 name 1 593  
260 0 0 4 288 570 0 0 741 ////////////////////////////////////////////////////////////////////
//     Function: CollisionVisualizer::set_point_scale
//       Access: Published
//  Description: Scales the points that are drawn to represent the
//               surface and interior intersection points of the
//               collisions.  By default, these objects are drawn at
//               an arbitrary scale which is appropriate if the window
//               units are the default range -1 .. 1.  Change this
//               scale accordinatly if the window units are measured
//               on some other scale or if you need to observe these
//               objects in a smaller window.
//////////////////////////////////////////////////////////////////// 2 4 this 3 610  11 point_scale 1 586  
261 0 0 6 289 586 0 0 284 ////////////////////////////////////////////////////////////////////
//     Function: CollisionVisualizer::get_point_scale
//       Access: Published
//  Description: Returns the value last set by set_point_scale().
//////////////////////////////////////////////////////////////////// 1 4 this 3 685  
262 0 0 4 290 570 0 0 685 ////////////////////////////////////////////////////////////////////
//     Function: CollisionVisualizer::set_normal_scale
//       Access: Published
//  Description: Scales the line segments that are drawn to represent
//               the normals of the collisions.  By default, these
//               objects are drawn at an arbitrary scale which is
//               appropriate if the scene units are measured in feet.
//               Change this scale accordinatly if the scene units are
//               measured on some other scale or if you need to
//               observe these normals from farther away.
//////////////////////////////////////////////////////////////////// 2 4 this 3 610  12 normal_scale 1 586  
263 0 0 6 291 586 0 0 286 ////////////////////////////////////////////////////////////////////
//     Function: CollisionVisualizer::get_normal_scale
//       Access: Published
//  Description: Returns the value last set by set_normal_scale().
//////////////////////////////////////////////////////////////////// 1 4 this 3 685  
264 0 0 4 292 570 0 0 339 ////////////////////////////////////////////////////////////////////
//     Function: CollisionVisualizer::clear
//       Access: Published
//  Description: Removes all the visualization data from a previous
//               traversal and resets the visualizer to empty.
//////////////////////////////////////////////////////////////////// 1 4 this 3 610  
265 0 0 7 293 582 0 0 0 0 
266 0 0 7 282 615 0 0 0 1 4 this 3 610  
267 0 0 7 283 610 524 0 0 1 4 this 3 615  
268 0 0 6 284 609 0 0 0 1 4 this 3 610  
269 0 0 7 285 610 524 0 0 1 4 this 3 609  
156
531 14 CollisionSolid 0 75777 14 CollisionSolid 14 CollisionSolid 0 0 0 0 0 0 14 270 271 272 273 274 275 276 277 278 279 280 281 282 283 0 0 1 0 532 0 0 0 0 754
////////////////////////////////////////////////////////////////////
//       Class : CollisionSolid
// Description : The abstract base class for all things that can
//               collide with other things in the world, and all the
//               things they can collide with (except geometry).
//
//               This class and its derivatives really work very
//               similarly to the way BoundingVolume and all of its
//               derivatives work.  There's a different subclass for
//               each basic shape of solid, and double-dispatch
//               function calls handle the subset of the N*N
//               intersection tests that we care about.
////////////////////////////////////////////////////////////////////

532 17 CopyOnWriteObject 0 2049 17 CopyOnWriteObject 17 CopyOnWriteObject 0 0 0 0 0 0 0 0 0 0 0 0 376
////////////////////////////////////////////////////////////////////
//       Class : CopyOnWriteObject
// Description : This base class provides basic reference counting,
//               but also can be used with a CopyOnWritePointer to
//               provide get_read_pointer() and get_write_pointer().
////////////////////////////////////////////////////////////////////

533 12 CollisionBox 0 141313 12 CollisionBox 12 CollisionBox 0 0 0 1 284 295 0 10 285 286 287 288 289 290 291 292 293 294 0 0 1 0 531 0 0 0 0 221
////////////////////////////////////////////////////////////////////
//       Class : CollisionBox
// Description : A cuboid collision volume or object.
////////////////////////////////////////////////////////////////////

534 16 CollisionHandler 0 141313 16 CollisionHandler 16 CollisionHandler 0 0 0 0 297 0 1 296 0 0 1 0 535 0 0 0 0 499
////////////////////////////////////////////////////////////////////
//       Class : CollisionHandler
// Description : The abstract interface to a number of classes that
//               decide what to do when a collision is detected.  One
//               of these must be assigned to the CollisionTraverser
//               that is processing collisions in order to specify how
//               to dispatch detected collisions.
////////////////////////////////////////////////////////////////////

535 19 TypedReferenceCount 0 2049 19 TypedReferenceCount 19 TypedReferenceCount 0 0 0 0 0 0 0 0 0 0 0 0 710
////////////////////////////////////////////////////////////////////
//       Class : TypedReferenceCount
// Description : A base class for things which need to inherit from
//               both TypedObject and from ReferenceCount.  It's
//               convenient to define this intermediate base class
//               instead of multiply inheriting from the two classes
//               each time they are needed, so that we can sensibly
//               pass around pointers to things which are both
//               TypedObjects and ReferenceCounters.
//               
//               See also TypedObject for detailed instructions.
////////////////////////////////////////////////////////////////////

536 13 CollisionNode 0 75777 13 CollisionNode 13 CollisionNode 0 0 0 1 298 0 0 16 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 1 687 0 1 0 537 0 0 0 0 496
////////////////////////////////////////////////////////////////////
//       Class : CollisionNode
// Description : A node in the scene graph that can hold any number of
//               CollisionSolids.  This may either represent a bit of
//               static geometry in the scene that things will collide
//               with, or an animated object twirling around in the
//               world and running into things.
////////////////////////////////////////////////////////////////////

537 9 PandaNode 0 2049 9 PandaNode 9 PandaNode 0 0 0 0 0 0 0 3 688 689 690 0 0 0 0 374
////////////////////////////////////////////////////////////////////
//       Class : PandaNode
// Description : A basic node of the scene graph or data graph.  This
//               is the base class of all specialized nodes, and also
//               serves as a generic node with no special properties.
////////////////////////////////////////////////////////////////////

538 18 CollisionTraverser 0 26625 18 CollisionTraverser 18 CollisionTraverser 0 0 0 1 315 316 0 19 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 1 691 0 1 0 539 0 0 0 0 765
////////////////////////////////////////////////////////////////////
//       Class : CollisionTraverser
// Description : This class manages the traversal through the scene
//               graph to detect collisions.  It holds ownership of a
//               number of collider objects, each of which is a
//               CollisionNode and an associated CollisionHandler.
//
//               When traverse() is called, it begins at the indicated
//               root and detects all collisions with any of its
//               collider objects against nodes at or below the
//               indicated root, calling the appropriate
//               CollisionHandler for each detected collision.
////////////////////////////////////////////////////////////////////

539 7 Namable 0 2049 7 Namable 7 Namable 0 0 0 0 0 0 0 0 0 0 0 0 324
////////////////////////////////////////////////////////////////////
//       Class : Namable
// Description : A base class for all things which can have a name.
//               The name is either empty or nonempty, but it is never
//               NULL.
////////////////////////////////////////////////////////////////////

540 17 CollisionRecorder 0 75777 17 CollisionRecorder 17 CollisionRecorder 0 0 0 0 0 0 2 336 337 0 0 1 0 541 0 0 0 0 431
////////////////////////////////////////////////////////////////////
//       Class : CollisionRecorder
// Description : This class is used to help debug the work the
//               collisions system is doing.  It is a virtual base
//               class that just provides an interface for recording
//               collisions tested and detected each frame.
////////////////////////////////////////////////////////////////////

541 11 TypedObject 0 2049 11 TypedObject 11 TypedObject 0 0 0 0 0 0 0 0 0 0 0 0 3561
////////////////////////////////////////////////////////////////////
//       Class : TypedObject
// Description : This is an abstract class that all classes which
//               use TypeHandle, and also provide virtual functions to
//               support polymorphism, should inherit from.  Each
//               derived class should define get_type(), which should
//               return the specific type of the derived class.
//               Inheriting from this automatically provides support
//               for is_of_type() and is_exact_type().
//
//               All classes that inherit directly or indirectly from
//               TypedObject should redefine get_type() and
//               force_init_type(), as shown below.  Some classes that
//               do not inherit from TypedObject may still declare
//               TypeHandles for themselves by defining methods called
//               get_class_type() and init_type().  Classes such as
//               these may serve as base classes, but the dynamic type
//               identification system will be limited.  Classes that
//               do not inherit from TypedObject need not define the
//               virtual functions get_type() and force_init_type()
//               (or any other virtual functions).
//
//               There is a specific layout for defining the
//               overrides from this class.  Keeping the definitions
//               formatted just like these examples will allow
//               someone in the future to use a sed (or similar)
//               script to make global changes, if necessary.  Avoid
//               rearranging the braces or the order of the functions
//               unless you're ready to change them in every file all
//               at once.
//
//               What follows are some examples that can be used in
//               new classes that you create.
//
//               @par In the class definition (.h file):
//               @code
//               public:
//                 static TypeHandle get_class_type() {
//                   return _type_handle;
//                 }
//                 static void init_type() {
//                   <<<BaseClassOne>>>::init_type();
//                   <<<BaseClassTwo>>>::init_type();
//                   <<<BaseClassN>>>::init_type();
//                   register_type(_type_handle, "<<<ThisClassStringName>>>",
//                                 <<<BaseClassOne>>>::get_class_type(),
//                                 <<<BaseClassTwo>>>::get_class_type(),
//                                 <<<BaseClassN>>>::get_class_type());
//                 }
//                 virtual TypeHandle get_type() const {
//                   return get_class_type();
//                 }
//                 virtual TypeHandle force_init_type() {init_type(); return get_class_type();}
//
//               private:
//                 static TypeHandle _type_handle;
//               @endcode
//
//               @par In the class .cxx file:
//               @code
//               TypeHandle <<<ThisClassStringName>>>::_type_handle;
//               @endcode
//
//               @par In the class config_<<<PackageName>>>.cxx file:
//               @code
//               ConfigureFn(config_<<<PackageName>>>) {
//                 <<<ClassOne>>>::init_type();
//                 <<<ClassTwo>>>::init_type();
//                 <<<ClassN>>>::init_type();
//               }
//               @endcode
////////////////////////////////////////////////////////////////////

542 14 CollisionEntry 0 141313 14 CollisionEntry 14 CollisionEntry 0 0 0 0 370 0 32 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 0 0 1 0 543 0 0 0 0 731
////////////////////////////////////////////////////////////////////
//       Class : CollisionEntry
// Description : Defines a single collision event.  One of these is
//               created for each collision detected by a
//               CollisionTraverser, to be dealt with by the
//               CollisionHandler.
//
//               A CollisionEntry provides slots for a number of data
//               values (such as intersection point and normal) that
//               might or might not be known for each collision.  It
//               is up to the handler to determine what information is
//               known and to do the right thing with it.
////////////////////////////////////////////////////////////////////

543 27 TypedWritableReferenceCount 0 2049 27 TypedWritableReferenceCount 27 TypedWritableReferenceCount 0 0 0 0 0 0 0 0 0 0 0 0 722
////////////////////////////////////////////////////////////////////
//       Class : TypedWritableReferenceCount
// Description : A base class for things which need to inherit from
//               both TypedWritable and from ReferenceCount.  It's
//               convenient to define this intermediate base class
//               instead of multiply inheriting from the two classes
//               each time they are needed, so that we can sensibly
//               pass around pointers to things which are both
//               TypedWritables and ReferenceCounters.
//               
//               See also TypedObject for detailed instructions.
////////////////////////////////////////////////////////////////////

544 14 CollisionPlane 0 141313 14 CollisionPlane 14 CollisionPlane 0 0 0 1 371 378 0 6 372 373 374 375 376 377 0 0 1 0 531 0 0 0 0 186
////////////////////////////////////////////////////////////////////
//       Class : CollisionPlane
// Description :
////////////////////////////////////////////////////////////////////

545 18 CollisionFloorMesh 0 141313 18 CollisionFloorMesh 18 CollisionFloorMesh 0 0 0 1 379 387 0 7 380 381 382 383 384 385 386 2 692 693 0 1 0 531 0 0 0 0 318
////////////////////////////////////////////////////////////////////
//       Class : CollisionFloorMesh
// Description : This object represents a solid made entirely of triangles, which
//               will only be tested again z axis aligned rays
////////////////////////////////////////////////////////////////////

546 16 CollisionPolygon 0 141313 16 CollisionPolygon 16 CollisionPolygon 0 0 0 1 388 395 0 6 389 390 391 392 393 394 1 694 0 1 0 544 0 0 0 0 188
////////////////////////////////////////////////////////////////////
//       Class : CollisionPolygon
// Description :
////////////////////////////////////////////////////////////////////

547 21 CollisionHandlerEvent 0 141313 21 CollisionHandlerEvent 21 CollisionHandlerEvent 0 0 0 1 396 415 0 18 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 3 695 696 697 0 1 0 534 0 0 0 0 555
////////////////////////////////////////////////////////////////////
//       Class : CollisionHandlerEvent
// Description : A specialized kind of CollisionHandler that throws an
//               event for each collision detected.  The event thrown
//               may be based on the name of the moving object or the
//               struck object, or both.  The first parameter of the
//               event will be a pointer to the CollisionEntry that
//               triggered it.
////////////////////////////////////////////////////////////////////

548 24 CollisionHandlerPhysical 0 75777 24 CollisionHandlerPhysical 24 CollisionHandlerPhysical 0 0 0 0 415 0 10 416 417 418 419 420 421 422 423 424 425 0 0 1 0 547 0 0 0 0 440
////////////////////////////////////////////////////////////////////
//       Class : CollisionHandlerPhysical
// Description : The abstract base class for a number of
//               CollisionHandlers that have some physical effect on
//               their moving bodies: they need to update the nodes'
//               positions based on the effects of the collision.
////////////////////////////////////////////////////////////////////

549 21 CollisionHandlerFloor 0 75777 21 CollisionHandlerFloor 21 CollisionHandlerFloor 0 0 0 1 426 415 0 7 427 428 429 430 431 432 433 0 0 1 0 548 0 0 0 0 552
////////////////////////////////////////////////////////////////////
//       Class : CollisionHandlerFloor
// Description : A specialized kind of CollisionHandler that sets the
//               Z height of the collider to a fixed linear offset
//               from the highest detected collision point each frame.
//               It's intended to implement walking around on a floor
//               of varying height by casting a ray down from the
//               avatar's head.
////////////////////////////////////////////////////////////////////

550 22 CollisionHandlerPusher 0 75777 22 CollisionHandlerPusher 22 CollisionHandlerPusher 0 0 0 1 434 415 0 3 435 436 437 0 0 1 0 548 0 0 0 0 425
////////////////////////////////////////////////////////////////////
//       Class : CollisionHandlerPusher
// Description : A specialized kind of CollisionHandler that simply
//               pushes back on things that attempt to move into solid
//               walls.  This is the simplest kind of "real-world"
//               collisions you can have.
////////////////////////////////////////////////////////////////////

551 27 CollisionHandlerFluidPusher 0 141313 27 CollisionHandlerFluidPusher 27 CollisionHandlerFluidPusher 0 0 0 1 438 440 0 1 439 0 0 1 0 550 0 0 0 0 359
////////////////////////////////////////////////////////////////////
//       Class : CollisionHandlerFluidPusher
// Description : A CollisionHandlerPusher that makes use of timing
//               and spatial information from fluid collisions to improve
//               collision response
////////////////////////////////////////////////////////////////////

552 23 CollisionHandlerGravity 0 75777 23 CollisionHandlerGravity 23 CollisionHandlerGravity 0 0 0 1 441 415 0 18 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 0 0 1 0 548 0 0 0 0 554
////////////////////////////////////////////////////////////////////
//       Class : CollisionHandlerGravity
// Description : A specialized kind of CollisionHandler that sets the
//               Z height of the collider to a fixed linear offset
//               from the highest detected collision point each frame.
//               It's intended to implement walking around on a floor
//               of varying height by casting a ray down from the
//               avatar's head.
////////////////////////////////////////////////////////////////////

553 28 CollisionHandlerHighestEvent 0 141313 28 CollisionHandlerHighestEvent 28 CollisionHandlerHighestEvent 0 0 0 1 460 462 0 1 461 0 0 1 0 547 0 0 0 0 555
////////////////////////////////////////////////////////////////////
//       Class : CollisionHandlerEvent
// Description : A specialized kind of CollisionHandler that throws an
//               event for each collision detected.  The event thrown
//               may be based on the name of the moving object or the
//               struck object, or both.  The first parameter of the
//               event will be a pointer to the CollisionEntry that
//               triggered it.
////////////////////////////////////////////////////////////////////

554 21 CollisionHandlerQueue 0 141313 21 CollisionHandlerQueue 21 CollisionHandlerQueue 0 0 0 1 463 471 0 7 464 465 466 467 468 469 470 1 698 0 1 0 534 0 0 0 0 571
////////////////////////////////////////////////////////////////////
//       Class : CollisionHandlerQueue
// Description : A special kind of CollisionHandler that does nothing
//               except remember the CollisionEntries detected the
//               last pass.  This set of CollisionEntries may then be
//               queried by the calling function.  It's primarily
//               useful when a simple intersection test is being made,
//               e.g. for picking from the window.
////////////////////////////////////////////////////////////////////

555 15 CollisionSphere 0 141313 15 CollisionSphere 15 CollisionSphere 0 0 0 1 472 478 0 5 473 474 475 476 477 0 0 1 0 531 0 0 0 0 227
////////////////////////////////////////////////////////////////////
//       Class : CollisionSphere
// Description : A spherical collision volume or object.
////////////////////////////////////////////////////////////////////

556 18 CollisionInvSphere 0 141313 18 CollisionInvSphere 18 CollisionInvSphere 0 0 0 1 479 481 0 1 480 0 0 1 0 555 0 0 0 0 527
////////////////////////////////////////////////////////////////////
//       Class : CollisionInvSphere
// Description : An inverted sphere: this is a sphere whose collision
//               surface is the inside surface of the sphere.
//               Everything outside the sphere is solid matter;
//               everything inside is empty space.  Useful for
//               constraining objects to remain within a spherical
//               perimeter.
////////////////////////////////////////////////////////////////////

557 12 CollisionRay 0 141313 12 CollisionRay 12 CollisionRay 0 0 0 1 482 489 0 6 483 484 485 486 487 488 0 0 1 0 531 0 0 0 0 456
////////////////////////////////////////////////////////////////////
//       Class : CollisionRay
// Description : An infinite ray, with a specific origin and
//               direction.  It begins at its origin and continues in
//               one direction to infinity, and it has no radius.
//               Useful for picking from a window, or for gravity
//               effects.
////////////////////////////////////////////////////////////////////

558 13 CollisionLine 0 141313 13 CollisionLine 13 CollisionLine 0 0 0 1 490 492 0 1 491 0 0 1 0 557 0 0 0 0 337
////////////////////////////////////////////////////////////////////
//       Class : CollisionLine
// Description : An infinite line, similar to a CollisionRay, except
//               that it extends in both directions.  It is, however,
//               directional.
////////////////////////////////////////////////////////////////////

559 17 CollisionParabola 0 141313 17 CollisionParabola 17 CollisionParabola 0 0 0 1 493 501 0 7 494 495 496 497 498 499 500 0 0 1 0 531 0 0 0 0 560
////////////////////////////////////////////////////////////////////
//       Class : CollisionParabola
// Description : This defines a parabolic arc, or subset of an arc,
//               similar to the path of a projectile or falling
//               object.  It is finite, having a specific beginning
//               and end, but it is infinitely thin.
//
//               Think of it as a wire bending from point t1 to point
//               t2 along the path of a pre-defined parabola.
////////////////////////////////////////////////////////////////////

560 16 CollisionSegment 0 141313 16 CollisionSegment 16 CollisionSegment 0 0 0 1 502 509 0 6 503 504 505 506 507 508 0 0 1 0 531 0 0 0 0 639
////////////////////////////////////////////////////////////////////
//       Class : CollisionSegment
// Description : A finite line segment, with two specific endpoints
//               but no thickness.  It's similar to a CollisionRay,
//               except it does not continue to infinity.
//
//               It does have an ordering, from point A to point B.
//               If more than a single point of the segment is
//               intersecting a solid, the reported intersection point
//               is generally the closest on the segment to point A.
////////////////////////////////////////////////////////////////////

561 13 CollisionTube 0 141313 13 CollisionTube 13 CollisionTube 0 0 0 1 510 518 0 7 511 512 513 514 515 516 517 0 0 1 0 531 0 0 0 0 468
////////////////////////////////////////////////////////////////////
//       Class : CollisionTube
// Description : This implements a solid roughly in cylindrical shape.
//               It's not called a CollisionCylinder because it's not
//               a true cylinder; specifically, it has rounded ends
//               instead of flat ends.  It looks more like a Contac
//               pill.
////////////////////////////////////////////////////////////////////

562 19 CollisionVisualizer 0 26625 19 CollisionVisualizer 19 CollisionVisualizer 0 0 0 1 523 524 0 6 525 526 527 528 529 530 0 0 2 3 537 519 520 3 540 521 522 0 0 559
////////////////////////////////////////////////////////////////////
//       Class : CollisionVisualizer
// Description : This class is used to help debug the work the
//               collisions system is doing.  It shows the polygons
//               that are detected as collisions, as well as those
//               that are simply considered for collisions.
//
//               It may be parented anywhere in the scene graph where
//               it will be rendered to achieve this.
////////////////////////////////////////////////////////////////////

563 7 LPoint3 0 2105344 7 LPoint3 7 LPoint3 0 0 564 0 0 0 0 0 0 0 0 0 0

564 8 LPoint3f 0 2048 8 LPoint3f 8 LPoint3f 0 0 0 0 0 0 0 0 0 0 0 0 596
////////////////////////////////////////////////////////////////////
//       Class : LPoint3
// Description : This is a three-component point in space (as opposed
//               to a three-component vector, which represents a
//               direction and a distance).  Some of the methods are
//               slightly different between LPoint3 and LVector3; in
//               particular, subtraction of two points yields a
//               vector, while addition of a vector and a point yields
//               a point.
////////////////////////////////////////////////////////////////////

565 22 CollisionSolid const * 0 8576 22 CollisionSolid const * 22 CollisionSolid const * 0 0 566 0 0 0 0 0 0 0 0 0 0

566 20 CollisionSolid const 0 8832 20 CollisionSolid const 20 CollisionSolid const 0 0 531 0 0 0 0 0 0 0 0 0 0

567 9 LPoint3 * 0 8576 9 LPoint3 * 9 LPoint3 * 0 0 563 0 0 0 0 0 0 0 0 0 0

568 16 CollisionSolid * 0 8576 16 CollisionSolid * 16 CollisionSolid * 0 0 531 0 0 0 0 0 0 0 0 0 0

569 4 bool 0 8194 4 bool 4 bool 0 4 0 0 0 0 0 0 0 0 0 0 0

570 4 void 0 8194 4 void 4 void 0 6 0 0 0 0 0 0 0 0 0 0 0

571 16 LVector3 const * 0 8576 16 LVector3 const * 16 LVector3 const * 0 0 572 0 0 0 0 0 0 0 0 0 0

572 14 LVector3 const 0 8832 14 LVector3 const 14 LVector3 const 0 0 573 0 0 0 0 0 0 0 0 0 0

573 8 LVector3 0 2105344 8 LVector3 8 LVector3 0 0 574 0 0 0 0 0 0 0 0 0 0

574 9 LVector3f 0 2048 9 LVector3f 9 LVector3f 0 0 0 0 0 0 0 0 0 0 0 0 598
////////////////////////////////////////////////////////////////////
//       Class : LVector3
// Description : This is a three-component vector distance (as opposed
//               to a three-component point, which represents a
//               particular point in space).  Some of the methods are
//               slightly different between LPoint3 and LVector3; in
//               particular, subtraction of two points yields a
//               vector, while addition of a vector and a point yields
//               a point.
////////////////////////////////////////////////////////////////////

575 20 BoundingVolume const 0 8832 20 BoundingVolume const 20 BoundingVolume const 0 0 576 0 0 0 0 0 0 0 0 0 0

576 14 BoundingVolume 0 2048 14 BoundingVolume 14 BoundingVolume 0 0 0 0 0 0 0 0 0 0 0 0 596
////////////////////////////////////////////////////////////////////
//       Class : BoundingVolume
// Description : This is an abstract class for any volume in any sense
//               which can be said to define the locality of reference
//               of a node in a graph, along with all of its
//               descendants.  It is not necessarily a geometric
//               volume (although see GeometricBoundingVolume); this
//               is simply an abstract interface for bounds of any
//               sort.
////////////////////////////////////////////////////////////////////

577 22 BoundingVolume const * 0 8576 22 BoundingVolume const * 22 BoundingVolume const * 0 0 575 0 0 0 0 0 0 0 0 0 0

578 9 ostream * 0 8576 9 ostream * 9 ostream * 0 0 579 0 0 0 0 0 0 0 0 0 0

579 7 ostream 0 2048 7 ostream 7 ostream 0 0 0 0 0 0 0 0 0 0 0 0 0

580 3 int 0 8194 3 int 3 int 0 1 0 0 0 0 0 0 0 0 0 0 0

581 10 TypeHandle 0 2048 10 TypeHandle 10 TypeHandle 0 0 0 0 0 0 0 0 0 0 0 0 1098
////////////////////////////////////////////////////////////////////
//       Class : TypeHandle
// Description : TypeHandle is the identifier used to differentiate
//               C++ class types.  Any C++ classes that inherit from
//               some base class, and must be differentiated at run
//               time, should store a static TypeHandle object that
//               can be queried through a static member function
//               named get_class_type().  Most of the time, it is also
//               desirable to inherit from TypedObject, which provides
//               some virtual functions to return the TypeHandle for a
//               particular instance.
//
//               At its essence, a TypeHandle is simply a unique
//               identifier that is assigned by the TypeRegistry.  The
//               TypeRegistry stores a tree of TypeHandles, so that
//               ancestry of a particular type may be queried, and the
//               type name may be retrieved for run-time display.
////////////////////////////////////////////////////////////////////

582 12 TypeHandle * 0 8576 12 TypeHandle * 12 TypeHandle * 0 0 581 0 0 0 0 0 0 0 0 0 0

583 15 LPoint3 const * 0 8576 15 LPoint3 const * 15 LPoint3 const * 0 0 584 0 0 0 0 0 0 0 0 0 0

584 13 LPoint3 const 0 8832 13 LPoint3 const 13 LPoint3 const 0 0 563 0 0 0 0 0 0 0 0 0 0

585 14 CollisionBox * 0 8576 14 CollisionBox * 14 CollisionBox * 0 0 533 0 0 0 0 0 0 0 0 0 0

586 11 PN_stdfloat 0 2105344 11 PN_stdfloat 11 PN_stdfloat 0 0 587 0 0 0 0 0 0 0 0 0 0

587 5 float 0 8194 5 float 5 float 0 2 0 0 0 0 0 0 0 0 0 0 0

588 20 CollisionBox const * 0 8576 20 CollisionBox const * 20 CollisionBox const * 0 0 589 0 0 0 0 0 0 0 0 0 0

589 18 CollisionBox const 0 8832 18 CollisionBox const 18 CollisionBox const 0 0 533 0 0 0 0 0 0 0 0 0 0

590 6 LPlane 0 2105344 6 LPlane 6 LPlane 0 0 591 0 0 0 0 0 0 0 0 0 0

591 7 LPlanef 0 2048 7 LPlanef 7 LPlanef 0 0 0 0 0 0 0 0 0 0 0 0 302
////////////////////////////////////////////////////////////////////
//       Class : LPlane
// Description : An abstract mathematical description of a plane.  A
//               plane is defined by the equation Ax + By + Cz + D = 0.
////////////////////////////////////////////////////////////////////

592 8 LPlane * 0 8576 8 LPlane * 8 LPlane * 0 0 590 0 0 0 0 0 0 0 0 0 0

593 13 atomic string 0 2 13 atomic string 13 atomic string 0 7 0 0 0 0 0 0 0 0 0 0 0

594 15 CollisionNode * 0 8576 15 CollisionNode * 15 CollisionNode * 0 0 536 0 0 0 0 0 0 0 0 0 0

595 13 CollideMask * 0 8576 13 CollideMask * 13 CollideMask * 0 0 596 0 0 0 0 0 0 0 0 0 0

596 11 CollideMask 0 2105344 11 CollideMask 11 CollideMask 0 0 597 0 0 0 0 0 0 0 0 0 0

597 9 BitMask32 0 2105344 9 BitMask32 9 BitMask32 0 0 598 0 0 0 0 0 0 0 0 0 0

598 24 BitMask< PN_uint32, 32 > 0 2048 24 BitMask< PN_uint32, 32 > 24 BitMask< PN_uint32, 32 > 0 0 0 0 0 0 0 0 0 0 0 0 0

599 21 CollisionNode const * 0 8576 21 CollisionNode const * 21 CollisionNode const * 0 0 600 0 0 0 0 0 0 0 0 0 0

600 19 CollisionNode const 0 8832 19 CollisionNode const 19 CollisionNode const 0 0 536 0 0 0 0 0 0 0 0 0 0

601 20 CollisionTraverser * 0 8576 20 CollisionTraverser * 20 CollisionTraverser * 0 0 538 0 0 0 0 0 0 0 0 0 0

602 26 CollisionTraverser const * 0 8576 26 CollisionTraverser const * 26 CollisionTraverser const * 0 0 603 0 0 0 0 0 0 0 0 0 0

603 24 CollisionTraverser const 0 8832 24 CollisionTraverser const 24 CollisionTraverser const 0 0 538 0 0 0 0 0 0 0 0 0 0

604 16 NodePath const * 0 8576 16 NodePath const * 16 NodePath const * 0 0 605 0 0 0 0 0 0 0 0 0 0

605 14 NodePath const 0 8832 14 NodePath const 14 NodePath const 0 0 606 0 0 0 0 0 0 0 0 0 0

606 8 NodePath 0 2048 8 NodePath 8 NodePath 0 0 0 0 0 0 0 2 699 700 0 0 0 0 1139
////////////////////////////////////////////////////////////////////
//       Class : NodePath
// Description : NodePath is the fundamental system for disambiguating
//               instances, and also provides a higher-level interface
//               for manipulating the scene graph.
//
//               A NodePath is a list of connected nodes from the root
//               of the graph to any sub-node.  Each NodePath
//               therefore uniquely describes one instance of a node.
//
//               NodePaths themselves are lightweight objects that may
//               easily be copied and passed by value.  Their data is
//               stored as a series of NodePathComponents that are
//               stored on the nodes.  Holding a NodePath will keep a
//               reference count to all the nodes in the path.
//               However, if any node in the path is removed or
//               reparented (perhaps through a different NodePath),
//               the NodePath will automatically be updated to reflect
//               the changes.
////////////////////////////////////////////////////////////////////

607 18 CollisionHandler * 0 8576 18 CollisionHandler * 18 CollisionHandler * 0 0 534 0 0 0 0 0 0 0 0 0 0

608 10 NodePath * 0 8576 10 NodePath * 10 NodePath * 0 0 606 0 0 0 0 0 0 0 0 0 0

609 19 CollisionRecorder * 0 8576 19 CollisionRecorder * 19 CollisionRecorder * 0 0 540 0 0 0 0 0 0 0 0 0 0

610 21 CollisionVisualizer * 0 8576 21 CollisionVisualizer * 21 CollisionVisualizer * 0 0 562 0 0 0 0 0 0 0 0 0 0

611 25 CollisionRecorder const * 0 8576 25 CollisionRecorder const * 25 CollisionRecorder const * 0 0 612 0 0 0 0 0 0 0 0 0 0

612 23 CollisionRecorder const 0 8832 23 CollisionRecorder const 23 CollisionRecorder const 0 0 540 0 0 0 0 0 0 0 0 0 0

613 22 CollisionEntry const * 0 8576 22 CollisionEntry const * 22 CollisionEntry const * 0 0 614 0 0 0 0 0 0 0 0 0 0

614 20 CollisionEntry const 0 8832 20 CollisionEntry const 20 CollisionEntry const 0 0 542 0 0 0 0 0 0 0 0 0 0

615 11 PandaNode * 0 8576 11 PandaNode * 11 PandaNode * 0 0 537 0 0 0 0 0 0 0 0 0 0

616 16 CollisionEntry * 0 8576 16 CollisionEntry * 16 CollisionEntry * 0 0 542 0 0 0 0 0 0 0 0 0 0

617 10 LVector3 * 0 8576 10 LVector3 * 10 LVector3 * 0 0 573 0 0 0 0 0 0 0 0 0 0

618 22 CollisionPlane const * 0 8576 22 CollisionPlane const * 22 CollisionPlane const * 0 0 619 0 0 0 0 0 0 0 0 0 0

619 20 CollisionPlane const 0 8832 20 CollisionPlane const 20 CollisionPlane const 0 0 544 0 0 0 0 0 0 0 0 0 0

620 16 CollisionPlane * 0 8576 16 CollisionPlane * 16 CollisionPlane * 0 0 544 0 0 0 0 0 0 0 0 0 0

621 14 LPlane const * 0 8576 14 LPlane const * 14 LPlane const * 0 0 622 0 0 0 0 0 0 0 0 0 0

622 12 LPlane const 0 8832 12 LPlane const 12 LPlane const 0 0 590 0 0 0 0 0 0 0 0 0 0

623 20 CollisionFloorMesh * 0 8576 20 CollisionFloorMesh * 20 CollisionFloorMesh * 0 0 545 0 0 0 0 0 0 0 0 0 0

624 12 unsigned int 0 8198 12 unsigned int 12 unsigned int 0 1 0 0 0 0 0 0 0 0 0 0 0

625 26 CollisionFloorMesh const * 0 8576 26 CollisionFloorMesh const * 26 CollisionFloorMesh const * 0 0 626 0 0 0 0 0 0 0 0 0 0

626 24 CollisionFloorMesh const 0 8832 24 CollisionFloorMesh const 24 CollisionFloorMesh const 0 0 545 0 0 0 0 0 0 0 0 0 0

627 8 LPoint3i 0 2048 8 LPoint3i 8 LPoint3i 0 0 0 0 0 0 0 0 0 0 0 0 596
////////////////////////////////////////////////////////////////////
//       Class : LPoint3
// Description : This is a three-component point in space (as opposed
//               to a three-component vector, which represents a
//               direction and a distance).  Some of the methods are
//               slightly different between LPoint3 and LVector3; in
//               particular, subtraction of two points yields a
//               vector, while addition of a vector and a point yields
//               a point.
////////////////////////////////////////////////////////////////////

628 10 LPoint3i * 0 8576 10 LPoint3i * 10 LPoint3i * 0 0 627 0 0 0 0 0 0 0 0 0 0

629 18 CollisionPolygon * 0 8576 18 CollisionPolygon * 18 CollisionPolygon * 0 0 546 0 0 0 0 0 0 0 0 0 0

630 17 LVecBase3 const * 0 8576 17 LVecBase3 const * 17 LVecBase3 const * 0 0 631 0 0 0 0 0 0 0 0 0 0

631 15 LVecBase3 const 0 8832 15 LVecBase3 const 15 LVecBase3 const 0 0 632 0 0 0 0 0 0 0 0 0 0

632 9 LVecBase3 0 2105344 9 LVecBase3 9 LVecBase3 0 0 633 0 0 0 0 0 0 0 0 0 0

633 10 LVecBase3f 0 2048 10 LVecBase3f 10 LVecBase3f 0 0 0 0 0 0 0 0 0 0 0 0 265
////////////////////////////////////////////////////////////////////
//       Class : LVecBase3
// Description : This is the base class for all three-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

634 24 CollisionPolygon const * 0 8576 24 CollisionPolygon const * 24 CollisionPolygon const * 0 0 635 0 0 0 0 0 0 0 0 0 0

635 22 CollisionPolygon const 0 8832 22 CollisionPolygon const 22 CollisionPolygon const 0 0 546 0 0 0 0 0 0 0 0 0 0

636 23 CollisionHandlerEvent * 0 8576 23 CollisionHandlerEvent * 23 CollisionHandlerEvent * 0 0 547 0 0 0 0 0 0 0 0 0 0

637 29 CollisionHandlerEvent const * 0 8576 29 CollisionHandlerEvent const * 29 CollisionHandlerEvent const * 0 0 638 0 0 0 0 0 0 0 0 0 0

638 27 CollisionHandlerEvent const 0 8832 27 CollisionHandlerEvent const 27 CollisionHandlerEvent const 0 0 547 0 0 0 0 0 0 0 0 0 0

639 26 CollisionHandlerPhysical * 0 8576 26 CollisionHandlerPhysical * 26 CollisionHandlerPhysical * 0 0 548 0 0 0 0 0 0 0 0 0 0

640 16 DriveInterface * 0 8576 16 DriveInterface * 16 DriveInterface * 0 0 641 0 0 0 0 0 0 0 0 0 0

641 14 DriveInterface 0 2048 14 DriveInterface 14 DriveInterface 0 0 0 0 0 0 0 0 0 0 0 0 411
////////////////////////////////////////////////////////////////////
//       Class : DriveInterface
// Description : This is a TFormer, similar to Trackball, that moves
//               around a transform matrix in response to mouse input.
//               The basic motion is on a horizontal plane, as if
//               driving a vehicle.
////////////////////////////////////////////////////////////////////

642 32 CollisionHandlerPhysical const * 0 8576 32 CollisionHandlerPhysical const * 32 CollisionHandlerPhysical const * 0 0 643 0 0 0 0 0 0 0 0 0 0

643 30 CollisionHandlerPhysical const 0 8832 30 CollisionHandlerPhysical const 30 CollisionHandlerPhysical const 0 0 548 0 0 0 0 0 0 0 0 0 0

644 23 CollisionHandlerFloor * 0 8576 23 CollisionHandlerFloor * 23 CollisionHandlerFloor * 0 0 549 0 0 0 0 0 0 0 0 0 0

645 29 CollisionHandlerFloor const * 0 8576 29 CollisionHandlerFloor const * 29 CollisionHandlerFloor const * 0 0 646 0 0 0 0 0 0 0 0 0 0

646 27 CollisionHandlerFloor const 0 8832 27 CollisionHandlerFloor const 27 CollisionHandlerFloor const 0 0 549 0 0 0 0 0 0 0 0 0 0

647 24 CollisionHandlerPusher * 0 8576 24 CollisionHandlerPusher * 24 CollisionHandlerPusher * 0 0 550 0 0 0 0 0 0 0 0 0 0

648 30 CollisionHandlerPusher const * 0 8576 30 CollisionHandlerPusher const * 30 CollisionHandlerPusher const * 0 0 649 0 0 0 0 0 0 0 0 0 0

649 28 CollisionHandlerPusher const 0 8832 28 CollisionHandlerPusher const 28 CollisionHandlerPusher const 0 0 550 0 0 0 0 0 0 0 0 0 0

650 29 CollisionHandlerFluidPusher * 0 8576 29 CollisionHandlerFluidPusher * 29 CollisionHandlerFluidPusher * 0 0 551 0 0 0 0 0 0 0 0 0 0

651 25 CollisionHandlerGravity * 0 8576 25 CollisionHandlerGravity * 25 CollisionHandlerGravity * 0 0 552 0 0 0 0 0 0 0 0 0 0

652 31 CollisionHandlerGravity const * 0 8576 31 CollisionHandlerGravity const * 31 CollisionHandlerGravity const * 0 0 653 0 0 0 0 0 0 0 0 0 0

653 29 CollisionHandlerGravity const 0 8832 29 CollisionHandlerGravity const 29 CollisionHandlerGravity const 0 0 552 0 0 0 0 0 0 0 0 0 0

654 30 CollisionHandlerHighestEvent * 0 8576 30 CollisionHandlerHighestEvent * 30 CollisionHandlerHighestEvent * 0 0 553 0 0 0 0 0 0 0 0 0 0

655 23 CollisionHandlerQueue * 0 8576 23 CollisionHandlerQueue * 23 CollisionHandlerQueue * 0 0 554 0 0 0 0 0 0 0 0 0 0

656 29 CollisionHandlerQueue const * 0 8576 29 CollisionHandlerQueue const * 29 CollisionHandlerQueue const * 0 0 657 0 0 0 0 0 0 0 0 0 0

657 27 CollisionHandlerQueue const 0 8832 27 CollisionHandlerQueue const 27 CollisionHandlerQueue const 0 0 554 0 0 0 0 0 0 0 0 0 0

658 17 CollisionSphere * 0 8576 17 CollisionSphere * 17 CollisionSphere * 0 0 555 0 0 0 0 0 0 0 0 0 0

659 23 CollisionSphere const * 0 8576 23 CollisionSphere const * 23 CollisionSphere const * 0 0 660 0 0 0 0 0 0 0 0 0 0

660 21 CollisionSphere const 0 8832 21 CollisionSphere const 21 CollisionSphere const 0 0 555 0 0 0 0 0 0 0 0 0 0

661 20 CollisionInvSphere * 0 8576 20 CollisionInvSphere * 20 CollisionInvSphere * 0 0 556 0 0 0 0 0 0 0 0 0 0

662 14 CollisionRay * 0 8576 14 CollisionRay * 14 CollisionRay * 0 0 557 0 0 0 0 0 0 0 0 0 0

663 20 CollisionRay const * 0 8576 20 CollisionRay const * 20 CollisionRay const * 0 0 664 0 0 0 0 0 0 0 0 0 0

664 18 CollisionRay const 0 8832 18 CollisionRay const 18 CollisionRay const 0 0 557 0 0 0 0 0 0 0 0 0 0

665 10 LensNode * 0 8576 10 LensNode * 10 LensNode * 0 0 666 0 0 0 0 0 0 0 0 0 0

666 8 LensNode 0 2048 8 LensNode 8 LensNode 0 0 0 0 0 0 0 0 0 0 0 0 396
////////////////////////////////////////////////////////////////////
//       Class : LensNode
// Description : A node that contains a Lens.  The most important
//               example of this kind of node is a Camera, but other
//               kinds of nodes also contain a lens (for instance, a
//               Spotlight).
////////////////////////////////////////////////////////////////////

667 15 LPoint2 const * 0 8576 15 LPoint2 const * 15 LPoint2 const * 0 0 668 0 0 0 0 0 0 0 0 0 0

668 13 LPoint2 const 0 8832 13 LPoint2 const 13 LPoint2 const 0 0 669 0 0 0 0 0 0 0 0 0 0

669 7 LPoint2 0 2105344 7 LPoint2 7 LPoint2 0 0 670 0 0 0 0 0 0 0 0 0 0

670 8 LPoint2f 0 2048 8 LPoint2f 8 LPoint2f 0 0 0 0 0 0 0 0 0 0 0 0 219
////////////////////////////////////////////////////////////////////
//       Class : LPoint2
// Description : This is a two-component point in space.
////////////////////////////////////////////////////////////////////

671 15 CollisionLine * 0 8576 15 CollisionLine * 15 CollisionLine * 0 0 558 0 0 0 0 0 0 0 0 0 0

672 19 CollisionParabola * 0 8576 19 CollisionParabola * 19 CollisionParabola * 0 0 559 0 0 0 0 0 0 0 0 0 0

673 17 LParabola const * 0 8576 17 LParabola const * 17 LParabola const * 0 0 674 0 0 0 0 0 0 0 0 0 0

674 15 LParabola const 0 8832 15 LParabola const 15 LParabola const 0 0 675 0 0 0 0 0 0 0 0 0 0

675 9 LParabola 0 2105344 9 LParabola 9 LParabola 0 0 676 0 0 0 0 0 0 0 0 0 0

676 10 LParabolaf 0 2048 10 LParabolaf 10 LParabolaf 0 0 0 0 0 0 0 0 0 0 0 0 433
////////////////////////////////////////////////////////////////////
//       Class : LParabola
// Description : An abstract mathematical description of a parabola,
//               particularly useful for describing arcs of
//               projectiles.
//
//               The parabolic equation, given parametrically here, is
//               P = At^2 + Bt + C.
////////////////////////////////////////////////////////////////////

677 25 CollisionParabola const * 0 8576 25 CollisionParabola const * 25 CollisionParabola const * 0 0 678 0 0 0 0 0 0 0 0 0 0

678 23 CollisionParabola const 0 8832 23 CollisionParabola const 23 CollisionParabola const 0 0 559 0 0 0 0 0 0 0 0 0 0

679 18 CollisionSegment * 0 8576 18 CollisionSegment * 18 CollisionSegment * 0 0 560 0 0 0 0 0 0 0 0 0 0

680 24 CollisionSegment const * 0 8576 24 CollisionSegment const * 24 CollisionSegment const * 0 0 681 0 0 0 0 0 0 0 0 0 0

681 22 CollisionSegment const 0 8832 22 CollisionSegment const 22 CollisionSegment const 0 0 560 0 0 0 0 0 0 0 0 0 0

682 15 CollisionTube * 0 8576 15 CollisionTube * 15 CollisionTube * 0 0 561 0 0 0 0 0 0 0 0 0 0

683 21 CollisionTube const * 0 8576 21 CollisionTube const * 21 CollisionTube const * 0 0 684 0 0 0 0 0 0 0 0 0 0

684 19 CollisionTube const 0 8832 19 CollisionTube const 19 CollisionTube const 0 0 561 0 0 0 0 0 0 0 0 0 0

685 27 CollisionVisualizer const * 0 8576 27 CollisionVisualizer const * 27 CollisionVisualizer const * 0 0 686 0 0 0 0 0 0 0 0 0 0

686 25 CollisionVisualizer const 0 8832 25 CollisionVisualizer const 25 CollisionVisualizer const 0 0 562 0 0 0 0 0 0 0 0 0 0

0
0
14
687 0 0 34 10 get_solids 14 get_num_solids 9 get_solid 
688 0 0 35 11 get_parents 15 get_num_parents 10 get_parent 
689 0 0 35 12 get_children 16 get_num_children 9 get_child 
690 0 0 35 11 get_stashed 15 get_num_stashed 11 get_stashed 
691 0 0 53 13 get_colliders 17 get_num_colliders 12 get_collider 
692 0 0 124 12 get_vertices 16 get_num_vertices 10 get_vertex 
693 0 0 124 13 get_triangles 17 get_num_triangles 12 get_triangle 
694 0 0 134 10 get_points 14 get_num_points 9 get_point 
695 0 0 143 15 get_in_patterns 19 get_num_in_patterns 14 get_in_pattern 
696 0 0 143 18 get_again_patterns 22 get_num_again_patterns 17 get_again_pattern 
697 0 0 143 16 get_out_patterns 20 get_num_out_patterns 15 get_out_pattern 
698 0 0 217 11 get_entries 15 get_num_entries 9 get_entry 
699 0 0 390 9 get_nodes 13 get_num_nodes 8 get_node 
700 0 0 390 13 get_ancestors 13 get_num_nodes 12 get_ancestor 
