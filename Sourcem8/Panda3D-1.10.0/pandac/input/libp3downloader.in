1436948113
2 3
15 libp3downloader 4 _Rn_ 12 panda3d.core 
386
394 9 ~SSReader 0 6 780 19 SSReader::~SSReader 0 0 226
////////////////////////////////////////////////////////////////////
//     Function: SSReader::Destructor
//       Access: Public, Virtual
//  Description: 
////////////////////////////////////////////////////////////////////
34
virtual SSReader::~SSReader(void);

395 16 receive_datagram 0 4 780 26 SSReader::receive_datagram 0 1 1 527
////////////////////////////////////////////////////////////////////
//     Function: SSReader::receive_datagram
//       Access: Published
//  Description: Receives a datagram over the socket by expecting a
//               little-endian 16-bit byte count as a prefix.  If the
//               socket stream is non-blocking, may return false if
//               the data is not available; otherwise, returns false
//               only if the socket closes.
////////////////////////////////////////////////////////////////////
53
inline bool SSReader::receive_datagram(Datagram &dg);

396 9 is_closed 0 6 780 19 SSReader::is_closed 0 1 2 0
43
virtual bool SSReader::is_closed(void) = 0;

397 5 close 0 6 780 15 SSReader::close 0 1 3 0
39
virtual void SSReader::close(void) = 0;

398 19 set_tcp_header_size 0 4 780 29 SSReader::set_tcp_header_size 0 1 4 546
////////////////////////////////////////////////////////////////////
//     Function: SSReader::set_tcp_header_size
//       Access: Published
//  Description: Sets the header size for datagrams.  At the present,
//               legal values for this are 0, 2, or 4; this specifies
//               the number of bytes to use encode the datagram length
//               at the start of each TCP datagram.  Sender and
//               receiver must independently agree on this.
////////////////////////////////////////////////////////////////////
63
inline void SSReader::set_tcp_header_size(int tcp_header_size);

399 19 get_tcp_header_size 0 4 780 29 SSReader::get_tcp_header_size 0 1 5 312
////////////////////////////////////////////////////////////////////
//     Function: SSReader::get_tcp_header_size
//       Access: Published
//  Description: Returns the header size for datagrams.  See
//               set_tcp_header_size().
////////////////////////////////////////////////////////////////////
53
inline int SSReader::get_tcp_header_size(void) const;

400 9 ~SSWriter 0 6 781 19 SSWriter::~SSWriter 0 0 226
////////////////////////////////////////////////////////////////////
//     Function: SSWriter::Destructor
//       Access: Public, Virtual
//  Description: 
////////////////////////////////////////////////////////////////////
34
virtual SSWriter::~SSWriter(void);

401 13 send_datagram 0 4 781 23 SSWriter::send_datagram 0 1 6 504
////////////////////////////////////////////////////////////////////
//     Function: SSWriter::send_datagram
//       Access: Public
//  Description: Transmits the indicated datagram over the socket by
//               prepending it with a little-endian 16-bit byte count.
//               Does not return until the data is sent or the
//               connection is closed, even if the socket stream is
//               non-blocking.
////////////////////////////////////////////////////////////////////
49
bool SSWriter::send_datagram(Datagram const &dg);

402 9 is_closed 0 6 781 19 SSWriter::is_closed 0 1 7 0
43
virtual bool SSWriter::is_closed(void) = 0;

403 5 close 0 6 781 15 SSWriter::close 0 1 8 0
39
virtual void SSWriter::close(void) = 0;

404 15 set_collect_tcp 0 4 781 25 SSWriter::set_collect_tcp 0 1 9 1144
////////////////////////////////////////////////////////////////////
//     Function: SSWriter::set_collect_tcp
//       Access: Published
//  Description: Enables or disables "collect-tcp" mode.  In this
//               mode, individual TCP packets are not sent
//               immediately, but rather they are collected together
//               and accumulated to be sent periodically as one larger
//               TCP packet.  This cuts down on overhead from the
//               TCP/IP protocol, especially if many small packets
//               need to be sent on the same connection, but it
//               introduces additional latency (since packets must be
//               held before they can be sent).
//
//               See set_collect_tcp_interval() to specify the
//               interval of time for which to hold packets before
//               sending them.
//
//               If you enable this mode, you may also need to
//               periodically call consider_flush() to flush the queue
//               if no packets have been sent recently.
////////////////////////////////////////////////////////////////////
56
inline void SSWriter::set_collect_tcp(bool collect_tcp);

405 15 get_collect_tcp 0 4 781 25 SSWriter::get_collect_tcp 0 1 10 315
////////////////////////////////////////////////////////////////////
//     Function: SSWriter::get_collect_tcp
//       Access: Published
//  Description: Returns the current setting of "collect-tcp" mode.
//               See set_collect_tcp().
////////////////////////////////////////////////////////////////////
50
inline bool SSWriter::get_collect_tcp(void) const;

406 24 set_collect_tcp_interval 0 4 781 34 SSWriter::set_collect_tcp_interval 0 1 11 516
////////////////////////////////////////////////////////////////////
//     Function: SSWriter::set_collect_tcp_interval
//       Access: Published
//  Description: Specifies the interval in time, in seconds, for which
//               to hold TCP packets before sending all of the
//               recently received packets at once.  This only has
//               meaning if "collect-tcp" mode is enabled; see
//               set_collect_tcp().
////////////////////////////////////////////////////////////////////
64
inline void SSWriter::set_collect_tcp_interval(double interval);

407 24 get_collect_tcp_interval 0 4 781 34 SSWriter::get_collect_tcp_interval 0 1 12 514
////////////////////////////////////////////////////////////////////
//     Function: SSWriter::get_collect_tcp_interval
//       Access: Published
//  Description: Returns the interval in time, in seconds, for which
//               to hold TCP packets before sending all of the
//               recently received packets at once.  This only has
//               meaning if "collect-tcp" mode is enabled; see
//               set_collect_tcp().
////////////////////////////////////////////////////////////////////
61
inline double SSWriter::get_collect_tcp_interval(void) const;

408 19 set_tcp_header_size 0 4 781 29 SSWriter::set_tcp_header_size 0 1 13 546
////////////////////////////////////////////////////////////////////
//     Function: SSWriter::set_tcp_header_size
//       Access: Published
//  Description: Sets the header size for datagrams.  At the present,
//               legal values for this are 0, 2, or 4; this specifies
//               the number of bytes to use encode the datagram length
//               at the start of each TCP datagram.  Sender and
//               receiver must independently agree on this.
////////////////////////////////////////////////////////////////////
63
inline void SSWriter::set_tcp_header_size(int tcp_header_size);

409 19 get_tcp_header_size 0 4 781 29 SSWriter::get_tcp_header_size 0 1 14 312
////////////////////////////////////////////////////////////////////
//     Function: SSWriter::get_tcp_header_size
//       Access: Published
//  Description: Returns the header size for datagrams.  See
//               set_tcp_header_size().
////////////////////////////////////////////////////////////////////
53
inline int SSWriter::get_tcp_header_size(void) const;

410 14 consider_flush 0 4 781 24 SSWriter::consider_flush 0 1 15 387
////////////////////////////////////////////////////////////////////
//     Function: SSWriter::consider_flush
//       Access: Published
//  Description: Sends the most recently queued data if enough time
//               has elapsed.  This only has meaning if
//               set_collect_tcp() has been set to true.
////////////////////////////////////////////////////////////////////
43
inline bool SSWriter::consider_flush(void);

411 5 flush 0 4 781 15 SSWriter::flush 0 1 16 355
////////////////////////////////////////////////////////////////////
//     Function: SSWriter::flush
//       Access: Published
//  Description: Sends the most recently queued data now.  This only
//               has meaning if set_collect_tcp() has been set to
//               true.
////////////////////////////////////////////////////////////////////
34
inline bool SSWriter::flush(void);

412 17 upcast_to_istream 0 12 782 32 ISocketStream::upcast_to_istream 0 1 20 36
upcast from ISocketStream to istream
48
istream *ISocketStream::upcast_to_istream(void);

413 25 downcast_to_ISocketStream 0 12 783 34 istream::downcast_to_ISocketStream 0 1 21 38
downcast from istream to ISocketStream
56
ISocketStream *istream::downcast_to_ISocketStream(void);

414 18 upcast_to_SSReader 0 12 782 33 ISocketStream::upcast_to_SSReader 0 1 22 37
upcast from ISocketStream to SSReader
50
SSReader *ISocketStream::upcast_to_SSReader(void);

415 25 downcast_to_ISocketStream 0 12 780 35 SSReader::downcast_to_ISocketStream 0 1 23 39
downcast from SSReader to ISocketStream
57
ISocketStream *SSReader::downcast_to_ISocketStream(void);

416 14 ~ISocketStream 0 6 782 29 ISocketStream::~ISocketStream 0 0 234
////////////////////////////////////////////////////////////////////
//     Function: ISocketStream::Destructor
//       Access: Published, Virtual
//  Description: 
////////////////////////////////////////////////////////////////////
44
virtual ISocketStream::~ISocketStream(void);

417 9 is_closed 0 6 782 24 ISocketStream::is_closed 0 1 17 0
48
virtual bool ISocketStream::is_closed(void) = 0;

418 5 close 0 6 782 20 ISocketStream::close 0 1 18 0
44
virtual void ISocketStream::close(void) = 0;

419 14 get_read_state 0 6 782 29 ISocketStream::get_read_state 0 1 19 0
73
virtual ISocketStream::ReadState ISocketStream::get_read_state(void) = 0;

420 17 upcast_to_ostream 0 12 785 32 OSocketStream::upcast_to_ostream 0 1 27 36
upcast from OSocketStream to ostream
48
ostream *OSocketStream::upcast_to_ostream(void);

421 25 downcast_to_OSocketStream 0 12 786 34 ostream::downcast_to_OSocketStream 0 1 28 38
downcast from ostream to OSocketStream
56
OSocketStream *ostream::downcast_to_OSocketStream(void);

422 18 upcast_to_SSWriter 0 12 785 33 OSocketStream::upcast_to_SSWriter 0 1 29 37
upcast from OSocketStream to SSWriter
50
SSWriter *OSocketStream::upcast_to_SSWriter(void);

423 25 downcast_to_OSocketStream 0 12 781 35 SSWriter::downcast_to_OSocketStream 0 1 30 39
downcast from SSWriter to OSocketStream
57
OSocketStream *SSWriter::downcast_to_OSocketStream(void);

424 9 is_closed 0 6 785 24 OSocketStream::is_closed 0 1 24 0
48
virtual bool OSocketStream::is_closed(void) = 0;

425 5 close 0 6 785 20 OSocketStream::close 0 1 25 0
44
virtual void OSocketStream::close(void) = 0;

426 5 flush 0 4 785 20 OSocketStream::flush 0 1 26 360
////////////////////////////////////////////////////////////////////
//     Function: OSocketStream::flush
//       Access: Published
//  Description: Sends the most recently queued data now.  This only
//               has meaning if set_collect_tcp() has been set to
//               true.
////////////////////////////////////////////////////////////////////
39
inline bool OSocketStream::flush(void);

427 14 ~OSocketStream 0 4 785 29 OSocketStream::~OSocketStream 0 0 0
36
OSocketStream::~OSocketStream(void);

428 18 upcast_to_iostream 0 12 787 32 SocketStream::upcast_to_iostream 0 1 36 36
upcast from SocketStream to iostream
49
iostream *SocketStream::upcast_to_iostream(void);

429 24 downcast_to_SocketStream 0 12 788 34 iostream::downcast_to_SocketStream 0 1 37 38
downcast from iostream to SocketStream
55
SocketStream *iostream::downcast_to_SocketStream(void);

430 18 upcast_to_SSReader 0 12 787 32 SocketStream::upcast_to_SSReader 0 1 38 36
upcast from SocketStream to SSReader
49
SSReader *SocketStream::upcast_to_SSReader(void);

431 24 downcast_to_SocketStream 0 12 780 34 SSReader::downcast_to_SocketStream 0 1 39 38
downcast from SSReader to SocketStream
55
SocketStream *SSReader::downcast_to_SocketStream(void);

432 18 upcast_to_SSWriter 0 12 787 32 SocketStream::upcast_to_SSWriter 0 1 40 36
upcast from SocketStream to SSWriter
49
SSWriter *SocketStream::upcast_to_SSWriter(void);

433 24 downcast_to_SocketStream 0 12 781 34 SSWriter::downcast_to_SocketStream 0 1 41 38
downcast from SSWriter to SocketStream
55
SocketStream *SSWriter::downcast_to_SocketStream(void);

434 9 is_closed 0 6 787 23 SocketStream::is_closed 0 1 31 0
47
virtual bool SocketStream::is_closed(void) = 0;

435 5 close 0 6 787 19 SocketStream::close 0 1 32 0
43
virtual void SocketStream::close(void) = 0;

436 19 set_tcp_header_size 0 4 787 33 SocketStream::set_tcp_header_size 0 1 33 550
////////////////////////////////////////////////////////////////////
//     Function: SocketStream::set_tcp_header_size
//       Access: Published
//  Description: Sets the header size for datagrams.  At the present,
//               legal values for this are 0, 2, or 4; this specifies
//               the number of bytes to use encode the datagram length
//               at the start of each TCP datagram.  Sender and
//               receiver must independently agree on this.
////////////////////////////////////////////////////////////////////
67
inline void SocketStream::set_tcp_header_size(int tcp_header_size);

437 19 get_tcp_header_size 0 4 787 33 SocketStream::get_tcp_header_size 0 1 34 316
////////////////////////////////////////////////////////////////////
//     Function: SocketStream::get_tcp_header_size
//       Access: Published
//  Description: Returns the header size for datagrams.  See
//               set_tcp_header_size().
////////////////////////////////////////////////////////////////////
57
inline int SocketStream::get_tcp_header_size(void) const;

438 5 flush 0 4 787 19 SocketStream::flush 0 1 35 359
////////////////////////////////////////////////////////////////////
//     Function: SocketStream::flush
//       Access: Published
//  Description: Sends the most recently queued data now.  This only
//               has meaning if set_collect_tcp() has been set to
//               true.
////////////////////////////////////////////////////////////////////
38
inline bool SocketStream::flush(void);

439 13 ~SocketStream 0 4 787 27 SocketStream::~SocketStream 0 0 0
34
SocketStream::~SocketStream(void);

440 7 URLSpec 0 4 789 16 URLSpec::URLSpec 0 3 42 43 44 666
////////////////////////////////////////////////////////////////////
//     Function: URLSpec::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: URLSpec::Copy Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: URLSpec::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
144
URLSpec::URLSpec(void);
inline URLSpec::URLSpec(string const &url, bool server_name_expected = 0);
inline URLSpec::URLSpec(URLSpec const &copy);

441 10 operator = 0 4 789 19 URLSpec::operator = 0 2 45 46 0
98
inline void URLSpec::operator =(string const &url);
void URLSpec::operator =(URLSpec const &copy);

442 11 operator == 0 4 789 20 URLSpec::operator == 0 1 47 0
61
inline bool URLSpec::operator ==(URLSpec const &other) const;

443 11 operator != 0 4 789 20 URLSpec::operator != 0 1 48 0
61
inline bool URLSpec::operator !=(URLSpec const &other) const;

444 10 operator < 0 4 789 19 URLSpec::operator < 0 1 49 0
60
inline bool URLSpec::operator <(URLSpec const &other) const;

445 10 compare_to 0 4 789 19 URLSpec::compare_to 0 1 50 397
////////////////////////////////////////////////////////////////////
//     Function: URLSpec::compare_to
//       Access: Published
//  Description: Returns a number less than zero if this URLSpec
//               sorts before the other one, greater than zero if it
//               sorts after, or zero if they are equivalent.
////////////////////////////////////////////////////////////////////
59
inline int URLSpec::compare_to(URLSpec const &other) const;

446 10 has_scheme 0 4 789 19 URLSpec::has_scheme 0 1 51 311
////////////////////////////////////////////////////////////////////
//     Function: URLSpec::has_scheme
//       Access: Published
//  Description: Returns true if the URL specifies a scheme
//               (e.g. "http:"), false otherwise.
////////////////////////////////////////////////////////////////////
44
inline bool URLSpec::has_scheme(void) const;

447 13 has_authority 0 4 789 22 URLSpec::has_authority 0 1 52 366
////////////////////////////////////////////////////////////////////
//     Function: URLSpec::has_authority
//       Access: Published
//  Description: Returns true if the URL specifies an authority
//               (this includes username, server, and/or port), false
//               otherwise.
////////////////////////////////////////////////////////////////////
47
inline bool URLSpec::has_authority(void) const;

448 12 has_username 0 4 789 21 URLSpec::has_username 0 1 53 318
////////////////////////////////////////////////////////////////////
//     Function: URLSpec::has_username
//       Access: Published
//  Description: Returns true if the URL specifies a username
//               (and/or password), false otherwise.
////////////////////////////////////////////////////////////////////
46
inline bool URLSpec::has_username(void) const;

449 10 has_server 0 4 789 19 URLSpec::has_server 0 1 54 301
////////////////////////////////////////////////////////////////////
//     Function: URLSpec::has_server
//       Access: Published
//  Description: Returns true if the URL specifies a server name,
//               false otherwise.
////////////////////////////////////////////////////////////////////
44
inline bool URLSpec::has_server(void) const;

450 8 has_port 0 4 789 17 URLSpec::has_port 0 1 55 299
////////////////////////////////////////////////////////////////////
//     Function: URLSpec::has_port
//       Access: Published
//  Description: Returns true if the URL specifies a port number,
//               false otherwise.
////////////////////////////////////////////////////////////////////
42
inline bool URLSpec::has_port(void) const;

451 8 has_path 0 4 789 17 URLSpec::has_path 0 1 56 383
////////////////////////////////////////////////////////////////////
//     Function: URLSpec::has_path
//       Access: Published
//  Description: Returns true if the URL includes a path specification
//               (that is, the particular filename on the server to
//               retrieve), false otherwise.
////////////////////////////////////////////////////////////////////
42
inline bool URLSpec::has_path(void) const;

452 9 has_query 0 4 789 18 URLSpec::has_query 0 1 57 307
////////////////////////////////////////////////////////////////////
//     Function: URLSpec::has_query
//       Access: Published
//  Description: Returns true if the URL includes a query
//               specification, false otherwise.
////////////////////////////////////////////////////////////////////
43
inline bool URLSpec::has_query(void) const;

453 10 get_scheme 0 4 789 19 URLSpec::get_scheme 0 1 58 319
////////////////////////////////////////////////////////////////////
//     Function: URLSpec::get_scheme
//       Access: Published
//  Description: Returns the scheme specified by the URL, or empty
//               string if no scheme is specified.
////////////////////////////////////////////////////////////////////
39
string URLSpec::get_scheme(void) const;

454 13 get_authority 0 4 789 22 URLSpec::get_authority 0 1 59 391
////////////////////////////////////////////////////////////////////
//     Function: URLSpec::get_authority
//       Access: Published
//  Description: Returns the authority specified by the URL (this
//               includes username, server, and/or port), or empty
//               string if no authority is specified.
////////////////////////////////////////////////////////////////////
49
inline string URLSpec::get_authority(void) const;

455 12 get_username 0 4 789 21 URLSpec::get_username 0 1 60 447
////////////////////////////////////////////////////////////////////
//     Function: URLSpec::get_username
//       Access: Published
//  Description: Returns the username specified by the URL, if any.
//               This might also include a password,
//               e.g. "username:password", although putting a password
//               on the URL is probably a bad idea.
////////////////////////////////////////////////////////////////////
48
inline string URLSpec::get_username(void) const;

456 10 get_server 0 4 789 19 URLSpec::get_server 0 1 61 272
////////////////////////////////////////////////////////////////////
//     Function: URLSpec::get_server
//       Access: Published
//  Description: Returns the server name specified by the URL, if any.
////////////////////////////////////////////////////////////////////
46
inline string URLSpec::get_server(void) const;

457 12 get_port_str 0 4 789 21 URLSpec::get_port_str 0 1 62 459
////////////////////////////////////////////////////////////////////
//     Function: URLSpec::get_port_str
//       Access: Published
//  Description: Returns the port specified by the URL as a string, or
//               the empty string if no port is specified.  Compare
//               this with get_port(), which returns a default port
//               number if no port is specified.
////////////////////////////////////////////////////////////////////
48
inline string URLSpec::get_port_str(void) const;

458 8 get_port 0 4 789 17 URLSpec::get_port 0 1 63 317
////////////////////////////////////////////////////////////////////
//     Function: URLSpec::get_port
//       Access: Published
//  Description: Returns the port number specified by the URL, or the
//               default port if not specified.
////////////////////////////////////////////////////////////////////
34
int URLSpec::get_port(void) const;

459 19 get_server_and_port 0 4 789 28 URLSpec::get_server_and_port 0 1 64 483
////////////////////////////////////////////////////////////////////
//     Function: URLSpec::get_server_and_port
//       Access: Published
//  Description: Returns a string consisting of the server name,
//               followed by a colon, followed by the port number.  If
//               the port number is not explicitly given in the URL,
//               this string will include the implicit port number.
////////////////////////////////////////////////////////////////////
48
string URLSpec::get_server_and_port(void) const;

460 15 is_default_port 0 4 789 24 URLSpec::is_default_port 0 1 65 439
////////////////////////////////////////////////////////////////////
//     Function: URLSpec::is_default_port
//       Access: Published
//  Description: Returns true if the port number encoded in this URL
//               is the default port number for the scheme (or if
//               there is no port number), or false if it is a
//               nonstandard port.
////////////////////////////////////////////////////////////////////
42
bool URLSpec::is_default_port(void) const;

461 27 get_default_port_for_scheme 0 4 789 36 URLSpec::get_default_port_for_scheme 0 1 66 353
////////////////////////////////////////////////////////////////////
//     Function: URLSpec::get_default_port_for_scheme
//       Access: Published, Static
//  Description: Returns the default port number for the indicated
//               scheme, or 0 if there is no known default.
////////////////////////////////////////////////////////////////////
70
static int URLSpec::get_default_port_for_scheme(string const &scheme);

462 8 get_path 0 4 789 17 URLSpec::get_path 0 1 67 304
////////////////////////////////////////////////////////////////////
//     Function: URLSpec::get_path
//       Access: Published
//  Description: Returns the path specified by the URL, or "/" if no
//               path is specified.
////////////////////////////////////////////////////////////////////
37
string URLSpec::get_path(void) const;

463 9 get_query 0 4 789 18 URLSpec::get_query 0 1 68 316
////////////////////////////////////////////////////////////////////
//     Function: URLSpec::get_query
//       Access: Published
//  Description: Returns the query specified by the URL, or empty
//               string if no query is specified.
////////////////////////////////////////////////////////////////////
45
inline string URLSpec::get_query(void) const;

464 18 get_path_and_query 0 4 789 27 URLSpec::get_path_and_query 0 1 69 336
////////////////////////////////////////////////////////////////////
//     Function: URLSpec::get_path_and_query
//       Access: Published
//  Description: Returns the path (or "/" if no path is specified),
//               followed by the query if it is specified.
////////////////////////////////////////////////////////////////////
47
string URLSpec::get_path_and_query(void) const;

465 6 is_ssl 0 4 789 15 URLSpec::is_ssl 0 1 70 350
////////////////////////////////////////////////////////////////////
//     Function: URLSpec::is_ssl
//       Access: Published
//  Description: Returns true if the URL's scheme specifies an
//               SSL-secured protocol such as https, or false
//               otherwise.
////////////////////////////////////////////////////////////////////
40
inline bool URLSpec::is_ssl(void) const;

466 7 get_url 0 4 789 16 URLSpec::get_url 0 1 71 255
////////////////////////////////////////////////////////////////////
//     Function: URLSpec::get_url
//       Access: Published
//  Description: Returns the complete URL specification.
////////////////////////////////////////////////////////////////////
50
inline string const &URLSpec::get_url(void) const;

467 10 set_scheme 0 4 789 19 URLSpec::set_scheme 0 1 72 269
////////////////////////////////////////////////////////////////////
//     Function: URLSpec::set_scheme
//       Access: Published
//  Description: Replaces the scheme part of the URL specification.
////////////////////////////////////////////////////////////////////
47
void URLSpec::set_scheme(string const &scheme);

468 13 set_authority 0 4 789 22 URLSpec::set_authority 0 1 73 338
////////////////////////////////////////////////////////////////////
//     Function: URLSpec::set_authority
//       Access: Published
//  Description: Replaces the authority part of the URL specification.
//               This includes the username, server, and port.
////////////////////////////////////////////////////////////////////
53
void URLSpec::set_authority(string const &authority);

469 12 set_username 0 4 789 21 URLSpec::set_username 0 1 74 273
////////////////////////////////////////////////////////////////////
//     Function: URLSpec::set_username
//       Access: Published
//  Description: Replaces the username part of the URL specification.
////////////////////////////////////////////////////////////////////
51
void URLSpec::set_username(string const &username);

470 10 set_server 0 4 789 19 URLSpec::set_server 0 1 75 269
////////////////////////////////////////////////////////////////////
//     Function: URLSpec::set_server
//       Access: Published
//  Description: Replaces the server part of the URL specification.
////////////////////////////////////////////////////////////////////
47
void URLSpec::set_server(string const &server);

471 8 set_port 0 4 789 17 URLSpec::set_port 0 2 76 77 578
////////////////////////////////////////////////////////////////////
//     Function: URLSpec::set_port
//       Access: Published
//  Description: Replaces the port part of the URL specification.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: URLSpec::set_port
//       Access: Published
//  Description: Replaces the port part of the URL specification,
//               given a numeric port number.
////////////////////////////////////////////////////////////////////
77
void URLSpec::set_port(string const &port);
void URLSpec::set_port(int port);

472 19 set_server_and_port 0 4 789 28 URLSpec::set_server_and_port 0 1 78 460
////////////////////////////////////////////////////////////////////
//     Function: URLSpec::set_server_and_port
//       Access: Published
//  Description: Replaces the server and port parts of the URL
//               specification simultaneously.  The input string
//               should be of the form "server:port", or just
//               "server" to make the port number implicit.
////////////////////////////////////////////////////////////////////
65
void URLSpec::set_server_and_port(string const &server_and_port);

473 8 set_path 0 4 789 17 URLSpec::set_path 0 1 79 265
////////////////////////////////////////////////////////////////////
//     Function: URLSpec::set_path
//       Access: Published
//  Description: Replaces the path part of the URL specification.
////////////////////////////////////////////////////////////////////
43
void URLSpec::set_path(string const &path);

474 9 set_query 0 4 789 18 URLSpec::set_query 0 1 80 267
////////////////////////////////////////////////////////////////////
//     Function: URLSpec::set_query
//       Access: Published
//  Description: Replaces the query part of the URL specification.
////////////////////////////////////////////////////////////////////
45
void URLSpec::set_query(string const &query);

475 7 set_url 0 4 789 16 URLSpec::set_url 0 1 81 441
////////////////////////////////////////////////////////////////////
//     Function: URLSpec::set_url
//       Access: Published
//  Description: Completely replaces the URL with the indicated
//               string.  If server_name_expected is true, it is a
//               hint that an undecorated URL is probably a server
//               name, not a local filename.
////////////////////////////////////////////////////////////////////
72
void URLSpec::set_url(string const &url, bool server_name_expected = 0);

476 17 operator typecast 0 132 789 26 URLSpec::operator typecast 0 1 92 0
60
inline string const &URLSpec::operator typecast(void) const;

477 5 c_str 0 4 789 14 URLSpec::c_str 0 1 82 210
////////////////////////////////////////////////////////////////////
//     Function: URLSpec::c_str
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
46
inline char const *URLSpec::c_str(void) const;

478 5 empty 0 4 789 14 URLSpec::empty 0 1 83 210
////////////////////////////////////////////////////////////////////
//     Function: URLSpec::empty
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
39
inline bool URLSpec::empty(void) const;

479 6 length 0 4 789 15 URLSpec::length 0 1 84 211
////////////////////////////////////////////////////////////////////
//     Function: URLSpec::length
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
42
inline size_t URLSpec::length(void) const;

480 11 operator [] 0 4 789 20 URLSpec::operator [] 0 1 85 0
46
inline char URLSpec::operator [](int n) const;

481 5 input 0 4 789 14 URLSpec::input 0 1 86 214
////////////////////////////////////////////////////////////////////
//     Function: URLSpec::input
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
33
bool URLSpec::input(istream &in);

482 6 output 0 4 789 15 URLSpec::output 0 1 87 215
////////////////////////////////////////////////////////////////////
//     Function: URLSpec::output
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
41
void URLSpec::output(ostream &out) const;

483 5 quote 0 4 789 14 URLSpec::quote 0 1 88 617
////////////////////////////////////////////////////////////////////
//     Function: URLSpec::quote
//       Access: Published, Static
//  Description: Returns the source string with all "unsafe"
//               characters quoted, making a string suitable for
//               placing in a URL.  Letters, digits, and the
//               underscore, comma, period, and hyphen characters, as
//               well as any included in the safe string, are left
//               alone; all others are converted to hex
//               representation.
////////////////////////////////////////////////////////////////////
77
static string URLSpec::quote(string const &source, string const &safe = "/");

484 10 quote_plus 0 4 789 19 URLSpec::quote_plus 0 1 89 330
////////////////////////////////////////////////////////////////////
//     Function: URLSpec::quote_plus
//       Access: Published, Static
//  Description: Behaves like quote() with the additional behavior of
//               replacing spaces with plus signs.
////////////////////////////////////////////////////////////////////
82
static string URLSpec::quote_plus(string const &source, string const &safe = "/");

485 7 unquote 0 4 789 16 URLSpec::unquote 0 1 90 365
////////////////////////////////////////////////////////////////////
//     Function: URLSpec::unquote
//       Access: Published, Static
//  Description: Reverses the operation of quote(): converts escaped
//               characters of the form "%xx" to their ascii
//               equivalent.
////////////////////////////////////////////////////////////////////
53
static string URLSpec::unquote(string const &source);

486 12 unquote_plus 0 4 789 21 URLSpec::unquote_plus 0 1 91 415
////////////////////////////////////////////////////////////////////
//     Function: URLSpec::unquote_plus
//       Access: Published, Static
//  Description: Reverses the operation of quote_plus(): converts escaped
//               characters of the form "%xx" to their ascii
//               equivalent, and also converts plus signs to spaces.
////////////////////////////////////////////////////////////////////
58
static string URLSpec::unquote_plus(string const &source);

487 8 ~URLSpec 0 4 789 17 URLSpec::~URLSpec 0 0 0
24
URLSpec::~URLSpec(void);

488 9 ~HTTPEnum 0 4 790 19 HTTPEnum::~HTTPEnum 0 0 0
26
HTTPEnum::~HTTPEnum(void);

489 8 HTTPDate 0 4 793 18 HTTPDate::HTTPDate 0 4 93 94 95 96 1034
////////////////////////////////////////////////////////////////////
//     Function: HTTPDate::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: HTTPDate::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: HTTPDate::Copy Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: HTTPDate::Constructor
//       Access: Published
//  Description: Decodes the string into a sensible date.  Returns 0
//               (!is_valid()) if the string cannot be correctly
//               decoded.
////////////////////////////////////////////////////////////////////
163
inline HTTPDate::HTTPDate(void);
inline HTTPDate::HTTPDate(time_t time);
HTTPDate::HTTPDate(string const &format);
inline HTTPDate::HTTPDate(HTTPDate const &copy);

490 10 operator = 0 4 793 20 HTTPDate::operator = 0 1 97 0
55
inline void HTTPDate::operator =(HTTPDate const &copy);

491 3 now 0 4 793 13 HTTPDate::now 0 1 98 320
////////////////////////////////////////////////////////////////////
//     Function: HTTPDate::now (named constructor)
//       Access: Published, Static
//  Description: Returns an HTTPDate that represents the current time
//               and date.
////////////////////////////////////////////////////////////////////
43
static inline HTTPDate HTTPDate::now(void);

492 8 is_valid 0 4 793 18 HTTPDate::is_valid 0 1 99 379
////////////////////////////////////////////////////////////////////
//     Function: HTTPDate::is_valid
//       Access: Published
//  Description: Returns true if the date is meaningful, or false if
//               it is -1 (which generally indicates the source string
//               could not be parsed.)
////////////////////////////////////////////////////////////////////
43
inline bool HTTPDate::is_valid(void) const;

493 10 get_string 0 4 793 20 HTTPDate::get_string 0 1 100 219
////////////////////////////////////////////////////////////////////
//     Function: HTTPDate::get_string
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
40
string HTTPDate::get_string(void) const;

494 8 get_time 0 4 793 18 HTTPDate::get_time 0 1 101 255
////////////////////////////////////////////////////////////////////
//     Function: HTTPDate::get_time
//       Access: Published
//  Description: Returns the date as a C time_t value.
////////////////////////////////////////////////////////////////////
45
inline time_t HTTPDate::get_time(void) const;

495 11 operator == 0 4 793 21 HTTPDate::operator == 0 1 102 0
63
inline bool HTTPDate::operator ==(HTTPDate const &other) const;

496 11 operator != 0 4 793 21 HTTPDate::operator != 0 1 103 0
63
inline bool HTTPDate::operator !=(HTTPDate const &other) const;

497 10 operator < 0 4 793 20 HTTPDate::operator < 0 1 104 0
62
inline bool HTTPDate::operator <(HTTPDate const &other) const;

498 10 operator > 0 4 793 20 HTTPDate::operator > 0 1 105 0
62
inline bool HTTPDate::operator >(HTTPDate const &other) const;

499 10 compare_to 0 4 793 20 HTTPDate::compare_to 0 1 106 399
////////////////////////////////////////////////////////////////////
//     Function: HTTPDate::compare_to
//       Access: Published
//  Description: Returns a number less than zero if this HTTPDate
//               sorts before the other one, greater than zero if it
//               sorts after, or zero if they are equivalent.
////////////////////////////////////////////////////////////////////
61
inline int HTTPDate::compare_to(HTTPDate const &other) const;

500 11 operator += 0 4 793 21 HTTPDate::operator += 0 1 107 0
47
inline void HTTPDate::operator +=(int seconds);

501 11 operator -= 0 4 793 21 HTTPDate::operator -= 0 1 108 0
47
inline void HTTPDate::operator -=(int seconds);

502 10 operator + 0 4 793 20 HTTPDate::operator + 0 1 109 0
56
inline HTTPDate HTTPDate::operator +(int seconds) const;

503 10 operator - 0 4 793 20 HTTPDate::operator - 0 2 110 111 0
118
inline HTTPDate HTTPDate::operator -(int seconds) const;
inline int HTTPDate::operator -(HTTPDate const &other) const;

504 5 input 0 4 793 15 HTTPDate::input 0 1 112 215
////////////////////////////////////////////////////////////////////
//     Function: HTTPDate::input
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
34
bool HTTPDate::input(istream &in);

505 6 output 0 4 793 16 HTTPDate::output 0 1 113 216
////////////////////////////////////////////////////////////////////
//     Function: HTTPDate::output
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
42
void HTTPDate::output(ostream &out) const;

506 9 ~HTTPDate 0 4 793 19 HTTPDate::~HTTPDate 0 0 0
26
HTTPDate::~HTTPDate(void);

507 10 HTTPCookie 0 4 794 22 HTTPCookie::HTTPCookie 0 3 114 115 116 1143
////////////////////////////////////////////////////////////////////
//     Function: HTTPCookie::Constructor
//       Access: Published
//  Description: Constructs an empty cookie.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: HTTPCookie::Constructor
//       Access: Published
//  Description: Constructs a cookie according to the indicated
//               string, presumably the tag of a Set-Cookie header.
//               There is no way to detect a formatting error in the
//               string with this constructor.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: HTTPCookie::Constructor
//       Access: Published
//  Description: Constructs a cookie with the indicated name, path,
//               and domain values, but no other data.  This is most
//               useful for looking up an existing cookie in the
//               HTTPClient.
////////////////////////////////////////////////////////////////////
202
inline HTTPCookie::HTTPCookie(void);
inline HTTPCookie::HTTPCookie(string const &format, URLSpec const &url);
inline HTTPCookie::HTTPCookie(string const &name, string const &path, string const &domain);

508 11 ~HTTPCookie 0 4 794 23 HTTPCookie::~HTTPCookie 0 0 222
////////////////////////////////////////////////////////////////////
//     Function: HTTPCookie::Destructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
37
inline HTTPCookie::~HTTPCookie(void);

509 8 set_name 0 4 794 20 HTTPCookie::set_name 0 1 117 220
////////////////////////////////////////////////////////////////////
//     Function: HTTPCookie::set_name
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
53
inline void HTTPCookie::set_name(string const &name);

510 8 get_name 0 4 794 20 HTTPCookie::get_name 0 1 118 316
////////////////////////////////////////////////////////////////////
//     Function: HTTPCookie::get_name
//       Access: Published
//  Description: Returns the name of the cookie.  This is the key
//               value specified by the server.
////////////////////////////////////////////////////////////////////
54
inline string const &HTTPCookie::get_name(void) const;

511 9 set_value 0 4 794 21 HTTPCookie::set_value 0 1 119 221
////////////////////////////////////////////////////////////////////
//     Function: HTTPCookie::set_value
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
55
inline void HTTPCookie::set_value(string const &value);

512 9 get_value 0 4 794 21 HTTPCookie::get_value 0 1 120 380
////////////////////////////////////////////////////////////////////
//     Function: HTTPCookie::get_value
//       Access: Published
//  Description: Returns the value of the cookie.  This is the
//               arbitrary string associated with the cookie's name,
//               as specified by the server.
////////////////////////////////////////////////////////////////////
55
inline string const &HTTPCookie::get_value(void) const;

513 10 set_domain 0 4 794 22 HTTPCookie::set_domain 0 1 121 222
////////////////////////////////////////////////////////////////////
//     Function: HTTPCookie::set_domain
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
57
inline void HTTPCookie::set_domain(string const &domain);

514 10 get_domain 0 4 794 22 HTTPCookie::get_domain 0 1 122 222
////////////////////////////////////////////////////////////////////
//     Function: HTTPCookie::get_domain
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
56
inline string const &HTTPCookie::get_domain(void) const;

515 8 set_path 0 4 794 20 HTTPCookie::set_path 0 1 123 220
////////////////////////////////////////////////////////////////////
//     Function: HTTPCookie::set_path
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
53
inline void HTTPCookie::set_path(string const &path);

516 8 get_path 0 4 794 20 HTTPCookie::get_path 0 1 124 322
////////////////////////////////////////////////////////////////////
//     Function: HTTPCookie::get_path
//       Access: Published
//  Description: Returns the prefix of the URL paths on the server for
//               which this cookie will be sent.
////////////////////////////////////////////////////////////////////
54
inline string const &HTTPCookie::get_path(void) const;

517 11 set_expires 0 4 794 23 HTTPCookie::set_expires 0 1 125 223
////////////////////////////////////////////////////////////////////
//     Function: HTTPCookie::set_expires
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
61
inline void HTTPCookie::set_expires(HTTPDate const &expires);

518 13 clear_expires 0 4 794 25 HTTPCookie::clear_expires 0 1 126 267
////////////////////////////////////////////////////////////////////
//     Function: HTTPCookie::clear_expires
//       Access: Published
//  Description: Removes the expiration date on the cookie.
////////////////////////////////////////////////////////////////////
44
inline void HTTPCookie::clear_expires(void);

519 11 has_expires 0 4 794 23 HTTPCookie::has_expires 0 1 127 307
////////////////////////////////////////////////////////////////////
//     Function: HTTPCookie::has_expires
//       Access: Published
//  Description: Returns true if the cookie has an expiration date,
//               false otherwise.
////////////////////////////////////////////////////////////////////
48
inline bool HTTPCookie::has_expires(void) const;

520 11 get_expires 0 4 794 23 HTTPCookie::get_expires 0 1 128 328
////////////////////////////////////////////////////////////////////
//     Function: HTTPCookie::get_expires
//       Access: Published
//  Description: Returns the expiration date of the cookie if it is
//               set, or an invalid date if it is not.
////////////////////////////////////////////////////////////////////
52
inline HTTPDate HTTPCookie::get_expires(void) const;

521 10 set_secure 0 4 794 22 HTTPCookie::set_secure 0 1 129 222
////////////////////////////////////////////////////////////////////
//     Function: HTTPCookie::set_secure
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
46
inline void HTTPCookie::set_secure(bool flag);

522 10 get_secure 0 4 794 22 HTTPCookie::get_secure 0 1 130 371
////////////////////////////////////////////////////////////////////
//     Function: HTTPCookie::get_secure
//       Access: Published
//  Description: Returns true if the server has indicated this is a
//               "secure" cookie which should only be sent over an
//               HTTPS channel.
////////////////////////////////////////////////////////////////////
47
inline bool HTTPCookie::get_secure(void) const;

523 10 operator < 0 4 794 22 HTTPCookie::operator < 0 1 131 0
59
bool HTTPCookie::operator <(HTTPCookie const &other) const;

524 11 update_from 0 4 794 23 HTTPCookie::update_from 0 1 132 660
////////////////////////////////////////////////////////////////////
//     Function: HTTPCookie::update_from
//       Access: Published
//  Description: Assuming the operator < method, above, has already
//               evaluated these two cookies as equal, then assign the
//               remaining values (value, expiration date, secure
//               flag) from the indicated cookie.  This is guaranteed
//               not to change the ordering of the cookie in a set,
//               and so can be used to update an existing cookie
//               within a set with new values.
////////////////////////////////////////////////////////////////////
54
void HTTPCookie::update_from(HTTPCookie const &other);

525 16 parse_set_cookie 0 4 794 28 HTTPCookie::parse_set_cookie 0 1 133 497
////////////////////////////////////////////////////////////////////
//     Function: HTTPCookie::parse_set_cookie
//       Access: Published
//  Description: Separates out the parameter/value pairs of the
//               Set-Cookie header and assigns the values of the
//               cookie appropriate.  Returns true if the header is
//               parsed correctly, false if something is not
//               understood.
////////////////////////////////////////////////////////////////////
76
bool HTTPCookie::parse_set_cookie(string const &format, URLSpec const &url);

526 10 is_expired 0 4 794 22 HTTPCookie::is_expired 0 1 134 330
////////////////////////////////////////////////////////////////////
//     Function: HTTPCookie::is_expired
//       Access: Published
//  Description: Returns true if the cookie's expiration date is
//               before the indicated date, false otherwise.
////////////////////////////////////////////////////////////////////
72
inline bool HTTPCookie::is_expired(HTTPDate const &now = (now())) const;

527 11 matches_url 0 4 794 23 HTTPCookie::matches_url 0 1 135 338
////////////////////////////////////////////////////////////////////
//     Function: HTTPCookie::matches_url
//       Access: Published
//  Description: Returns true if the cookie is appropriate to send
//               with the indicated URL request, false otherwise.
////////////////////////////////////////////////////////////////////
55
bool HTTPCookie::matches_url(URLSpec const &url) const;

528 6 output 0 4 794 18 HTTPCookie::output 0 1 136 218
////////////////////////////////////////////////////////////////////
//     Function: HTTPCookie::output
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
44
void HTTPCookie::output(ostream &out) const;

529 10 HTTPClient 0 4 795 22 HTTPClient::HTTPClient 0 2 137 138 451
////////////////////////////////////////////////////////////////////
//     Function: HTTPClient::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: HTTPClient::Copy Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
77
HTTPClient::HTTPClient(void);
HTTPClient::HTTPClient(HTTPClient const &copy);

530 10 operator = 0 4 795 22 HTTPClient::operator = 0 1 139 0
52
void HTTPClient::operator =(HTTPClient const &copy);

531 16 init_random_seed 0 4 795 28 HTTPClient::init_random_seed 0 1 140 935
////////////////////////////////////////////////////////////////////
//     Function: HTTPClient::init_random_seed
//       Access: Published, Static
//  Description: This may be called once, presumably at the beginning
//               of an application, to initialize OpenSSL's random
//               seed.  On Windows, it is particularly important to
//               call this at startup if you are going to be performing
//               any https operations or otherwise use encryption,
//               since the Windows algorithm for getting a random seed
//               takes 2-3 seconds at startup, but can take 30 seconds
//               or more after you have opened a 3-D graphics window
//               and started rendering.
//
//               There is no harm in calling this method multiple
//               times, or in not calling it at all.
////////////////////////////////////////////////////////////////////
47
static void HTTPClient::init_random_seed(void);

532 14 set_proxy_spec 0 4 795 26 HTTPClient::set_proxy_spec 0 1 141 859
////////////////////////////////////////////////////////////////////
//     Function: HTTPClient::set_proxy_spec
//       Access: Published
//  Description: Specifies the complete set of proxies to use for all
//               schemes.  This is either a semicolon-delimited set of
//               hostname:ports, or a semicolon-delimited set of pairs
//               of the form "scheme=hostname:port", or a combination.
//               Use the keyword DIRECT, or an empty string, to
//               represent a direct connection.  A particular scheme
//               and/or proxy host may be listed more than once.  This
//               is a convenience function that can be used in place
//               of explicit calls to add_proxy() for each
//               scheme/proxy pair.
////////////////////////////////////////////////////////////////////
58
void HTTPClient::set_proxy_spec(string const &proxy_spec);

533 14 get_proxy_spec 0 4 795 26 HTTPClient::get_proxy_spec 0 1 142 676
////////////////////////////////////////////////////////////////////
//     Function: HTTPClient::get_proxy_spec
//       Access: Published
//  Description: Returns the complete set of proxies to use for all
//               schemes.  This is a string of the form specified by
//               set_proxy_spec(), above.  Note that the string
//               returned by this function may not be exactly the same
//               as the string passed into set_proxy_spec(), since the
//               string is regenerated from the internal storage
//               structures and may therefore be reordered.
////////////////////////////////////////////////////////////////////
46
string HTTPClient::get_proxy_spec(void) const;

534 20 set_direct_host_spec 0 4 795 32 HTTPClient::set_direct_host_spec 0 1 143 463
////////////////////////////////////////////////////////////////////
//     Function: HTTPClient::set_direct_host_spec
//       Access: Published
//  Description: Specifies the set of hosts that should be connected
//               to directly, without using a proxy.  This is a
//               semicolon-separated list of hostnames that may
//               contain wildcard characters ("*").
////////////////////////////////////////////////////////////////////
70
void HTTPClient::set_direct_host_spec(string const &direct_host_spec);

535 20 get_direct_host_spec 0 4 795 32 HTTPClient::get_direct_host_spec 0 1 144 455
////////////////////////////////////////////////////////////////////
//     Function: HTTPClient::get_direct_host_spec
//       Access: Published
//  Description: Returns the set of hosts that should be connected
//               to directly, without using a proxy, as a
//               semicolon-separated list of hostnames that may
//               contain wildcard characters ("*").
////////////////////////////////////////////////////////////////////
52
string HTTPClient::get_direct_host_spec(void) const;

536 18 set_try_all_direct 0 4 795 30 HTTPClient::set_try_all_direct 0 1 145 601
////////////////////////////////////////////////////////////////////
//     Function: HTTPClient::set_try_all_direct
//       Access: Published
//  Description: If this is set true, then after a connection attempt
//               through a proxy fails, we always try a direct
//               connection, regardless of whether the host is listed
//               on the direct_host_spec list.  If this is false, a
//               direct attempt is not made when we have a proxy in
//               effect, even if the proxy fails.
////////////////////////////////////////////////////////////////////
64
inline void HTTPClient::set_try_all_direct(bool try_all_direct);

537 18 get_try_all_direct 0 4 795 30 HTTPClient::get_try_all_direct 0 1 146 384
////////////////////////////////////////////////////////////////////
//     Function: HTTPClient::get_try_all_direct
//       Access: Published
//  Description: Returns whether a failed connection through a proxy
//               will be followed up by a direct connection attempt,
//               false otherwise.
////////////////////////////////////////////////////////////////////
55
inline bool HTTPClient::get_try_all_direct(void) const;

538 11 clear_proxy 0 4 795 23 HTTPClient::clear_proxy 0 1 147 371
////////////////////////////////////////////////////////////////////
//     Function: HTTPClient::clear_proxy
//       Access: Published
//  Description: Resets the proxy spec to empty.  Subsequent calls to
//               add_proxy() may be made to build up the set of proxy
//               servers.
////////////////////////////////////////////////////////////////////
35
void HTTPClient::clear_proxy(void);

539 9 add_proxy 0 4 795 21 HTTPClient::add_proxy 0 1 148 540
////////////////////////////////////////////////////////////////////
//     Function: HTTPClient::add_proxy
//       Access: Published
//  Description: Adds the indicated proxy host as a proxy for
//               communications on the given scheme.  Usually the
//               scheme is "http" or "https".  It may be the empty
//               string to indicate a general proxy.  The proxy string
//               may be the empty URL to indicate a direct connection.
////////////////////////////////////////////////////////////////////
71
void HTTPClient::add_proxy(string const &scheme, URLSpec const &proxy);

540 17 clear_direct_host 0 4 795 29 HTTPClient::clear_direct_host 0 1 149 441
////////////////////////////////////////////////////////////////////
//     Function: HTTPClient::clear_direct_host
//       Access: Published
//  Description: Resets the set of direct hosts to empty.  Subsequent
//               calls to add_direct_host() may be made to build up
//               the list of hosts that do not require a proxy
//               connection.
////////////////////////////////////////////////////////////////////
41
void HTTPClient::clear_direct_host(void);

541 15 add_direct_host 0 4 795 27 HTTPClient::add_direct_host 0 1 150 483
////////////////////////////////////////////////////////////////////
//     Function: HTTPClient::add_direct_host
//       Access: Published
//  Description: Adds the indicated name to the set of hostnames that
//               are connected to directly, without using a proxy.
//               This name may be either a DNS name or an IP address,
//               and it may include the * as a wildcard character.
////////////////////////////////////////////////////////////////////
57
void HTTPClient::add_direct_host(string const &hostname);

542 19 get_proxies_for_url 0 4 795 31 HTTPClient::get_proxies_for_url 0 1 151 1210
////////////////////////////////////////////////////////////////////
//     Function: HTTPClient::get_proxies_for_url
//       Access: Published
//  Description: Fills up the indicated vector with the list of
//               URLSpec objects, in the order in which they should be
//               tried, that are appropriate proxies to try for the
//               indicated URL.  The empty URL is returned for a
//               direct connection.
//
//               It is the user's responsibility to empty this vector
//               before calling this method; otherwise, the proxy
//               URL's will simply be appended to the existing list.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: HTTPClient::get_proxies_for_url
//       Access: Published
//  Description: Returns a semicolon-delimited list of proxies, in the
//               order in which they should be tried, that are
//               appropriate for the indicated URL.  The keyword
//               DIRECT indicates a direct connection should be tried.
////////////////////////////////////////////////////////////////////
65
string HTTPClient::get_proxies_for_url(URLSpec const &url) const;

543 12 set_username 0 4 795 24 HTTPClient::set_username 0 1 152 765
////////////////////////////////////////////////////////////////////
//     Function: HTTPClient::set_username
//       Access: Published
//  Description: Specifies the username:password string corresponding
//               to a particular server and/or realm, when demanded by
//               the server.  Either or both of the server or realm
//               may be empty; if so, they match anything.  Also, the
//               server may be set to the special string "*proxy",
//               which will match any proxy server.
//
//               If the username is set to the empty string, this
//               clears the password for the particular server/realm
//               pair.
////////////////////////////////////////////////////////////////////
97
void HTTPClient::set_username(string const &server, string const &realm, string const &username);

544 12 get_username 0 4 795 24 HTTPClient::get_username 0 1 153 388
////////////////////////////////////////////////////////////////////
//     Function: HTTPClient::get_username
//       Access: Published
//  Description: Returns the username:password string set for this
//               server/realm pair, or empty string if nothing has
//               been set.  See set_username().
////////////////////////////////////////////////////////////////////
81
string HTTPClient::get_username(string const &server, string const &realm) const;

545 10 set_cookie 0 4 795 22 HTTPClient::set_cookie 0 1 154 341
////////////////////////////////////////////////////////////////////
//     Function: HTTPClient::set_cookie
//       Access: Published
//  Description: Stores the indicated cookie in the client's list of
//               cookies, as if it had been received from a server.
////////////////////////////////////////////////////////////////////
54
void HTTPClient::set_cookie(HTTPCookie const &cookie);

546 12 clear_cookie 0 4 795 24 HTTPClient::clear_cookie 0 1 155 416
////////////////////////////////////////////////////////////////////
//     Function: HTTPClient::clear_cookie
//       Access: Published
//  Description: Removes the cookie with the matching domain/path/name
//               from the client's list of cookies.  Returns true if
//               it was removed, false if the cookie was not matched.
////////////////////////////////////////////////////////////////////
56
bool HTTPClient::clear_cookie(HTTPCookie const &cookie);

547 17 clear_all_cookies 0 4 795 29 HTTPClient::clear_all_cookies 0 1 156 276
////////////////////////////////////////////////////////////////////
//     Function: HTTPClient::clear_all_cookies
//       Access: Published
//  Description: Removes the all stored cookies from the client.
////////////////////////////////////////////////////////////////////
41
void HTTPClient::clear_all_cookies(void);

548 10 has_cookie 0 4 795 22 HTTPClient::has_cookie 0 1 157 366
////////////////////////////////////////////////////////////////////
//     Function: HTTPClient::has_cookie
//       Access: Published
//  Description: Returns true if there is a cookie in the client
//               matching the given cookie's domain/path/name, false
//               otherwise.
////////////////////////////////////////////////////////////////////
60
bool HTTPClient::has_cookie(HTTPCookie const &cookie) const;

549 10 get_cookie 0 4 795 22 HTTPClient::get_cookie 0 1 158 405
////////////////////////////////////////////////////////////////////
//     Function: HTTPClient::get_cookie
//       Access: Published
//  Description: Looks up and returns the cookie in the client
//               matching the given cookie's domain/path/name.  If
//               there is no matching cookie, returns an empty cookie.
////////////////////////////////////////////////////////////////////
66
HTTPCookie HTTPClient::get_cookie(HTTPCookie const &cookie) const;

550 17 copy_cookies_from 0 4 795 29 HTTPClient::copy_cookies_from 0 1 159 443
////////////////////////////////////////////////////////////////////
//     Function: HTTPClient::copy_cookies_from
//       Access: Published
//  Description: Copies all the cookies from the indicated HTTPClient
//               into this one.  Existing cookies in this client are
//               not affected, unless they are shadowed by the new
//               cookies.
////////////////////////////////////////////////////////////////////
60
void HTTPClient::copy_cookies_from(HTTPClient const &other);

551 13 write_cookies 0 4 795 25 HTTPClient::write_cookies 0 1 160 431
////////////////////////////////////////////////////////////////////
//     Function: HTTPClient::write_cookies
//       Access: Published
//  Description: Outputs the complete list of cookies stored on the
//               client, for all domains, including the expired
//               cookies (which will normally not be sent back to a
//               host).
////////////////////////////////////////////////////////////////////
51
void HTTPClient::write_cookies(ostream &out) const;

552 12 send_cookies 0 4 795 24 HTTPClient::send_cookies 0 1 161 450
////////////////////////////////////////////////////////////////////
//     Function: HTTPClient::send_cookies
//       Access: Published
//  Description: Writes to the indicated ostream a "Cookie" header
//               line for sending the cookies appropriate to the
//               indicated URL along with an HTTP request.  This also
//               removes expired cookies.
////////////////////////////////////////////////////////////////////
64
void HTTPClient::send_cookies(ostream &out, URLSpec const &url);

553 31 set_client_certificate_filename 0 4 795 43 HTTPClient::set_client_certificate_filename 0 1 162 542
////////////////////////////////////////////////////////////////////
//     Function: HTTPClient::set_client_certificate_filename
//       Access: Published
//  Description: Sets the filename of the pem-formatted file that will
//               be read for the client public and private keys if an
//               SSL server requests a certificate.  Either this or
//               set_client_certificate_pem() may be used to specify a
//               client certificate.
////////////////////////////////////////////////////////////////////
82
inline void HTTPClient::set_client_certificate_filename(Filename const &filename);

554 26 set_client_certificate_pem 0 4 795 38 HTTPClient::set_client_certificate_pem 0 1 163 551
////////////////////////////////////////////////////////////////////
//     Function: HTTPClient::set_client_certificate_pem
//       Access: Published
//  Description: Sets the pem-formatted contents of the certificate
//               that will be parsed for the client public and private
//               keys if an SSL server requests a certificate.  Either
//               this or set_client_certificate_filename() may be used
//               to specify a client certificate.
////////////////////////////////////////////////////////////////////
70
inline void HTTPClient::set_client_certificate_pem(string const &pem);

555 33 set_client_certificate_passphrase 0 4 795 45 HTTPClient::set_client_certificate_passphrase 0 1 164 442
////////////////////////////////////////////////////////////////////
//     Function: HTTPClient::set_client_certificate_passphrase
//       Access: Published
//  Description: Sets the passphrase used to decrypt the private key
//               in the certificate named by
//               set_client_certificate_filename() or
//               set_client_certificate_pem().
////////////////////////////////////////////////////////////////////
84
inline void HTTPClient::set_client_certificate_passphrase(string const &passphrase);

556 23 load_client_certificate 0 4 795 35 HTTPClient::load_client_certificate 0 1 165 690
////////////////////////////////////////////////////////////////////
//     Function: HTTPClient::load_client_certificate
//       Access: Published
//  Description: Attempts to load the certificate named by
//               set_client_certificate_filename() immediately, and
//               returns true if successful, false otherwise.
//
//               Normally this need not be explicitly called, since it
//               will be called automatically if the server requests a
//               certificate, but it may be useful to determine ahead
//               of time if the certificate can be loaded correctly.
////////////////////////////////////////////////////////////////////
47
bool HTTPClient::load_client_certificate(void);

557 43 add_preapproved_server_certificate_filename 0 4 795 55 HTTPClient::add_preapproved_server_certificate_filename 0 1 166 956
////////////////////////////////////////////////////////////////////
//     Function: HTTPClient::add_preapproved_server_certificate_filename
//       Access: Published
//  Description: Adds the certificate defined in the indicated PEM
//               filename as a "pre-approved" certificate for the
//               indicated server, defined by the hostname and port
//               (only) from the given URL.
//
//               If the server offers this particular certificate on a
//               secure connection, it will be accepted without
//               question.  This is particularly useful for
//               communicating with a server using a known self-signed
//               certificate.
//
//               See also the similar
//               add_preapproved_server_certificate_pem(), and the
//               weaker add_preapproved_server_certificate_name().
////////////////////////////////////////////////////////////////////
107
bool HTTPClient::add_preapproved_server_certificate_filename(URLSpec const &url, Filename const &filename);

558 38 add_preapproved_server_certificate_pem 0 4 795 50 HTTPClient::add_preapproved_server_certificate_pem 0 1 167 982
////////////////////////////////////////////////////////////////////
//     Function: HTTPClient::add_preapproved_server_certificate_pem
//       Access: Published
//  Description: Adds the certificate defined in the indicated data
//               string, formatted as a PEM block, as a "pre-approved"
//               certificate for the indicated server, defined by the
//               hostname and port (only) from the given URL.
//
//               If the server offers this particular certificate on a
//               secure connection, it will be accepted without
//               question.  This is particularly useful for
//               communicating with a server using a known self-signed
//               certificate.
//
//               See also the similar
//               add_preapproved_server_certificate_filename(), and
//               the weaker add_preapproved_server_certificate_name().
////////////////////////////////////////////////////////////////////
95
bool HTTPClient::add_preapproved_server_certificate_pem(URLSpec const &url, string const &pem);

559 39 add_preapproved_server_certificate_name 0 4 795 51 HTTPClient::add_preapproved_server_certificate_name 0 1 168 1358
////////////////////////////////////////////////////////////////////
//     Function: HTTPClient::add_preapproved_server_certificate_name
//       Access: Published
//  Description: Adds the certificate *name* only, as a "pre-approved"
//               certificate name for the indicated server, defined by
//               the hostname and port (only) from the given URL.
//
//               This is a weaker function than
//               add_preapproved_server_certificate_filename().  This
//               checks only the subject name of the certificate,
//               without checking for a particular certificate by key.
//               This means that a variety of server certificates may
//               match the indicated name.
//
//               Because this is a weaker verification, it only
//               applies to server certificates that are signed by a
//               recognized certificate authority.  Thus, it cannot be
//               used to pre-approve self-signed certificates, but it
//               can be used to accept a server certificate offered by
//               a different hostname than the one in the cert itself.
//
//               The certificate name should be formatted in the form
//               /type0=value0/type1=value1/type2=...
////////////////////////////////////////////////////////////////////
97
bool HTTPClient::add_preapproved_server_certificate_name(URLSpec const &url, string const &name);

560 37 clear_preapproved_server_certificates 0 4 795 49 HTTPClient::clear_preapproved_server_certificates 0 1 169 344
////////////////////////////////////////////////////////////////////
//     Function: HTTPClient::clear_preapproved_server_certificates
//       Access: Published
//  Description: Removes all preapproved server certificates for the
//               indicated server and port.
////////////////////////////////////////////////////////////////////
75
void HTTPClient::clear_preapproved_server_certificates(URLSpec const &url);

561 41 clear_all_preapproved_server_certificates 0 4 795 53 HTTPClient::clear_all_preapproved_server_certificates 0 1 170 330
////////////////////////////////////////////////////////////////////
//     Function: HTTPClient::clear_all_preapproved_server_certificates
//       Access: Published
//  Description: Removes all preapproved server certificates for all
//               servers.
////////////////////////////////////////////////////////////////////
65
void HTTPClient::clear_all_preapproved_server_certificates(void);

562 16 set_http_version 0 4 795 28 HTTPClient::set_http_version 0 1 171 483
////////////////////////////////////////////////////////////////////
//     Function: HTTPClient::set_http_version
//       Access: Published
//  Description: Specifies the version of HTTP that the client uses to
//               identify itself to the server.  The default is HV_11,
//               or HTTP 1.0; you can set this to HV_10 (HTTP 1.0) to
//               request the server use the older interface.
////////////////////////////////////////////////////////////////////
72
inline void HTTPClient::set_http_version(HTTPEnum::HTTPVersion version);

563 16 get_http_version 0 4 795 28 HTTPClient::get_http_version 0 1 172 324
////////////////////////////////////////////////////////////////////
//     Function: HTTPClient::get_http_version
//       Access: Published
//  Description: Returns the client's current setting for HTTP
//               version.  See set_http_version().
////////////////////////////////////////////////////////////////////
70
inline HTTPEnum::HTTPVersion HTTPClient::get_http_version(void) const;

564 23 get_http_version_string 0 4 795 35 HTTPClient::get_http_version_string 0 1 173 336
////////////////////////////////////////////////////////////////////
//     Function: HTTPClient::get_http_version_string
//       Access: Published
//  Description: Returns the current HTTP version setting as a string,
//               e.g. "HTTP/1.0" or "HTTP/1.1".
////////////////////////////////////////////////////////////////////
55
string HTTPClient::get_http_version_string(void) const;

565 25 parse_http_version_string 0 4 795 37 HTTPClient::parse_http_version_string 0 1 174 464
////////////////////////////////////////////////////////////////////
//     Function: HTTPClient::parse_http_version_string
//       Access: Published
//  Description: Matches the string representing a particular HTTP
//               version against any of the known versions and returns
//               the appropriate enumerated value, or HV_other if the
//               version is unknown.
////////////////////////////////////////////////////////////////////
90
static HTTPEnum::HTTPVersion HTTPClient::parse_http_version_string(string const &version);

566 17 load_certificates 0 4 795 29 HTTPClient::load_certificates 0 1 175 539
////////////////////////////////////////////////////////////////////
//     Function: HTTPClient::load_certificates
//       Access: Published
//  Description: Reads the certificate(s) (delimited by -----BEGIN
//               CERTIFICATE----- and -----END CERTIFICATE-----) from
//               the indicated file and makes them known as trusted
//               public keys for validating future connections.
//               Returns true on success, false otherwise.
////////////////////////////////////////////////////////////////////
61
bool HTTPClient::load_certificates(Filename const &filename);

567 14 set_verify_ssl 0 4 795 26 HTTPClient::set_verify_ssl 0 1 176 556
////////////////////////////////////////////////////////////////////
//     Function: HTTPClient::set_verify_ssl
//       Access: Published
//  Description: Specifies whether the client will insist on verifying
//               the identity of the servers it connects to via SSL
//               (that is, https).  
//
//               The parameter value is an enumerated type which
//               indicates the level of security to which the client
//               will insist upon.
////////////////////////////////////////////////////////////////////
73
inline void HTTPClient::set_verify_ssl(HTTPClient::VerifySSL verify_ssl);

568 14 get_verify_ssl 0 4 795 26 HTTPClient::get_verify_ssl 0 1 177 403
////////////////////////////////////////////////////////////////////
//     Function: HTTPClient::get_verify_ssl
//       Access: Published
//  Description: Returns whether the client will insist on verifying
//               the identity of the servers it connects to via SSL
//               (that is, https).  See set_verify_ssl().
////////////////////////////////////////////////////////////////////
68
inline HTTPClient::VerifySSL HTTPClient::get_verify_ssl(void) const;

569 15 set_cipher_list 0 4 795 27 HTTPClient::set_cipher_list 0 1 178 715
////////////////////////////////////////////////////////////////////
//     Function: HTTPClient::set_cipher_list
//       Access: Published
//  Description: Specifies the set of ciphers that are to be made
//               available for SSL connections.  This is a string as
//               described in the ciphers(1) man page of the OpenSSL
//               documentation (or see
//               http://www.openssl.org/docs/apps/ciphers.html ).  If
//               this is not specified, the default is provided by the
//               Config file.  You may also specify "DEFAULT" to use
//               the built-in OpenSSL default value.
////////////////////////////////////////////////////////////////////
67
inline void HTTPClient::set_cipher_list(string const &cipher_list);

570 15 get_cipher_list 0 4 795 27 HTTPClient::get_cipher_list 0 1 179 323
////////////////////////////////////////////////////////////////////
//     Function: HTTPClient::get_cipher_list
//       Access: Published
//  Description: Returns the set of ciphers as set by
//               set_cipher_list().  See set_cipher_list().
////////////////////////////////////////////////////////////////////
61
inline string const &HTTPClient::get_cipher_list(void) const;

571 12 make_channel 0 4 795 24 HTTPClient::make_channel 0 1 180 1184
////////////////////////////////////////////////////////////////////
//     Function: HTTPClient::make_channel
//       Access: Published
//  Description: Returns a new HTTPChannel object that may be used
//               for reading multiple documents using the same
//               connection, for greater network efficiency than
//               calling HTTPClient::get_document() repeatedly (which
//               would force a new connection for each document).
//
//               Also, HTTPChannel has some additional, less common
//               interface methods than the basic interface methods
//               that exist on HTTPClient; if you wish to call any of
//               these methods you must first obtain an HTTPChannel.
//
//               Pass true for persistent_connection to gain this
//               network efficiency.  If, on the other hand, your
//               intention is to use the channel to retrieve only one
//               document, then pass false to inform the server that
//               we will be dropping the connection after the first
//               document.
////////////////////////////////////////////////////////////////////
78
PointerTo< HTTPChannel > HTTPClient::make_channel(bool persistent_connection);

572 9 post_form 0 4 795 21 HTTPClient::post_form 0 1 181 531
////////////////////////////////////////////////////////////////////
//     Function: HTTPClient::post_form
//       Access: Published
//  Description: Posts form data to a particular URL and retrieves the
//               response.  Returns a new HTTPChannel object whether
//               the document is successfully read or not; you can
//               test is_valid() and get_return_code() to determine
//               whether the document was retrieved.
////////////////////////////////////////////////////////////////////
87
PointerTo< HTTPChannel > HTTPClient::post_form(URLSpec const &url, string const &body);

573 12 get_document 0 4 795 24 HTTPClient::get_document 0 1 182 508
////////////////////////////////////////////////////////////////////
//     Function: HTTPClient::get_document
//       Access: Published
//  Description: Opens the named document for reading.  Returns a new
//               HTTPChannel object whether the document is
//               successfully read or not; you can test is_valid() and
//               get_return_code() to determine whether the document
//               was retrieved.
////////////////////////////////////////////////////////////////////
70
PointerTo< HTTPChannel > HTTPClient::get_document(URLSpec const &url);

574 10 get_header 0 4 795 22 HTTPClient::get_header 0 1 183 522
////////////////////////////////////////////////////////////////////
//     Function: HTTPClient::get_header
//       Access: Published
//  Description: Like get_document(), except only the header
//               associated with the document is retrieved.  This may
//               be used to test for existence of the document; it
//               might also return the size of the document (if the
//               server gives us this information).
////////////////////////////////////////////////////////////////////
68
PointerTo< HTTPChannel > HTTPClient::get_header(URLSpec const &url);

575 13 base64_encode 0 4 795 25 HTTPClient::base64_encode 0 1 184 489
////////////////////////////////////////////////////////////////////
//     Function: HTTPClient::base64_encode
//       Access: Published, Static
//  Description: Implements HTTPAuthorization::base64_encode().  This
//               is provided here just as a convenient place to
//               publish it for access by the scripting language; C++
//               code should probably use HTTPAuthorization directly.
////////////////////////////////////////////////////////////////////
64
static inline string HTTPClient::base64_encode(string const &s);

576 13 base64_decode 0 4 795 25 HTTPClient::base64_decode 0 1 185 489
////////////////////////////////////////////////////////////////////
//     Function: HTTPClient::base64_decode
//       Access: Published, Static
//  Description: Implements HTTPAuthorization::base64_decode().  This
//               is provided here just as a convenient place to
//               publish it for access by the scripting language; C++
//               code should probably use HTTPAuthorization directly.
////////////////////////////////////////////////////////////////////
64
static inline string HTTPClient::base64_decode(string const &s);

577 14 get_global_ptr 0 4 795 26 HTTPClient::get_global_ptr 0 1 186 272
////////////////////////////////////////////////////////////////////
//     Function: HTTPClient::get_global_ptr
//       Access: Published, Static
//  Description: Returns the default global HTTPClient.
////////////////////////////////////////////////////////////////////
52
static HTTPClient *HTTPClient::get_global_ptr(void);

578 13 HTTPEntityTag 0 4 798 28 HTTPEntityTag::HTTPEntityTag 0 4 187 188 189 190 1170
////////////////////////////////////////////////////////////////////
//     Function: HTTPEntityTag::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: HTTPEntityTag::Constructor
//       Access: Published
//  Description: This constructor accepts an explicit weak flag and a
//               literal (not quoted) tag string.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: HTTPEntityTag::Copy Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: HTTPEntityTag::Constructor
//       Access: Published
//  Description: This constructor accepts a string as formatted from
//               an HTTP server (e.g. the tag is quoted, with an
//               optional W/ prefix.)
////////////////////////////////////////////////////////////////////
223
inline HTTPEntityTag::HTTPEntityTag(void);
HTTPEntityTag::HTTPEntityTag(string const &text);
inline HTTPEntityTag::HTTPEntityTag(bool weak, string const &tag);
inline HTTPEntityTag::HTTPEntityTag(HTTPEntityTag const &copy);

579 10 operator = 0 4 798 25 HTTPEntityTag::operator = 0 1 191 0
65
inline void HTTPEntityTag::operator =(HTTPEntityTag const &copy);

580 7 is_weak 0 4 798 22 HTTPEntityTag::is_weak 0 1 192 525
////////////////////////////////////////////////////////////////////
//     Function: HTTPEntityTag::is_weak
//       Access: Published
//  Description: Returns true if the entity tag is marked as "weak".
//               A consistent weak entity tag does not guarantee that
//               its resource has not changed in any way, but it does
//               promise that the resource has not changed in any
//               semantically meaningful way.
////////////////////////////////////////////////////////////////////
47
inline bool HTTPEntityTag::is_weak(void) const;

581 7 get_tag 0 4 798 22 HTTPEntityTag::get_tag 0 1 193 258
////////////////////////////////////////////////////////////////////
//     Function: HTTPEntityTag::get_tag
//       Access: Published
//  Description: Returns the tag as a literal string.
////////////////////////////////////////////////////////////////////
56
inline string const &HTTPEntityTag::get_tag(void) const;

582 10 get_string 0 4 798 25 HTTPEntityTag::get_string 0 1 194 372
////////////////////////////////////////////////////////////////////
//     Function: HTTPEntityTag::get_string
//       Access: Published
//  Description: Returns the entity tag formatted for sending to an
//               HTTP server (the tag is quoted, with a conditional W/
//               prefix).
////////////////////////////////////////////////////////////////////
45
string HTTPEntityTag::get_string(void) const;

583 12 strong_equiv 0 4 798 27 HTTPEntityTag::strong_equiv 0 1 195 345
////////////////////////////////////////////////////////////////////
//     Function: HTTPEntityTag::strong_equiv
//       Access: Published
//  Description: Returns true if the two tags have "strong" equivalence:
//               they are the same tag, and both are "strong".
////////////////////////////////////////////////////////////////////
74
inline bool HTTPEntityTag::strong_equiv(HTTPEntityTag const &other) const;

584 10 weak_equiv 0 4 798 25 HTTPEntityTag::weak_equiv 0 1 196 349
////////////////////////////////////////////////////////////////////
//     Function: HTTPEntityTag::weak_equiv
//       Access: Published
//  Description: Returns true if the two tags have "weak" equivalence:
//               they are the same tag, and one or both may be "weak".
////////////////////////////////////////////////////////////////////
72
inline bool HTTPEntityTag::weak_equiv(HTTPEntityTag const &other) const;

585 11 operator == 0 4 798 26 HTTPEntityTag::operator == 0 1 197 0
73
inline bool HTTPEntityTag::operator ==(HTTPEntityTag const &other) const;

586 11 operator != 0 4 798 26 HTTPEntityTag::operator != 0 1 198 0
73
inline bool HTTPEntityTag::operator !=(HTTPEntityTag const &other) const;

587 10 operator < 0 4 798 25 HTTPEntityTag::operator < 0 1 199 0
72
inline bool HTTPEntityTag::operator <(HTTPEntityTag const &other) const;

588 10 compare_to 0 4 798 25 HTTPEntityTag::compare_to 0 1 200 409
////////////////////////////////////////////////////////////////////
//     Function: HTTPEntityTag::compare_to
//       Access: Published
//  Description: Returns a number less than zero if this HTTPEntityTag
//               sorts before the other one, greater than zero if it
//               sorts after, or zero if they are equivalent.
////////////////////////////////////////////////////////////////////
71
inline int HTTPEntityTag::compare_to(HTTPEntityTag const &other) const;

589 6 output 0 4 798 21 HTTPEntityTag::output 0 1 201 221
////////////////////////////////////////////////////////////////////
//     Function: HTTPEntityTag::output
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
54
inline void HTTPEntityTag::output(ostream &out) const;

590 14 ~HTTPEntityTag 0 4 798 29 HTTPEntityTag::~HTTPEntityTag 0 0 0
36
HTTPEntityTag::~HTTPEntityTag(void);

591 12 DocumentSpec 0 4 799 26 DocumentSpec::DocumentSpec 0 4 202 203 204 205 907
////////////////////////////////////////////////////////////////////
//     Function: DocumentSpec::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: DocumentSpec::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: DocumentSpec::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: DocumentSpec::Copy Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
210
inline DocumentSpec::DocumentSpec(void);
inline DocumentSpec::DocumentSpec(string const &url);
inline DocumentSpec::DocumentSpec(URLSpec const &url);
inline DocumentSpec::DocumentSpec(DocumentSpec const &copy);

592 10 operator = 0 4 799 24 DocumentSpec::operator = 0 1 206 0
63
inline void DocumentSpec::operator =(DocumentSpec const &copy);

593 11 operator == 0 4 799 25 DocumentSpec::operator == 0 1 207 0
71
inline bool DocumentSpec::operator ==(DocumentSpec const &other) const;

594 11 operator != 0 4 799 25 DocumentSpec::operator != 0 1 208 0
71
inline bool DocumentSpec::operator !=(DocumentSpec const &other) const;

595 10 operator < 0 4 799 24 DocumentSpec::operator < 0 1 209 0
70
inline bool DocumentSpec::operator <(DocumentSpec const &other) const;

596 10 compare_to 0 4 799 24 DocumentSpec::compare_to 0 1 210 224
////////////////////////////////////////////////////////////////////
//     Function: DocumentSpec::compare_to
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
62
int DocumentSpec::compare_to(DocumentSpec const &other) const;

597 7 set_url 0 4 799 21 DocumentSpec::set_url 0 1 211 598
////////////////////////////////////////////////////////////////////
//     Function: DocumentSpec::set_url
//       Access: Published
//  Description: Changes the URL of the DocumentSpec without modifying
//               its other properties.  Normally this would be a
//               strange thing to do, because the tag and date are
//               usually strongly associated with the URL.  To get a
//               DocumentSpec pointing to a new URL, you would
//               normally create a new DocumentSpec object.
////////////////////////////////////////////////////////////////////
54
inline void DocumentSpec::set_url(URLSpec const &url);

598 7 get_url 0 4 799 21 DocumentSpec::get_url 0 1 212 259
////////////////////////////////////////////////////////////////////
//     Function: DocumentSpec::get_url
//       Access: Published
//  Description: Retrieves the URL of the DocumentSpec.
////////////////////////////////////////////////////////////////////
56
inline URLSpec const &DocumentSpec::get_url(void) const;

599 7 set_tag 0 4 799 21 DocumentSpec::set_tag 0 1 213 296
////////////////////////////////////////////////////////////////////
//     Function: DocumentSpec::set_tag
//       Access: Published
//  Description: Changes the identity tag associated with the
//               DocumentSpec.
////////////////////////////////////////////////////////////////////
60
inline void DocumentSpec::set_tag(HTTPEntityTag const &tag);

600 7 has_tag 0 4 799 21 DocumentSpec::has_tag 0 1 214 306
////////////////////////////////////////////////////////////////////
//     Function: DocumentSpec::has_tag
//       Access: Published
//  Description: Returns true if an identity tag is associated with
//               the DocumentSpec.
////////////////////////////////////////////////////////////////////
46
inline bool DocumentSpec::has_tag(void) const;

601 7 get_tag 0 4 799 21 DocumentSpec::get_tag 0 1 215 524
////////////////////////////////////////////////////////////////////
//     Function: DocumentSpec::get_tag
//       Access: Published
//  Description: Returns the identity tag associated with the
//               DocumentSpec, if there is one.  It is an error to
//               call this if has_tag() returns false.
//
//               The identity tag is set by the HTTP server to
//               uniquely refer to a particular version of a document.
////////////////////////////////////////////////////////////////////
62
inline HTTPEntityTag const &DocumentSpec::get_tag(void) const;

602 9 clear_tag 0 4 799 23 DocumentSpec::clear_tag 0 1 216 315
////////////////////////////////////////////////////////////////////
//     Function: DocumentSpec::clear_tag
//       Access: Published
//  Description: Removes the identity tag associated with the
//               DocumentSpec, if there is one.
////////////////////////////////////////////////////////////////////
42
inline void DocumentSpec::clear_tag(void);

603 8 set_date 0 4 799 22 DocumentSpec::set_date 0 1 217 303
////////////////////////////////////////////////////////////////////
//     Function: DocumentSpec::set_date
//       Access: Published
//  Description: Changes the last-modified date associated with the
//               DocumentSpec.
////////////////////////////////////////////////////////////////////
57
inline void DocumentSpec::set_date(HTTPDate const &date);

604 8 has_date 0 4 799 22 DocumentSpec::has_date 0 1 218 312
////////////////////////////////////////////////////////////////////
//     Function: DocumentSpec::has_date
//       Access: Published
//  Description: Returns true if a last-modified date is associated
//               with the DocumentSpec.
////////////////////////////////////////////////////////////////////
47
inline bool DocumentSpec::has_date(void) const;

605 8 get_date 0 4 799 22 DocumentSpec::get_date 0 1 219 395
////////////////////////////////////////////////////////////////////
//     Function: DocumentSpec::get_date
//       Access: Published
//  Description: Returns the last-modified date associated with the
//               DocumentSpec, if there is one.  It is an error to
//               call this if has_date() returns false.
////////////////////////////////////////////////////////////////////
58
inline HTTPDate const &DocumentSpec::get_date(void) const;

606 10 clear_date 0 4 799 24 DocumentSpec::clear_date 0 1 220 322
////////////////////////////////////////////////////////////////////
//     Function: DocumentSpec::clear_date
//       Access: Published
//  Description: Removes the last-modified date associated with the
//               DocumentSpec, if there is one.
////////////////////////////////////////////////////////////////////
43
inline void DocumentSpec::clear_date(void);

607 16 set_request_mode 0 4 799 30 DocumentSpec::set_request_mode 0 1 221 1984
////////////////////////////////////////////////////////////////////
//     Function: DocumentSpec::set_request_mode
//       Access: Published
//  Description: Sets the request mode of this DocumentSpec.  This is
//               only relevant when using the DocumentSpec to generate
//               a request (for instance, in HTTPChannel).  This
//               specifies whether the document request will ask the
//               server for a newer version than the indicated
//               version, or the exact version, neither, or either.
//
//               The possible values are:
//
//                 RM_any: ignore date and tag (if specified), and
//                 retrieve any document that matches the URL.  For a
//                 subrange request, if the document matches the
//                 version indicated exactly, retrieve the subrange
//                 only; otherwise, retrieve the entire document.
//
//                 RM_equal: request only the precise version of the
//                 document that matches the particular date and/or
//                 tag exactly, if specified; fail if this version is
//                 not available.
//
//                 RM_newer: request any document that is newer than
//                 the version indicated by the particular date and/or
//                 tag; fail if only that version (or older versions)
//                 are available.
//
//                 RM_newer_or_equal: request any document that
//                 matches the version indicated by the particular
//                 date and/or tag, or is a newer version; fail if
//                 only older versions are available.
//
//               In any of the above, you may specify either or both
//               of the last-modified date and the identity tag,
//               whichever is known to the client.
//
//               The default mode is RM_any.
////////////////////////////////////////////////////////////////////
83
inline void DocumentSpec::set_request_mode(DocumentSpec::RequestMode request_mode);

608 16 get_request_mode 0 4 799 30 DocumentSpec::get_request_mode 0 1 222 318
////////////////////////////////////////////////////////////////////
//     Function: DocumentSpec::get_request_mode
//       Access: Published
//  Description: Returns the request mode of this DocumentSpec.  See
//               set_request_mode().
////////////////////////////////////////////////////////////////////
76
inline DocumentSpec::RequestMode DocumentSpec::get_request_mode(void) const;

609 17 set_cache_control 0 4 799 31 DocumentSpec::set_cache_control 0 1 223 1075
////////////////////////////////////////////////////////////////////
//     Function: DocumentSpec::set_cache_control
//       Access: Published
//  Description: Specifies what kind of cached value is acceptable for
//               this document.  Warning: some HTTP proxies may not
//               respect this setting and may return a cached result
//               anyway.
//
//                 CC_allow_cache: the normal HTTP behavior; the
//                 server may return a cached value if it believes it
//                 is valid.
//
//                 CC_revalidate: a proxy is forced to contact the
//                 origin server and verify that is cached value is in
//                 fact still valid before it returns it.
//
//                 CC_no_cache: a proxy must not return its cached
//                 value at all, but is forced to go all the way back
//                 to the origin server for the official document.
//
//               The default mode is CC_allow_cache.
////////////////////////////////////////////////////////////////////
86
inline void DocumentSpec::set_cache_control(DocumentSpec::CacheControl cache_control);

610 17 get_cache_control 0 4 799 31 DocumentSpec::get_cache_control 0 1 224 320
////////////////////////////////////////////////////////////////////
//     Function: DocumentSpec::get_cache_control
//       Access: Published
//  Description: Returns the request mode of this DocumentSpec.  See
//               set_cache_control().
////////////////////////////////////////////////////////////////////
78
inline DocumentSpec::CacheControl DocumentSpec::get_cache_control(void) const;

611 5 input 0 4 799 19 DocumentSpec::input 0 1 225 391
////////////////////////////////////////////////////////////////////
//     Function: DocumentSpec::input
//       Access: Published
//  Description: Can be used to read in the DocumentSpec from a stream
//               generated either by output() or write().  Returns
//               true on success, false on failure.
////////////////////////////////////////////////////////////////////
38
bool DocumentSpec::input(istream &in);

612 6 output 0 4 799 20 DocumentSpec::output 0 1 226 220
////////////////////////////////////////////////////////////////////
//     Function: DocumentSpec::output
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
46
void DocumentSpec::output(ostream &out) const;

613 5 write 0 4 799 19 DocumentSpec::write 0 1 227 219
////////////////////////////////////////////////////////////////////
//     Function: DocumentSpec::write
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
67
void DocumentSpec::write(ostream &out, int indent_level = 0) const;

614 13 ~DocumentSpec 0 4 799 27 DocumentSpec::~DocumentSpec 0 0 0
34
DocumentSpec::~DocumentSpec(void);

615 10 get_client 0 4 802 23 HTTPChannel::get_client 0 1 228 276
////////////////////////////////////////////////////////////////////
//     Function: HTTPChannel::get_client
//       Access: Published
//  Description: Returns the HTTPClient object that owns this channel.
////////////////////////////////////////////////////////////////////
55
inline HTTPClient *HTTPChannel::get_client(void) const;

616 8 is_valid 0 4 802 21 HTTPChannel::is_valid 0 1 229 367
////////////////////////////////////////////////////////////////////
//     Function: HTTPChannel::is_valid
//       Access: Published
//  Description: Returns true if the last-requested document was
//               successfully retrieved and is ready to be read, false
//               otherwise.
////////////////////////////////////////////////////////////////////
46
inline bool HTTPChannel::is_valid(void) const;

617 19 is_connection_ready 0 4 802 32 HTTPChannel::is_connection_ready 0 1 230 410
////////////////////////////////////////////////////////////////////
//     Function: HTTPChannel::is_connection_ready
//       Access: Published
//  Description: Returns true if a connection has been established to
//               the named server in a previous call to connect_to()
//               or begin_connect_to(), false otherwise.
////////////////////////////////////////////////////////////////////
57
inline bool HTTPChannel::is_connection_ready(void) const;

618 7 get_url 0 4 802 20 HTTPChannel::get_url 0 1 231 572
////////////////////////////////////////////////////////////////////
//     Function: HTTPChannel::get_url
//       Access: Published
//  Description: Returns the URL that was used to retrieve the
//               most recent document: whatever URL was last passed to
//               get_document() or get_header().  If a redirect has
//               transparently occurred, this will return the new,
//               redirected URL (the actual URL at which the document
//               was located).
////////////////////////////////////////////////////////////////////
55
inline URLSpec const &HTTPChannel::get_url(void) const;

619 17 get_document_spec 0 4 802 30 HTTPChannel::get_document_spec 0 1 232 703
////////////////////////////////////////////////////////////////////
//     Function: HTTPChannel::get_document_spec
//       Access: Published
//  Description: Returns the DocumentSpec associated with the most
//               recent document.  This includes its actual URL
//               (following redirects) along with the identity tag and
//               last-modified date, if supplied by the server.
//
//               This structure may be saved and used to retrieve the
//               same version of the document later, or to
//               conditionally retrieve a newer version if it is
//               available.
////////////////////////////////////////////////////////////////////
70
inline DocumentSpec const &HTTPChannel::get_document_spec(void) const;

620 16 get_http_version 0 4 802 29 HTTPChannel::get_http_version 0 1 233 385
////////////////////////////////////////////////////////////////////
//     Function: HTTPChannel::get_http_version
//       Access: Published
//  Description: Returns the HTTP version number returned by the
//               server, as one of the HTTPClient enumerated types,
//               e.g. HTTPClient::HV_11.
////////////////////////////////////////////////////////////////////
71
inline HTTPEnum::HTTPVersion HTTPChannel::get_http_version(void) const;

621 23 get_http_version_string 0 4 802 36 HTTPChannel::get_http_version_string 0 1 234 348
////////////////////////////////////////////////////////////////////
//     Function: HTTPChannel::get_http_version_string
//       Access: Published
//  Description: Returns the HTTP version number returned by the
//               server, formatted as a string, e.g. "HTTP/1.1".
////////////////////////////////////////////////////////////////////
70
inline string const &HTTPChannel::get_http_version_string(void) const;

622 15 get_status_code 0 4 802 28 HTTPChannel::get_status_code 0 1 235 853
////////////////////////////////////////////////////////////////////
//     Function: HTTPChannel::get_status_code
//       Access: Published
//  Description: Returns the HTML return code from the document
//               retrieval request.  This will be in the 200 range if
//               the document is successfully retrieved, or some other
//               value in the case of an error.
//
//               Some proxy errors during an https-over-proxy request
//               would return the same status code as a different
//               error that occurred on the host server.  To
//               differentiate these cases, status codes that are
//               returned by the proxy during the CONNECT phase
//               (except code 407) are incremented by 1000.
////////////////////////////////////////////////////////////////////
52
inline int HTTPChannel::get_status_code(void) const;

623 17 get_status_string 0 4 802 30 HTTPChannel::get_status_string 0 1 236 383
////////////////////////////////////////////////////////////////////
//     Function: HTTPChannel::get_status_string
//       Access: Published
//  Description: Returns the string as returned by the server
//               describing the status code for humans.  This may or
//               may not be meaningful.
////////////////////////////////////////////////////////////////////
50
string HTTPChannel::get_status_string(void) const;

624 13 get_www_realm 0 4 802 26 HTTPChannel::get_www_realm 0 1 237 668
////////////////////////////////////////////////////////////////////
//     Function: HTTPChannel::get_www_realm
//       Access: Published
//  Description: If the document failed to connect because of a 401
//               (Authorization required), this method will return the
//               "realm" returned by the server in which the requested
//               document must be authenticated.  This string may be
//               presented to the user to request an associated
//               username and password (which then should be stored in
//               HTTPClient::set_username()).
////////////////////////////////////////////////////////////////////
60
inline string const &HTTPChannel::get_www_realm(void) const;

625 15 get_proxy_realm 0 4 802 28 HTTPChannel::get_proxy_realm 0 1 238 604
////////////////////////////////////////////////////////////////////
//     Function: HTTPChannel::get_proxy_realm
//       Access: Published
//  Description: If the document failed to connect because of a 407
//               (Proxy authorization required), this method will
//               return the "realm" returned by the proxy.  This
//               string may be presented to the user to request an
//               associated username and password (which then should
//               be stored in HTTPClient::set_username()).
////////////////////////////////////////////////////////////////////
62
inline string const &HTTPChannel::get_proxy_realm(void) const;

626 12 get_redirect 0 4 802 25 HTTPChannel::get_redirect 0 1 239 670
////////////////////////////////////////////////////////////////////
//     Function: HTTPChannel::get_redirect
//       Access: Published
//  Description: If the document failed with a redirect code (300
//               series), this will generally contain the new URL the
//               server wants us to try.  In many cases, the client
//               will automatically follow redirects; if these are
//               successful the client will return a successful code
//               and get_redirect() will return empty, but get_url()
//               will return the new, redirected URL.
////////////////////////////////////////////////////////////////////
60
inline URLSpec const &HTTPChannel::get_redirect(void) const;

627 16 get_header_value 0 4 802 29 HTTPChannel::get_header_value 0 1 240 409
////////////////////////////////////////////////////////////////////
//     Function: HTTPChannel::get_header_value
//       Access: Published
//  Description: Returns the HTML header value associated with the
//               indicated key, or empty string if the key was not
//               defined in the message returned by the server.
////////////////////////////////////////////////////////////////////
62
string HTTPChannel::get_header_value(string const &key) const;

628 22 get_num_redirect_steps 0 4 802 35 HTTPChannel::get_num_redirect_steps 0 1 241 498
////////////////////////////////////////////////////////////////////
//     Function: HTTPChannel::get_num_redirect_steps
//       Access: Published
//  Description: If the document automatically followed one or more
//               redirects, this will return the number of redirects
//               that were automatically followed.  Use
//               get_redirect_step() to retrieve each URL in
//               sequence.
////////////////////////////////////////////////////////////////////
59
inline int HTTPChannel::get_num_redirect_steps(void) const;

629 17 get_redirect_step 0 4 802 30 HTTPChannel::get_redirect_step 0 1 242 446
////////////////////////////////////////////////////////////////////
//     Function: HTTPChannel::get_redirect_step
//       Access: Published
//  Description: Use in conjunction with get_num_redirect_steps() to
//               extract the chain of URL's that the channel was
//               automatically redirected through to arrive at the
//               final document.
////////////////////////////////////////////////////////////////////
66
inline URLSpec const &HTTPChannel::get_redirect_step(int n) const;

630 25 set_persistent_connection 0 4 802 38 HTTPChannel::set_persistent_connection 0 1 243 894
////////////////////////////////////////////////////////////////////
//     Function: HTTPChannel::set_persistent_connection
//       Access: Published
//  Description: Indicates whether the HTTPChannel should try to keep
//               the connection to the server open and reuse that
//               connection for multiple documents, or whether it
//               should close the connection and open a new one for
//               each request.  Set this true to keep the connections
//               around when possible, false to recycle them.
//
//               It makes most sense to set this false when the
//               HTTPChannel will be used only once to retrieve a
//               single document, true when you will be using the same
//               HTTPChannel object to retrieve multiple documents.
////////////////////////////////////////////////////////////////////
79
inline void HTTPChannel::set_persistent_connection(bool persistent_connection);

631 25 get_persistent_connection 0 4 802 38 HTTPChannel::get_persistent_connection 0 1 244 553
////////////////////////////////////////////////////////////////////
//     Function: HTTPChannel::get_persistent_connection
//       Access: Published
//  Description: Returns whether the HTTPChannel should try to keep
//               the connection to the server open and reuse that
//               connection for multiple documents, or whether it
//               should close the connection and open a new one for
//               each request.  See set_persistent_connection().
////////////////////////////////////////////////////////////////////
63
inline bool HTTPChannel::get_persistent_connection(void) const;

632 21 will_close_connection 0 4 802 34 HTTPChannel::will_close_connection 0 1 245 485
////////////////////////////////////////////////////////////////////
//     Function: HTTPChannel::will_close_connection
//       Access: Published
//  Description: Returns true if the server has indicated it will
//               close the connection after this document has been
//               read, or false if it will remain open (and future
//               documents may be requested on the same connection).
////////////////////////////////////////////////////////////////////
52
bool HTTPChannel::will_close_connection(void) const;

633 15 set_allow_proxy 0 4 802 28 HTTPChannel::set_allow_proxy 0 1 246 615
////////////////////////////////////////////////////////////////////
//     Function: HTTPChannel::set_allow_proxy
//       Access: Published
//  Description: If this is true (the normal case), the HTTPClient
//               will be consulted for information about the proxy to
//               be used for each connection via this HTTPChannel.  If
//               this has been set to false by the user, then all
//               connections will be made directly, regardless of the
//               proxy settings indicated on the HTTPClient.
////////////////////////////////////////////////////////////////////
59
inline void HTTPChannel::set_allow_proxy(bool allow_proxy);

634 15 get_allow_proxy 0 4 802 28 HTTPChannel::get_allow_proxy 0 1 247 615
////////////////////////////////////////////////////////////////////
//     Function: HTTPChannel::get_allow_proxy
//       Access: Published
//  Description: If this is true (the normal case), the HTTPClient
//               will be consulted for information about the proxy to
//               be used for each connection via this HTTPChannel.  If
//               this has been set to false by the user, then all
//               connections will be made directly, regardless of the
//               proxy settings indicated on the HTTPClient.
////////////////////////////////////////////////////////////////////
53
inline bool HTTPChannel::get_allow_proxy(void) const;

635 16 set_proxy_tunnel 0 4 802 29 HTTPChannel::set_proxy_tunnel 0 1 248 1220
////////////////////////////////////////////////////////////////////
//     Function: HTTPChannel::set_proxy_tunnel
//       Access: Published
//  Description: Normally, a proxy is itself asked for ordinary URL's,
//               and the proxy decides whether to hand the client a
//               cached version of the document or to contact the
//               server for a fresh version.  The proxy may also
//               modify the headers and transfer encoding on the way.
//
//               If this is set to true, then instead of asking for
//               URL's from the proxy, we will ask the proxy to open a
//               connection to the server (for instance, on port 80);
//               if the proxy honors this request, then we contact the
//               server directly through this connection to retrieve
//               the document.  If the proxy does not honor the
//               connect request, then the retrieve operation fails.
//
//               SSL connections (e.g. https), and connections through
//               a Socks proxy, are always tunneled, regardless of the
//               setting of this flag.
////////////////////////////////////////////////////////////////////
61
inline void HTTPChannel::set_proxy_tunnel(bool proxy_tunnel);

636 16 get_proxy_tunnel 0 4 802 29 HTTPChannel::get_proxy_tunnel 0 1 249 418
////////////////////////////////////////////////////////////////////
//     Function: HTTPChannel::get_proxy_tunnel
//       Access: Published
//  Description: Returns true if connections always tunnel through a
//               proxy, or false (the normal case) if we allow the
//               proxy to serve up documents.  See set_proxy_tunnel().
////////////////////////////////////////////////////////////////////
54
inline bool HTTPChannel::get_proxy_tunnel(void) const;

637 19 set_connect_timeout 0 4 802 32 HTTPChannel::set_connect_timeout 0 1 250 633
////////////////////////////////////////////////////////////////////
//     Function: HTTPChannel::set_connect_timeout
//       Access: Published
//  Description: Sets the maximum length of time, in seconds, that the
//               channel will wait before giving up on establishing a
//               TCP connection.
//
//               At present, this is used only for the nonblocking
//               interfaces (e.g. begin_get_document(),
//               begin_connect_to()), but it is used whether
//               set_blocking_connect() is true or false.
////////////////////////////////////////////////////////////////////
69
inline void HTTPChannel::set_connect_timeout(double timeout_seconds);

638 19 get_connect_timeout 0 4 802 32 HTTPChannel::get_connect_timeout 0 1 251 382
////////////////////////////////////////////////////////////////////
//     Function: HTTPChannel::get_connect_timeout
//       Access: Published
//  Description: Returns the length of time, in seconds, to wait for a
//               new nonblocking socket to connect.  See
//               set_connect_timeout().
////////////////////////////////////////////////////////////////////
59
inline double HTTPChannel::get_connect_timeout(void) const;

639 20 set_blocking_connect 0 4 802 33 HTTPChannel::set_blocking_connect 0 1 252 1043
////////////////////////////////////////////////////////////////////
//     Function: HTTPChannel::set_blocking_connect
//       Access: Published
//  Description: If this flag is true, a socket connect will block
//               even for nonblocking I/O calls like
//               begin_get_document(), begin_connect_to(), etc.  If
//               false, a socket connect will not block for
//               nonblocking I/O calls, but will block for blocking
//               I/O calls (get_document(), connect_to(), etc.).
//
//               Setting this true is useful when you want to use
//               non-blocking I/O once you have established the
//               connection, but you don't want to bother with polling
//               for the initial connection.  It's also useful when
//               you don't particularly care about non-blocking I/O,
//               but you need to respect timeouts like connect_timeout
//               and http_timeout.
////////////////////////////////////////////////////////////////////
69
inline void HTTPChannel::set_blocking_connect(bool blocking_connect);

640 20 get_blocking_connect 0 4 802 33 HTTPChannel::get_blocking_connect 0 1 253 596
////////////////////////////////////////////////////////////////////
//     Function: HTTPChannel::get_blocking_connect
//       Access: Published
//  Description: If this flag is true, a socket connect will block
//               even for nonblocking I/O calls like
//               begin_get_document(), begin_connect_to(), etc.  If
//               false, a socket connect will not block for
//               nonblocking I/O calls, but will block for blocking
//               I/O calls (get_document(), connect_to(), etc.).
////////////////////////////////////////////////////////////////////
58
inline bool HTTPChannel::get_blocking_connect(void) const;

641 16 set_http_timeout 0 4 802 29 HTTPChannel::set_http_timeout 0 1 254 838
////////////////////////////////////////////////////////////////////
//     Function: HTTPChannel::set_http_timeout
//       Access: Published
//  Description: Sets the maximum length of time, in seconds, that the
//               channel will wait for the HTTP server to finish
//               sending its response to our request.
//
//               The timer starts counting after the TCP connection
//               has been established (see set_connect_timeout(),
//               above) and the request has been sent.
//
//               At present, this is used only for the nonblocking
//               interfaces (e.g. begin_get_document(),
//               begin_connect_to()), but it is used whether
//               set_blocking_connect() is true or false.
////////////////////////////////////////////////////////////////////
66
inline void HTTPChannel::set_http_timeout(double timeout_seconds);

642 16 get_http_timeout 0 4 802 29 HTTPChannel::get_http_timeout 0 1 255 383
////////////////////////////////////////////////////////////////////
//     Function: HTTPChannel::get_http_timeout
//       Access: Published
//  Description: Returns the length of time, in seconds, to wait for 
//               the HTTP server to respond to our request.  See
//               set_http_timeout().
////////////////////////////////////////////////////////////////////
56
inline double HTTPChannel::get_http_timeout(void) const;

643 18 set_skip_body_size 0 4 802 31 HTTPChannel::set_skip_body_size 0 1 256 1032
////////////////////////////////////////////////////////////////////
//     Function: HTTPChannel::set_skip_body_size
//       Access: Published
//  Description: Specifies the maximum number of bytes in a received
//               (but unwanted) body that will be skipped past, in
//               order to reset to a new request.
//
//               That is, if this HTTPChannel requests a file via
//               get_document(), but does not call download_to_ram(),
//               download_to_file(), or open_read_body(), and instead
//               immediately requests a new file, then the HTTPChannel
//               has a choice whether to skip past the unwanted
//               document, or to close the connection and open a new
//               one.  If the number of bytes to skip is more than
//               this threshold, the connection will be closed;
//               otherwise, the data will simply be read and
//               discarded.
////////////////////////////////////////////////////////////////////
67
inline void HTTPChannel::set_skip_body_size(size_t skip_body_size);

644 18 get_skip_body_size 0 4 802 31 HTTPChannel::get_skip_body_size 0 1 257 441
////////////////////////////////////////////////////////////////////
//     Function: HTTPChannel::get_skip_body_size
//       Access: Published
//  Description: Returns the maximum number of bytes in a received
//               (but unwanted) body that will be skipped past, in
//               order to reset to a new request.  See
//               set_skip_body_size().
////////////////////////////////////////////////////////////////////
58
inline size_t HTTPChannel::get_skip_body_size(void) const;

645 16 set_idle_timeout 0 4 802 29 HTTPChannel::set_idle_timeout 0 1 258 712
////////////////////////////////////////////////////////////////////
//     Function: HTTPChannel::set_idle_timeout
//       Access: Published
//  Description: Specifies the amount of time, in seconds, in which a
//               previously-established connection is allowed to
//               remain open and unused.  If a previous connection has
//               remained unused for at least this number of seconds,
//               it will be closed and a new connection will be
//               opened; otherwise, the same connection will be reused
//               for the next request (for this particular
//               HTTPChannel).
////////////////////////////////////////////////////////////////////
63
inline void HTTPChannel::set_idle_timeout(double idle_timeout);

646 16 get_idle_timeout 0 4 802 29 HTTPChannel::get_idle_timeout 0 1 259 411
////////////////////////////////////////////////////////////////////
//     Function: HTTPChannel::get_idle_timeout
//       Access: Published
//  Description: Returns the amount of time, in seconds, in which an
//               previously-established connection is allowed to
//               remain open and unused.  See set_idle_timeout().
////////////////////////////////////////////////////////////////////
56
inline double HTTPChannel::get_idle_timeout(void) const;

647 21 set_download_throttle 0 4 802 34 HTTPChannel::set_download_throttle 0 1 260 1100
////////////////////////////////////////////////////////////////////
//     Function: HTTPChannel::set_download_throttle
//       Access: Published
//  Description: Specifies whether nonblocking downloads (via
//               download_to_file() or download_to_ram()) will be
//               limited so as not to use all available bandwidth.
//
//               If this is true, when a download has been started on
//               this channel it will be invoked no more frequently
//               than get_max_updates_per_second(), and the total
//               bandwidth used by the download will be no more than
//               get_max_bytes_per_second().  If this is false,
//               downloads will proceed as fast as the server can send
//               the data.
//
//               This only has effect on the nonblocking I/O methods
//               like begin_get_document(), etc.  The blocking methods
//               like get_document() always use as much CPU and
//               bandwidth as they can get.
////////////////////////////////////////////////////////////////////
71
inline void HTTPChannel::set_download_throttle(bool download_throttle);

648 21 get_download_throttle 0 4 802 34 HTTPChannel::get_download_throttle 0 1 261 349
////////////////////////////////////////////////////////////////////
//     Function: HTTPChannel::get_download_throttle
//       Access: Published
//  Description: Returns whether the nonblocking downloads will be
//               bandwidth-limited.  See set_download_throttle().
////////////////////////////////////////////////////////////////////
59
inline bool HTTPChannel::get_download_throttle(void) const;

649 24 set_max_bytes_per_second 0 4 802 37 HTTPChannel::set_max_bytes_per_second 0 1 262 449
////////////////////////////////////////////////////////////////////
//     Function: HTTPChannel::set_max_bytes_per_second
//       Access: Published
//  Description: When bandwidth throttling is in effect (see
//               set_download_throttle()), this specifies the maximum
//               number of bytes per second that may be consumed by
//               this channel.
////////////////////////////////////////////////////////////////////
79
inline void HTTPChannel::set_max_bytes_per_second(double max_bytes_per_second);

650 24 get_max_bytes_per_second 0 4 802 37 HTTPChannel::get_max_bytes_per_second 0 1 263 392
////////////////////////////////////////////////////////////////////
//     Function: HTTPChannel::get_max_bytes_per_second
//       Access: Published
//  Description: Returns the maximum number of bytes per second that
//               may be consumed by this channel when
//               get_download_throttle() is true.
////////////////////////////////////////////////////////////////////
64
inline double HTTPChannel::get_max_bytes_per_second(void) const;

651 26 set_max_updates_per_second 0 4 802 39 HTTPChannel::set_max_updates_per_second 0 1 264 467
////////////////////////////////////////////////////////////////////
//     Function: HTTPChannel::set_max_updates_per_second
//       Access: Published
//  Description: When bandwidth throttling is in effect (see
//               set_download_throttle()), this specifies the maximum
//               number of times per second that run() will attempt to
//               do any downloading at all.
////////////////////////////////////////////////////////////////////
83
inline void HTTPChannel::set_max_updates_per_second(double max_updates_per_second);

652 26 get_max_updates_per_second 0 4 802 39 HTTPChannel::get_max_updates_per_second 0 1 265 393
////////////////////////////////////////////////////////////////////
//     Function: HTTPChannel::get_max_updates_per_second
//       Access: Published
//  Description: Returns the maximum number of times per second that
//               run() will do anything at all, when
//               get_download_throttle() is true.
////////////////////////////////////////////////////////////////////
66
inline double HTTPChannel::get_max_updates_per_second(void) const;

653 22 set_expected_file_size 0 4 802 35 HTTPChannel::set_expected_file_size 0 1 266 617
////////////////////////////////////////////////////////////////////
//     Function: HTTPChannel::set_expected_file_size
//       Access: Published
//  Description: This may be called immediately after a call to
//               get_document() or some related function to specify
//               the expected size of the document we are retrieving,
//               if we happen to know.  This is used as the return
//               value to get_file_size() only in the case that the
//               server does not tell us the actual file size.
////////////////////////////////////////////////////////////////////
66
inline void HTTPChannel::set_expected_file_size(size_t file_size);

654 13 get_file_size 0 4 802 26 HTTPChannel::get_file_size 0 1 267 877
////////////////////////////////////////////////////////////////////
//     Function: HTTPChannel::get_file_size
//       Access: Published, Virtual
//  Description: Returns the size of the file, if it is known.
//               Returns the value set by set_expected_file_size() if
//               the file size is not known, or 0 if this value was
//               not set.
//
//               If the file is dynamically generated, the size may
//               not be available until a read has started
//               (e.g. open_read_body() has been called); and even
//               then it may increase as more of the file is read due
//               to the nature of HTTP/1.1 requests which can change
//               their minds midstream about how much data they're
//               sending you.
////////////////////////////////////////////////////////////////////
50
streamsize HTTPChannel::get_file_size(void) const;

655 18 is_file_size_known 0 4 802 31 HTTPChannel::is_file_size_known 0 1 268 637
////////////////////////////////////////////////////////////////////
//     Function: HTTPChannel::is_file_size_known
//       Access: Published
//  Description: Returns true if the size of the file we are currently
//               retrieving was told us by the server and thus is
//               reliably known, or false if the size reported by
//               get_file_size() represents an educated guess
//               (possibly as set by set_expected_file_size(), or as
//               inferred from a chunked transfer encoding in
//               progress).
////////////////////////////////////////////////////////////////////
56
inline bool HTTPChannel::is_file_size_known(void) const;

656 24 get_first_byte_requested 0 4 802 37 HTTPChannel::get_first_byte_requested 0 1 269 591
////////////////////////////////////////////////////////////////////
//     Function: HTTPChannel::get_first_byte_requested
//       Access: Published
//  Description: Returns the first byte of the file requested by the
//               request.  This will normally be 0 to indicate that
//               the file is being requested from the beginning, but
//               if the file was requested via a get_subdocument()
//               call, this will contain the first_byte parameter from
//               that call.
////////////////////////////////////////////////////////////////////
64
inline size_t HTTPChannel::get_first_byte_requested(void) const;

657 23 get_last_byte_requested 0 4 802 36 HTTPChannel::get_last_byte_requested 0 1 270 586
////////////////////////////////////////////////////////////////////
//     Function: HTTPChannel::get_last_byte_requested
//       Access: Published
//  Description: Returns the last byte of the file requested by the
//               request.  This will normally be 0 to indicate that
//               the file is being requested to its last byte, but if
//               the file was requested via a get_subdocument() call,
//               this will contain the last_byte parameter from that
//               call.
////////////////////////////////////////////////////////////////////
63
inline size_t HTTPChannel::get_last_byte_requested(void) const;

658 24 get_first_byte_delivered 0 4 802 37 HTTPChannel::get_first_byte_delivered 0 1 271 700
////////////////////////////////////////////////////////////////////
//     Function: HTTPChannel::get_first_byte_delivered
//       Access: Published
//  Description: Returns the first byte of the file (that will be)
//               delivered by the server in response to the current
//               request.  Normally, this is the same as
//               get_first_byte_requested(), but some servers will
//               ignore a subdocument request and always return the
//               whole file, in which case this value will be 0,
//               regardless of what was requested to
//               get_subdocument().
////////////////////////////////////////////////////////////////////
64
inline size_t HTTPChannel::get_first_byte_delivered(void) const;

659 23 get_last_byte_delivered 0 4 802 36 HTTPChannel::get_last_byte_delivered 0 1 272 697
////////////////////////////////////////////////////////////////////
//     Function: HTTPChannel::get_last_byte_delivered
//       Access: Published
//  Description: Returns the last byte of the file (that will be)
//               delivered by the server in response to the current
//               request.  Normally, this is the same as
//               get_last_byte_requested(), but some servers will
//               ignore a subdocument request and always return the
//               whole file, in which case this value will be 0,
//               regardless of what was requested to
//               get_subdocument().
////////////////////////////////////////////////////////////////////
63
inline size_t HTTPChannel::get_last_byte_delivered(void) const;

660 13 write_headers 0 4 802 26 HTTPChannel::write_headers 0 1 273 326
////////////////////////////////////////////////////////////////////
//     Function: HTTPChannel::write_headers
//       Access: Published
//  Description: Outputs a list of all headers defined by the server
//               to the indicated output stream.
////////////////////////////////////////////////////////////////////
52
void HTTPChannel::write_headers(ostream &out) const;

661 5 reset 0 4 802 18 HTTPChannel::reset 0 1 274 894
////////////////////////////////////////////////////////////////////
//     Function: HTTPChannel::reset
//       Access: Published
//  Description: Stops whatever file transaction is currently in
//               progress, closes the connection, and resets to begin
//               anew.  You shouldn't ever need to call this, since
//               the channel should be able to reset itself cleanly
//               between requests, but it is provided in case you are
//               an especially nervous type.
//
//               Don't call this after every request unless you set
//               set_persistent_connection() to false, since calling
//               reset() rudely closes the connection regardless of
//               whether we have told the server we intend to keep it
//               open or not.
////////////////////////////////////////////////////////////////////
37
inline void HTTPChannel::reset(void);

662 15 preserve_status 0 4 802 28 HTTPChannel::preserve_status 0 1 275 838
////////////////////////////////////////////////////////////////////
//     Function: HTTPChannel::preserve_status
//       Access: Published
//  Description: Preserves the previous status code (presumably a
//               failure) from the previous connection attempt.  If
//               the subsequent connection attempt also fails, the
//               returned status code will be the better of the
//               previous code and the current code.
//
//               This can be called to daisy-chain subsequent attempts
//               to download the same document from different servers.
//               After all servers have been attempted, the final
//               status code will reflect the attempt that most nearly
//               succeeded.
////////////////////////////////////////////////////////////////////
47
inline void HTTPChannel::preserve_status(void);

663 19 clear_extra_headers 0 4 802 32 HTTPChannel::clear_extra_headers 0 1 276 334
////////////////////////////////////////////////////////////////////
//     Function: HTTPChannel::clear_extra_headers
//       Access: Published
//  Description: Resets the extra headers that were previously added
//               via calls to send_extra_header().
////////////////////////////////////////////////////////////////////
51
inline void HTTPChannel::clear_extra_headers(void);

664 17 send_extra_header 0 4 802 30 HTTPChannel::send_extra_header 0 1 277 658
////////////////////////////////////////////////////////////////////
//     Function: HTTPChannel::send_extra_header
//       Access: Published
//  Description: Specifies an additional key: value pair that is added
//               into the header sent to the server with the next
//               request.  This is passed along with no interpretation
//               by the HTTPChannel code.  You may call this
//               repeatedly to append multiple headers.
//
//               This is persistent for one request only; it must be
//               set again for each new request.
////////////////////////////////////////////////////////////////////
83
inline void HTTPChannel::send_extra_header(string const &key, string const &value);

665 12 get_document 0 4 802 25 HTTPChannel::get_document 0 1 278 338
////////////////////////////////////////////////////////////////////
//     Function: HTTPChannel::get_document
//       Access: Published
//  Description: Opens the named document for reading, if available.
//               Returns true if successful, false otherwise.
////////////////////////////////////////////////////////////////////
63
inline bool HTTPChannel::get_document(DocumentSpec const &url);

666 15 get_subdocument 0 4 802 28 HTTPChannel::get_subdocument 0 1 279 603
////////////////////////////////////////////////////////////////////
//     Function: HTTPChannel::get_subdocument
//       Access: Published
//  Description: Retrieves only the specified byte range of the
//               indicated document.  If last_byte is 0, it stands for
//               the last byte of the document.  When a subdocument is
//               requested, get_file_size() and get_bytes_downloaded()
//               will report the number of bytes of the subdocument,
//               not of the complete document.
////////////////////////////////////////////////////////////////////
103
inline bool HTTPChannel::get_subdocument(DocumentSpec const &url, size_t first_byte, size_t last_byte);

667 10 get_header 0 4 802 23 HTTPChannel::get_header 0 1 280 523
////////////////////////////////////////////////////////////////////
//     Function: HTTPChannel::get_header
//       Access: Published
//  Description: Like get_document(), except only the header
//               associated with the document is retrieved.  This may
//               be used to test for existence of the document; it
//               might also return the size of the document (if the
//               server gives us this information).
////////////////////////////////////////////////////////////////////
61
inline bool HTTPChannel::get_header(DocumentSpec const &url);

668 9 post_form 0 4 802 22 HTTPChannel::post_form 0 1 281 302
////////////////////////////////////////////////////////////////////
//     Function: HTTPChannel::post_form
//       Access: Published
//  Description: Posts form data to a particular URL and retrieves the
//               response.
////////////////////////////////////////////////////////////////////
80
inline bool HTTPChannel::post_form(DocumentSpec const &url, string const &body);

669 12 put_document 0 4 802 25 HTTPChannel::put_document 0 1 282 339
////////////////////////////////////////////////////////////////////
//     Function: HTTPChannel::put_document
//       Access: Published
//  Description: Uploads the indicated body to the server to replace
//               the indicated URL, if the server allows this.
////////////////////////////////////////////////////////////////////
83
inline bool HTTPChannel::put_document(DocumentSpec const &url, string const &body);

670 15 delete_document 0 4 802 28 HTTPChannel::delete_document 0 1 283 276
////////////////////////////////////////////////////////////////////
//     Function: HTTPChannel::delete_document
//       Access: Published
//  Description: Requests the server to remove the indicated URL.
////////////////////////////////////////////////////////////////////
66
inline bool HTTPChannel::delete_document(DocumentSpec const &url);

671 9 get_trace 0 4 802 22 HTTPChannel::get_trace 0 1 284 401
////////////////////////////////////////////////////////////////////
//     Function: HTTPChannel::get_trace
//       Access: Published
//  Description: Sends a TRACE message to the server, which should
//               return back the same message as the server received
//               it, allowing inspection of proxy hops, etc.
////////////////////////////////////////////////////////////////////
60
inline bool HTTPChannel::get_trace(DocumentSpec const &url);

672 10 connect_to 0 4 802 23 HTTPChannel::connect_to 0 1 285 624
////////////////////////////////////////////////////////////////////
//     Function: HTTPChannel::connect_to
//       Access: Published
//  Description: Establish a direct connection to the server and port
//               indicated by the URL, but do not issue any HTTP
//               requests.  If successful, the connection may then be
//               taken to use for whatever purposes you like by
//               calling get_connection().
//
//               This establishes a blocking I/O socket.  Also see
//               begin_connect_to().
////////////////////////////////////////////////////////////////////
61
inline bool HTTPChannel::connect_to(DocumentSpec const &url);

673 11 get_options 0 4 802 24 HTTPChannel::get_options 0 1 286 380
////////////////////////////////////////////////////////////////////
//     Function: HTTPChannel::get_options
//       Access: Published
//  Description: Sends an OPTIONS message to the server, which should
//               query the available options, possibly in relation to
//               a specified URL.
////////////////////////////////////////////////////////////////////
62
inline bool HTTPChannel::get_options(DocumentSpec const &url);

674 18 begin_get_document 0 4 802 31 HTTPChannel::begin_get_document 0 1 287 785
////////////////////////////////////////////////////////////////////
//     Function: HTTPChannel::begin_get_document
//       Access: Published
//  Description: Begins a non-blocking request to retrieve a given
//               document.  This method will return immediately, even
//               before a connection to the server has necessarily
//               been established; you must then call run() from time
//               to time until the return value of run() is false.
//               Then you may check is_valid() and get_status_code()
//               to determine the status of your request.
//
//               If a previous request had been pending, that request
//               is discarded.
////////////////////////////////////////////////////////////////////
69
inline void HTTPChannel::begin_get_document(DocumentSpec const &url);

675 21 begin_get_subdocument 0 4 802 34 HTTPChannel::begin_get_subdocument 0 1 288 658
////////////////////////////////////////////////////////////////////
//     Function: HTTPChannel::begin_get_subdocument
//       Access: Published
//  Description: Begins a non-blocking request to retrieve only the
//               specified byte range of the indicated document.  If
//               last_byte is 0, it stands for the last byte of the
//               document.  When a subdocument is requested,
//               get_file_size() and get_bytes_downloaded() will
//               report the number of bytes of the subdocument, not of
//               the complete document.
////////////////////////////////////////////////////////////////////
109
inline void HTTPChannel::begin_get_subdocument(DocumentSpec const &url, size_t first_byte, size_t last_byte);

676 16 begin_get_header 0 4 802 29 HTTPChannel::begin_get_header 0 1 289 347
////////////////////////////////////////////////////////////////////
//     Function: HTTPChannel::begin_get_header
//       Access: Published
//  Description: Begins a non-blocking request to retrieve a given
//               header.  See begin_get_document() and get_header().
////////////////////////////////////////////////////////////////////
67
inline void HTTPChannel::begin_get_header(DocumentSpec const &url);

677 15 begin_post_form 0 4 802 28 HTTPChannel::begin_post_form 0 1 290 769
////////////////////////////////////////////////////////////////////
//     Function: HTTPChannel::begin_post_form
//       Access: Published
//  Description: Posts form data to a particular URL and retrieves the
//               response, all using non-blocking I/O.  See
//               begin_get_document() and post_form().
//
//               It is important to note that you *must* call run()
//               repeatedly after calling this method until run()
//               returns false, and you may not call any other
//               document posting or retrieving methods using the
//               HTTPChannel object in the interim, or your form data
//               may not get posted.
////////////////////////////////////////////////////////////////////
86
inline void HTTPChannel::begin_post_form(DocumentSpec const &url, string const &body);

678 3 run 0 4 802 16 HTTPChannel::run 0 1 291 731
////////////////////////////////////////////////////////////////////
//     Function: HTTPChannel::run
//       Access: Published
//  Description: This must be called from time to time when
//               non-blocking I/O is in use.  It checks for data
//               coming in on the socket and writes data out to the
//               socket when possible, and does whatever processing is
//               required towards completing the current task.
//
//               The return value is true if the task is still pending
//               (and run() will need to be called again in the
//               future), or false if the current task is complete.
////////////////////////////////////////////////////////////////////
28
bool HTTPChannel::run(void);

679 16 begin_connect_to 0 4 802 29 HTTPChannel::begin_connect_to 0 1 292 920
////////////////////////////////////////////////////////////////////
//     Function: HTTPChannel::begin_connect_to
//       Access: Published
//  Description: Begins a non-blocking request to establish a direct
//               connection to the server and port indicated by the
//               URL.  No HTTP requests will be issued beyond what is
//               necessary to establish the connection.  When run()
//               has finished, you may call is_connection_ready() to
//               determine if the connection was successfully
//               established.
//
//               If successful, the connection may then be taken to
//               use for whatever purposes you like by calling
//               get_connection().
//
//               This establishes a nonblocking I/O socket.  Also see
//               connect_to().
////////////////////////////////////////////////////////////////////
67
inline void HTTPChannel::begin_connect_to(DocumentSpec const &url);

680 14 open_read_body 0 4 802 27 HTTPChannel::open_read_body 0 1 293 948
////////////////////////////////////////////////////////////////////
//     Function: HTTPChannel::open_read_body
//       Access: Published
//  Description: Returns a newly-allocated istream suitable for
//               reading the body of the document.  This may only be
//               called immediately after a call to get_document() or
//               post_form(), or after a call to run() has returned
//               false.
//
//               Note that, in nonblocking mode, the returned stream
//               may report an early EOF, even before the actual end
//               of file.  When this happens, you should call
//               stream->is_closed() to determine whether you should
//               attempt to read some more later.
//
//               The user is responsible for passing the returned
//               istream to close_read_body() later.
////////////////////////////////////////////////////////////////////
49
ISocketStream *HTTPChannel::open_read_body(void);

681 15 close_read_body 0 4 802 28 HTTPChannel::close_read_body 0 1 294 516
////////////////////////////////////////////////////////////////////
//     Function: HTTPChannel::close_read_body
//       Access: Public
//  Description: Closes a file opened by a previous call to
//               open_read_body().  This really just deletes the
//               istream pointer, but it is recommended to use this
//               interface instead of deleting it explicitly, to help
//               work around compiler issues.
////////////////////////////////////////////////////////////////////
57
void HTTPChannel::close_read_body(istream *stream) const;

682 16 download_to_file 0 4 802 29 HTTPChannel::download_to_file 0 1 295 1950
////////////////////////////////////////////////////////////////////
//     Function: HTTPChannel::download_to_file
//       Access: Published
//  Description: Specifies the name of a file to download the
//               resulting document to.  This should be called
//               immediately after get_document() or
//               begin_get_document() or related functions.
//
//               In the case of the blocking I/O methods like
//               get_document(), this function will download the
//               entire document to the file and return true if it was
//               successfully downloaded, false otherwise.
//
//               In the case of non-blocking I/O methods like
//               begin_get_document(), this function simply indicates an
//               intention to download to the indicated file.  It
//               returns true if the file can be opened for writing,
//               false otherwise, but the contents will not be
//               completely downloaded until run() has returned false.
//               At this time, it is possible that a communications
//               error will have left a partial file, so
//               is_download_complete() may be called to test this.
//
//               If subdocument_resumes is true and the document in
//               question was previously requested as a subdocument
//               (i.e. get_subdocument() with a first_byte value
//               greater than zero), this will automatically seek to
//               the appropriate byte within the file for writing the
//               output.  In this case, the file must already exist
//               and must have at least first_byte bytes in it.  If
//               subdocument_resumes is false, a subdocument will
//               always be downloaded beginning at the first byte of
//               the file.
////////////////////////////////////////////////////////////////////
91
bool HTTPChannel::download_to_file(Filename const &filename, bool subdocument_resumes = 1);

683 15 download_to_ram 0 4 802 28 HTTPChannel::download_to_ram 0 1 296 1778
////////////////////////////////////////////////////////////////////
//     Function: HTTPChannel::download_to_ram
//       Access: Published
//  Description: Specifies a Ramfile object to download the
//               resulting document to.  This should be called
//               immediately after get_document() or
//               begin_get_document() or related functions.
//
//               In the case of the blocking I/O methods like
//               get_document(), this function will download the
//               entire document to the Ramfile and return true if it
//               was successfully downloaded, false otherwise.
//
//               In the case of non-blocking I/O methods like
//               begin_get_document(), this function simply indicates an
//               intention to download to the indicated Ramfile.  It
//               returns true if the file can be opened for writing,
//               false otherwise, but the contents will not be
//               completely downloaded until run() has returned false.
//               At this time, it is possible that a communications
//               error will have left a partial file, so
//               is_download_complete() may be called to test this.
//
//               If subdocument_resumes is true and the document in
//               question was previously requested as a subdocument
//               (i.e. get_subdocument() with a first_byte value
//               greater than zero), this will automatically seek to
//               the appropriate byte within the Ramfile for writing
//               the output.  In this case, the Ramfile must already
//               have at least first_byte bytes in it.
////////////////////////////////////////////////////////////////////
82
bool HTTPChannel::download_to_ram(Ramfile *ramfile, bool subdocument_resumes = 1);

684 18 download_to_stream 0 4 802 31 HTTPChannel::download_to_stream 0 1 297 1956
////////////////////////////////////////////////////////////////////
//     Function: HTTPChannel::download_to_stream
//       Access: Published
//  Description: Specifies the name of an ostream to download the
//               resulting document to.  This should be called
//               immediately after get_document() or
//               begin_get_document() or related functions.
//
//               In the case of the blocking I/O methods like
//               get_document(), this function will download the
//               entire document to the file and return true if it was
//               successfully downloaded, false otherwise.
//
//               In the case of non-blocking I/O methods like
//               begin_get_document(), this function simply indicates an
//               intention to download to the indicated file.  It
//               returns true if the file can be opened for writing,
//               false otherwise, but the contents will not be
//               completely downloaded until run() has returned false.
//               At this time, it is possible that a communications
//               error will have left a partial file, so
//               is_download_complete() may be called to test this.
//
//               If subdocument_resumes is true and the document in
//               question was previously requested as a subdocument
//               (i.e. get_subdocument() with a first_byte value
//               greater than zero), this will automatically seek to
//               the appropriate byte within the file for writing the
//               output.  In this case, the file must already exist
//               and must have at least first_byte bytes in it.  If
//               subdocument_resumes is false, a subdocument will
//               always be downloaded beginning at the first byte of
//               the file.
////////////////////////////////////////////////////////////////////
82
bool HTTPChannel::download_to_stream(ostream *strm, bool subdocument_resumes = 1);

685 14 get_connection 0 4 802 27 HTTPChannel::get_connection 0 1 298 656
////////////////////////////////////////////////////////////////////
//     Function: HTTPChannel::get_connection
//       Access: Published
//  Description: Returns the connection that was established via a
//               previous call to connect_to() or begin_connect_to(),
//               or NULL if the connection attempt failed or if those
//               methods have not recently been called.
//
//               This stream has been allocated from the free store.
//               It is the user's responsibility to delete this
//               pointer when finished with it.
////////////////////////////////////////////////////////////////////
48
SocketStream *HTTPChannel::get_connection(void);

686 20 get_bytes_downloaded 0 4 802 33 HTTPChannel::get_bytes_downloaded 0 1 299 643
////////////////////////////////////////////////////////////////////
//     Function: HTTPChannel::get_bytes_downloaded
//       Access: Published
//  Description: Returns the number of bytes downloaded during the
//               last (or current) download_to_file() or
//               download_to_ram operation().  This can be used in
//               conjunction with get_file_size() to report the
//               percent complete (but be careful, since
//               get_file_size() may return 0 if the server has not
//               told us the size of the file).
////////////////////////////////////////////////////////////////////
60
inline size_t HTTPChannel::get_bytes_downloaded(void) const;

687 19 get_bytes_requested 0 4 802 32 HTTPChannel::get_bytes_requested 0 1 300 1059
////////////////////////////////////////////////////////////////////
//     Function: HTTPChannel::get_bytes_requested
//       Access: Published
//  Description: When download throttling is in effect
//               (set_download_throttle() has been set to true) and
//               non-blocking I/O methods (like begin_get_document())
//               are used, this returns the number of bytes
//               "requested" from the server so far: that is, the
//               theoretical maximum value for get_bytes_downloaded(),
//               if the server has been keeping up with our demand.
//
//               If this number is less than get_bytes_downloaded(),
//               then the server has not been supplying bytes fast
//               enough to meet our own download throttle rate.
//
//               When download throttling is not in effect, or when
//               the blocking I/O methods (like get_document(), etc.)
//               are used, this returns 0.
////////////////////////////////////////////////////////////////////
59
inline size_t HTTPChannel::get_bytes_requested(void) const;

688 20 is_download_complete 0 4 802 33 HTTPChannel::is_download_complete 0 1 301 985
////////////////////////////////////////////////////////////////////
//     Function: HTTPChannel::is_download_complete
//       Access: Published
//  Description: Returns true when a download_to() or
//               download_to_ram() has executed and the file has been
//               fully downloaded.  If this still returns false after
//               processing has completed, there was an error in
//               transmission.
//
//               Note that simply testing is_download_complete() does
//               not prove that the requested document was successfully
//               retrieved--you might have just downloaded the "404
//               not found" stub (for instance) that a server would
//               provide in response to some error condition.  You
//               should also check is_valid() to prove that the file
//               you expected has been successfully retrieved.
////////////////////////////////////////////////////////////////////
58
inline bool HTTPChannel::is_download_complete(void) const;

689 14 get_class_type 0 4 802 27 HTTPChannel::get_class_type 0 1 302 0
52
static TypeHandle HTTPChannel::get_class_type(void);

690 12 Decompressor 0 4 805 26 Decompressor::Decompressor 0 1 303 221
////////////////////////////////////////////////////////////////////
//     Function: Decompressor::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
33
Decompressor::Decompressor(void);

691 13 ~Decompressor 0 4 805 27 Decompressor::~Decompressor 0 0 220
////////////////////////////////////////////////////////////////////
//     Function: Decompressor::Destructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
34
Decompressor::~Decompressor(void);

692 8 initiate 0 4 805 22 Decompressor::initiate 0 2 304 305 857
////////////////////////////////////////////////////////////////////
//     Function: Decompressor::initiate
//       Access: Public
//  Description: Begins a background decompression of the named file
//               (whose filename must end in ".pz") to a new file
//               without the .pz extension.  The source file is
//               removed after successful completion.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Decompressor::initiate
//       Access: Public
//  Description: Begins a background decompression from the named
//               source file to the named destination file.  The
//               source file is removed after successful completion.
////////////////////////////////////////////////////////////////////
140
int Decompressor::initiate(Filename const &source_file);
int Decompressor::initiate(Filename const &source_file, Filename const &dest_file);

693 3 run 0 4 805 17 Decompressor::run 0 1 306 493
////////////////////////////////////////////////////////////////////
//     Function: Decompressor::run
//       Access: Public
//  Description: Called each frame to do the next bit of work in the
//               background task.  Returns EU_ok if a chunk is
//               completed but there is more to go, or EU_success when
//               we're all done.  Any other return value indicates an
//               error.
////////////////////////////////////////////////////////////////////
28
int Decompressor::run(void);

694 10 decompress 0 4 805 24 Decompressor::decompress 0 2 307 308 757
////////////////////////////////////////////////////////////////////
//     Function: Decompressor::decompress
//       Access: Public
//  Description: Performs a foreground decompression of the named
//               file; does not return until the decompression is
//               complete.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Decompressor::decompress
//       Access: Public
//  Description: Does an in-memory decompression of the indicated
//               Ramfile.  The decompressed contents are written back
//               into the same Ramfile on completion.
////////////////////////////////////////////////////////////////////
121
bool Decompressor::decompress(Filename const &source_file);
bool Decompressor::decompress(Ramfile &source_and_dest_file);

695 12 get_progress 0 4 805 26 Decompressor::get_progress 0 1 309 307
////////////////////////////////////////////////////////////////////
//     Function: Decompressor::get_progress
//       Access: Public
//  Description: Returns the ratio through the decompression step
//               in the background.
////////////////////////////////////////////////////////////////////
51
PN_stdfloat Decompressor::get_progress(void) const;

696 10 DownloadDb 0 4 806 22 DownloadDb::DownloadDb 0 3 310 311 312 797
////////////////////////////////////////////////////////////////////
//     Function: DownloadDb::Constructor
//       Access: Public
//  Description: Create a download db with these client and server dbs
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: DownloadDb::Constructor
//       Access: Public
//  Description: Create a download db with these client and server dbs
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: DownloadDb::Constructor
//       Access: Public
//  Description: Primarily used for testing.
////////////////////////////////////////////////////////////////////
168
DownloadDb::DownloadDb(void);
DownloadDb::DownloadDb(Ramfile &server_file, Filename &client_file);
DownloadDb::DownloadDb(Filename &server_file, Filename &client_file);

697 11 ~DownloadDb 0 4 806 23 DownloadDb::~DownloadDb 0 0 218
////////////////////////////////////////////////////////////////////
//     Function: DownloadDb::Destructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
30
DownloadDb::~DownloadDb(void);

698 6 output 0 4 806 18 DownloadDb::output 0 1 313 214
////////////////////////////////////////////////////////////////////
//     Function: DownloadDb::output
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
44
void DownloadDb::output(ostream &out) const;

699 5 write 0 4 806 17 DownloadDb::write 0 1 314 213
////////////////////////////////////////////////////////////////////
//     Function: DownloadDb::write
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
43
void DownloadDb::write(ostream &out) const;

700 17 write_version_map 0 4 806 29 DownloadDb::write_version_map 0 1 315 455
////////////////////////////////////////////////////////////////////
//     Function: DownloadDb::write_version_map
//       Access: Protected
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: DownloadDb::write_version_map
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
55
void DownloadDb::write_version_map(ostream &out) const;

701 15 write_client_db 0 4 806 27 DownloadDb::write_client_db 0 1 316 234
// Write a database file

////////////////////////////////////////////////////////////////////
//     Function: DownloadDb::
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
49
bool DownloadDb::write_client_db(Filename &file);

702 15 write_server_db 0 4 806 27 DownloadDb::write_server_db 0 1 317 208
////////////////////////////////////////////////////////////////////
//     Function: DownloadDb::
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
49
bool DownloadDb::write_server_db(Filename &file);

703 25 get_client_num_multifiles 0 4 806 37 DownloadDb::get_client_num_multifiles 0 1 318 208
////////////////////////////////////////////////////////////////////
//     Function: DownloadDb::
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
61
inline int DownloadDb::get_client_num_multifiles(void) const;

704 25 get_server_num_multifiles 0 4 806 37 DownloadDb::get_server_num_multifiles 0 1 319 208
////////////////////////////////////////////////////////////////////
//     Function: DownloadDb::
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
61
inline int DownloadDb::get_server_num_multifiles(void) const;

705 25 get_client_multifile_name 0 4 806 37 DownloadDb::get_client_multifile_name 0 1 320 208
////////////////////////////////////////////////////////////////////
//     Function: DownloadDb::
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
69
inline string DownloadDb::get_client_multifile_name(int index) const;

706 25 get_server_multifile_name 0 4 806 37 DownloadDb::get_server_multifile_name 0 1 321 208
////////////////////////////////////////////////////////////////////
//     Function: DownloadDb::
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
69
inline string DownloadDb::get_server_multifile_name(int index) const;

707 25 get_client_multifile_size 0 4 806 37 DownloadDb::get_client_multifile_size 0 1 322 208
////////////////////////////////////////////////////////////////////
//     Function: DownloadDb::
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
70
inline int DownloadDb::get_client_multifile_size(string mfname) const;

708 25 set_client_multifile_size 0 4 806 37 DownloadDb::set_client_multifile_size 0 1 323 208
////////////////////////////////////////////////////////////////////
//     Function: DownloadDb::
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
75
inline void DownloadDb::set_client_multifile_size(string mfname, int size);

709 31 set_client_multifile_delta_size 0 4 806 43 DownloadDb::set_client_multifile_delta_size 0 1 324 208
////////////////////////////////////////////////////////////////////
//     Function: DownloadDb::
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
80
inline int DownloadDb::set_client_multifile_delta_size(string mfname, int size);

710 25 get_server_multifile_size 0 4 806 37 DownloadDb::get_server_multifile_size 0 1 325 208
////////////////////////////////////////////////////////////////////
//     Function: DownloadDb::
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
70
inline int DownloadDb::get_server_multifile_size(string mfname) const;

711 25 set_server_multifile_size 0 4 806 37 DownloadDb::set_server_multifile_size 0 1 326 208
////////////////////////////////////////////////////////////////////
//     Function: DownloadDb::
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
75
inline void DownloadDb::set_server_multifile_size(string mfname, int size);

712 26 get_client_multifile_phase 0 4 806 38 DownloadDb::get_client_multifile_phase 0 1 327 208
////////////////////////////////////////////////////////////////////
//     Function: DownloadDb::
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
73
inline Phase DownloadDb::get_client_multifile_phase(string mfname) const;

713 26 get_server_multifile_phase 0 4 806 38 DownloadDb::get_server_multifile_phase 0 1 328 208
////////////////////////////////////////////////////////////////////
//     Function: DownloadDb::
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
73
inline Phase DownloadDb::get_server_multifile_phase(string mfname) const;

714 31 set_client_multifile_incomplete 0 4 806 43 DownloadDb::set_client_multifile_incomplete 0 1 329 208
////////////////////////////////////////////////////////////////////
//     Function: DownloadDb::
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
71
inline void DownloadDb::set_client_multifile_incomplete(string mfname);

715 29 set_client_multifile_complete 0 4 806 41 DownloadDb::set_client_multifile_complete 0 1 330 208
////////////////////////////////////////////////////////////////////
//     Function: DownloadDb::
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
69
inline void DownloadDb::set_client_multifile_complete(string mfname);

716 33 set_client_multifile_decompressed 0 4 806 45 DownloadDb::set_client_multifile_decompressed 0 1 331 208
////////////////////////////////////////////////////////////////////
//     Function: DownloadDb::
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
73
inline void DownloadDb::set_client_multifile_decompressed(string mfname);

717 30 set_client_multifile_extracted 0 4 806 42 DownloadDb::set_client_multifile_extracted 0 1 332 208
////////////////////////////////////////////////////////////////////
//     Function: DownloadDb::
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
70
inline void DownloadDb::set_client_multifile_extracted(string mfname);

718 20 get_server_num_files 0 4 806 32 DownloadDb::get_server_num_files 0 1 333 208
////////////////////////////////////////////////////////////////////
//     Function: DownloadDb::
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
65
inline int DownloadDb::get_server_num_files(string mfname) const;

719 20 get_server_file_name 0 4 806 32 DownloadDb::get_server_file_name 0 1 334 208
////////////////////////////////////////////////////////////////////
//     Function: DownloadDb::
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
79
inline string DownloadDb::get_server_file_name(string mfname, int index) const;

720 23 client_multifile_exists 0 4 806 35 DownloadDb::client_multifile_exists 0 1 335 238
// Queries from the Launcher

////////////////////////////////////////////////////////////////////
//     Function: DownloadDb::
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
62
bool DownloadDb::client_multifile_exists(string mfname) const;

721 25 client_multifile_complete 0 4 806 37 DownloadDb::client_multifile_complete 0 1 336 375
////////////////////////////////////////////////////////////////////
//     Function: DownloadDb::
//       Access: Public
//  Description: A multifile is complete when it is completely
//               downloaded. Note: it may already be decompressed
//               or extracted and it is still complete
////////////////////////////////////////////////////////////////////
64
bool DownloadDb::client_multifile_complete(string mfname) const;

722 29 client_multifile_decompressed 0 4 806 41 DownloadDb::client_multifile_decompressed 0 1 337 208
////////////////////////////////////////////////////////////////////
//     Function: DownloadDb::
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
68
bool DownloadDb::client_multifile_decompressed(string mfname) const;

723 26 client_multifile_extracted 0 4 806 38 DownloadDb::client_multifile_extracted 0 1 338 208
////////////////////////////////////////////////////////////////////
//     Function: DownloadDb::
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
65
bool DownloadDb::client_multifile_extracted(string mfname) const;

724 25 get_client_multifile_hash 0 4 806 37 DownloadDb::get_client_multifile_hash 0 1 339 320
// Ask what version (told with the hash) this multifile is

////////////////////////////////////////////////////////////////////
//     Function: DownloadDb::
//       Access: Public
//  Description: Return the hash value of the file we are working on
////////////////////////////////////////////////////////////////////
67
HashVal DownloadDb::get_client_multifile_hash(string mfname) const;

725 25 set_client_multifile_hash 0 4 806 37 DownloadDb::set_client_multifile_hash 0 1 340 253
////////////////////////////////////////////////////////////////////
//     Function: DownloadDb::
//       Access: Public
//  Description: Set the hash value of file we are working on
////////////////////////////////////////////////////////////////////
71
void DownloadDb::set_client_multifile_hash(string mfname, HashVal val);

726 25 get_server_multifile_hash 0 4 806 37 DownloadDb::get_server_multifile_hash 0 1 341 249
////////////////////////////////////////////////////////////////////
//     Function: DownloadDb::
//       Access: Public
//  Description: Return the hash value of the server file
////////////////////////////////////////////////////////////////////
67
HashVal DownloadDb::get_server_multifile_hash(string mfname) const;

727 25 set_server_multifile_hash 0 4 806 37 DownloadDb::set_server_multifile_hash 0 1 342 253
////////////////////////////////////////////////////////////////////
//     Function: DownloadDb::
//       Access: Public
//  Description: Set the hash value of file we are working on
////////////////////////////////////////////////////////////////////
71
void DownloadDb::set_server_multifile_hash(string mfname, HashVal val);

728 23 delete_client_multifile 0 4 806 35 DownloadDb::delete_client_multifile 0 1 343 237
// Operations on multifiles

////////////////////////////////////////////////////////////////////
//     Function: DownloadDb::
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
56
void DownloadDb::delete_client_multifile(string mfname);

729 20 add_client_multifile 0 4 806 32 DownloadDb::add_client_multifile 0 1 344 208
////////////////////////////////////////////////////////////////////
//     Function: DownloadDb::
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
60
void DownloadDb::add_client_multifile(string server_mfname);

730 23 expand_client_multifile 0 4 806 35 DownloadDb::expand_client_multifile 0 1 345 208
////////////////////////////////////////////////////////////////////
//     Function: DownloadDb::
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
56
void DownloadDb::expand_client_multifile(string mfname);

731 20 create_new_server_db 0 4 806 32 DownloadDb::create_new_server_db 0 1 346 366
// Server side operations to create multifile records

////////////////////////////////////////////////////////////////////
//     Function: DownloadDb::create_new_server_db
//       Access: Public
//  Description: Used on the server side makefiles to create a
//               new clean server db
////////////////////////////////////////////////////////////////////
44
void DownloadDb::create_new_server_db(void);

732 20 server_add_multifile 0 4 806 32 DownloadDb::server_add_multifile 0 1 347 208
////////////////////////////////////////////////////////////////////
//     Function: DownloadDb::
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
88
void DownloadDb::server_add_multifile(string mfname, Phase phase, int size, int status);

733 15 server_add_file 0 4 806 27 DownloadDb::server_add_file 0 1 348 208
////////////////////////////////////////////////////////////////////
//     Function: DownloadDb::
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
62
void DownloadDb::server_add_file(string mfname, string fname);

734 7 read_db 0 4 806 19 DownloadDb::read_db 0 2 349 350 438
////////////////////////////////////////////////////////////////////
//     Function: DownloadDb::read_db
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: DownloadDb::read_db
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
148
DownloadDb::Db DownloadDb::read_db(Filename &file, bool want_server_info);
DownloadDb::Db DownloadDb::read_db(Ramfile &file, bool want_server_info);

735 8 write_db 0 4 806 20 DownloadDb::write_db 0 1 351 219
////////////////////////////////////////////////////////////////////
//     Function: DownloadDb::write_db
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
84
bool DownloadDb::write_db(Filename &file, DownloadDb::Db db, bool want_server_info);

736 11 add_version 0 4 806 23 DownloadDb::add_version 0 1 352 433
////////////////////////////////////////////////////////////////////
//     Function: DownloadDb::add_version
//       Access: Published
//  Description: Appends a new version of the file onto the end of the
//               list, or changes the hash associated with a version
//               previously added.
//
//               Note: version numbers start at 1
////////////////////////////////////////////////////////////////////
85
void DownloadDb::add_version(Filename const &name, HashVal const &hash, int version);

737 18 insert_new_version 0 4 806 30 DownloadDb::insert_new_version 0 1 353 330
////////////////////////////////////////////////////////////////////
//     Function: DownloadDb::insert_new_version
//       Access: Published
//  Description: Inserts a new version 1 copy of the file, sliding all
//               the other versions up by one.
////////////////////////////////////////////////////////////////////
79
void DownloadDb::insert_new_version(Filename const &name, HashVal const &hash);

738 11 has_version 0 4 806 23 DownloadDb::has_version 0 1 354 404
////////////////////////////////////////////////////////////////////
//     Function: DownloadDb::has_version
//       Access: Published
//  Description: Returns true if the indicated file has version
//               information, false otherwise.  Some files recorded in
//               the database may not bother to track versions.
////////////////////////////////////////////////////////////////////
57
bool DownloadDb::has_version(Filename const &name) const;

739 16 get_num_versions 0 4 806 28 DownloadDb::get_num_versions 0 1 355 306
////////////////////////////////////////////////////////////////////
//     Function: DownloadDb::get_num_versions
//       Access: Published
//  Description: Returns the number of versions stored for the
//               indicated file.
////////////////////////////////////////////////////////////////////
61
int DownloadDb::get_num_versions(Filename const &name) const;

740 16 set_num_versions 0 4 806 28 DownloadDb::set_num_versions 0 1 356 394
////////////////////////////////////////////////////////////////////
//     Function: DownloadDb::set_num_versions
//       Access: Published
//  Description: Reduces the number of versions of a particular file
//               stored in the ddb by throwing away all versions
//               higher than the indicated index.
////////////////////////////////////////////////////////////////////
74
void DownloadDb::set_num_versions(Filename const &name, int num_versions);

741 11 get_version 0 4 806 23 DownloadDb::get_version 0 1 357 440
////////////////////////////////////////////////////////////////////
//     Function: DownloadDb::get_version
//       Access: Published
//  Description: Returns the version number of this particular file,
//               determined by looking up the hash generated from the
//               file.  Returns -1 if the version number cannot be
//               determined.
////////////////////////////////////////////////////////////////////
77
int DownloadDb::get_version(Filename const &name, HashVal const &hash) const;

742 8 get_hash 0 4 806 20 DownloadDb::get_hash 0 1 358 318
////////////////////////////////////////////////////////////////////
//     Function: DownloadDb::get_hash
//       Access: Published
//  Description: Returns the MD5 hash associated with the indicated
//               version of the indicated file.
////////////////////////////////////////////////////////////////////
77
HashVal const &DownloadDb::get_hash(Filename const &name, int version) const;

743 9 check_crc 0 1 0 9 check_crc 0 1 392 0
43
unsigned long int check_crc(Filename name);

744 11 check_adler 0 1 0 11 check_adler 0 1 393 0
45
unsigned long int check_adler(Filename name);

745 9 Extractor 0 4 808 20 Extractor::Extractor 0 1 359 221
////////////////////////////////////////////////////////////////////
//     Function: Extractor::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
27
Extractor::Extractor(void);

746 10 ~Extractor 0 4 808 21 Extractor::~Extractor 0 0 220
////////////////////////////////////////////////////////////////////
//     Function: Extractor::Destructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
28
Extractor::~Extractor(void);

747 13 set_multifile 0 4 808 24 Extractor::set_multifile 0 1 360 392
////////////////////////////////////////////////////////////////////
//     Function: Extractor::set_multifile
//       Access: Published
//  Description: Specifies the filename of the Multifile that the
//               Extractor will read.  Returns true on success, false
//               if the mulifile name is invalid.
////////////////////////////////////////////////////////////////////
62
bool Extractor::set_multifile(Filename const &multifile_name);

748 15 set_extract_dir 0 4 808 26 Extractor::set_extract_dir 0 1 361 453
////////////////////////////////////////////////////////////////////
//     Function: Extractor::set_extract_dir
//       Access: Published
//  Description: Specifies the directory into which all extracted
//               subfiles will be written.  Relative paths of subfiles
//               within the Multifile will be written as relative
//               paths to this directory.
////////////////////////////////////////////////////////////////////
61
void Extractor::set_extract_dir(Filename const &extract_dir);

749 5 reset 0 4 808 16 Extractor::reset 0 1 362 368
////////////////////////////////////////////////////////////////////
//     Function: Extractor::reset
//       Access: Published
//  Description: Interrupts the Extractor in the middle of its
//               business and makes it ready to accept a new list of
//               subfiles to extract.
////////////////////////////////////////////////////////////////////
28
void Extractor::reset(void);

750 15 request_subfile 0 4 808 26 Extractor::request_subfile 0 1 363 391
////////////////////////////////////////////////////////////////////
//     Function: Extractor::request_subfile
//       Access: Published
//  Description: Requests a particular subfile to be extracted when
//               step() or run() is called.  Returns true if the
//               subfile exists, false otherwise.
////////////////////////////////////////////////////////////////////
62
bool Extractor::request_subfile(Filename const &subfile_name);

751 20 request_all_subfiles 0 4 808 31 Extractor::request_all_subfiles 0 1 364 334
////////////////////////////////////////////////////////////////////
//     Function: Extractor::request_all_subfiles
//       Access: Published
//  Description: Requests all subfiles in the Multifile to be
//               extracted.  Returns the number requested.
////////////////////////////////////////////////////////////////////
42
int Extractor::request_all_subfiles(void);

752 4 step 0 4 808 15 Extractor::step 0 1 365 695
////////////////////////////////////////////////////////////////////
//     Function: Extractor::step
//       Access: Published
//  Description: After all of the requests have been made via
//               request_file() or request_all_subfiles(), call step()
//               repeatedly until it stops returning EU_ok.
//
//               step() extracts the next small unit of data from the
//               Multifile.  Returns EU_ok if progress is continuing,
//               EU_error_abort if there is a problem, or EU_success
//               when the last piece has been extracted.
//
//               Also see run().
////////////////////////////////////////////////////////////////////
26
int Extractor::step(void);

753 12 get_progress 0 4 808 23 Extractor::get_progress 0 1 366 292
////////////////////////////////////////////////////////////////////
//     Function: Extractor::get_progress
//       Access: Public
//  Description: Returns the fraction of the Multifile extracted so
//               far.
////////////////////////////////////////////////////////////////////
48
PN_stdfloat Extractor::get_progress(void) const;

754 3 run 0 4 808 14 Extractor::run 0 1 367 674
////////////////////////////////////////////////////////////////////
//     Function: Extractor::run
//       Access: Published
//  Description: A convenience function to extract the Multifile all
//               at once, when you don't care about doing it in the
//               background.
//
//               First, call request_file() or request_all_files() to
//               specify the files you would like to extract, then
//               call run() to do the extraction.  Also see step() for
//               when you would like the extraction to happen as a
//               background task.
////////////////////////////////////////////////////////////////////
26
bool Extractor::run(void);

755 15 MultiplexStream 0 4 809 32 MultiplexStream::MultiplexStream 0 1 368 224
////////////////////////////////////////////////////////////////////
//     Function: MultiplexStream::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
46
inline MultiplexStream::MultiplexStream(void);

756 11 add_ostream 0 4 809 28 MultiplexStream::add_ostream 0 1 369 379
////////////////////////////////////////////////////////////////////
//     Function: MultiplexStream::add_ostream
//       Access: Public
//  Description: Adds the indicated generic ostream to the multiplex
//               output.  The ostream will receive whatever data is
//               sent to the pipe.
////////////////////////////////////////////////////////////////////
78
inline void MultiplexStream::add_ostream(ostream *out, bool delete_later = 0);

757 14 add_stdio_file 0 4 809 31 MultiplexStream::add_stdio_file 0 1 370 335
////////////////////////////////////////////////////////////////////
//     Function: MultiplexStream::add_stdio_file
//       Access: Public
//  Description: Adds the given file, previously opened using the C
//               stdio library, to the multiplex output.
////////////////////////////////////////////////////////////////////
78
inline bool MultiplexStream::add_stdio_file(FILE *file, bool close_when_done);

758 19 add_standard_output 0 4 809 36 MultiplexStream::add_standard_output 0 1 371 266
////////////////////////////////////////////////////////////////////
//     Function: MultiplexStream::add_standard_output
//       Access: Public
//  Description: Adds the standard output channel.
////////////////////////////////////////////////////////////////////
55
inline void MultiplexStream::add_standard_output(void);

759 8 add_file 0 4 809 25 MultiplexStream::add_file 0 1 372 400
////////////////////////////////////////////////////////////////////
//     Function: MultiplexStream::add_file
//       Access: Public
//  Description: Adds the given file to the multiplex output.  The
//               file is opened in append mode with line buffering.
//               Returns false if the file cannot be opened.
////////////////////////////////////////////////////////////////////
53
inline bool MultiplexStream::add_file(Filename file);

760 16 add_system_debug 0 4 809 33 MultiplexStream::add_system_debug 0 1 373 542
////////////////////////////////////////////////////////////////////
//     Function: MultiplexStream::add_system_debug
//       Access: Public
//  Description: Adds the system debug output the the multiplex
//               output.  This may map to a syslog or some such
//               os-specific output system.  It may do nothing on a
//               particular system.
//
//               Presently, this maps only to OutputDebugString() on
//               Windows.
////////////////////////////////////////////////////////////////////
52
inline void MultiplexStream::add_system_debug(void);

761 5 flush 0 4 809 22 MultiplexStream::flush 0 1 374 270
////////////////////////////////////////////////////////////////////
//     Function: MultiplexStream::flush
//       Access: Public
//  Description: Forces out all output that hasn't yet been written.
////////////////////////////////////////////////////////////////////
41
inline void MultiplexStream::flush(void);

762 16 ~MultiplexStream 0 4 809 33 MultiplexStream::~MultiplexStream 0 0 0
40
MultiplexStream::~MultiplexStream(void);

763 14 get_class_type 0 4 810 31 VirtualFileHTTP::get_class_type 0 1 375 0
56
static TypeHandle VirtualFileHTTP::get_class_type(void);

764 20 VirtualFileMountHTTP 0 4 812 42 VirtualFileMountHTTP::VirtualFileMountHTTP 0 1 376 233
////////////////////////////////////////////////////////////////////
//     Function: VirtualFileMountHTTP::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
103
VirtualFileMountHTTP::VirtualFileMountHTTP(URLSpec const &root, HTTPClient *http = (get_global_ptr()));

765 15 get_http_client 0 4 812 37 VirtualFileMountHTTP::get_http_client 0 1 377 315
////////////////////////////////////////////////////////////////////
//     Function: VirtualFileMountHTTP::get_http_client
//       Access: Published
//  Description: Returns the HTTPClient object that services this
//               mount point.
////////////////////////////////////////////////////////////////////
69
inline HTTPClient *VirtualFileMountHTTP::get_http_client(void) const;

766 8 get_root 0 4 812 30 VirtualFileMountHTTP::get_root 0 1 378 308
////////////////////////////////////////////////////////////////////
//     Function: VirtualFileMountHTTP::get_root
//       Access: Published
//  Description: Returns the URL that represents the root of this
//               mount point.
////////////////////////////////////////////////////////////////////
65
inline URLSpec const &VirtualFileMountHTTP::get_root(void) const;

767 20 reload_vfs_mount_url 0 4 812 42 VirtualFileMountHTTP::reload_vfs_mount_url 0 1 379 758
////////////////////////////////////////////////////////////////////
//     Function: VirtualFileMountHTTP::reload_vfs_mount_url
//       Access: Published, Static
//  Description: Reads all of the vfs-mount-url lines in the
//               Config.prc file and replaces the mount settings to
//               match them.  
//
//               This will mount any url's mentioned in the config
//               file, and unmount and unmount any url's no longer
//               mentioned in the config file.  Normally, it is called
//               automatically at startup, and need not be called
//               again, unless you have fiddled with some config
//               settings.
////////////////////////////////////////////////////////////////////
61
static void VirtualFileMountHTTP::reload_vfs_mount_url(void);

768 14 get_class_type 0 4 812 36 VirtualFileMountHTTP::get_class_type 0 1 380 0
61
static TypeHandle VirtualFileMountHTTP::get_class_type(void);

769 7 Patcher 0 4 814 16 Patcher::Patcher 0 2 381 382 434
////////////////////////////////////////////////////////////////////
//     Function: Patcher::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Patcher::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
69
Patcher::Patcher(void);
Patcher::Patcher(PointerTo< Buffer > buffer);

770 8 ~Patcher 0 6 814 17 Patcher::~Patcher 0 0 215
////////////////////////////////////////////////////////////////////
//     Function: Patcher::Destructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
32
virtual Patcher::~Patcher(void);

771 8 initiate 0 4 814 17 Patcher::initiate 0 1 383 213
////////////////////////////////////////////////////////////////////
//     Function: Patcher::initiate
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
57
int Patcher::initiate(Filename &patch, Filename &infile);

772 3 run 0 4 814 12 Patcher::run 0 1 384 208
////////////////////////////////////////////////////////////////////
//     Function: Patcher::run
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
23
int Patcher::run(void);

773 12 get_progress 0 4 814 21 Patcher::get_progress 0 1 385 217
////////////////////////////////////////////////////////////////////
//     Function: Patcher::get_progress
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
53
inline PN_stdfloat Patcher::get_progress(void) const;

774 12 StringStream 0 4 815 26 StringStream::StringStream 0 2 386 387 545
////////////////////////////////////////////////////////////////////
//     Function: StringStream::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: StringStream::Constructor
//       Access: Published
//  Description: This version of the constructor preloads the buffer
//               with the indicated data.
////////////////////////////////////////////////////////////////////
97
inline StringStream::StringStream(void);
inline StringStream::StringStream(string const &source);

775 10 clear_data 0 4 815 24 StringStream::clear_data 0 1 388 243
////////////////////////////////////////////////////////////////////
//     Function: StringStream::clear_data
//       Access: Published
//  Description: Empties the buffer.
////////////////////////////////////////////////////////////////////
43
inline void StringStream::clear_data(void);

776 13 get_data_size 0 4 815 27 StringStream::get_data_size 0 1 389 319
////////////////////////////////////////////////////////////////////
//     Function: StringStream::get_data_size
//       Access: Published
//  Description: Returns the number of characters available to be read
//               from the data stream.
////////////////////////////////////////////////////////////////////
48
inline size_t StringStream::get_data_size(void);

777 8 get_data 0 4 815 22 StringStream::get_data 0 1 390 274
////////////////////////////////////////////////////////////////////
//     Function: StringStream::get_data
//       Access: Published
//  Description: Returns the contents of the data stream as a string.
////////////////////////////////////////////////////////////////////
43
inline string StringStream::get_data(void);

778 8 set_data 0 4 815 22 StringStream::set_data 0 1 391 311
////////////////////////////////////////////////////////////////////
//     Function: StringStream::set_data
//       Access: Published
//  Description: Replaces the contents of the data stream.  This
//               implicitly reseeks to 0.
////////////////////////////////////////////////////////////////////
55
inline void StringStream::set_data(string const &data);

779 13 ~StringStream 0 4 815 27 StringStream::~StringStream 0 0 0
34
StringStream::~StringStream(void);

393
1 0 0 6 3 819 0 0 527 ////////////////////////////////////////////////////////////////////
//     Function: SSReader::receive_datagram
//       Access: Published
//  Description: Receives a datagram over the socket by expecting a
//               little-endian 16-bit byte count as a prefix.  If the
//               socket stream is non-blocking, may return false if
//               the data is not available; otherwise, returns false
//               only if the socket closes.
//////////////////////////////////////////////////////////////////// 2 4 this 3 816  2 dg 1 817  
2 0 0 6 4 819 0 0 0 1 4 this 3 816  
3 0 0 4 5 820 0 0 0 1 4 this 3 816  
4 0 0 4 6 820 0 0 546 ////////////////////////////////////////////////////////////////////
//     Function: SSReader::set_tcp_header_size
//       Access: Published
//  Description: Sets the header size for datagrams.  At the present,
//               legal values for this are 0, 2, or 4; this specifies
//               the number of bytes to use encode the datagram length
//               at the start of each TCP datagram.  Sender and
//               receiver must independently agree on this.
//////////////////////////////////////////////////////////////////// 2 4 this 3 816  15 tcp_header_size 1 821  
5 0 0 6 7 821 0 0 312 ////////////////////////////////////////////////////////////////////
//     Function: SSReader::get_tcp_header_size
//       Access: Published
//  Description: Returns the header size for datagrams.  See
//               set_tcp_header_size().
//////////////////////////////////////////////////////////////////// 1 4 this 3 822  
6 0 0 6 10 819 0 0 504 ////////////////////////////////////////////////////////////////////
//     Function: SSWriter::send_datagram
//       Access: Public
//  Description: Transmits the indicated datagram over the socket by
//               prepending it with a little-endian 16-bit byte count.
//               Does not return until the data is sent or the
//               connection is closed, even if the socket stream is
//               non-blocking.
//////////////////////////////////////////////////////////////////// 2 4 this 3 824  2 dg 1 825  
7 0 0 6 11 819 0 0 0 1 4 this 3 824  
8 0 0 4 12 820 0 0 0 1 4 this 3 824  
9 0 0 4 13 820 0 0 1144 ////////////////////////////////////////////////////////////////////
//     Function: SSWriter::set_collect_tcp
//       Access: Published
//  Description: Enables or disables "collect-tcp" mode.  In this
//               mode, individual TCP packets are not sent
//               immediately, but rather they are collected together
//               and accumulated to be sent periodically as one larger
//               TCP packet.  This cuts down on overhead from the
//               TCP/IP protocol, especially if many small packets
//               need to be sent on the same connection, but it
//               introduces additional latency (since packets must be
//               held before they can be sent).
//
//               See set_collect_tcp_interval() to specify the
//               interval of time for which to hold packets before
//               sending them.
//
//               If you enable this mode, you may also need to
//               periodically call consider_flush() to flush the queue
//               if no packets have been sent recently.
//////////////////////////////////////////////////////////////////// 2 4 this 3 824  11 collect_tcp 1 819  
10 0 0 6 14 819 0 0 315 ////////////////////////////////////////////////////////////////////
//     Function: SSWriter::get_collect_tcp
//       Access: Published
//  Description: Returns the current setting of "collect-tcp" mode.
//               See set_collect_tcp().
//////////////////////////////////////////////////////////////////// 1 4 this 3 827  
11 0 0 4 15 820 0 0 516 ////////////////////////////////////////////////////////////////////
//     Function: SSWriter::set_collect_tcp_interval
//       Access: Published
//  Description: Specifies the interval in time, in seconds, for which
//               to hold TCP packets before sending all of the
//               recently received packets at once.  This only has
//               meaning if "collect-tcp" mode is enabled; see
//               set_collect_tcp().
//////////////////////////////////////////////////////////////////// 2 4 this 3 824  8 interval 1 829  
12 0 0 6 16 829 0 0 514 ////////////////////////////////////////////////////////////////////
//     Function: SSWriter::get_collect_tcp_interval
//       Access: Published
//  Description: Returns the interval in time, in seconds, for which
//               to hold TCP packets before sending all of the
//               recently received packets at once.  This only has
//               meaning if "collect-tcp" mode is enabled; see
//               set_collect_tcp().
//////////////////////////////////////////////////////////////////// 1 4 this 3 827  
13 0 0 4 17 820 0 0 546 ////////////////////////////////////////////////////////////////////
//     Function: SSWriter::set_tcp_header_size
//       Access: Published
//  Description: Sets the header size for datagrams.  At the present,
//               legal values for this are 0, 2, or 4; this specifies
//               the number of bytes to use encode the datagram length
//               at the start of each TCP datagram.  Sender and
//               receiver must independently agree on this.
//////////////////////////////////////////////////////////////////// 2 4 this 3 824  15 tcp_header_size 1 821  
14 0 0 6 18 821 0 0 312 ////////////////////////////////////////////////////////////////////
//     Function: SSWriter::get_tcp_header_size
//       Access: Published
//  Description: Returns the header size for datagrams.  See
//               set_tcp_header_size().
//////////////////////////////////////////////////////////////////// 1 4 this 3 827  
15 0 0 6 19 819 0 0 387 ////////////////////////////////////////////////////////////////////
//     Function: SSWriter::consider_flush
//       Access: Published
//  Description: Sends the most recently queued data if enough time
//               has elapsed.  This only has meaning if
//               set_collect_tcp() has been set to true.
//////////////////////////////////////////////////////////////////// 1 4 this 3 824  
16 0 0 6 20 819 0 0 355 ////////////////////////////////////////////////////////////////////
//     Function: SSWriter::flush
//       Access: Published
//  Description: Sends the most recently queued data now.  This only
//               has meaning if set_collect_tcp() has been set to
//               true.
//////////////////////////////////////////////////////////////////// 1 4 this 3 824  
17 0 0 6 29 819 0 0 0 1 4 this 3 830  
18 0 0 4 30 820 0 0 0 1 4 this 3 830  
19 0 0 6 31 784 0 0 0 1 4 this 3 830  
20 0 0 6 23 831 0 0 0 1 4 this 3 830  
21 0 0 6 24 830 0 0 0 1 4 this 3 831  
22 0 0 6 25 816 0 0 0 1 4 this 3 830  
23 0 0 6 26 830 0 0 0 1 4 this 3 816  
24 0 0 6 38 819 0 0 0 1 4 this 3 832  
25 0 0 4 39 820 0 0 0 1 4 this 3 832  
26 0 0 6 40 819 0 0 360 ////////////////////////////////////////////////////////////////////
//     Function: OSocketStream::flush
//       Access: Published
//  Description: Sends the most recently queued data now.  This only
//               has meaning if set_collect_tcp() has been set to
//               true.
//////////////////////////////////////////////////////////////////// 1 4 this 3 832  
27 0 0 6 34 833 0 0 0 1 4 this 3 832  
28 0 0 6 35 832 0 0 0 1 4 this 3 833  
29 0 0 6 36 824 0 0 0 1 4 this 3 832  
30 0 0 6 37 832 0 0 0 1 4 this 3 824  
31 0 0 6 50 819 0 0 0 1 4 this 3 834  
32 0 0 4 51 820 0 0 0 1 4 this 3 834  
33 0 0 4 52 820 0 0 550 ////////////////////////////////////////////////////////////////////
//     Function: SocketStream::set_tcp_header_size
//       Access: Published
//  Description: Sets the header size for datagrams.  At the present,
//               legal values for this are 0, 2, or 4; this specifies
//               the number of bytes to use encode the datagram length
//               at the start of each TCP datagram.  Sender and
//               receiver must independently agree on this.
//////////////////////////////////////////////////////////////////// 2 4 this 3 834  15 tcp_header_size 1 821  
34 0 0 6 53 821 0 0 316 ////////////////////////////////////////////////////////////////////
//     Function: SocketStream::get_tcp_header_size
//       Access: Published
//  Description: Returns the header size for datagrams.  See
//               set_tcp_header_size().
//////////////////////////////////////////////////////////////////// 1 4 this 3 835  
35 0 0 6 54 819 0 0 359 ////////////////////////////////////////////////////////////////////
//     Function: SocketStream::flush
//       Access: Published
//  Description: Sends the most recently queued data now.  This only
//               has meaning if set_collect_tcp() has been set to
//               true.
//////////////////////////////////////////////////////////////////// 1 4 this 3 834  
36 0 0 6 44 837 0 0 0 1 4 this 3 834  
37 0 0 6 45 834 0 0 0 1 4 this 3 837  
38 0 0 6 46 816 0 0 0 1 4 this 3 834  
39 0 0 6 47 834 0 0 0 1 4 this 3 816  
40 0 0 6 48 824 0 0 0 1 4 this 3 834  
41 0 0 6 49 834 0 0 0 1 4 this 3 824  
42 0 0 7 57 838 487 0 219 ////////////////////////////////////////////////////////////////////
//     Function: URLSpec::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
43 0 0 7 57 838 487 0 224 ////////////////////////////////////////////////////////////////////
//     Function: URLSpec::Copy Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 839  
44 0 0 7 57 838 487 0 219 ////////////////////////////////////////////////////////////////////
//     Function: URLSpec::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 3 url 1 841  20 server_name_expected 1 819  
45 0 0 6 58 838 0 0 0 2 4 this 3 838  4 copy 1 839  
46 0 0 6 58 838 0 0 0 2 4 this 3 838  3 url 1 841  
47 0 0 6 59 819 0 0 0 2 4 this 3 839  5 other 1 839  
48 0 0 6 60 819 0 0 0 2 4 this 3 839  5 other 1 839  
49 0 0 6 61 819 0 0 0 2 4 this 3 839  5 other 1 839  
50 0 0 6 62 821 0 0 397 ////////////////////////////////////////////////////////////////////
//     Function: URLSpec::compare_to
//       Access: Published
//  Description: Returns a number less than zero if this URLSpec
//               sorts before the other one, greater than zero if it
//               sorts after, or zero if they are equivalent.
//////////////////////////////////////////////////////////////////// 2 4 this 3 839  5 other 1 839  
51 0 0 6 63 819 0 0 311 ////////////////////////////////////////////////////////////////////
//     Function: URLSpec::has_scheme
//       Access: Published
//  Description: Returns true if the URL specifies a scheme
//               (e.g. "http:"), false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 839  
52 0 0 6 64 819 0 0 366 ////////////////////////////////////////////////////////////////////
//     Function: URLSpec::has_authority
//       Access: Published
//  Description: Returns true if the URL specifies an authority
//               (this includes username, server, and/or port), false
//               otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 839  
53 0 0 6 65 819 0 0 318 ////////////////////////////////////////////////////////////////////
//     Function: URLSpec::has_username
//       Access: Published
//  Description: Returns true if the URL specifies a username
//               (and/or password), false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 839  
54 0 0 6 66 819 0 0 301 ////////////////////////////////////////////////////////////////////
//     Function: URLSpec::has_server
//       Access: Published
//  Description: Returns true if the URL specifies a server name,
//               false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 839  
55 0 0 6 67 819 0 0 299 ////////////////////////////////////////////////////////////////////
//     Function: URLSpec::has_port
//       Access: Published
//  Description: Returns true if the URL specifies a port number,
//               false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 839  
56 0 0 6 68 819 0 0 383 ////////////////////////////////////////////////////////////////////
//     Function: URLSpec::has_path
//       Access: Published
//  Description: Returns true if the URL includes a path specification
//               (that is, the particular filename on the server to
//               retrieve), false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 839  
57 0 0 6 69 819 0 0 307 ////////////////////////////////////////////////////////////////////
//     Function: URLSpec::has_query
//       Access: Published
//  Description: Returns true if the URL includes a query
//               specification, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 839  
58 0 0 6 70 841 0 0 319 ////////////////////////////////////////////////////////////////////
//     Function: URLSpec::get_scheme
//       Access: Published
//  Description: Returns the scheme specified by the URL, or empty
//               string if no scheme is specified.
//////////////////////////////////////////////////////////////////// 1 4 this 3 839  
59 0 0 6 71 841 0 0 391 ////////////////////////////////////////////////////////////////////
//     Function: URLSpec::get_authority
//       Access: Published
//  Description: Returns the authority specified by the URL (this
//               includes username, server, and/or port), or empty
//               string if no authority is specified.
//////////////////////////////////////////////////////////////////// 1 4 this 3 839  
60 0 0 6 72 841 0 0 447 ////////////////////////////////////////////////////////////////////
//     Function: URLSpec::get_username
//       Access: Published
//  Description: Returns the username specified by the URL, if any.
//               This might also include a password,
//               e.g. "username:password", although putting a password
//               on the URL is probably a bad idea.
//////////////////////////////////////////////////////////////////// 1 4 this 3 839  
61 0 0 6 73 841 0 0 272 ////////////////////////////////////////////////////////////////////
//     Function: URLSpec::get_server
//       Access: Published
//  Description: Returns the server name specified by the URL, if any.
//////////////////////////////////////////////////////////////////// 1 4 this 3 839  
62 0 0 6 74 841 0 0 459 ////////////////////////////////////////////////////////////////////
//     Function: URLSpec::get_port_str
//       Access: Published
//  Description: Returns the port specified by the URL as a string, or
//               the empty string if no port is specified.  Compare
//               this with get_port(), which returns a default port
//               number if no port is specified.
//////////////////////////////////////////////////////////////////// 1 4 this 3 839  
63 0 0 6 75 821 0 0 317 ////////////////////////////////////////////////////////////////////
//     Function: URLSpec::get_port
//       Access: Published
//  Description: Returns the port number specified by the URL, or the
//               default port if not specified.
//////////////////////////////////////////////////////////////////// 1 4 this 3 839  
64 0 0 6 76 841 0 0 483 ////////////////////////////////////////////////////////////////////
//     Function: URLSpec::get_server_and_port
//       Access: Published
//  Description: Returns a string consisting of the server name,
//               followed by a colon, followed by the port number.  If
//               the port number is not explicitly given in the URL,
//               this string will include the implicit port number.
//////////////////////////////////////////////////////////////////// 1 4 this 3 839  
65 0 0 6 77 819 0 0 439 ////////////////////////////////////////////////////////////////////
//     Function: URLSpec::is_default_port
//       Access: Published
//  Description: Returns true if the port number encoded in this URL
//               is the default port number for the scheme (or if
//               there is no port number), or false if it is a
//               nonstandard port.
//////////////////////////////////////////////////////////////////// 1 4 this 3 839  
66 0 0 6 78 821 0 0 353 ////////////////////////////////////////////////////////////////////
//     Function: URLSpec::get_default_port_for_scheme
//       Access: Published, Static
//  Description: Returns the default port number for the indicated
//               scheme, or 0 if there is no known default.
//////////////////////////////////////////////////////////////////// 1 6 scheme 1 841  
67 0 0 6 79 841 0 0 304 ////////////////////////////////////////////////////////////////////
//     Function: URLSpec::get_path
//       Access: Published
//  Description: Returns the path specified by the URL, or "/" if no
//               path is specified.
//////////////////////////////////////////////////////////////////// 1 4 this 3 839  
68 0 0 6 80 841 0 0 316 ////////////////////////////////////////////////////////////////////
//     Function: URLSpec::get_query
//       Access: Published
//  Description: Returns the query specified by the URL, or empty
//               string if no query is specified.
//////////////////////////////////////////////////////////////////// 1 4 this 3 839  
69 0 0 6 81 841 0 0 336 ////////////////////////////////////////////////////////////////////
//     Function: URLSpec::get_path_and_query
//       Access: Published
//  Description: Returns the path (or "/" if no path is specified),
//               followed by the query if it is specified.
//////////////////////////////////////////////////////////////////// 1 4 this 3 839  
70 0 0 6 82 819 0 0 350 ////////////////////////////////////////////////////////////////////
//     Function: URLSpec::is_ssl
//       Access: Published
//  Description: Returns true if the URL's scheme specifies an
//               SSL-secured protocol such as https, or false
//               otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 839  
71 0 0 6 83 841 0 0 255 ////////////////////////////////////////////////////////////////////
//     Function: URLSpec::get_url
//       Access: Published
//  Description: Returns the complete URL specification.
//////////////////////////////////////////////////////////////////// 1 4 this 3 839  
72 0 0 4 84 820 0 0 269 ////////////////////////////////////////////////////////////////////
//     Function: URLSpec::set_scheme
//       Access: Published
//  Description: Replaces the scheme part of the URL specification.
//////////////////////////////////////////////////////////////////// 2 4 this 3 838  6 scheme 1 841  
73 0 0 4 85 820 0 0 338 ////////////////////////////////////////////////////////////////////
//     Function: URLSpec::set_authority
//       Access: Published
//  Description: Replaces the authority part of the URL specification.
//               This includes the username, server, and port.
//////////////////////////////////////////////////////////////////// 2 4 this 3 838  9 authority 1 841  
74 0 0 4 86 820 0 0 273 ////////////////////////////////////////////////////////////////////
//     Function: URLSpec::set_username
//       Access: Published
//  Description: Replaces the username part of the URL specification.
//////////////////////////////////////////////////////////////////// 2 4 this 3 838  8 username 1 841  
75 0 0 4 87 820 0 0 269 ////////////////////////////////////////////////////////////////////
//     Function: URLSpec::set_server
//       Access: Published
//  Description: Replaces the server part of the URL specification.
//////////////////////////////////////////////////////////////////// 2 4 this 3 838  6 server 1 841  
76 0 0 4 88 820 0 0 311 ////////////////////////////////////////////////////////////////////
//     Function: URLSpec::set_port
//       Access: Published
//  Description: Replaces the port part of the URL specification,
//               given a numeric port number.
//////////////////////////////////////////////////////////////////// 2 4 this 3 838  4 port 1 821  
77 0 0 4 88 820 0 0 265 ////////////////////////////////////////////////////////////////////
//     Function: URLSpec::set_port
//       Access: Published
//  Description: Replaces the port part of the URL specification.
//////////////////////////////////////////////////////////////////// 2 4 this 3 838  4 port 1 841  
78 0 0 4 89 820 0 0 460 ////////////////////////////////////////////////////////////////////
//     Function: URLSpec::set_server_and_port
//       Access: Published
//  Description: Replaces the server and port parts of the URL
//               specification simultaneously.  The input string
//               should be of the form "server:port", or just
//               "server" to make the port number implicit.
//////////////////////////////////////////////////////////////////// 2 4 this 3 838  15 server_and_port 1 841  
79 0 0 4 90 820 0 0 265 ////////////////////////////////////////////////////////////////////
//     Function: URLSpec::set_path
//       Access: Published
//  Description: Replaces the path part of the URL specification.
//////////////////////////////////////////////////////////////////// 2 4 this 3 838  4 path 1 841  
80 0 0 4 91 820 0 0 267 ////////////////////////////////////////////////////////////////////
//     Function: URLSpec::set_query
//       Access: Published
//  Description: Replaces the query part of the URL specification.
//////////////////////////////////////////////////////////////////// 2 4 this 3 838  5 query 1 841  
81 0 0 4 92 820 0 0 441 ////////////////////////////////////////////////////////////////////
//     Function: URLSpec::set_url
//       Access: Published
//  Description: Completely replaces the URL with the indicated
//               string.  If server_name_expected is true, it is a
//               hint that an undecorated URL is probably a server
//               name, not a local filename.
//////////////////////////////////////////////////////////////////// 3 4 this 3 838  3 url 1 841  20 server_name_expected 1 819  
82 0 0 6 94 841 0 0 210 ////////////////////////////////////////////////////////////////////
//     Function: URLSpec::c_str
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 839  
83 0 0 6 95 819 0 0 210 ////////////////////////////////////////////////////////////////////
//     Function: URLSpec::empty
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 839  
84 0 0 6 96 842 0 0 211 ////////////////////////////////////////////////////////////////////
//     Function: URLSpec::length
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 839  
85 0 0 6 97 844 0 0 0 2 4 this 3 839  1 n 1 821  
86 0 0 6 98 819 0 0 214 ////////////////////////////////////////////////////////////////////
//     Function: URLSpec::input
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 838  2 in 1 831  
87 0 0 4 99 820 0 0 215 ////////////////////////////////////////////////////////////////////
//     Function: URLSpec::output
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 839  3 out 1 833  
88 0 0 6 100 841 0 0 617 ////////////////////////////////////////////////////////////////////
//     Function: URLSpec::quote
//       Access: Published, Static
//  Description: Returns the source string with all "unsafe"
//               characters quoted, making a string suitable for
//               placing in a URL.  Letters, digits, and the
//               underscore, comma, period, and hyphen characters, as
//               well as any included in the safe string, are left
//               alone; all others are converted to hex
//               representation.
//////////////////////////////////////////////////////////////////// 2 6 source 1 841  4 safe 1 841  
89 0 0 6 101 841 0 0 330 ////////////////////////////////////////////////////////////////////
//     Function: URLSpec::quote_plus
//       Access: Published, Static
//  Description: Behaves like quote() with the additional behavior of
//               replacing spaces with plus signs.
//////////////////////////////////////////////////////////////////// 2 6 source 1 841  4 safe 1 841  
90 0 0 6 102 841 0 0 365 ////////////////////////////////////////////////////////////////////
//     Function: URLSpec::unquote
//       Access: Published, Static
//  Description: Reverses the operation of quote(): converts escaped
//               characters of the form "%xx" to their ascii
//               equivalent.
//////////////////////////////////////////////////////////////////// 1 6 source 1 841  
91 0 0 6 103 841 0 0 415 ////////////////////////////////////////////////////////////////////
//     Function: URLSpec::unquote_plus
//       Access: Published, Static
//  Description: Reverses the operation of quote_plus(): converts escaped
//               characters of the form "%xx" to their ascii
//               equivalent, and also converts plus signs to spaces.
//////////////////////////////////////////////////////////////////// 1 6 source 1 841  
92 0 0 6 93 841 0 0 0 1 4 this 3 839  
93 0 0 7 110 845 506 0 220 ////////////////////////////////////////////////////////////////////
//     Function: HTTPDate::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
94 0 0 7 110 845 506 0 225 ////////////////////////////////////////////////////////////////////
//     Function: HTTPDate::Copy Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 846  
95 0 0 7 110 845 506 0 363 ////////////////////////////////////////////////////////////////////
//     Function: HTTPDate::Constructor
//       Access: Published
//  Description: Decodes the string into a sensible date.  Returns 0
//               (!is_valid()) if the string cannot be correctly
//               decoded.
//////////////////////////////////////////////////////////////////// 1 6 format 1 841  
96 0 0 7 110 845 506 0 220 ////////////////////////////////////////////////////////////////////
//     Function: HTTPDate::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 time 1 848  
97 0 0 6 111 845 0 0 0 2 4 this 3 845  4 copy 1 846  
98 0 0 7 112 845 506 0 320 ////////////////////////////////////////////////////////////////////
//     Function: HTTPDate::now (named constructor)
//       Access: Published, Static
//  Description: Returns an HTTPDate that represents the current time
//               and date.
//////////////////////////////////////////////////////////////////// 0 
99 0 0 6 113 819 0 0 379 ////////////////////////////////////////////////////////////////////
//     Function: HTTPDate::is_valid
//       Access: Published
//  Description: Returns true if the date is meaningful, or false if
//               it is -1 (which generally indicates the source string
//               could not be parsed.)
//////////////////////////////////////////////////////////////////// 1 4 this 3 846  
100 0 0 6 114 841 0 0 219 ////////////////////////////////////////////////////////////////////
//     Function: HTTPDate::get_string
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 846  
101 0 0 6 115 848 0 0 255 ////////////////////////////////////////////////////////////////////
//     Function: HTTPDate::get_time
//       Access: Published
//  Description: Returns the date as a C time_t value.
//////////////////////////////////////////////////////////////////// 1 4 this 3 846  
102 0 0 6 116 819 0 0 0 2 4 this 3 846  5 other 1 846  
103 0 0 6 117 819 0 0 0 2 4 this 3 846  5 other 1 846  
104 0 0 6 118 819 0 0 0 2 4 this 3 846  5 other 1 846  
105 0 0 6 119 819 0 0 0 2 4 this 3 846  5 other 1 846  
106 0 0 6 120 821 0 0 399 ////////////////////////////////////////////////////////////////////
//     Function: HTTPDate::compare_to
//       Access: Published
//  Description: Returns a number less than zero if this HTTPDate
//               sorts before the other one, greater than zero if it
//               sorts after, or zero if they are equivalent.
//////////////////////////////////////////////////////////////////// 2 4 this 3 846  5 other 1 846  
107 0 0 6 121 845 0 0 0 2 4 this 3 845  7 seconds 1 821  
108 0 0 6 122 845 0 0 0 2 4 this 3 845  7 seconds 1 821  
109 0 0 7 123 845 506 0 0 2 4 this 3 846  7 seconds 1 821  
110 0 0 6 124 821 0 0 0 2 4 this 3 846  5 other 1 846  
111 0 0 7 124 845 506 0 0 2 4 this 3 846  7 seconds 1 821  
112 0 0 6 125 819 0 0 215 ////////////////////////////////////////////////////////////////////
//     Function: HTTPDate::input
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 845  2 in 1 831  
113 0 0 4 126 820 0 0 216 ////////////////////////////////////////////////////////////////////
//     Function: HTTPDate::output
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 846  3 out 1 833  
114 0 0 7 129 850 508 0 250 ////////////////////////////////////////////////////////////////////
//     Function: HTTPCookie::Constructor
//       Access: Published
//  Description: Constructs an empty cookie.
//////////////////////////////////////////////////////////////////// 0 
115 0 0 7 129 850 508 0 453 ////////////////////////////////////////////////////////////////////
//     Function: HTTPCookie::Constructor
//       Access: Published
//  Description: Constructs a cookie according to the indicated
//               string, presumably the tag of a Set-Cookie header.
//               There is no way to detect a formatting error in the
//               string with this constructor.
//////////////////////////////////////////////////////////////////// 2 6 format 1 841  3 url 1 839  
116 0 0 7 129 850 508 0 436 ////////////////////////////////////////////////////////////////////
//     Function: HTTPCookie::Constructor
//       Access: Published
//  Description: Constructs a cookie with the indicated name, path,
//               and domain values, but no other data.  This is most
//               useful for looking up an existing cookie in the
//               HTTPClient.
//////////////////////////////////////////////////////////////////// 3 4 name 1 841  4 path 1 841  6 domain 1 841  
117 0 0 4 131 820 0 0 220 ////////////////////////////////////////////////////////////////////
//     Function: HTTPCookie::set_name
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 850  4 name 1 841  
118 0 0 6 132 841 0 0 316 ////////////////////////////////////////////////////////////////////
//     Function: HTTPCookie::get_name
//       Access: Published
//  Description: Returns the name of the cookie.  This is the key
//               value specified by the server.
//////////////////////////////////////////////////////////////////// 1 4 this 3 851  
119 0 0 4 133 820 0 0 221 ////////////////////////////////////////////////////////////////////
//     Function: HTTPCookie::set_value
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 850  5 value 1 841  
120 0 0 6 134 841 0 0 380 ////////////////////////////////////////////////////////////////////
//     Function: HTTPCookie::get_value
//       Access: Published
//  Description: Returns the value of the cookie.  This is the
//               arbitrary string associated with the cookie's name,
//               as specified by the server.
//////////////////////////////////////////////////////////////////// 1 4 this 3 851  
121 0 0 4 135 820 0 0 222 ////////////////////////////////////////////////////////////////////
//     Function: HTTPCookie::set_domain
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 850  6 domain 1 841  
122 0 0 6 136 841 0 0 222 ////////////////////////////////////////////////////////////////////
//     Function: HTTPCookie::get_domain
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 851  
123 0 0 4 137 820 0 0 220 ////////////////////////////////////////////////////////////////////
//     Function: HTTPCookie::set_path
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 850  4 path 1 841  
124 0 0 6 138 841 0 0 322 ////////////////////////////////////////////////////////////////////
//     Function: HTTPCookie::get_path
//       Access: Published
//  Description: Returns the prefix of the URL paths on the server for
//               which this cookie will be sent.
//////////////////////////////////////////////////////////////////// 1 4 this 3 851  
125 0 0 4 139 820 0 0 223 ////////////////////////////////////////////////////////////////////
//     Function: HTTPCookie::set_expires
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 850  7 expires 1 846  
126 0 0 4 140 820 0 0 267 ////////////////////////////////////////////////////////////////////
//     Function: HTTPCookie::clear_expires
//       Access: Published
//  Description: Removes the expiration date on the cookie.
//////////////////////////////////////////////////////////////////// 1 4 this 3 850  
127 0 0 6 141 819 0 0 307 ////////////////////////////////////////////////////////////////////
//     Function: HTTPCookie::has_expires
//       Access: Published
//  Description: Returns true if the cookie has an expiration date,
//               false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 851  
128 0 0 7 142 845 506 0 328 ////////////////////////////////////////////////////////////////////
//     Function: HTTPCookie::get_expires
//       Access: Published
//  Description: Returns the expiration date of the cookie if it is
//               set, or an invalid date if it is not.
//////////////////////////////////////////////////////////////////// 1 4 this 3 851  
129 0 0 4 143 820 0 0 222 ////////////////////////////////////////////////////////////////////
//     Function: HTTPCookie::set_secure
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 850  4 flag 1 819  
130 0 0 6 144 819 0 0 371 ////////////////////////////////////////////////////////////////////
//     Function: HTTPCookie::get_secure
//       Access: Published
//  Description: Returns true if the server has indicated this is a
//               "secure" cookie which should only be sent over an
//               HTTPS channel.
//////////////////////////////////////////////////////////////////// 1 4 this 3 851  
131 0 0 6 145 819 0 0 0 2 4 this 3 851  5 other 1 851  
132 0 0 4 146 820 0 0 660 ////////////////////////////////////////////////////////////////////
//     Function: HTTPCookie::update_from
//       Access: Published
//  Description: Assuming the operator < method, above, has already
//               evaluated these two cookies as equal, then assign the
//               remaining values (value, expiration date, secure
//               flag) from the indicated cookie.  This is guaranteed
//               not to change the ordering of the cookie in a set,
//               and so can be used to update an existing cookie
//               within a set with new values.
//////////////////////////////////////////////////////////////////// 2 4 this 3 850  5 other 1 851  
133 0 0 6 147 819 0 0 497 ////////////////////////////////////////////////////////////////////
//     Function: HTTPCookie::parse_set_cookie
//       Access: Published
//  Description: Separates out the parameter/value pairs of the
//               Set-Cookie header and assigns the values of the
//               cookie appropriate.  Returns true if the header is
//               parsed correctly, false if something is not
//               understood.
//////////////////////////////////////////////////////////////////// 3 4 this 3 850  6 format 1 841  3 url 1 839  
134 0 0 6 148 819 0 0 330 ////////////////////////////////////////////////////////////////////
//     Function: HTTPCookie::is_expired
//       Access: Published
//  Description: Returns true if the cookie's expiration date is
//               before the indicated date, false otherwise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 851  3 now 1 846  
135 0 0 6 149 819 0 0 338 ////////////////////////////////////////////////////////////////////
//     Function: HTTPCookie::matches_url
//       Access: Published
//  Description: Returns true if the cookie is appropriate to send
//               with the indicated URL request, false otherwise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 851  3 url 1 839  
136 0 0 4 150 820 0 0 218 ////////////////////////////////////////////////////////////////////
//     Function: HTTPCookie::output
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 851  3 out 1 833  
137 0 0 7 153 853 0 0 222 ////////////////////////////////////////////////////////////////////
//     Function: HTTPClient::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
138 0 0 7 153 853 0 0 227 ////////////////////////////////////////////////////////////////////
//     Function: HTTPClient::Copy Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 854  
139 0 0 7 154 853 0 0 0 2 4 this 3 853  4 copy 1 854  
140 0 0 4 155 820 0 0 935 ////////////////////////////////////////////////////////////////////
//     Function: HTTPClient::init_random_seed
//       Access: Published, Static
//  Description: This may be called once, presumably at the beginning
//               of an application, to initialize OpenSSL's random
//               seed.  On Windows, it is particularly important to
//               call this at startup if you are going to be performing
//               any https operations or otherwise use encryption,
//               since the Windows algorithm for getting a random seed
//               takes 2-3 seconds at startup, but can take 30 seconds
//               or more after you have opened a 3-D graphics window
//               and started rendering.
//
//               There is no harm in calling this method multiple
//               times, or in not calling it at all.
//////////////////////////////////////////////////////////////////// 0 
141 0 0 4 156 820 0 0 859 ////////////////////////////////////////////////////////////////////
//     Function: HTTPClient::set_proxy_spec
//       Access: Published
//  Description: Specifies the complete set of proxies to use for all
//               schemes.  This is either a semicolon-delimited set of
//               hostname:ports, or a semicolon-delimited set of pairs
//               of the form "scheme=hostname:port", or a combination.
//               Use the keyword DIRECT, or an empty string, to
//               represent a direct connection.  A particular scheme
//               and/or proxy host may be listed more than once.  This
//               is a convenience function that can be used in place
//               of explicit calls to add_proxy() for each
//               scheme/proxy pair.
//////////////////////////////////////////////////////////////////// 2 4 this 3 853  10 proxy_spec 1 841  
142 0 0 6 157 841 0 0 676 ////////////////////////////////////////////////////////////////////
//     Function: HTTPClient::get_proxy_spec
//       Access: Published
//  Description: Returns the complete set of proxies to use for all
//               schemes.  This is a string of the form specified by
//               set_proxy_spec(), above.  Note that the string
//               returned by this function may not be exactly the same
//               as the string passed into set_proxy_spec(), since the
//               string is regenerated from the internal storage
//               structures and may therefore be reordered.
//////////////////////////////////////////////////////////////////// 1 4 this 3 854  
143 0 0 4 158 820 0 0 463 ////////////////////////////////////////////////////////////////////
//     Function: HTTPClient::set_direct_host_spec
//       Access: Published
//  Description: Specifies the set of hosts that should be connected
//               to directly, without using a proxy.  This is a
//               semicolon-separated list of hostnames that may
//               contain wildcard characters ("*").
//////////////////////////////////////////////////////////////////// 2 4 this 3 853  16 direct_host_spec 1 841  
144 0 0 6 159 841 0 0 455 ////////////////////////////////////////////////////////////////////
//     Function: HTTPClient::get_direct_host_spec
//       Access: Published
//  Description: Returns the set of hosts that should be connected
//               to directly, without using a proxy, as a
//               semicolon-separated list of hostnames that may
//               contain wildcard characters ("*").
//////////////////////////////////////////////////////////////////// 1 4 this 3 854  
145 0 0 4 160 820 0 0 601 ////////////////////////////////////////////////////////////////////
//     Function: HTTPClient::set_try_all_direct
//       Access: Published
//  Description: If this is set true, then after a connection attempt
//               through a proxy fails, we always try a direct
//               connection, regardless of whether the host is listed
//               on the direct_host_spec list.  If this is false, a
//               direct attempt is not made when we have a proxy in
//               effect, even if the proxy fails.
//////////////////////////////////////////////////////////////////// 2 4 this 3 853  14 try_all_direct 1 819  
146 0 0 6 161 819 0 0 384 ////////////////////////////////////////////////////////////////////
//     Function: HTTPClient::get_try_all_direct
//       Access: Published
//  Description: Returns whether a failed connection through a proxy
//               will be followed up by a direct connection attempt,
//               false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 854  
147 0 0 4 162 820 0 0 371 ////////////////////////////////////////////////////////////////////
//     Function: HTTPClient::clear_proxy
//       Access: Published
//  Description: Resets the proxy spec to empty.  Subsequent calls to
//               add_proxy() may be made to build up the set of proxy
//               servers.
//////////////////////////////////////////////////////////////////// 1 4 this 3 853  
148 0 0 4 163 820 0 0 540 ////////////////////////////////////////////////////////////////////
//     Function: HTTPClient::add_proxy
//       Access: Published
//  Description: Adds the indicated proxy host as a proxy for
//               communications on the given scheme.  Usually the
//               scheme is "http" or "https".  It may be the empty
//               string to indicate a general proxy.  The proxy string
//               may be the empty URL to indicate a direct connection.
//////////////////////////////////////////////////////////////////// 3 4 this 3 853  6 scheme 1 841  5 proxy 1 839  
149 0 0 4 164 820 0 0 441 ////////////////////////////////////////////////////////////////////
//     Function: HTTPClient::clear_direct_host
//       Access: Published
//  Description: Resets the set of direct hosts to empty.  Subsequent
//               calls to add_direct_host() may be made to build up
//               the list of hosts that do not require a proxy
//               connection.
//////////////////////////////////////////////////////////////////// 1 4 this 3 853  
150 0 0 4 165 820 0 0 483 ////////////////////////////////////////////////////////////////////
//     Function: HTTPClient::add_direct_host
//       Access: Published
//  Description: Adds the indicated name to the set of hostnames that
//               are connected to directly, without using a proxy.
//               This name may be either a DNS name or an IP address,
//               and it may include the * as a wildcard character.
//////////////////////////////////////////////////////////////////// 2 4 this 3 853  8 hostname 1 841  
151 0 0 6 166 841 0 0 483 ////////////////////////////////////////////////////////////////////
//     Function: HTTPClient::get_proxies_for_url
//       Access: Published
//  Description: Returns a semicolon-delimited list of proxies, in the
//               order in which they should be tried, that are
//               appropriate for the indicated URL.  The keyword
//               DIRECT indicates a direct connection should be tried.
//////////////////////////////////////////////////////////////////// 2 4 this 3 854  3 url 1 839  
152 0 0 4 167 820 0 0 765 ////////////////////////////////////////////////////////////////////
//     Function: HTTPClient::set_username
//       Access: Published
//  Description: Specifies the username:password string corresponding
//               to a particular server and/or realm, when demanded by
//               the server.  Either or both of the server or realm
//               may be empty; if so, they match anything.  Also, the
//               server may be set to the special string "*proxy",
//               which will match any proxy server.
//
//               If the username is set to the empty string, this
//               clears the password for the particular server/realm
//               pair.
//////////////////////////////////////////////////////////////////// 4 4 this 3 853  6 server 1 841  5 realm 1 841  8 username 1 841  
153 0 0 6 168 841 0 0 388 ////////////////////////////////////////////////////////////////////
//     Function: HTTPClient::get_username
//       Access: Published
//  Description: Returns the username:password string set for this
//               server/realm pair, or empty string if nothing has
//               been set.  See set_username().
//////////////////////////////////////////////////////////////////// 3 4 this 3 854  6 server 1 841  5 realm 1 841  
154 0 0 4 169 820 0 0 341 ////////////////////////////////////////////////////////////////////
//     Function: HTTPClient::set_cookie
//       Access: Published
//  Description: Stores the indicated cookie in the client's list of
//               cookies, as if it had been received from a server.
//////////////////////////////////////////////////////////////////// 2 4 this 3 853  6 cookie 1 851  
155 0 0 6 170 819 0 0 416 ////////////////////////////////////////////////////////////////////
//     Function: HTTPClient::clear_cookie
//       Access: Published
//  Description: Removes the cookie with the matching domain/path/name
//               from the client's list of cookies.  Returns true if
//               it was removed, false if the cookie was not matched.
//////////////////////////////////////////////////////////////////// 2 4 this 3 853  6 cookie 1 851  
156 0 0 4 171 820 0 0 276 ////////////////////////////////////////////////////////////////////
//     Function: HTTPClient::clear_all_cookies
//       Access: Published
//  Description: Removes the all stored cookies from the client.
//////////////////////////////////////////////////////////////////// 1 4 this 3 853  
157 0 0 6 172 819 0 0 366 ////////////////////////////////////////////////////////////////////
//     Function: HTTPClient::has_cookie
//       Access: Published
//  Description: Returns true if there is a cookie in the client
//               matching the given cookie's domain/path/name, false
//               otherwise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 854  6 cookie 1 851  
158 0 0 7 173 850 508 0 405 ////////////////////////////////////////////////////////////////////
//     Function: HTTPClient::get_cookie
//       Access: Published
//  Description: Looks up and returns the cookie in the client
//               matching the given cookie's domain/path/name.  If
//               there is no matching cookie, returns an empty cookie.
//////////////////////////////////////////////////////////////////// 2 4 this 3 854  6 cookie 1 851  
159 0 0 4 174 820 0 0 443 ////////////////////////////////////////////////////////////////////
//     Function: HTTPClient::copy_cookies_from
//       Access: Published
//  Description: Copies all the cookies from the indicated HTTPClient
//               into this one.  Existing cookies in this client are
//               not affected, unless they are shadowed by the new
//               cookies.
//////////////////////////////////////////////////////////////////// 2 4 this 3 853  5 other 1 854  
160 0 0 4 175 820 0 0 431 ////////////////////////////////////////////////////////////////////
//     Function: HTTPClient::write_cookies
//       Access: Published
//  Description: Outputs the complete list of cookies stored on the
//               client, for all domains, including the expired
//               cookies (which will normally not be sent back to a
//               host).
//////////////////////////////////////////////////////////////////// 2 4 this 3 854  3 out 1 833  
161 0 0 4 176 820 0 0 450 ////////////////////////////////////////////////////////////////////
//     Function: HTTPClient::send_cookies
//       Access: Published
//  Description: Writes to the indicated ostream a "Cookie" header
//               line for sending the cookies appropriate to the
//               indicated URL along with an HTTP request.  This also
//               removes expired cookies.
//////////////////////////////////////////////////////////////////// 3 4 this 3 853  3 out 1 833  3 url 1 839  
162 0 0 4 177 820 0 0 542 ////////////////////////////////////////////////////////////////////
//     Function: HTTPClient::set_client_certificate_filename
//       Access: Published
//  Description: Sets the filename of the pem-formatted file that will
//               be read for the client public and private keys if an
//               SSL server requests a certificate.  Either this or
//               set_client_certificate_pem() may be used to specify a
//               client certificate.
//////////////////////////////////////////////////////////////////// 2 4 this 3 853  8 filename 1 856  
163 0 0 4 178 820 0 0 551 ////////////////////////////////////////////////////////////////////
//     Function: HTTPClient::set_client_certificate_pem
//       Access: Published
//  Description: Sets the pem-formatted contents of the certificate
//               that will be parsed for the client public and private
//               keys if an SSL server requests a certificate.  Either
//               this or set_client_certificate_filename() may be used
//               to specify a client certificate.
//////////////////////////////////////////////////////////////////// 2 4 this 3 853  3 pem 1 841  
164 0 0 4 179 820 0 0 442 ////////////////////////////////////////////////////////////////////
//     Function: HTTPClient::set_client_certificate_passphrase
//       Access: Published
//  Description: Sets the passphrase used to decrypt the private key
//               in the certificate named by
//               set_client_certificate_filename() or
//               set_client_certificate_pem().
//////////////////////////////////////////////////////////////////// 2 4 this 3 853  10 passphrase 1 841  
165 0 0 6 180 819 0 0 690 ////////////////////////////////////////////////////////////////////
//     Function: HTTPClient::load_client_certificate
//       Access: Published
//  Description: Attempts to load the certificate named by
//               set_client_certificate_filename() immediately, and
//               returns true if successful, false otherwise.
//
//               Normally this need not be explicitly called, since it
//               will be called automatically if the server requests a
//               certificate, but it may be useful to determine ahead
//               of time if the certificate can be loaded correctly.
//////////////////////////////////////////////////////////////////// 1 4 this 3 853  
166 0 0 6 181 819 0 0 956 ////////////////////////////////////////////////////////////////////
//     Function: HTTPClient::add_preapproved_server_certificate_filename
//       Access: Published
//  Description: Adds the certificate defined in the indicated PEM
//               filename as a "pre-approved" certificate for the
//               indicated server, defined by the hostname and port
//               (only) from the given URL.
//
//               If the server offers this particular certificate on a
//               secure connection, it will be accepted without
//               question.  This is particularly useful for
//               communicating with a server using a known self-signed
//               certificate.
//
//               See also the similar
//               add_preapproved_server_certificate_pem(), and the
//               weaker add_preapproved_server_certificate_name().
//////////////////////////////////////////////////////////////////// 3 4 this 3 853  3 url 1 839  8 filename 1 856  
167 0 0 6 182 819 0 0 982 ////////////////////////////////////////////////////////////////////
//     Function: HTTPClient::add_preapproved_server_certificate_pem
//       Access: Published
//  Description: Adds the certificate defined in the indicated data
//               string, formatted as a PEM block, as a "pre-approved"
//               certificate for the indicated server, defined by the
//               hostname and port (only) from the given URL.
//
//               If the server offers this particular certificate on a
//               secure connection, it will be accepted without
//               question.  This is particularly useful for
//               communicating with a server using a known self-signed
//               certificate.
//
//               See also the similar
//               add_preapproved_server_certificate_filename(), and
//               the weaker add_preapproved_server_certificate_name().
//////////////////////////////////////////////////////////////////// 3 4 this 3 853  3 url 1 839  3 pem 1 841  
168 0 0 6 183 819 0 0 1358 ////////////////////////////////////////////////////////////////////
//     Function: HTTPClient::add_preapproved_server_certificate_name
//       Access: Published
//  Description: Adds the certificate *name* only, as a "pre-approved"
//               certificate name for the indicated server, defined by
//               the hostname and port (only) from the given URL.
//
//               This is a weaker function than
//               add_preapproved_server_certificate_filename().  This
//               checks only the subject name of the certificate,
//               without checking for a particular certificate by key.
//               This means that a variety of server certificates may
//               match the indicated name.
//
//               Because this is a weaker verification, it only
//               applies to server certificates that are signed by a
//               recognized certificate authority.  Thus, it cannot be
//               used to pre-approve self-signed certificates, but it
//               can be used to accept a server certificate offered by
//               a different hostname than the one in the cert itself.
//
//               The certificate name should be formatted in the form
//               /type0=value0/type1=value1/type2=...
//////////////////////////////////////////////////////////////////// 3 4 this 3 853  3 url 1 839  4 name 1 841  
169 0 0 4 184 820 0 0 344 ////////////////////////////////////////////////////////////////////
//     Function: HTTPClient::clear_preapproved_server_certificates
//       Access: Published
//  Description: Removes all preapproved server certificates for the
//               indicated server and port.
//////////////////////////////////////////////////////////////////// 2 4 this 3 853  3 url 1 839  
170 0 0 4 185 820 0 0 330 ////////////////////////////////////////////////////////////////////
//     Function: HTTPClient::clear_all_preapproved_server_certificates
//       Access: Published
//  Description: Removes all preapproved server certificates for all
//               servers.
//////////////////////////////////////////////////////////////////// 1 4 this 3 853  
171 0 0 4 186 820 0 0 483 ////////////////////////////////////////////////////////////////////
//     Function: HTTPClient::set_http_version
//       Access: Published
//  Description: Specifies the version of HTTP that the client uses to
//               identify itself to the server.  The default is HV_11,
//               or HTTP 1.0; you can set this to HV_10 (HTTP 1.0) to
//               request the server use the older interface.
//////////////////////////////////////////////////////////////////// 2 4 this 3 853  7 version 1 791  
172 0 0 6 187 791 0 0 324 ////////////////////////////////////////////////////////////////////
//     Function: HTTPClient::get_http_version
//       Access: Published
//  Description: Returns the client's current setting for HTTP
//               version.  See set_http_version().
//////////////////////////////////////////////////////////////////// 1 4 this 3 854  
173 0 0 6 188 841 0 0 336 ////////////////////////////////////////////////////////////////////
//     Function: HTTPClient::get_http_version_string
//       Access: Published
//  Description: Returns the current HTTP version setting as a string,
//               e.g. "HTTP/1.0" or "HTTP/1.1".
//////////////////////////////////////////////////////////////////// 1 4 this 3 854  
174 0 0 6 189 791 0 0 464 ////////////////////////////////////////////////////////////////////
//     Function: HTTPClient::parse_http_version_string
//       Access: Published
//  Description: Matches the string representing a particular HTTP
//               version against any of the known versions and returns
//               the appropriate enumerated value, or HV_other if the
//               version is unknown.
//////////////////////////////////////////////////////////////////// 1 7 version 1 841  
175 0 0 6 190 819 0 0 539 ////////////////////////////////////////////////////////////////////
//     Function: HTTPClient::load_certificates
//       Access: Published
//  Description: Reads the certificate(s) (delimited by -----BEGIN
//               CERTIFICATE----- and -----END CERTIFICATE-----) from
//               the indicated file and makes them known as trusted
//               public keys for validating future connections.
//               Returns true on success, false otherwise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 853  8 filename 1 856  
176 0 0 4 192 820 0 0 556 ////////////////////////////////////////////////////////////////////
//     Function: HTTPClient::set_verify_ssl
//       Access: Published
//  Description: Specifies whether the client will insist on verifying
//               the identity of the servers it connects to via SSL
//               (that is, https).  
//
//               The parameter value is an enumerated type which
//               indicates the level of security to which the client
//               will insist upon.
//////////////////////////////////////////////////////////////////// 2 4 this 3 853  10 verify_ssl 1 797  
177 0 0 6 193 797 0 0 403 ////////////////////////////////////////////////////////////////////
//     Function: HTTPClient::get_verify_ssl
//       Access: Published
//  Description: Returns whether the client will insist on verifying
//               the identity of the servers it connects to via SSL
//               (that is, https).  See set_verify_ssl().
//////////////////////////////////////////////////////////////////// 1 4 this 3 854  
178 0 0 4 194 820 0 0 715 ////////////////////////////////////////////////////////////////////
//     Function: HTTPClient::set_cipher_list
//       Access: Published
//  Description: Specifies the set of ciphers that are to be made
//               available for SSL connections.  This is a string as
//               described in the ciphers(1) man page of the OpenSSL
//               documentation (or see
//               http://www.openssl.org/docs/apps/ciphers.html ).  If
//               this is not specified, the default is provided by the
//               Config file.  You may also specify "DEFAULT" to use
//               the built-in OpenSSL default value.
//////////////////////////////////////////////////////////////////// 2 4 this 3 853  11 cipher_list 1 841  
179 0 0 6 195 841 0 0 323 ////////////////////////////////////////////////////////////////////
//     Function: HTTPClient::get_cipher_list
//       Access: Published
//  Description: Returns the set of ciphers as set by
//               set_cipher_list().  See set_cipher_list().
//////////////////////////////////////////////////////////////////// 1 4 this 3 854  
180 0 0 7 196 859 0 0 1184 ////////////////////////////////////////////////////////////////////
//     Function: HTTPClient::make_channel
//       Access: Published
//  Description: Returns a new HTTPChannel object that may be used
//               for reading multiple documents using the same
//               connection, for greater network efficiency than
//               calling HTTPClient::get_document() repeatedly (which
//               would force a new connection for each document).
//
//               Also, HTTPChannel has some additional, less common
//               interface methods than the basic interface methods
//               that exist on HTTPClient; if you wish to call any of
//               these methods you must first obtain an HTTPChannel.
//
//               Pass true for persistent_connection to gain this
//               network efficiency.  If, on the other hand, your
//               intention is to use the channel to retrieve only one
//               document, then pass false to inform the server that
//               we will be dropping the connection after the first
//               document.
//////////////////////////////////////////////////////////////////// 2 4 this 3 853  21 persistent_connection 1 819  
181 0 0 7 197 859 0 0 531 ////////////////////////////////////////////////////////////////////
//     Function: HTTPClient::post_form
//       Access: Published
//  Description: Posts form data to a particular URL and retrieves the
//               response.  Returns a new HTTPChannel object whether
//               the document is successfully read or not; you can
//               test is_valid() and get_return_code() to determine
//               whether the document was retrieved.
//////////////////////////////////////////////////////////////////// 3 4 this 3 853  3 url 1 839  4 body 1 841  
182 0 0 7 198 859 0 0 508 ////////////////////////////////////////////////////////////////////
//     Function: HTTPClient::get_document
//       Access: Published
//  Description: Opens the named document for reading.  Returns a new
//               HTTPChannel object whether the document is
//               successfully read or not; you can test is_valid() and
//               get_return_code() to determine whether the document
//               was retrieved.
//////////////////////////////////////////////////////////////////// 2 4 this 3 853  3 url 1 839  
183 0 0 7 199 859 0 0 522 ////////////////////////////////////////////////////////////////////
//     Function: HTTPClient::get_header
//       Access: Published
//  Description: Like get_document(), except only the header
//               associated with the document is retrieved.  This may
//               be used to test for existence of the document; it
//               might also return the size of the document (if the
//               server gives us this information).
//////////////////////////////////////////////////////////////////// 2 4 this 3 853  3 url 1 839  
184 0 0 6 200 841 0 0 489 ////////////////////////////////////////////////////////////////////
//     Function: HTTPClient::base64_encode
//       Access: Published, Static
//  Description: Implements HTTPAuthorization::base64_encode().  This
//               is provided here just as a convenient place to
//               publish it for access by the scripting language; C++
//               code should probably use HTTPAuthorization directly.
//////////////////////////////////////////////////////////////////// 1 1 s 1 841  
185 0 0 6 201 841 0 0 489 ////////////////////////////////////////////////////////////////////
//     Function: HTTPClient::base64_decode
//       Access: Published, Static
//  Description: Implements HTTPAuthorization::base64_decode().  This
//               is provided here just as a convenient place to
//               publish it for access by the scripting language; C++
//               code should probably use HTTPAuthorization directly.
//////////////////////////////////////////////////////////////////// 1 1 s 1 841  
186 0 0 7 202 853 0 0 272 ////////////////////////////////////////////////////////////////////
//     Function: HTTPClient::get_global_ptr
//       Access: Published, Static
//  Description: Returns the default global HTTPClient.
//////////////////////////////////////////////////////////////////// 0 
187 0 0 7 204 860 590 0 226 ////////////////////////////////////////////////////////////////////
//     Function: HTTPEntityTag::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 0 
188 0 0 7 204 860 590 0 230 ////////////////////////////////////////////////////////////////////
//     Function: HTTPEntityTag::Copy Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 861  
189 0 0 7 204 860 590 0 328 ////////////////////////////////////////////////////////////////////
//     Function: HTTPEntityTag::Constructor
//       Access: Published
//  Description: This constructor accepts an explicit weak flag and a
//               literal (not quoted) tag string.
//////////////////////////////////////////////////////////////////// 2 4 weak 1 819  3 tag 1 841  
190 0 0 7 204 860 590 0 380 ////////////////////////////////////////////////////////////////////
//     Function: HTTPEntityTag::Constructor
//       Access: Published
//  Description: This constructor accepts a string as formatted from
//               an HTTP server (e.g. the tag is quoted, with an
//               optional W/ prefix.)
//////////////////////////////////////////////////////////////////// 1 4 text 1 841  
191 0 0 6 205 860 0 0 0 2 4 this 3 860  4 copy 1 861  
192 0 0 6 206 819 0 0 525 ////////////////////////////////////////////////////////////////////
//     Function: HTTPEntityTag::is_weak
//       Access: Published
//  Description: Returns true if the entity tag is marked as "weak".
//               A consistent weak entity tag does not guarantee that
//               its resource has not changed in any way, but it does
//               promise that the resource has not changed in any
//               semantically meaningful way.
//////////////////////////////////////////////////////////////////// 1 4 this 3 861  
193 0 0 6 207 841 0 0 258 ////////////////////////////////////////////////////////////////////
//     Function: HTTPEntityTag::get_tag
//       Access: Published
//  Description: Returns the tag as a literal string.
//////////////////////////////////////////////////////////////////// 1 4 this 3 861  
194 0 0 6 208 841 0 0 372 ////////////////////////////////////////////////////////////////////
//     Function: HTTPEntityTag::get_string
//       Access: Published
//  Description: Returns the entity tag formatted for sending to an
//               HTTP server (the tag is quoted, with a conditional W/
//               prefix).
//////////////////////////////////////////////////////////////////// 1 4 this 3 861  
195 0 0 6 209 819 0 0 345 ////////////////////////////////////////////////////////////////////
//     Function: HTTPEntityTag::strong_equiv
//       Access: Published
//  Description: Returns true if the two tags have "strong" equivalence:
//               they are the same tag, and both are "strong".
//////////////////////////////////////////////////////////////////// 2 4 this 3 861  5 other 1 861  
196 0 0 6 210 819 0 0 349 ////////////////////////////////////////////////////////////////////
//     Function: HTTPEntityTag::weak_equiv
//       Access: Published
//  Description: Returns true if the two tags have "weak" equivalence:
//               they are the same tag, and one or both may be "weak".
//////////////////////////////////////////////////////////////////// 2 4 this 3 861  5 other 1 861  
197 0 0 6 211 819 0 0 0 2 4 this 3 861  5 other 1 861  
198 0 0 6 212 819 0 0 0 2 4 this 3 861  5 other 1 861  
199 0 0 6 213 819 0 0 0 2 4 this 3 861  5 other 1 861  
200 0 0 6 214 821 0 0 409 ////////////////////////////////////////////////////////////////////
//     Function: HTTPEntityTag::compare_to
//       Access: Published
//  Description: Returns a number less than zero if this HTTPEntityTag
//               sorts before the other one, greater than zero if it
//               sorts after, or zero if they are equivalent.
//////////////////////////////////////////////////////////////////// 2 4 this 3 861  5 other 1 861  
201 0 0 4 215 820 0 0 221 ////////////////////////////////////////////////////////////////////
//     Function: HTTPEntityTag::output
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 861  3 out 1 833  
202 0 0 7 218 863 614 0 224 ////////////////////////////////////////////////////////////////////
//     Function: DocumentSpec::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
203 0 0 7 218 863 614 0 229 ////////////////////////////////////////////////////////////////////
//     Function: DocumentSpec::Copy Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 864  
204 0 0 7 218 863 614 0 224 ////////////////////////////////////////////////////////////////////
//     Function: DocumentSpec::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 3 url 1 839  
205 0 0 7 218 863 614 0 224 ////////////////////////////////////////////////////////////////////
//     Function: DocumentSpec::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 3 url 1 841  
206 0 0 6 219 863 0 0 0 2 4 this 3 863  4 copy 1 864  
207 0 0 6 220 819 0 0 0 2 4 this 3 864  5 other 1 864  
208 0 0 6 221 819 0 0 0 2 4 this 3 864  5 other 1 864  
209 0 0 6 222 819 0 0 0 2 4 this 3 864  5 other 1 864  
210 0 0 6 223 821 0 0 224 ////////////////////////////////////////////////////////////////////
//     Function: DocumentSpec::compare_to
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 864  5 other 1 864  
211 0 0 4 224 820 0 0 598 ////////////////////////////////////////////////////////////////////
//     Function: DocumentSpec::set_url
//       Access: Published
//  Description: Changes the URL of the DocumentSpec without modifying
//               its other properties.  Normally this would be a
//               strange thing to do, because the tag and date are
//               usually strongly associated with the URL.  To get a
//               DocumentSpec pointing to a new URL, you would
//               normally create a new DocumentSpec object.
//////////////////////////////////////////////////////////////////// 2 4 this 3 863  3 url 1 839  
212 0 0 6 225 839 0 0 259 ////////////////////////////////////////////////////////////////////
//     Function: DocumentSpec::get_url
//       Access: Published
//  Description: Retrieves the URL of the DocumentSpec.
//////////////////////////////////////////////////////////////////// 1 4 this 3 864  
213 0 0 4 226 820 0 0 296 ////////////////////////////////////////////////////////////////////
//     Function: DocumentSpec::set_tag
//       Access: Published
//  Description: Changes the identity tag associated with the
//               DocumentSpec.
//////////////////////////////////////////////////////////////////// 2 4 this 3 863  3 tag 1 861  
214 0 0 6 227 819 0 0 306 ////////////////////////////////////////////////////////////////////
//     Function: DocumentSpec::has_tag
//       Access: Published
//  Description: Returns true if an identity tag is associated with
//               the DocumentSpec.
//////////////////////////////////////////////////////////////////// 1 4 this 3 864  
215 0 0 6 228 861 0 0 524 ////////////////////////////////////////////////////////////////////
//     Function: DocumentSpec::get_tag
//       Access: Published
//  Description: Returns the identity tag associated with the
//               DocumentSpec, if there is one.  It is an error to
//               call this if has_tag() returns false.
//
//               The identity tag is set by the HTTP server to
//               uniquely refer to a particular version of a document.
//////////////////////////////////////////////////////////////////// 1 4 this 3 864  
216 0 0 4 229 820 0 0 315 ////////////////////////////////////////////////////////////////////
//     Function: DocumentSpec::clear_tag
//       Access: Published
//  Description: Removes the identity tag associated with the
//               DocumentSpec, if there is one.
//////////////////////////////////////////////////////////////////// 1 4 this 3 863  
217 0 0 4 230 820 0 0 303 ////////////////////////////////////////////////////////////////////
//     Function: DocumentSpec::set_date
//       Access: Published
//  Description: Changes the last-modified date associated with the
//               DocumentSpec.
//////////////////////////////////////////////////////////////////// 2 4 this 3 863  4 date 1 846  
218 0 0 6 231 819 0 0 312 ////////////////////////////////////////////////////////////////////
//     Function: DocumentSpec::has_date
//       Access: Published
//  Description: Returns true if a last-modified date is associated
//               with the DocumentSpec.
//////////////////////////////////////////////////////////////////// 1 4 this 3 864  
219 0 0 6 232 846 0 0 395 ////////////////////////////////////////////////////////////////////
//     Function: DocumentSpec::get_date
//       Access: Published
//  Description: Returns the last-modified date associated with the
//               DocumentSpec, if there is one.  It is an error to
//               call this if has_date() returns false.
//////////////////////////////////////////////////////////////////// 1 4 this 3 864  
220 0 0 4 233 820 0 0 322 ////////////////////////////////////////////////////////////////////
//     Function: DocumentSpec::clear_date
//       Access: Published
//  Description: Removes the last-modified date associated with the
//               DocumentSpec, if there is one.
//////////////////////////////////////////////////////////////////// 1 4 this 3 863  
221 0 0 4 235 820 0 0 1984 ////////////////////////////////////////////////////////////////////
//     Function: DocumentSpec::set_request_mode
//       Access: Published
//  Description: Sets the request mode of this DocumentSpec.  This is
//               only relevant when using the DocumentSpec to generate
//               a request (for instance, in HTTPChannel).  This
//               specifies whether the document request will ask the
//               server for a newer version than the indicated
//               version, or the exact version, neither, or either.
//
//               The possible values are:
//
//                 RM_any: ignore date and tag (if specified), and
//                 retrieve any document that matches the URL.  For a
//                 subrange request, if the document matches the
//                 version indicated exactly, retrieve the subrange
//                 only; otherwise, retrieve the entire document.
//
//                 RM_equal: request only the precise version of the
//                 document that matches the particular date and/or
//                 tag exactly, if specified; fail if this version is
//                 not available.
//
//                 RM_newer: request any document that is newer than
//                 the version indicated by the particular date and/or
//                 tag; fail if only that version (or older versions)
//                 are available.
//
//                 RM_newer_or_equal: request any document that
//                 matches the version indicated by the particular
//                 date and/or tag, or is a newer version; fail if
//                 only older versions are available.
//
//               In any of the above, you may specify either or both
//               of the last-modified date and the identity tag,
//               whichever is known to the client.
//
//               The default mode is RM_any.
//////////////////////////////////////////////////////////////////// 2 4 this 3 863  12 request_mode 1 800  
222 0 0 6 236 800 0 0 318 ////////////////////////////////////////////////////////////////////
//     Function: DocumentSpec::get_request_mode
//       Access: Published
//  Description: Returns the request mode of this DocumentSpec.  See
//               set_request_mode().
//////////////////////////////////////////////////////////////////// 1 4 this 3 864  
223 0 0 4 238 820 0 0 1075 ////////////////////////////////////////////////////////////////////
//     Function: DocumentSpec::set_cache_control
//       Access: Published
//  Description: Specifies what kind of cached value is acceptable for
//               this document.  Warning: some HTTP proxies may not
//               respect this setting and may return a cached result
//               anyway.
//
//                 CC_allow_cache: the normal HTTP behavior; the
//                 server may return a cached value if it believes it
//                 is valid.
//
//                 CC_revalidate: a proxy is forced to contact the
//                 origin server and verify that is cached value is in
//                 fact still valid before it returns it.
//
//                 CC_no_cache: a proxy must not return its cached
//                 value at all, but is forced to go all the way back
//                 to the origin server for the official document.
//
//               The default mode is CC_allow_cache.
//////////////////////////////////////////////////////////////////// 2 4 this 3 863  13 cache_control 1 801  
224 0 0 6 239 801 0 0 320 ////////////////////////////////////////////////////////////////////
//     Function: DocumentSpec::get_cache_control
//       Access: Published
//  Description: Returns the request mode of this DocumentSpec.  See
//               set_cache_control().
//////////////////////////////////////////////////////////////////// 1 4 this 3 864  
225 0 0 6 240 819 0 0 391 ////////////////////////////////////////////////////////////////////
//     Function: DocumentSpec::input
//       Access: Published
//  Description: Can be used to read in the DocumentSpec from a stream
//               generated either by output() or write().  Returns
//               true on success, false on failure.
//////////////////////////////////////////////////////////////////// 2 4 this 3 863  2 in 1 831  
226 0 0 4 241 820 0 0 220 ////////////////////////////////////////////////////////////////////
//     Function: DocumentSpec::output
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 864  3 out 1 833  
227 0 0 4 242 820 0 0 219 ////////////////////////////////////////////////////////////////////
//     Function: DocumentSpec::write
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 3 4 this 3 864  3 out 1 833  12 indent_level 1 821  
228 0 0 7 247 853 0 0 276 ////////////////////////////////////////////////////////////////////
//     Function: HTTPChannel::get_client
//       Access: Published
//  Description: Returns the HTTPClient object that owns this channel.
//////////////////////////////////////////////////////////////////// 1 4 this 3 866  
229 0 0 6 248 819 0 0 367 ////////////////////////////////////////////////////////////////////
//     Function: HTTPChannel::is_valid
//       Access: Published
//  Description: Returns true if the last-requested document was
//               successfully retrieved and is ready to be read, false
//               otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 866  
230 0 0 6 249 819 0 0 410 ////////////////////////////////////////////////////////////////////
//     Function: HTTPChannel::is_connection_ready
//       Access: Published
//  Description: Returns true if a connection has been established to
//               the named server in a previous call to connect_to()
//               or begin_connect_to(), false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 866  
231 0 0 6 250 839 0 0 572 ////////////////////////////////////////////////////////////////////
//     Function: HTTPChannel::get_url
//       Access: Published
//  Description: Returns the URL that was used to retrieve the
//               most recent document: whatever URL was last passed to
//               get_document() or get_header().  If a redirect has
//               transparently occurred, this will return the new,
//               redirected URL (the actual URL at which the document
//               was located).
//////////////////////////////////////////////////////////////////// 1 4 this 3 866  
232 0 0 6 251 864 0 0 703 ////////////////////////////////////////////////////////////////////
//     Function: HTTPChannel::get_document_spec
//       Access: Published
//  Description: Returns the DocumentSpec associated with the most
//               recent document.  This includes its actual URL
//               (following redirects) along with the identity tag and
//               last-modified date, if supplied by the server.
//
//               This structure may be saved and used to retrieve the
//               same version of the document later, or to
//               conditionally retrieve a newer version if it is
//               available.
//////////////////////////////////////////////////////////////////// 1 4 this 3 866  
233 0 0 6 252 791 0 0 385 ////////////////////////////////////////////////////////////////////
//     Function: HTTPChannel::get_http_version
//       Access: Published
//  Description: Returns the HTTP version number returned by the
//               server, as one of the HTTPClient enumerated types,
//               e.g. HTTPClient::HV_11.
//////////////////////////////////////////////////////////////////// 1 4 this 3 866  
234 0 0 6 253 841 0 0 348 ////////////////////////////////////////////////////////////////////
//     Function: HTTPChannel::get_http_version_string
//       Access: Published
//  Description: Returns the HTTP version number returned by the
//               server, formatted as a string, e.g. "HTTP/1.1".
//////////////////////////////////////////////////////////////////// 1 4 this 3 866  
235 0 0 6 254 821 0 0 853 ////////////////////////////////////////////////////////////////////
//     Function: HTTPChannel::get_status_code
//       Access: Published
//  Description: Returns the HTML return code from the document
//               retrieval request.  This will be in the 200 range if
//               the document is successfully retrieved, or some other
//               value in the case of an error.
//
//               Some proxy errors during an https-over-proxy request
//               would return the same status code as a different
//               error that occurred on the host server.  To
//               differentiate these cases, status codes that are
//               returned by the proxy during the CONNECT phase
//               (except code 407) are incremented by 1000.
//////////////////////////////////////////////////////////////////// 1 4 this 3 866  
236 0 0 6 255 841 0 0 383 ////////////////////////////////////////////////////////////////////
//     Function: HTTPChannel::get_status_string
//       Access: Published
//  Description: Returns the string as returned by the server
//               describing the status code for humans.  This may or
//               may not be meaningful.
//////////////////////////////////////////////////////////////////// 1 4 this 3 866  
237 0 0 6 256 841 0 0 668 ////////////////////////////////////////////////////////////////////
//     Function: HTTPChannel::get_www_realm
//       Access: Published
//  Description: If the document failed to connect because of a 401
//               (Authorization required), this method will return the
//               "realm" returned by the server in which the requested
//               document must be authenticated.  This string may be
//               presented to the user to request an associated
//               username and password (which then should be stored in
//               HTTPClient::set_username()).
//////////////////////////////////////////////////////////////////// 1 4 this 3 866  
238 0 0 6 257 841 0 0 604 ////////////////////////////////////////////////////////////////////
//     Function: HTTPChannel::get_proxy_realm
//       Access: Published
//  Description: If the document failed to connect because of a 407
//               (Proxy authorization required), this method will
//               return the "realm" returned by the proxy.  This
//               string may be presented to the user to request an
//               associated username and password (which then should
//               be stored in HTTPClient::set_username()).
//////////////////////////////////////////////////////////////////// 1 4 this 3 866  
239 0 0 6 258 839 0 0 670 ////////////////////////////////////////////////////////////////////
//     Function: HTTPChannel::get_redirect
//       Access: Published
//  Description: If the document failed with a redirect code (300
//               series), this will generally contain the new URL the
//               server wants us to try.  In many cases, the client
//               will automatically follow redirects; if these are
//               successful the client will return a successful code
//               and get_redirect() will return empty, but get_url()
//               will return the new, redirected URL.
//////////////////////////////////////////////////////////////////// 1 4 this 3 866  
240 0 0 6 259 841 0 0 409 ////////////////////////////////////////////////////////////////////
//     Function: HTTPChannel::get_header_value
//       Access: Published
//  Description: Returns the HTML header value associated with the
//               indicated key, or empty string if the key was not
//               defined in the message returned by the server.
//////////////////////////////////////////////////////////////////// 2 4 this 3 866  3 key 1 841  
241 0 0 6 260 821 0 0 498 ////////////////////////////////////////////////////////////////////
//     Function: HTTPChannel::get_num_redirect_steps
//       Access: Published
//  Description: If the document automatically followed one or more
//               redirects, this will return the number of redirects
//               that were automatically followed.  Use
//               get_redirect_step() to retrieve each URL in
//               sequence.
//////////////////////////////////////////////////////////////////// 1 4 this 3 866  
242 0 0 6 261 839 0 0 446 ////////////////////////////////////////////////////////////////////
//     Function: HTTPChannel::get_redirect_step
//       Access: Published
//  Description: Use in conjunction with get_num_redirect_steps() to
//               extract the chain of URL's that the channel was
//               automatically redirected through to arrive at the
//               final document.
//////////////////////////////////////////////////////////////////// 2 4 this 3 866  1 n 1 821  
243 0 0 4 262 820 0 0 894 ////////////////////////////////////////////////////////////////////
//     Function: HTTPChannel::set_persistent_connection
//       Access: Published
//  Description: Indicates whether the HTTPChannel should try to keep
//               the connection to the server open and reuse that
//               connection for multiple documents, or whether it
//               should close the connection and open a new one for
//               each request.  Set this true to keep the connections
//               around when possible, false to recycle them.
//
//               It makes most sense to set this false when the
//               HTTPChannel will be used only once to retrieve a
//               single document, true when you will be using the same
//               HTTPChannel object to retrieve multiple documents.
//////////////////////////////////////////////////////////////////// 2 4 this 3 859  21 persistent_connection 1 819  
244 0 0 6 263 819 0 0 553 ////////////////////////////////////////////////////////////////////
//     Function: HTTPChannel::get_persistent_connection
//       Access: Published
//  Description: Returns whether the HTTPChannel should try to keep
//               the connection to the server open and reuse that
//               connection for multiple documents, or whether it
//               should close the connection and open a new one for
//               each request.  See set_persistent_connection().
//////////////////////////////////////////////////////////////////// 1 4 this 3 866  
245 0 0 6 264 819 0 0 485 ////////////////////////////////////////////////////////////////////
//     Function: HTTPChannel::will_close_connection
//       Access: Published
//  Description: Returns true if the server has indicated it will
//               close the connection after this document has been
//               read, or false if it will remain open (and future
//               documents may be requested on the same connection).
//////////////////////////////////////////////////////////////////// 1 4 this 3 866  
246 0 0 4 265 820 0 0 615 ////////////////////////////////////////////////////////////////////
//     Function: HTTPChannel::set_allow_proxy
//       Access: Published
//  Description: If this is true (the normal case), the HTTPClient
//               will be consulted for information about the proxy to
//               be used for each connection via this HTTPChannel.  If
//               this has been set to false by the user, then all
//               connections will be made directly, regardless of the
//               proxy settings indicated on the HTTPClient.
//////////////////////////////////////////////////////////////////// 2 4 this 3 859  11 allow_proxy 1 819  
247 0 0 6 266 819 0 0 615 ////////////////////////////////////////////////////////////////////
//     Function: HTTPChannel::get_allow_proxy
//       Access: Published
//  Description: If this is true (the normal case), the HTTPClient
//               will be consulted for information about the proxy to
//               be used for each connection via this HTTPChannel.  If
//               this has been set to false by the user, then all
//               connections will be made directly, regardless of the
//               proxy settings indicated on the HTTPClient.
//////////////////////////////////////////////////////////////////// 1 4 this 3 866  
248 0 0 4 267 820 0 0 1220 ////////////////////////////////////////////////////////////////////
//     Function: HTTPChannel::set_proxy_tunnel
//       Access: Published
//  Description: Normally, a proxy is itself asked for ordinary URL's,
//               and the proxy decides whether to hand the client a
//               cached version of the document or to contact the
//               server for a fresh version.  The proxy may also
//               modify the headers and transfer encoding on the way.
//
//               If this is set to true, then instead of asking for
//               URL's from the proxy, we will ask the proxy to open a
//               connection to the server (for instance, on port 80);
//               if the proxy honors this request, then we contact the
//               server directly through this connection to retrieve
//               the document.  If the proxy does not honor the
//               connect request, then the retrieve operation fails.
//
//               SSL connections (e.g. https), and connections through
//               a Socks proxy, are always tunneled, regardless of the
//               setting of this flag.
//////////////////////////////////////////////////////////////////// 2 4 this 3 859  12 proxy_tunnel 1 819  
249 0 0 6 268 819 0 0 418 ////////////////////////////////////////////////////////////////////
//     Function: HTTPChannel::get_proxy_tunnel
//       Access: Published
//  Description: Returns true if connections always tunnel through a
//               proxy, or false (the normal case) if we allow the
//               proxy to serve up documents.  See set_proxy_tunnel().
//////////////////////////////////////////////////////////////////// 1 4 this 3 866  
250 0 0 4 269 820 0 0 633 ////////////////////////////////////////////////////////////////////
//     Function: HTTPChannel::set_connect_timeout
//       Access: Published
//  Description: Sets the maximum length of time, in seconds, that the
//               channel will wait before giving up on establishing a
//               TCP connection.
//
//               At present, this is used only for the nonblocking
//               interfaces (e.g. begin_get_document(),
//               begin_connect_to()), but it is used whether
//               set_blocking_connect() is true or false.
//////////////////////////////////////////////////////////////////// 2 4 this 3 859  15 timeout_seconds 1 829  
251 0 0 6 270 829 0 0 382 ////////////////////////////////////////////////////////////////////
//     Function: HTTPChannel::get_connect_timeout
//       Access: Published
//  Description: Returns the length of time, in seconds, to wait for a
//               new nonblocking socket to connect.  See
//               set_connect_timeout().
//////////////////////////////////////////////////////////////////// 1 4 this 3 866  
252 0 0 4 271 820 0 0 1043 ////////////////////////////////////////////////////////////////////
//     Function: HTTPChannel::set_blocking_connect
//       Access: Published
//  Description: If this flag is true, a socket connect will block
//               even for nonblocking I/O calls like
//               begin_get_document(), begin_connect_to(), etc.  If
//               false, a socket connect will not block for
//               nonblocking I/O calls, but will block for blocking
//               I/O calls (get_document(), connect_to(), etc.).
//
//               Setting this true is useful when you want to use
//               non-blocking I/O once you have established the
//               connection, but you don't want to bother with polling
//               for the initial connection.  It's also useful when
//               you don't particularly care about non-blocking I/O,
//               but you need to respect timeouts like connect_timeout
//               and http_timeout.
//////////////////////////////////////////////////////////////////// 2 4 this 3 859  16 blocking_connect 1 819  
253 0 0 6 272 819 0 0 596 ////////////////////////////////////////////////////////////////////
//     Function: HTTPChannel::get_blocking_connect
//       Access: Published
//  Description: If this flag is true, a socket connect will block
//               even for nonblocking I/O calls like
//               begin_get_document(), begin_connect_to(), etc.  If
//               false, a socket connect will not block for
//               nonblocking I/O calls, but will block for blocking
//               I/O calls (get_document(), connect_to(), etc.).
//////////////////////////////////////////////////////////////////// 1 4 this 3 866  
254 0 0 4 273 820 0 0 838 ////////////////////////////////////////////////////////////////////
//     Function: HTTPChannel::set_http_timeout
//       Access: Published
//  Description: Sets the maximum length of time, in seconds, that the
//               channel will wait for the HTTP server to finish
//               sending its response to our request.
//
//               The timer starts counting after the TCP connection
//               has been established (see set_connect_timeout(),
//               above) and the request has been sent.
//
//               At present, this is used only for the nonblocking
//               interfaces (e.g. begin_get_document(),
//               begin_connect_to()), but it is used whether
//               set_blocking_connect() is true or false.
//////////////////////////////////////////////////////////////////// 2 4 this 3 859  15 timeout_seconds 1 829  
255 0 0 6 274 829 0 0 383 ////////////////////////////////////////////////////////////////////
//     Function: HTTPChannel::get_http_timeout
//       Access: Published
//  Description: Returns the length of time, in seconds, to wait for 
//               the HTTP server to respond to our request.  See
//               set_http_timeout().
//////////////////////////////////////////////////////////////////// 1 4 this 3 866  
256 0 0 4 275 820 0 0 1032 ////////////////////////////////////////////////////////////////////
//     Function: HTTPChannel::set_skip_body_size
//       Access: Published
//  Description: Specifies the maximum number of bytes in a received
//               (but unwanted) body that will be skipped past, in
//               order to reset to a new request.
//
//               That is, if this HTTPChannel requests a file via
//               get_document(), but does not call download_to_ram(),
//               download_to_file(), or open_read_body(), and instead
//               immediately requests a new file, then the HTTPChannel
//               has a choice whether to skip past the unwanted
//               document, or to close the connection and open a new
//               one.  If the number of bytes to skip is more than
//               this threshold, the connection will be closed;
//               otherwise, the data will simply be read and
//               discarded.
//////////////////////////////////////////////////////////////////// 2 4 this 3 859  14 skip_body_size 1 842  
257 0 0 6 276 842 0 0 441 ////////////////////////////////////////////////////////////////////
//     Function: HTTPChannel::get_skip_body_size
//       Access: Published
//  Description: Returns the maximum number of bytes in a received
//               (but unwanted) body that will be skipped past, in
//               order to reset to a new request.  See
//               set_skip_body_size().
//////////////////////////////////////////////////////////////////// 1 4 this 3 866  
258 0 0 4 277 820 0 0 712 ////////////////////////////////////////////////////////////////////
//     Function: HTTPChannel::set_idle_timeout
//       Access: Published
//  Description: Specifies the amount of time, in seconds, in which a
//               previously-established connection is allowed to
//               remain open and unused.  If a previous connection has
//               remained unused for at least this number of seconds,
//               it will be closed and a new connection will be
//               opened; otherwise, the same connection will be reused
//               for the next request (for this particular
//               HTTPChannel).
//////////////////////////////////////////////////////////////////// 2 4 this 3 859  12 idle_timeout 1 829  
259 0 0 6 278 829 0 0 411 ////////////////////////////////////////////////////////////////////
//     Function: HTTPChannel::get_idle_timeout
//       Access: Published
//  Description: Returns the amount of time, in seconds, in which an
//               previously-established connection is allowed to
//               remain open and unused.  See set_idle_timeout().
//////////////////////////////////////////////////////////////////// 1 4 this 3 866  
260 0 0 4 279 820 0 0 1100 ////////////////////////////////////////////////////////////////////
//     Function: HTTPChannel::set_download_throttle
//       Access: Published
//  Description: Specifies whether nonblocking downloads (via
//               download_to_file() or download_to_ram()) will be
//               limited so as not to use all available bandwidth.
//
//               If this is true, when a download has been started on
//               this channel it will be invoked no more frequently
//               than get_max_updates_per_second(), and the total
//               bandwidth used by the download will be no more than
//               get_max_bytes_per_second().  If this is false,
//               downloads will proceed as fast as the server can send
//               the data.
//
//               This only has effect on the nonblocking I/O methods
//               like begin_get_document(), etc.  The blocking methods
//               like get_document() always use as much CPU and
//               bandwidth as they can get.
//////////////////////////////////////////////////////////////////// 2 4 this 3 859  17 download_throttle 1 819  
261 0 0 6 280 819 0 0 349 ////////////////////////////////////////////////////////////////////
//     Function: HTTPChannel::get_download_throttle
//       Access: Published
//  Description: Returns whether the nonblocking downloads will be
//               bandwidth-limited.  See set_download_throttle().
//////////////////////////////////////////////////////////////////// 1 4 this 3 866  
262 0 0 4 281 820 0 0 449 ////////////////////////////////////////////////////////////////////
//     Function: HTTPChannel::set_max_bytes_per_second
//       Access: Published
//  Description: When bandwidth throttling is in effect (see
//               set_download_throttle()), this specifies the maximum
//               number of bytes per second that may be consumed by
//               this channel.
//////////////////////////////////////////////////////////////////// 2 4 this 3 859  20 max_bytes_per_second 1 829  
263 0 0 6 282 829 0 0 392 ////////////////////////////////////////////////////////////////////
//     Function: HTTPChannel::get_max_bytes_per_second
//       Access: Published
//  Description: Returns the maximum number of bytes per second that
//               may be consumed by this channel when
//               get_download_throttle() is true.
//////////////////////////////////////////////////////////////////// 1 4 this 3 866  
264 0 0 4 283 820 0 0 467 ////////////////////////////////////////////////////////////////////
//     Function: HTTPChannel::set_max_updates_per_second
//       Access: Published
//  Description: When bandwidth throttling is in effect (see
//               set_download_throttle()), this specifies the maximum
//               number of times per second that run() will attempt to
//               do any downloading at all.
//////////////////////////////////////////////////////////////////// 2 4 this 3 859  22 max_updates_per_second 1 829  
265 0 0 6 284 829 0 0 393 ////////////////////////////////////////////////////////////////////
//     Function: HTTPChannel::get_max_updates_per_second
//       Access: Published
//  Description: Returns the maximum number of times per second that
//               run() will do anything at all, when
//               get_download_throttle() is true.
//////////////////////////////////////////////////////////////////// 1 4 this 3 866  
266 0 0 4 285 820 0 0 617 ////////////////////////////////////////////////////////////////////
//     Function: HTTPChannel::set_expected_file_size
//       Access: Published
//  Description: This may be called immediately after a call to
//               get_document() or some related function to specify
//               the expected size of the document we are retrieving,
//               if we happen to know.  This is used as the return
//               value to get_file_size() only in the case that the
//               server does not tell us the actual file size.
//////////////////////////////////////////////////////////////////// 2 4 this 3 859  9 file_size 1 842  
267 0 0 6 286 868 0 0 877 ////////////////////////////////////////////////////////////////////
//     Function: HTTPChannel::get_file_size
//       Access: Published, Virtual
//  Description: Returns the size of the file, if it is known.
//               Returns the value set by set_expected_file_size() if
//               the file size is not known, or 0 if this value was
//               not set.
//
//               If the file is dynamically generated, the size may
//               not be available until a read has started
//               (e.g. open_read_body() has been called); and even
//               then it may increase as more of the file is read due
//               to the nature of HTTP/1.1 requests which can change
//               their minds midstream about how much data they're
//               sending you.
//////////////////////////////////////////////////////////////////// 1 4 this 3 866  
268 0 0 6 287 819 0 0 637 ////////////////////////////////////////////////////////////////////
//     Function: HTTPChannel::is_file_size_known
//       Access: Published
//  Description: Returns true if the size of the file we are currently
//               retrieving was told us by the server and thus is
//               reliably known, or false if the size reported by
//               get_file_size() represents an educated guess
//               (possibly as set by set_expected_file_size(), or as
//               inferred from a chunked transfer encoding in
//               progress).
//////////////////////////////////////////////////////////////////// 1 4 this 3 866  
269 0 0 6 288 842 0 0 591 ////////////////////////////////////////////////////////////////////
//     Function: HTTPChannel::get_first_byte_requested
//       Access: Published
//  Description: Returns the first byte of the file requested by the
//               request.  This will normally be 0 to indicate that
//               the file is being requested from the beginning, but
//               if the file was requested via a get_subdocument()
//               call, this will contain the first_byte parameter from
//               that call.
//////////////////////////////////////////////////////////////////// 1 4 this 3 866  
270 0 0 6 289 842 0 0 586 ////////////////////////////////////////////////////////////////////
//     Function: HTTPChannel::get_last_byte_requested
//       Access: Published
//  Description: Returns the last byte of the file requested by the
//               request.  This will normally be 0 to indicate that
//               the file is being requested to its last byte, but if
//               the file was requested via a get_subdocument() call,
//               this will contain the last_byte parameter from that
//               call.
//////////////////////////////////////////////////////////////////// 1 4 this 3 866  
271 0 0 6 290 842 0 0 700 ////////////////////////////////////////////////////////////////////
//     Function: HTTPChannel::get_first_byte_delivered
//       Access: Published
//  Description: Returns the first byte of the file (that will be)
//               delivered by the server in response to the current
//               request.  Normally, this is the same as
//               get_first_byte_requested(), but some servers will
//               ignore a subdocument request and always return the
//               whole file, in which case this value will be 0,
//               regardless of what was requested to
//               get_subdocument().
//////////////////////////////////////////////////////////////////// 1 4 this 3 866  
272 0 0 6 291 842 0 0 697 ////////////////////////////////////////////////////////////////////
//     Function: HTTPChannel::get_last_byte_delivered
//       Access: Published
//  Description: Returns the last byte of the file (that will be)
//               delivered by the server in response to the current
//               request.  Normally, this is the same as
//               get_last_byte_requested(), but some servers will
//               ignore a subdocument request and always return the
//               whole file, in which case this value will be 0,
//               regardless of what was requested to
//               get_subdocument().
//////////////////////////////////////////////////////////////////// 1 4 this 3 866  
273 0 0 4 292 820 0 0 326 ////////////////////////////////////////////////////////////////////
//     Function: HTTPChannel::write_headers
//       Access: Published
//  Description: Outputs a list of all headers defined by the server
//               to the indicated output stream.
//////////////////////////////////////////////////////////////////// 2 4 this 3 866  3 out 1 833  
274 0 0 4 293 820 0 0 894 ////////////////////////////////////////////////////////////////////
//     Function: HTTPChannel::reset
//       Access: Published
//  Description: Stops whatever file transaction is currently in
//               progress, closes the connection, and resets to begin
//               anew.  You shouldn't ever need to call this, since
//               the channel should be able to reset itself cleanly
//               between requests, but it is provided in case you are
//               an especially nervous type.
//
//               Don't call this after every request unless you set
//               set_persistent_connection() to false, since calling
//               reset() rudely closes the connection regardless of
//               whether we have told the server we intend to keep it
//               open or not.
//////////////////////////////////////////////////////////////////// 1 4 this 3 859  
275 0 0 4 294 820 0 0 838 ////////////////////////////////////////////////////////////////////
//     Function: HTTPChannel::preserve_status
//       Access: Published
//  Description: Preserves the previous status code (presumably a
//               failure) from the previous connection attempt.  If
//               the subsequent connection attempt also fails, the
//               returned status code will be the better of the
//               previous code and the current code.
//
//               This can be called to daisy-chain subsequent attempts
//               to download the same document from different servers.
//               After all servers have been attempted, the final
//               status code will reflect the attempt that most nearly
//               succeeded.
//////////////////////////////////////////////////////////////////// 1 4 this 3 859  
276 0 0 4 295 820 0 0 334 ////////////////////////////////////////////////////////////////////
//     Function: HTTPChannel::clear_extra_headers
//       Access: Published
//  Description: Resets the extra headers that were previously added
//               via calls to send_extra_header().
//////////////////////////////////////////////////////////////////// 1 4 this 3 859  
277 0 0 4 296 820 0 0 658 ////////////////////////////////////////////////////////////////////
//     Function: HTTPChannel::send_extra_header
//       Access: Published
//  Description: Specifies an additional key: value pair that is added
//               into the header sent to the server with the next
//               request.  This is passed along with no interpretation
//               by the HTTPChannel code.  You may call this
//               repeatedly to append multiple headers.
//
//               This is persistent for one request only; it must be
//               set again for each new request.
//////////////////////////////////////////////////////////////////// 3 4 this 3 859  3 key 1 841  5 value 1 841  
278 0 0 6 297 819 0 0 338 ////////////////////////////////////////////////////////////////////
//     Function: HTTPChannel::get_document
//       Access: Published
//  Description: Opens the named document for reading, if available.
//               Returns true if successful, false otherwise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 859  3 url 1 864  
279 0 0 6 298 819 0 0 603 ////////////////////////////////////////////////////////////////////
//     Function: HTTPChannel::get_subdocument
//       Access: Published
//  Description: Retrieves only the specified byte range of the
//               indicated document.  If last_byte is 0, it stands for
//               the last byte of the document.  When a subdocument is
//               requested, get_file_size() and get_bytes_downloaded()
//               will report the number of bytes of the subdocument,
//               not of the complete document.
//////////////////////////////////////////////////////////////////// 4 4 this 3 859  3 url 1 864  10 first_byte 1 842  9 last_byte 1 842  
280 0 0 6 299 819 0 0 523 ////////////////////////////////////////////////////////////////////
//     Function: HTTPChannel::get_header
//       Access: Published
//  Description: Like get_document(), except only the header
//               associated with the document is retrieved.  This may
//               be used to test for existence of the document; it
//               might also return the size of the document (if the
//               server gives us this information).
//////////////////////////////////////////////////////////////////// 2 4 this 3 859  3 url 1 864  
281 0 0 6 300 819 0 0 302 ////////////////////////////////////////////////////////////////////
//     Function: HTTPChannel::post_form
//       Access: Published
//  Description: Posts form data to a particular URL and retrieves the
//               response.
//////////////////////////////////////////////////////////////////// 3 4 this 3 859  3 url 1 864  4 body 1 841  
282 0 0 6 301 819 0 0 339 ////////////////////////////////////////////////////////////////////
//     Function: HTTPChannel::put_document
//       Access: Published
//  Description: Uploads the indicated body to the server to replace
//               the indicated URL, if the server allows this.
//////////////////////////////////////////////////////////////////// 3 4 this 3 859  3 url 1 864  4 body 1 841  
283 0 0 6 302 819 0 0 276 ////////////////////////////////////////////////////////////////////
//     Function: HTTPChannel::delete_document
//       Access: Published
//  Description: Requests the server to remove the indicated URL.
//////////////////////////////////////////////////////////////////// 2 4 this 3 859  3 url 1 864  
284 0 0 6 303 819 0 0 401 ////////////////////////////////////////////////////////////////////
//     Function: HTTPChannel::get_trace
//       Access: Published
//  Description: Sends a TRACE message to the server, which should
//               return back the same message as the server received
//               it, allowing inspection of proxy hops, etc.
//////////////////////////////////////////////////////////////////// 2 4 this 3 859  3 url 1 864  
285 0 0 6 304 819 0 0 624 ////////////////////////////////////////////////////////////////////
//     Function: HTTPChannel::connect_to
//       Access: Published
//  Description: Establish a direct connection to the server and port
//               indicated by the URL, but do not issue any HTTP
//               requests.  If successful, the connection may then be
//               taken to use for whatever purposes you like by
//               calling get_connection().
//
//               This establishes a blocking I/O socket.  Also see
//               begin_connect_to().
//////////////////////////////////////////////////////////////////// 2 4 this 3 859  3 url 1 864  
286 0 0 6 305 819 0 0 380 ////////////////////////////////////////////////////////////////////
//     Function: HTTPChannel::get_options
//       Access: Published
//  Description: Sends an OPTIONS message to the server, which should
//               query the available options, possibly in relation to
//               a specified URL.
//////////////////////////////////////////////////////////////////// 2 4 this 3 859  3 url 1 864  
287 0 0 4 306 820 0 0 785 ////////////////////////////////////////////////////////////////////
//     Function: HTTPChannel::begin_get_document
//       Access: Published
//  Description: Begins a non-blocking request to retrieve a given
//               document.  This method will return immediately, even
//               before a connection to the server has necessarily
//               been established; you must then call run() from time
//               to time until the return value of run() is false.
//               Then you may check is_valid() and get_status_code()
//               to determine the status of your request.
//
//               If a previous request had been pending, that request
//               is discarded.
//////////////////////////////////////////////////////////////////// 2 4 this 3 859  3 url 1 864  
288 0 0 4 307 820 0 0 658 ////////////////////////////////////////////////////////////////////
//     Function: HTTPChannel::begin_get_subdocument
//       Access: Published
//  Description: Begins a non-blocking request to retrieve only the
//               specified byte range of the indicated document.  If
//               last_byte is 0, it stands for the last byte of the
//               document.  When a subdocument is requested,
//               get_file_size() and get_bytes_downloaded() will
//               report the number of bytes of the subdocument, not of
//               the complete document.
//////////////////////////////////////////////////////////////////// 4 4 this 3 859  3 url 1 864  10 first_byte 1 842  9 last_byte 1 842  
289 0 0 4 308 820 0 0 347 ////////////////////////////////////////////////////////////////////
//     Function: HTTPChannel::begin_get_header
//       Access: Published
//  Description: Begins a non-blocking request to retrieve a given
//               header.  See begin_get_document() and get_header().
//////////////////////////////////////////////////////////////////// 2 4 this 3 859  3 url 1 864  
290 0 0 4 309 820 0 0 769 ////////////////////////////////////////////////////////////////////
//     Function: HTTPChannel::begin_post_form
//       Access: Published
//  Description: Posts form data to a particular URL and retrieves the
//               response, all using non-blocking I/O.  See
//               begin_get_document() and post_form().
//
//               It is important to note that you *must* call run()
//               repeatedly after calling this method until run()
//               returns false, and you may not call any other
//               document posting or retrieving methods using the
//               HTTPChannel object in the interim, or your form data
//               may not get posted.
//////////////////////////////////////////////////////////////////// 3 4 this 3 859  3 url 1 864  4 body 1 841  
291 0 0 6 310 819 0 0 731 ////////////////////////////////////////////////////////////////////
//     Function: HTTPChannel::run
//       Access: Published
//  Description: This must be called from time to time when
//               non-blocking I/O is in use.  It checks for data
//               coming in on the socket and writes data out to the
//               socket when possible, and does whatever processing is
//               required towards completing the current task.
//
//               The return value is true if the task is still pending
//               (and run() will need to be called again in the
//               future), or false if the current task is complete.
//////////////////////////////////////////////////////////////////// 1 4 this 3 859  
292 0 0 4 311 820 0 0 920 ////////////////////////////////////////////////////////////////////
//     Function: HTTPChannel::begin_connect_to
//       Access: Published
//  Description: Begins a non-blocking request to establish a direct
//               connection to the server and port indicated by the
//               URL.  No HTTP requests will be issued beyond what is
//               necessary to establish the connection.  When run()
//               has finished, you may call is_connection_ready() to
//               determine if the connection was successfully
//               established.
//
//               If successful, the connection may then be taken to
//               use for whatever purposes you like by calling
//               get_connection().
//
//               This establishes a nonblocking I/O socket.  Also see
//               connect_to().
//////////////////////////////////////////////////////////////////// 2 4 this 3 859  3 url 1 864  
293 0 0 6 312 830 0 0 948 ////////////////////////////////////////////////////////////////////
//     Function: HTTPChannel::open_read_body
//       Access: Published
//  Description: Returns a newly-allocated istream suitable for
//               reading the body of the document.  This may only be
//               called immediately after a call to get_document() or
//               post_form(), or after a call to run() has returned
//               false.
//
//               Note that, in nonblocking mode, the returned stream
//               may report an early EOF, even before the actual end
//               of file.  When this happens, you should call
//               stream->is_closed() to determine whether you should
//               attempt to read some more later.
//
//               The user is responsible for passing the returned
//               istream to close_read_body() later.
//////////////////////////////////////////////////////////////////// 1 4 this 3 859  
294 0 0 4 313 820 0 0 516 ////////////////////////////////////////////////////////////////////
//     Function: HTTPChannel::close_read_body
//       Access: Public
//  Description: Closes a file opened by a previous call to
//               open_read_body().  This really just deletes the
//               istream pointer, but it is recommended to use this
//               interface instead of deleting it explicitly, to help
//               work around compiler issues.
//////////////////////////////////////////////////////////////////// 2 4 this 3 866  6 stream 1 831  
295 0 0 6 314 819 0 0 1950 ////////////////////////////////////////////////////////////////////
//     Function: HTTPChannel::download_to_file
//       Access: Published
//  Description: Specifies the name of a file to download the
//               resulting document to.  This should be called
//               immediately after get_document() or
//               begin_get_document() or related functions.
//
//               In the case of the blocking I/O methods like
//               get_document(), this function will download the
//               entire document to the file and return true if it was
//               successfully downloaded, false otherwise.
//
//               In the case of non-blocking I/O methods like
//               begin_get_document(), this function simply indicates an
//               intention to download to the indicated file.  It
//               returns true if the file can be opened for writing,
//               false otherwise, but the contents will not be
//               completely downloaded until run() has returned false.
//               At this time, it is possible that a communications
//               error will have left a partial file, so
//               is_download_complete() may be called to test this.
//
//               If subdocument_resumes is true and the document in
//               question was previously requested as a subdocument
//               (i.e. get_subdocument() with a first_byte value
//               greater than zero), this will automatically seek to
//               the appropriate byte within the file for writing the
//               output.  In this case, the file must already exist
//               and must have at least first_byte bytes in it.  If
//               subdocument_resumes is false, a subdocument will
//               always be downloaded beginning at the first byte of
//               the file.
//////////////////////////////////////////////////////////////////// 3 4 this 3 859  8 filename 1 856  19 subdocument_resumes 1 819  
296 0 0 6 315 819 0 0 1778 ////////////////////////////////////////////////////////////////////
//     Function: HTTPChannel::download_to_ram
//       Access: Published
//  Description: Specifies a Ramfile object to download the
//               resulting document to.  This should be called
//               immediately after get_document() or
//               begin_get_document() or related functions.
//
//               In the case of the blocking I/O methods like
//               get_document(), this function will download the
//               entire document to the Ramfile and return true if it
//               was successfully downloaded, false otherwise.
//
//               In the case of non-blocking I/O methods like
//               begin_get_document(), this function simply indicates an
//               intention to download to the indicated Ramfile.  It
//               returns true if the file can be opened for writing,
//               false otherwise, but the contents will not be
//               completely downloaded until run() has returned false.
//               At this time, it is possible that a communications
//               error will have left a partial file, so
//               is_download_complete() may be called to test this.
//
//               If subdocument_resumes is true and the document in
//               question was previously requested as a subdocument
//               (i.e. get_subdocument() with a first_byte value
//               greater than zero), this will automatically seek to
//               the appropriate byte within the Ramfile for writing
//               the output.  In this case, the Ramfile must already
//               have at least first_byte bytes in it.
//////////////////////////////////////////////////////////////////// 3 4 this 3 859  7 ramfile 1 869  19 subdocument_resumes 1 819  
297 0 0 6 316 819 0 0 1956 ////////////////////////////////////////////////////////////////////
//     Function: HTTPChannel::download_to_stream
//       Access: Published
//  Description: Specifies the name of an ostream to download the
//               resulting document to.  This should be called
//               immediately after get_document() or
//               begin_get_document() or related functions.
//
//               In the case of the blocking I/O methods like
//               get_document(), this function will download the
//               entire document to the file and return true if it was
//               successfully downloaded, false otherwise.
//
//               In the case of non-blocking I/O methods like
//               begin_get_document(), this function simply indicates an
//               intention to download to the indicated file.  It
//               returns true if the file can be opened for writing,
//               false otherwise, but the contents will not be
//               completely downloaded until run() has returned false.
//               At this time, it is possible that a communications
//               error will have left a partial file, so
//               is_download_complete() may be called to test this.
//
//               If subdocument_resumes is true and the document in
//               question was previously requested as a subdocument
//               (i.e. get_subdocument() with a first_byte value
//               greater than zero), this will automatically seek to
//               the appropriate byte within the file for writing the
//               output.  In this case, the file must already exist
//               and must have at least first_byte bytes in it.  If
//               subdocument_resumes is false, a subdocument will
//               always be downloaded beginning at the first byte of
//               the file.
//////////////////////////////////////////////////////////////////// 3 4 this 3 859  4 strm 1 833  19 subdocument_resumes 1 819  
298 0 0 6 317 834 0 0 656 ////////////////////////////////////////////////////////////////////
//     Function: HTTPChannel::get_connection
//       Access: Published
//  Description: Returns the connection that was established via a
//               previous call to connect_to() or begin_connect_to(),
//               or NULL if the connection attempt failed or if those
//               methods have not recently been called.
//
//               This stream has been allocated from the free store.
//               It is the user's responsibility to delete this
//               pointer when finished with it.
//////////////////////////////////////////////////////////////////// 1 4 this 3 859  
299 0 0 6 318 842 0 0 643 ////////////////////////////////////////////////////////////////////
//     Function: HTTPChannel::get_bytes_downloaded
//       Access: Published
//  Description: Returns the number of bytes downloaded during the
//               last (or current) download_to_file() or
//               download_to_ram operation().  This can be used in
//               conjunction with get_file_size() to report the
//               percent complete (but be careful, since
//               get_file_size() may return 0 if the server has not
//               told us the size of the file).
//////////////////////////////////////////////////////////////////// 1 4 this 3 866  
300 0 0 6 319 842 0 0 1059 ////////////////////////////////////////////////////////////////////
//     Function: HTTPChannel::get_bytes_requested
//       Access: Published
//  Description: When download throttling is in effect
//               (set_download_throttle() has been set to true) and
//               non-blocking I/O methods (like begin_get_document())
//               are used, this returns the number of bytes
//               "requested" from the server so far: that is, the
//               theoretical maximum value for get_bytes_downloaded(),
//               if the server has been keeping up with our demand.
//
//               If this number is less than get_bytes_downloaded(),
//               then the server has not been supplying bytes fast
//               enough to meet our own download throttle rate.
//
//               When download throttling is not in effect, or when
//               the blocking I/O methods (like get_document(), etc.)
//               are used, this returns 0.
//////////////////////////////////////////////////////////////////// 1 4 this 3 866  
301 0 0 6 320 819 0 0 985 ////////////////////////////////////////////////////////////////////
//     Function: HTTPChannel::is_download_complete
//       Access: Published
//  Description: Returns true when a download_to() or
//               download_to_ram() has executed and the file has been
//               fully downloaded.  If this still returns false after
//               processing has completed, there was an error in
//               transmission.
//
//               Note that simply testing is_download_complete() does
//               not prove that the requested document was successfully
//               retrieved--you might have just downloaded the "404
//               not found" stub (for instance) that a server would
//               provide in response to some error condition.  You
//               should also check is_valid() to prove that the file
//               you expected has been successfully retrieved.
//////////////////////////////////////////////////////////////////// 1 4 this 3 866  
302 0 0 7 321 872 0 0 0 0 
303 0 0 7 323 873 691 0 221 ////////////////////////////////////////////////////////////////////
//     Function: Decompressor::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
304 0 0 6 325 821 0 0 454 ////////////////////////////////////////////////////////////////////
//     Function: Decompressor::initiate
//       Access: Public
//  Description: Begins a background decompression of the named file
//               (whose filename must end in ".pz") to a new file
//               without the .pz extension.  The source file is
//               removed after successful completion.
//////////////////////////////////////////////////////////////////// 2 4 this 3 873  11 source_file 1 856  
305 0 0 6 325 821 0 0 401 ////////////////////////////////////////////////////////////////////
//     Function: Decompressor::initiate
//       Access: Public
//  Description: Begins a background decompression from the named
//               source file to the named destination file.  The
//               source file is removed after successful completion.
//////////////////////////////////////////////////////////////////// 3 4 this 3 873  11 source_file 1 856  9 dest_file 1 856  
306 0 0 6 326 821 0 0 493 ////////////////////////////////////////////////////////////////////
//     Function: Decompressor::run
//       Access: Public
//  Description: Called each frame to do the next bit of work in the
//               background task.  Returns EU_ok if a chunk is
//               completed but there is more to go, or EU_success when
//               we're all done.  Any other return value indicates an
//               error.
//////////////////////////////////////////////////////////////////// 1 4 this 3 873  
307 0 0 6 327 819 0 0 362 ////////////////////////////////////////////////////////////////////
//     Function: Decompressor::decompress
//       Access: Public
//  Description: Performs a foreground decompression of the named
//               file; does not return until the decompression is
//               complete.
//////////////////////////////////////////////////////////////////// 2 4 this 3 873  11 source_file 1 856  
308 0 0 6 327 819 0 0 393 ////////////////////////////////////////////////////////////////////
//     Function: Decompressor::decompress
//       Access: Public
//  Description: Does an in-memory decompression of the indicated
//               Ramfile.  The decompressed contents are written back
//               into the same Ramfile on completion.
//////////////////////////////////////////////////////////////////// 2 4 this 3 873  20 source_and_dest_file 1 869  
309 0 0 6 328 876 0 0 307 ////////////////////////////////////////////////////////////////////
//     Function: Decompressor::get_progress
//       Access: Public
//  Description: Returns the ratio through the decompression step
//               in the background.
//////////////////////////////////////////////////////////////////// 1 4 this 3 874  
310 0 0 7 331 878 697 0 247 ////////////////////////////////////////////////////////////////////
//     Function: DownloadDb::Constructor
//       Access: Public
//  Description: Primarily used for testing.
//////////////////////////////////////////////////////////////////// 0 
311 0 0 7 331 878 697 0 273 ////////////////////////////////////////////////////////////////////
//     Function: DownloadDb::Constructor
//       Access: Public
//  Description: Create a download db with these client and server dbs
//////////////////////////////////////////////////////////////////// 2 11 server_file 1 879  11 client_file 1 879  
312 0 0 7 331 878 697 0 273 ////////////////////////////////////////////////////////////////////
//     Function: DownloadDb::Constructor
//       Access: Public
//  Description: Create a download db with these client and server dbs
//////////////////////////////////////////////////////////////////// 2 11 server_file 1 869  11 client_file 1 879  
313 0 0 4 333 820 0 0 214 ////////////////////////////////////////////////////////////////////
//     Function: DownloadDb::output
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 880  3 out 1 833  
314 0 0 4 334 820 0 0 213 ////////////////////////////////////////////////////////////////////
//     Function: DownloadDb::write
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 880  3 out 1 833  
315 0 0 4 335 820 0 0 225 ////////////////////////////////////////////////////////////////////
//     Function: DownloadDb::write_version_map
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 880  3 out 1 833  
316 0 0 6 336 819 0 0 208 ////////////////////////////////////////////////////////////////////
//     Function: DownloadDb::
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 878  4 file 1 879  
317 0 0 6 337 819 0 0 208 ////////////////////////////////////////////////////////////////////
//     Function: DownloadDb::
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 878  4 file 1 879  
318 0 0 6 338 821 0 0 208 ////////////////////////////////////////////////////////////////////
//     Function: DownloadDb::
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 880  
319 0 0 6 339 821 0 0 208 ////////////////////////////////////////////////////////////////////
//     Function: DownloadDb::
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 880  
320 0 0 6 340 841 0 0 208 ////////////////////////////////////////////////////////////////////
//     Function: DownloadDb::
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 880  5 index 1 821  
321 0 0 6 341 841 0 0 208 ////////////////////////////////////////////////////////////////////
//     Function: DownloadDb::
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 880  5 index 1 821  
322 0 0 6 342 821 0 0 208 ////////////////////////////////////////////////////////////////////
//     Function: DownloadDb::
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 880  6 mfname 1 841  
323 0 0 4 343 820 0 0 208 ////////////////////////////////////////////////////////////////////
//     Function: DownloadDb::
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 878  6 mfname 1 841  4 size 1 821  
324 0 0 6 344 821 0 0 208 ////////////////////////////////////////////////////////////////////
//     Function: DownloadDb::
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 878  6 mfname 1 841  4 size 1 821  
325 0 0 6 345 821 0 0 208 ////////////////////////////////////////////////////////////////////
//     Function: DownloadDb::
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 880  6 mfname 1 841  
326 0 0 4 346 820 0 0 208 ////////////////////////////////////////////////////////////////////
//     Function: DownloadDb::
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 878  6 mfname 1 841  4 size 1 821  
327 0 0 6 347 882 0 0 208 ////////////////////////////////////////////////////////////////////
//     Function: DownloadDb::
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 880  6 mfname 1 841  
328 0 0 6 348 882 0 0 208 ////////////////////////////////////////////////////////////////////
//     Function: DownloadDb::
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 880  6 mfname 1 841  
329 0 0 4 349 820 0 0 208 ////////////////////////////////////////////////////////////////////
//     Function: DownloadDb::
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 878  6 mfname 1 841  
330 0 0 4 350 820 0 0 208 ////////////////////////////////////////////////////////////////////
//     Function: DownloadDb::
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 878  6 mfname 1 841  
331 0 0 4 351 820 0 0 208 ////////////////////////////////////////////////////////////////////
//     Function: DownloadDb::
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 878  6 mfname 1 841  
332 0 0 4 352 820 0 0 208 ////////////////////////////////////////////////////////////////////
//     Function: DownloadDb::
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 878  6 mfname 1 841  
333 0 0 6 353 821 0 0 208 ////////////////////////////////////////////////////////////////////
//     Function: DownloadDb::
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 880  6 mfname 1 841  
334 0 0 6 354 841 0 0 208 ////////////////////////////////////////////////////////////////////
//     Function: DownloadDb::
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 880  6 mfname 1 841  5 index 1 821  
335 0 0 6 355 819 0 0 208 ////////////////////////////////////////////////////////////////////
//     Function: DownloadDb::
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 880  6 mfname 1 841  
336 0 0 6 356 819 0 0 375 ////////////////////////////////////////////////////////////////////
//     Function: DownloadDb::
//       Access: Public
//  Description: A multifile is complete when it is completely
//               downloaded. Note: it may already be decompressed
//               or extracted and it is still complete
//////////////////////////////////////////////////////////////////// 2 4 this 3 880  6 mfname 1 841  
337 0 0 6 357 819 0 0 208 ////////////////////////////////////////////////////////////////////
//     Function: DownloadDb::
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 880  6 mfname 1 841  
338 0 0 6 358 819 0 0 208 ////////////////////////////////////////////////////////////////////
//     Function: DownloadDb::
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 880  6 mfname 1 841  
339 0 0 7 359 884 0 0 260 ////////////////////////////////////////////////////////////////////
//     Function: DownloadDb::
//       Access: Public
//  Description: Return the hash value of the file we are working on
//////////////////////////////////////////////////////////////////// 2 4 this 3 880  6 mfname 1 841  
340 0 0 4 360 820 0 0 253 ////////////////////////////////////////////////////////////////////
//     Function: DownloadDb::
//       Access: Public
//  Description: Set the hash value of file we are working on
//////////////////////////////////////////////////////////////////// 3 4 this 3 878  6 mfname 1 841  3 val 1 884  
341 0 0 7 361 884 0 0 249 ////////////////////////////////////////////////////////////////////
//     Function: DownloadDb::
//       Access: Public
//  Description: Return the hash value of the server file
//////////////////////////////////////////////////////////////////// 2 4 this 3 880  6 mfname 1 841  
342 0 0 4 362 820 0 0 253 ////////////////////////////////////////////////////////////////////
//     Function: DownloadDb::
//       Access: Public
//  Description: Set the hash value of file we are working on
//////////////////////////////////////////////////////////////////// 3 4 this 3 878  6 mfname 1 841  3 val 1 884  
343 0 0 4 363 820 0 0 208 ////////////////////////////////////////////////////////////////////
//     Function: DownloadDb::
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 878  6 mfname 1 841  
344 0 0 4 364 820 0 0 208 ////////////////////////////////////////////////////////////////////
//     Function: DownloadDb::
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 878  13 server_mfname 1 841  
345 0 0 4 365 820 0 0 208 ////////////////////////////////////////////////////////////////////
//     Function: DownloadDb::
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 878  6 mfname 1 841  
346 0 0 4 366 820 0 0 311 ////////////////////////////////////////////////////////////////////
//     Function: DownloadDb::create_new_server_db
//       Access: Public
//  Description: Used on the server side makefiles to create a
//               new clean server db
//////////////////////////////////////////////////////////////////// 1 4 this 3 878  
347 0 0 4 367 820 0 0 208 ////////////////////////////////////////////////////////////////////
//     Function: DownloadDb::
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 5 4 this 3 878  6 mfname 1 841  5 phase 1 882  4 size 1 821  6 status 1 821  
348 0 0 4 368 820 0 0 208 ////////////////////////////////////////////////////////////////////
//     Function: DownloadDb::
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 878  6 mfname 1 841  5 fname 1 841  
349 0 0 7 369 886 0 0 218 ////////////////////////////////////////////////////////////////////
//     Function: DownloadDb::read_db
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 878  4 file 1 879  16 want_server_info 1 819  
350 0 0 7 369 886 0 0 218 ////////////////////////////////////////////////////////////////////
//     Function: DownloadDb::read_db
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 878  4 file 1 869  16 want_server_info 1 819  
351 0 0 6 370 819 0 0 219 ////////////////////////////////////////////////////////////////////
//     Function: DownloadDb::write_db
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 4 4 this 3 878  4 file 1 879  2 db 1 886  16 want_server_info 1 819  
352 0 0 4 371 820 0 0 433 ////////////////////////////////////////////////////////////////////
//     Function: DownloadDb::add_version
//       Access: Published
//  Description: Appends a new version of the file onto the end of the
//               list, or changes the hash associated with a version
//               previously added.
//
//               Note: version numbers start at 1
//////////////////////////////////////////////////////////////////// 4 4 this 3 878  4 name 1 856  4 hash 1 887  7 version 1 821  
353 0 0 4 372 820 0 0 330 ////////////////////////////////////////////////////////////////////
//     Function: DownloadDb::insert_new_version
//       Access: Published
//  Description: Inserts a new version 1 copy of the file, sliding all
//               the other versions up by one.
//////////////////////////////////////////////////////////////////// 3 4 this 3 878  4 name 1 856  4 hash 1 887  
354 0 0 6 373 819 0 0 404 ////////////////////////////////////////////////////////////////////
//     Function: DownloadDb::has_version
//       Access: Published
//  Description: Returns true if the indicated file has version
//               information, false otherwise.  Some files recorded in
//               the database may not bother to track versions.
//////////////////////////////////////////////////////////////////// 2 4 this 3 880  4 name 1 856  
355 0 0 6 374 821 0 0 306 ////////////////////////////////////////////////////////////////////
//     Function: DownloadDb::get_num_versions
//       Access: Published
//  Description: Returns the number of versions stored for the
//               indicated file.
//////////////////////////////////////////////////////////////////// 2 4 this 3 880  4 name 1 856  
356 0 0 4 375 820 0 0 394 ////////////////////////////////////////////////////////////////////
//     Function: DownloadDb::set_num_versions
//       Access: Published
//  Description: Reduces the number of versions of a particular file
//               stored in the ddb by throwing away all versions
//               higher than the indicated index.
//////////////////////////////////////////////////////////////////// 3 4 this 3 878  4 name 1 856  12 num_versions 1 821  
357 0 0 6 376 821 0 0 440 ////////////////////////////////////////////////////////////////////
//     Function: DownloadDb::get_version
//       Access: Published
//  Description: Returns the version number of this particular file,
//               determined by looking up the hash generated from the
//               file.  Returns -1 if the version number cannot be
//               determined.
//////////////////////////////////////////////////////////////////// 3 4 this 3 880  4 name 1 856  4 hash 1 887  
358 0 0 6 377 887 0 0 318 ////////////////////////////////////////////////////////////////////
//     Function: DownloadDb::get_hash
//       Access: Published
//  Description: Returns the MD5 hash associated with the indicated
//               version of the indicated file.
//////////////////////////////////////////////////////////////////// 3 4 this 3 880  4 name 1 856  7 version 1 821  
359 0 0 7 381 889 746 0 221 ////////////////////////////////////////////////////////////////////
//     Function: Extractor::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
360 0 0 6 383 819 0 0 392 ////////////////////////////////////////////////////////////////////
//     Function: Extractor::set_multifile
//       Access: Published
//  Description: Specifies the filename of the Multifile that the
//               Extractor will read.  Returns true on success, false
//               if the mulifile name is invalid.
//////////////////////////////////////////////////////////////////// 2 4 this 3 889  14 multifile_name 1 856  
361 0 0 4 384 820 0 0 453 ////////////////////////////////////////////////////////////////////
//     Function: Extractor::set_extract_dir
//       Access: Published
//  Description: Specifies the directory into which all extracted
//               subfiles will be written.  Relative paths of subfiles
//               within the Multifile will be written as relative
//               paths to this directory.
//////////////////////////////////////////////////////////////////// 2 4 this 3 889  11 extract_dir 1 856  
362 0 0 4 385 820 0 0 368 ////////////////////////////////////////////////////////////////////
//     Function: Extractor::reset
//       Access: Published
//  Description: Interrupts the Extractor in the middle of its
//               business and makes it ready to accept a new list of
//               subfiles to extract.
//////////////////////////////////////////////////////////////////// 1 4 this 3 889  
363 0 0 6 386 819 0 0 391 ////////////////////////////////////////////////////////////////////
//     Function: Extractor::request_subfile
//       Access: Published
//  Description: Requests a particular subfile to be extracted when
//               step() or run() is called.  Returns true if the
//               subfile exists, false otherwise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 889  12 subfile_name 1 856  
364 0 0 6 387 821 0 0 334 ////////////////////////////////////////////////////////////////////
//     Function: Extractor::request_all_subfiles
//       Access: Published
//  Description: Requests all subfiles in the Multifile to be
//               extracted.  Returns the number requested.
//////////////////////////////////////////////////////////////////// 1 4 this 3 889  
365 0 0 6 388 821 0 0 695 ////////////////////////////////////////////////////////////////////
//     Function: Extractor::step
//       Access: Published
//  Description: After all of the requests have been made via
//               request_file() or request_all_subfiles(), call step()
//               repeatedly until it stops returning EU_ok.
//
//               step() extracts the next small unit of data from the
//               Multifile.  Returns EU_ok if progress is continuing,
//               EU_error_abort if there is a problem, or EU_success
//               when the last piece has been extracted.
//
//               Also see run().
//////////////////////////////////////////////////////////////////// 1 4 this 3 889  
366 0 0 6 389 876 0 0 292 ////////////////////////////////////////////////////////////////////
//     Function: Extractor::get_progress
//       Access: Public
//  Description: Returns the fraction of the Multifile extracted so
//               far.
//////////////////////////////////////////////////////////////////// 1 4 this 3 890  
367 0 0 6 390 819 0 0 674 ////////////////////////////////////////////////////////////////////
//     Function: Extractor::run
//       Access: Published
//  Description: A convenience function to extract the Multifile all
//               at once, when you don't care about doing it in the
//               background.
//
//               First, call request_file() or request_all_files() to
//               specify the files you would like to extract, then
//               call run() to do the extraction.  Also see step() for
//               when you would like the extraction to happen as a
//               background task.
//////////////////////////////////////////////////////////////////// 1 4 this 3 889  
368 0 0 7 392 892 762 0 224 ////////////////////////////////////////////////////////////////////
//     Function: MultiplexStream::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
369 0 0 4 393 820 0 0 379 ////////////////////////////////////////////////////////////////////
//     Function: MultiplexStream::add_ostream
//       Access: Public
//  Description: Adds the indicated generic ostream to the multiplex
//               output.  The ostream will receive whatever data is
//               sent to the pipe.
//////////////////////////////////////////////////////////////////// 3 4 this 3 892  3 out 1 833  12 delete_later 1 819  
370 0 0 6 394 819 0 0 335 ////////////////////////////////////////////////////////////////////
//     Function: MultiplexStream::add_stdio_file
//       Access: Public
//  Description: Adds the given file, previously opened using the C
//               stdio library, to the multiplex output.
//////////////////////////////////////////////////////////////////// 3 4 this 3 892  4 file 1 893  15 close_when_done 1 819  
371 0 0 4 395 820 0 0 266 ////////////////////////////////////////////////////////////////////
//     Function: MultiplexStream::add_standard_output
//       Access: Public
//  Description: Adds the standard output channel.
//////////////////////////////////////////////////////////////////// 1 4 this 3 892  
372 0 0 6 396 819 0 0 400 ////////////////////////////////////////////////////////////////////
//     Function: MultiplexStream::add_file
//       Access: Public
//  Description: Adds the given file to the multiplex output.  The
//               file is opened in append mode with line buffering.
//               Returns false if the file cannot be opened.
//////////////////////////////////////////////////////////////////// 2 4 this 3 892  4 file 1 879  
373 0 0 4 397 820 0 0 542 ////////////////////////////////////////////////////////////////////
//     Function: MultiplexStream::add_system_debug
//       Access: Public
//  Description: Adds the system debug output the the multiplex
//               output.  This may map to a syslog or some such
//               os-specific output system.  It may do nothing on a
//               particular system.
//
//               Presently, this maps only to OutputDebugString() on
//               Windows.
//////////////////////////////////////////////////////////////////// 1 4 this 3 892  
374 0 0 4 398 820 0 0 270 ////////////////////////////////////////////////////////////////////
//     Function: MultiplexStream::flush
//       Access: Public
//  Description: Forces out all output that hasn't yet been written.
//////////////////////////////////////////////////////////////////// 1 4 this 3 892  
375 0 0 7 402 872 0 0 0 0 
376 0 0 7 405 895 0 0 233 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFileMountHTTP::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 root 1 839  4 http 1 853  
377 0 0 7 406 853 0 0 315 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFileMountHTTP::get_http_client
//       Access: Published
//  Description: Returns the HTTPClient object that services this
//               mount point.
//////////////////////////////////////////////////////////////////// 1 4 this 3 896  
378 0 0 6 407 839 0 0 308 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFileMountHTTP::get_root
//       Access: Published
//  Description: Returns the URL that represents the root of this
//               mount point.
//////////////////////////////////////////////////////////////////// 1 4 this 3 896  
379 0 0 4 408 820 0 0 758 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFileMountHTTP::reload_vfs_mount_url
//       Access: Published, Static
//  Description: Reads all of the vfs-mount-url lines in the
//               Config.prc file and replaces the mount settings to
//               match them.  
//
//               This will mount any url's mentioned in the config
//               file, and unmount and unmount any url's no longer
//               mentioned in the config file.  Normally, it is called
//               automatically at startup, and need not be called
//               again, unless you have fiddled with some config
//               settings.
//////////////////////////////////////////////////////////////////// 0 
380 0 0 7 409 872 0 0 0 0 
381 0 0 7 411 898 770 0 216 ////////////////////////////////////////////////////////////////////
//     Function: Patcher::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
382 0 0 7 411 898 770 0 216 ////////////////////////////////////////////////////////////////////
//     Function: Patcher::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 6 buffer 1 899  
383 0 0 6 413 821 0 0 213 ////////////////////////////////////////////////////////////////////
//     Function: Patcher::initiate
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 898  5 patch 1 879  6 infile 1 879  
384 0 0 6 414 821 0 0 208 ////////////////////////////////////////////////////////////////////
//     Function: Patcher::run
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 898  
385 0 0 6 415 876 0 0 217 ////////////////////////////////////////////////////////////////////
//     Function: Patcher::get_progress
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 901  
386 0 0 7 417 903 779 0 225 ////////////////////////////////////////////////////////////////////
//     Function: StringStream::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 0 
387 0 0 7 417 903 779 0 318 ////////////////////////////////////////////////////////////////////
//     Function: StringStream::Constructor
//       Access: Published
//  Description: This version of the constructor preloads the buffer
//               with the indicated data.
//////////////////////////////////////////////////////////////////// 1 6 source 1 841  
388 0 0 4 418 820 0 0 243 ////////////////////////////////////////////////////////////////////
//     Function: StringStream::clear_data
//       Access: Published
//  Description: Empties the buffer.
//////////////////////////////////////////////////////////////////// 1 4 this 3 903  
389 0 0 6 419 842 0 0 319 ////////////////////////////////////////////////////////////////////
//     Function: StringStream::get_data_size
//       Access: Published
//  Description: Returns the number of characters available to be read
//               from the data stream.
//////////////////////////////////////////////////////////////////// 1 4 this 3 903  
390 0 0 6 420 841 0 0 274 ////////////////////////////////////////////////////////////////////
//     Function: StringStream::get_data
//       Access: Published
//  Description: Returns the contents of the data stream as a string.
//////////////////////////////////////////////////////////////////// 1 4 this 3 903  
391 0 0 4 421 820 0 0 311 ////////////////////////////////////////////////////////////////////
//     Function: StringStream::set_data
//       Access: Published
//  Description: Replaces the contents of the data stream.  This
//               implicitly reseeks to 0.
//////////////////////////////////////////////////////////////////// 2 4 this 3 903  4 data 1 841  
392 0 0 6 378 843 0 0 0 1 4 name 1 879  
393 0 0 6 379 843 0 0 0 1 4 name 1 879  
124
780 8 SSReader 0 26625 8 SSReader 8 SSReader 0 0 0 0 394 0 5 395 396 397 398 399 0 0 0 0 0 433
////////////////////////////////////////////////////////////////////
//       Class : SSReader
// Description : An internal class for reading from a socket stream.
//               This serves as a base class for both ISocketStream
//               and SocketStream; its purpose is to minimize
//               redundant code between them.  Do not use it directly.
////////////////////////////////////////////////////////////////////

781 8 SSWriter 0 26625 8 SSWriter 8 SSWriter 0 0 0 0 400 0 11 401 402 403 404 405 406 407 408 409 410 411 0 0 0 0 0 431
////////////////////////////////////////////////////////////////////
//       Class : SSWriter
// Description : An internal class for writing to a socket stream.
//               This serves as a base class for both OSocketStream
//               and SocketStream; its purpose is to minimize
//               redundant code between them.  Do not use it directly.
////////////////////////////////////////////////////////////////////

782 13 ISocketStream 0 26625 13 ISocketStream 13 ISocketStream 0 0 0 0 416 0 3 417 418 419 0 0 2 3 783 412 413 3 780 414 415 0 1 784 529
////////////////////////////////////////////////////////////////////
//       Class : ISocketStream
// Description : This is a base class for istreams implemented in
//               Panda that read from a (possibly non-blocking)
//               socket.  It adds is_closed(), which can be called
//               after an eof condition to check whether the socket
//               has been closed, or whether more data may be
//               available later.
////////////////////////////////////////////////////////////////////

783 7 istream 0 2049 7 istream 7 istream 0 0 0 0 0 0 0 0 0 0 0 0 0

784 9 ReadState 0 794624 24 ISocketStream::ReadState 24 ISocketStream::ReadState 782 0 0 0 0 0 0 0 0 0 4 10 RS_initial 25 ISocketStream::RS_initial 0
0 10 RS_reading 25 ISocketStream::RS_reading 0
1 11 RS_complete 26 ISocketStream::RS_complete 0
2 8 RS_error 23 ISocketStream::RS_error 0
3 0 0

785 13 OSocketStream 0 141313 13 OSocketStream 13 OSocketStream 0 0 0 0 427 0 3 424 425 426 0 0 2 3 786 420 421 3 781 422 423 0 0 486
////////////////////////////////////////////////////////////////////
//       Class : OSocketStream
// Description : A base class for ostreams that write to a (possibly
//               non-blocking) socket.  It adds is_closed(), which can
//               be called after any write operation fails to check
//               whether the socket has been closed, or whether more
//               data may be sent later.
////////////////////////////////////////////////////////////////////

786 7 ostream 0 2049 7 ostream 7 ostream 0 0 0 0 0 0 0 0 0 0 0 0 0

787 12 SocketStream 0 141313 12 SocketStream 12 SocketStream 0 0 0 0 439 0 5 434 435 436 437 438 0 0 3 3 788 428 429 3 780 430 431 3 781 432 433 0 0 285
////////////////////////////////////////////////////////////////////
//       Class : SocketStream
// Description : A base class for iostreams that read and write to a
//               (possibly non-blocking) socket.
////////////////////////////////////////////////////////////////////

788 8 iostream 0 2049 8 iostream 8 iostream 0 0 0 0 0 0 0 0 0 0 0 0 0

789 7 URLSpec 0 141313 7 URLSpec 7 URLSpec 0 0 0 1 440 487 0 45 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 477 478 479 480 481 482 483 484 485 486 0 1 476 0 0 0 437
////////////////////////////////////////////////////////////////////
//       Class : URLSpec
// Description : A container for a URL, e.g. "http://server:port/path".
//
//               The URLSpec object is similar to a Filename in that
//               it contains logic to identify the various parts of a
//               URL and return (or modify) them separately.
////////////////////////////////////////////////////////////////////

790 8 HTTPEnum 0 141313 8 HTTPEnum 8 HTTPEnum 0 0 0 0 488 0 0 0 0 0 0 2 791 792 348
////////////////////////////////////////////////////////////////////
//       Class : HTTPEnum
// Description : This class is just used as a namespace wrapper for
//               some of the enumerated types used by various classes
//               within the HTTPClient family.
////////////////////////////////////////////////////////////////////

791 11 HTTPVersion 0 794624 21 HTTPEnum::HTTPVersion 21 HTTPEnum::HTTPVersion 790 0 0 0 0 0 0 0 0 0 4 5 HV_09 15 HTTPEnum::HV_09 20
// HTTP 0.9 or older
0 5 HV_10 15 HTTPEnum::HV_10 11
// HTTP 1.0
1 5 HV_11 15 HTTPEnum::HV_11 11
// HTTP 1.1
2 8 HV_other 18 HTTPEnum::HV_other 0
3 0 0

792 6 Method 0 794624 16 HTTPEnum::Method 16 HTTPEnum::Method 790 0 0 0 0 0 0 0 0 0 8 9 M_options 19 HTTPEnum::M_options 0
0 5 M_get 15 HTTPEnum::M_get 0
1 6 M_head 16 HTTPEnum::M_head 0
2 6 M_post 16 HTTPEnum::M_post 0
3 5 M_put 15 HTTPEnum::M_put 0
4 8 M_delete 18 HTTPEnum::M_delete 0
5 7 M_trace 17 HTTPEnum::M_trace 0
6 9 M_connect 19 HTTPEnum::M_connect 0
7 0 0

793 8 HTTPDate 0 141313 8 HTTPDate 8 HTTPDate 0 0 0 1 489 506 0 16 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 505 0 0 0 0 0 466
////////////////////////////////////////////////////////////////////
//       Class : HTTPDate
// Description : A container for an HTTP-legal time/date indication.
//               This can accept a string from an HTTP header and will
//               decode it into a C time_t value; conversely, it can
//               accept a time_t value and encode it for output as a
//               string.
////////////////////////////////////////////////////////////////////

794 10 HTTPCookie 0 26625 10 HTTPCookie 10 HTTPCookie 0 0 0 1 507 508 0 20 509 510 511 512 513 514 515 516 517 518 519 520 521 522 523 524 525 526 527 528 0 0 0 0 0 327
////////////////////////////////////////////////////////////////////
//       Class : HTTPCookie
// Description : A cookie sent from an HTTP server to be stored on the
//               client and returned when the path and/or domain
//               matches.
////////////////////////////////////////////////////////////////////

795 10 HTTPClient 0 75777 10 HTTPClient 10 HTTPClient 0 0 0 1 529 0 0 48 530 531 532 533 534 535 536 537 538 539 540 541 542 543 544 545 546 547 548 549 550 551 552 553 554 555 556 557 558 559 560 561 562 563 564 565 566 567 568 569 570 571 572 573 574 575 576 577 0 0 1 0 796 0 0 0 1 797 871
////////////////////////////////////////////////////////////////////
//       Class : HTTPClient
// Description : Handles contacting an HTTP server and retrieving a
//               document.  Each HTTPClient object represents a
//               separate context, and stores its own list of cookies,
//               passwords, and certificates; however, a given
//               HTTPClient is capable of making multiple simultaneous
//               requests to the same or different servers.
//
//               It is up to the programmer whether one HTTPClient
//               should be used to retrieve all documents, or a
//               separate one should be created each time.  There is a
//               default, global HTTPClient available in
//               HTTPClient::get_global_ptr().
////////////////////////////////////////////////////////////////////

796 14 ReferenceCount 0 2049 14 ReferenceCount 14 ReferenceCount 0 0 0 0 0 0 0 0 0 0 0 0 425
////////////////////////////////////////////////////////////////////
//       Class : ReferenceCount
// Description : A base class for all things that want to be
//               reference-counted.  ReferenceCount works in
//               conjunction with PointerTo to automatically delete
//               objects when the last pointer to them goes away.
////////////////////////////////////////////////////////////////////

797 9 VerifySSL 0 794624 21 HTTPClient::VerifySSL 21 HTTPClient::VerifySSL 795 0 0 0 0 0 0 0 0 0 3 12 VS_no_verify 24 HTTPClient::VS_no_verify 28
// Don't care who we talk to
0 16 VS_no_date_check 28 HTTPClient::VS_no_date_check 53
// Must identify certs, but old, expired certs are OK
1 9 VS_normal 21 HTTPClient::VS_normal 50
// Identify certs and also check expiration dates.
2 0 0

798 13 HTTPEntityTag 0 141313 13 HTTPEntityTag 13 HTTPEntityTag 0 0 0 1 578 590 0 11 579 580 581 582 583 584 585 586 587 588 589 0 0 0 0 0 404
////////////////////////////////////////////////////////////////////
//       Class : HTTPEntityTag
// Description : A container for an "entity tag" from an HTTP server.
//               This is used to identify a particular version of a
//               document or resource, particularly useful for
//               verifying caches.
////////////////////////////////////////////////////////////////////

799 12 DocumentSpec 0 141313 12 DocumentSpec 12 DocumentSpec 0 0 0 1 591 614 0 22 592 593 594 595 596 597 598 599 600 601 602 603 604 605 606 607 608 609 610 611 612 613 0 0 0 0 2 800 801 562
////////////////////////////////////////////////////////////////////
//       Class : DocumentSpec
// Description : A descriptor that refers to a particular version of a
//               document.  This includes the URL of the document and
//               its identity tag and last-modified dates.
//
//               The DocumentSpec may also be used to request a newer
//               document than a particular one if available, for
//               instance to refresh a cached document.
////////////////////////////////////////////////////////////////////

800 11 RequestMode 0 794624 25 DocumentSpec::RequestMode 25 DocumentSpec::RequestMode 799 0 0 0 0 0 0 0 0 0 4 6 RM_any 20 DocumentSpec::RM_any 0
0 8 RM_equal 22 DocumentSpec::RM_equal 0
1 8 RM_newer 22 DocumentSpec::RM_newer 0
2 17 RM_equal_or_newer 31 DocumentSpec::RM_equal_or_newer 0
3 0 0

801 12 CacheControl 0 794624 26 DocumentSpec::CacheControl 26 DocumentSpec::CacheControl 799 0 0 0 0 0 0 0 0 0 3 14 CC_allow_cache 28 DocumentSpec::CC_allow_cache 0
0 13 CC_revalidate 27 DocumentSpec::CC_revalidate 0
1 11 CC_no_cache 25 DocumentSpec::CC_no_cache 0
2 0 0

802 11 HTTPChannel 0 75777 11 HTTPChannel 11 HTTPChannel 0 0 0 0 0 0 75 615 616 617 618 619 620 621 622 623 624 625 626 627 628 629 630 631 632 633 634 635 636 637 638 639 640 641 642 643 644 645 646 647 648 649 650 651 652 653 654 655 656 657 658 659 660 661 662 663 664 665 666 667 668 669 670 671 672 673 674 675 676 677 678 679 680 681 682 683 684 685 686 687 688 689 1 904 0 1 0 803 0 0 0 1 804 875
////////////////////////////////////////////////////////////////////
//       Class : HTTPChannel
// Description : A single channel of communication from an HTTPClient.
//               This is similar to the concept of a 'connection',
//               except that HTTP is technically connectionless; in
//               fact, a channel may represent one unbroken connection
//               or it may transparently close and reopen a new
//               connection with each request.
//
//               A channel is conceptually a single thread of I/O.
//               One document at a time may be requested using a
//               channel; a new document may (in general) not be
//               requested from the same HTTPChannel until the first
//               document has been fully retrieved.
////////////////////////////////////////////////////////////////////

803 19 TypedReferenceCount 0 2049 19 TypedReferenceCount 19 TypedReferenceCount 0 0 0 0 0 0 0 0 0 0 0 0 710
////////////////////////////////////////////////////////////////////
//       Class : TypedReferenceCount
// Description : A base class for things which need to inherit from
//               both TypedObject and from ReferenceCount.  It's
//               convenient to define this intermediate base class
//               instead of multiply inheriting from the two classes
//               each time they are needed, so that we can sensibly
//               pass around pointers to things which are both
//               TypedObjects and ReferenceCounters.
//               
//               See also TypedObject for detailed instructions.
////////////////////////////////////////////////////////////////////

804 10 StatusCode 0 794624 23 HTTPChannel::StatusCode 23 HTTPChannel::StatusCode 802 0 0 0 0 0 0 0 0 0 20 13 SC_incomplete 26 HTTPChannel::SC_incomplete 0
0 17 SC_internal_error 30 HTTPChannel::SC_internal_error 0
1 16 SC_no_connection 29 HTTPChannel::SC_no_connection 0
2 10 SC_timeout 23 HTTPChannel::SC_timeout 0
3 18 SC_lost_connection 31 HTTPChannel::SC_lost_connection 0
4 20 SC_non_http_response 33 HTTPChannel::SC_non_http_response 0
5 15 SC_invalid_http 28 HTTPChannel::SC_invalid_http 0
6 24 SC_socks_invalid_version 37 HTTPChannel::SC_socks_invalid_version 0
7 35 SC_socks_no_acceptable_login_method 48 HTTPChannel::SC_socks_no_acceptable_login_method 0
8 16 SC_socks_refused 29 HTTPChannel::SC_socks_refused 0
9 22 SC_socks_no_connection 35 HTTPChannel::SC_socks_no_connection 0
10 23 SC_ssl_internal_failure 36 HTTPChannel::SC_ssl_internal_failure 0
11 19 SC_ssl_no_handshake 32 HTTPChannel::SC_ssl_no_handshake 0
12 23 SC_http_error_watermark 36 HTTPChannel::SC_http_error_watermark 129
// No one returns this code, but StatusCode values higher than
// this are deemed more successful than any generic HTTP response.
13 33 SC_ssl_invalid_server_certificate 46 HTTPChannel::SC_ssl_invalid_server_certificate 0
14 37 SC_ssl_self_signed_server_certificate 50 HTTPChannel::SC_ssl_self_signed_server_certificate 0
15 24 SC_ssl_unexpected_server 37 HTTPChannel::SC_ssl_unexpected_server 0
16 22 SC_download_open_error 35 HTTPChannel::SC_download_open_error 79
// These errors are only generated after a download_to_*() call
// been issued.
17 23 SC_download_write_error 36 HTTPChannel::SC_download_write_error 0
18 25 SC_download_invalid_range 38 HTTPChannel::SC_download_invalid_range 0
19 0 194
// get_status_code() will either return an HTTP-style status code >=
// 100 (e.g. 404), or one of the following values.  In general,
// these are ordered from less-successful to more-successful.

805 12 Decompressor 0 26625 12 Decompressor 12 Decompressor 0 0 0 1 690 691 0 4 692 693 694 695 0 0 0 0 0 319
////////////////////////////////////////////////////////////////////
//       Class : Decompressor
// Description : This manages run-time decompression of a
//               zlib-compressed stream, as a background or foreground
//               task.
////////////////////////////////////////////////////////////////////

806 10 DownloadDb 0 26625 10 DownloadDb 10 DownloadDb 0 0 0 1 696 697 0 45 698 699 700 701 702 703 704 705 706 707 708 709 710 711 712 713 714 715 716 717 718 719 720 721 722 723 724 725 726 727 728 729 730 731 732 733 734 735 736 737 738 739 740 741 742 0 0 0 0 1 807 594
////////////////////////////////////////////////////////////////////
//       Class : DownloadDb
// Description : A listing of files within multifiles for management
//               of client-side synchronization with a server-provided
//               set of files.
//
//               This class manages one copy of the database for the
//               client, representing the files on the client system,
//               and another copy for the server, representing the
//               files the server has available.
////////////////////////////////////////////////////////////////////

807 6 Status 0 794624 18 DownloadDb::Status 18 DownloadDb::Status 806 0 0 0 0 0 0 0 0 0 4 17 Status_incomplete 29 DownloadDb::Status_incomplete 0
0 15 Status_complete 27 DownloadDb::Status_complete 0
1 19 Status_decompressed 31 DownloadDb::Status_decompressed 0
2 16 Status_extracted 28 DownloadDb::Status_extracted 0
3 0 213
// Status of a multifile is stored in this enum
// Note these values are in increasing order of "doneness"
// So if you are decompressed, you are complete
// If you are extracted, you are decompressed and complete

808 9 Extractor 0 26625 9 Extractor 9 Extractor 0 0 0 1 745 746 0 8 747 748 749 750 751 752 753 754 0 0 0 0 0 862
////////////////////////////////////////////////////////////////////
//       Class : Extractor
// Description : This class automatically extracts the contents of a
//               Multifile to the current directory (or to a specified
//               directory) in the background.
//
//               It is designed to limit its use of system resources
//               and run unobtrusively in the background.  After
//               specifying the files you wish to extract via repeated
//               calls to request_subfile(), begin the process by
//               calling run() repeatedly.  Each call to run()
//               extracts another small portion of the Multifile.
//               Call run() whenever you have spare cycles until run()
//               returns EU_success.
////////////////////////////////////////////////////////////////////

809 15 MultiplexStream 0 141313 15 MultiplexStream 15 MultiplexStream 0 0 0 1 755 762 0 6 756 757 758 759 760 761 0 0 1 0 786 0 0 0 0 544
////////////////////////////////////////////////////////////////////
//       Class : MultiplexStream
// Description : This is a special ostream that forwards the data that
//               is written to it to any number of other sources, for
//               instance other ostreams, or explicitly to a disk file
//               or to system logging utilities.  It's a very handy
//               thing to set Notify to refer to when running in batch
//               mode.
////////////////////////////////////////////////////////////////////

810 15 VirtualFileHTTP 0 75777 15 VirtualFileHTTP 15 VirtualFileHTTP 0 0 0 0 0 0 1 763 0 0 1 0 811 0 0 0 0 359
////////////////////////////////////////////////////////////////////
//       Class : VirtualFileHTTP
// Description : This maps a document retrieved from an HTTPClient
//               into the VirtualFileSystem, allowing models etc. to
//               be loaded directly from a web page.
////////////////////////////////////////////////////////////////////

811 11 VirtualFile 0 2049 11 VirtualFile 11 VirtualFile 0 0 0 0 0 0 0 0 0 0 0 0 278
////////////////////////////////////////////////////////////////////
//       Class : VirtualFile
// Description : The abstract base class for a file or directory
//               within the VirtualFileSystem.
////////////////////////////////////////////////////////////////////

812 20 VirtualFileMountHTTP 0 75777 20 VirtualFileMountHTTP 20 VirtualFileMountHTTP 0 0 0 1 764 0 0 4 765 766 767 768 0 0 1 0 813 0 0 0 0 264
////////////////////////////////////////////////////////////////////
//       Class : VirtualFileMountHTTP
// Description : Maps a web page (URL root) into the
//               VirtualFileSystem.
////////////////////////////////////////////////////////////////////

813 16 VirtualFileMount 0 2049 16 VirtualFileMount 16 VirtualFileMount 0 0 0 0 0 0 0 0 0 0 0 0 365
////////////////////////////////////////////////////////////////////
//       Class : VirtualFileMount
// Description : The abstract base class for a mount definition used
//               within a VirtualFileSystem.  Normally users don't
//               need to monkey with this class directly.
////////////////////////////////////////////////////////////////////

814 7 Patcher 0 26625 7 Patcher 7 Patcher 0 0 0 1 769 770 0 3 771 772 773 0 0 0 0 0 209
////////////////////////////////////////////////////////////////////
//       Class : Patcher
// Description : Applies a patch synchronously
////////////////////////////////////////////////////////////////////

815 12 StringStream 0 141313 12 StringStream 12 StringStream 0 0 0 1 774 779 0 4 775 776 777 778 0 0 1 0 788 0 0 0 0 346
////////////////////////////////////////////////////////////////////
//       Class : StringStream
// Description : A bi-directional stream object that reads and writes
//               data to an internal buffer, which can be retrieved
//               and/or set as a string.
////////////////////////////////////////////////////////////////////

816 10 SSReader * 0 8576 10 SSReader * 10 SSReader * 0 0 780 0 0 0 0 0 0 0 0 0 0

817 10 Datagram * 0 8576 10 Datagram * 10 Datagram * 0 0 818 0 0 0 0 0 0 0 0 0 0

818 8 Datagram 0 2048 8 Datagram 8 Datagram 0 0 0 0 0 0 0 0 0 0 0 0 900
////////////////////////////////////////////////////////////////////
//       Class : Datagram
// Description : An ordered list of data elements, formatted in memory
//               for transmission over a socket or writing to a data
//               file.
//
//               Data elements should be added one at a time, in
//               order, to the Datagram.  The nature and contents of
//               the data elements are totally up to the user.  When a
//               Datagram has been transmitted and received, its data
//               elements may be extracted using a DatagramIterator;
//               it is up to the caller to know the correct type of
//               each data element in order.
//
//               A Datagram is itself headerless; it is simply a
//               collection of data elements.
////////////////////////////////////////////////////////////////////

819 4 bool 0 8194 4 bool 4 bool 0 4 0 0 0 0 0 0 0 0 0 0 0

820 4 void 0 8194 4 void 4 void 0 6 0 0 0 0 0 0 0 0 0 0 0

821 3 int 0 8194 3 int 3 int 0 1 0 0 0 0 0 0 0 0 0 0 0

822 16 SSReader const * 0 8576 16 SSReader const * 16 SSReader const * 0 0 823 0 0 0 0 0 0 0 0 0 0

823 14 SSReader const 0 8832 14 SSReader const 14 SSReader const 0 0 780 0 0 0 0 0 0 0 0 0 0

824 10 SSWriter * 0 8576 10 SSWriter * 10 SSWriter * 0 0 781 0 0 0 0 0 0 0 0 0 0

825 16 Datagram const * 0 8576 16 Datagram const * 16 Datagram const * 0 0 826 0 0 0 0 0 0 0 0 0 0

826 14 Datagram const 0 8832 14 Datagram const 14 Datagram const 0 0 818 0 0 0 0 0 0 0 0 0 0

827 16 SSWriter const * 0 8576 16 SSWriter const * 16 SSWriter const * 0 0 828 0 0 0 0 0 0 0 0 0 0

828 14 SSWriter const 0 8832 14 SSWriter const 14 SSWriter const 0 0 781 0 0 0 0 0 0 0 0 0 0

829 6 double 0 8194 6 double 6 double 0 3 0 0 0 0 0 0 0 0 0 0 0

830 15 ISocketStream * 0 8576 15 ISocketStream * 15 ISocketStream * 0 0 782 0 0 0 0 0 0 0 0 0 0

831 9 istream * 0 8576 9 istream * 9 istream * 0 0 783 0 0 0 0 0 0 0 0 0 0

832 15 OSocketStream * 0 8576 15 OSocketStream * 15 OSocketStream * 0 0 785 0 0 0 0 0 0 0 0 0 0

833 9 ostream * 0 8576 9 ostream * 9 ostream * 0 0 786 0 0 0 0 0 0 0 0 0 0

834 14 SocketStream * 0 8576 14 SocketStream * 14 SocketStream * 0 0 787 0 0 0 0 0 0 0 0 0 0

835 20 SocketStream const * 0 8576 20 SocketStream const * 20 SocketStream const * 0 0 836 0 0 0 0 0 0 0 0 0 0

836 18 SocketStream const 0 8832 18 SocketStream const 18 SocketStream const 0 0 787 0 0 0 0 0 0 0 0 0 0

837 10 iostream * 0 8576 10 iostream * 10 iostream * 0 0 788 0 0 0 0 0 0 0 0 0 0

838 9 URLSpec * 0 8576 9 URLSpec * 9 URLSpec * 0 0 789 0 0 0 0 0 0 0 0 0 0

839 15 URLSpec const * 0 8576 15 URLSpec const * 15 URLSpec const * 0 0 840 0 0 0 0 0 0 0 0 0 0

840 13 URLSpec const 0 8832 13 URLSpec const 13 URLSpec const 0 0 789 0 0 0 0 0 0 0 0 0 0

841 13 atomic string 0 2 13 atomic string 13 atomic string 0 7 0 0 0 0 0 0 0 0 0 0 0

842 6 size_t 0 2105344 6 size_t 6 size_t 0 0 843 0 0 0 0 0 0 0 0 0 0

843 17 unsigned long int 0 8214 17 unsigned long int 17 unsigned long int 0 1 0 0 0 0 0 0 0 0 0 0 0

844 4 char 0 8194 4 char 4 char 0 5 0 0 0 0 0 0 0 0 0 0 0

845 10 HTTPDate * 0 8576 10 HTTPDate * 10 HTTPDate * 0 0 793 0 0 0 0 0 0 0 0 0 0

846 16 HTTPDate const * 0 8576 16 HTTPDate const * 16 HTTPDate const * 0 0 847 0 0 0 0 0 0 0 0 0 0

847 14 HTTPDate const 0 8832 14 HTTPDate const 14 HTTPDate const 0 0 793 0 0 0 0 0 0 0 0 0 0

848 6 time_t 0 2105344 6 time_t 6 time_t 0 0 849 0 0 0 0 0 0 0 0 0 0

849 12 unsigned int 0 8198 12 unsigned int 12 unsigned int 0 1 0 0 0 0 0 0 0 0 0 0 0

850 12 HTTPCookie * 0 8576 12 HTTPCookie * 12 HTTPCookie * 0 0 794 0 0 0 0 0 0 0 0 0 0

851 18 HTTPCookie const * 0 8576 18 HTTPCookie const * 18 HTTPCookie const * 0 0 852 0 0 0 0 0 0 0 0 0 0

852 16 HTTPCookie const 0 8832 16 HTTPCookie const 16 HTTPCookie const 0 0 794 0 0 0 0 0 0 0 0 0 0

853 12 HTTPClient * 0 8576 12 HTTPClient * 12 HTTPClient * 0 0 795 0 0 0 0 0 0 0 0 0 0

854 18 HTTPClient const * 0 8576 18 HTTPClient const * 18 HTTPClient const * 0 0 855 0 0 0 0 0 0 0 0 0 0

855 16 HTTPClient const 0 8832 16 HTTPClient const 16 HTTPClient const 0 0 795 0 0 0 0 0 0 0 0 0 0

856 16 Filename const * 0 8576 16 Filename const * 16 Filename const * 0 0 857 0 0 0 0 0 0 0 0 0 0

857 14 Filename const 0 8832 14 Filename const 14 Filename const 0 0 858 0 0 0 0 0 0 0 0 0 0

858 8 Filename 0 2048 8 Filename 8 Filename 0 0 0 0 0 0 0 0 0 0 0 0 869
////////////////////////////////////////////////////////////////////
//       Class : Filename
// Description : The name of a file, such as a texture file or an Egg
//               file.  Stores the full pathname, and includes
//               functions for extracting out the directory prefix
//               part and the file extension and stuff.
//
//               A Filename is also aware of the mapping between the
//               Unix-like filename convention we use internally, and
//               the local OS's specific filename convention, and it
//               knows how to perform basic OS-specific I/O, like
//               testing for file existence and searching a
//               searchpath, as well as the best way to open an
//               fstream for reading or writing.
////////////////////////////////////////////////////////////////////

859 13 HTTPChannel * 0 8576 13 HTTPChannel * 13 HTTPChannel * 0 0 802 0 0 0 0 0 0 0 0 0 0

860 15 HTTPEntityTag * 0 8576 15 HTTPEntityTag * 15 HTTPEntityTag * 0 0 798 0 0 0 0 0 0 0 0 0 0

861 21 HTTPEntityTag const * 0 8576 21 HTTPEntityTag const * 21 HTTPEntityTag const * 0 0 862 0 0 0 0 0 0 0 0 0 0

862 19 HTTPEntityTag const 0 8832 19 HTTPEntityTag const 19 HTTPEntityTag const 0 0 798 0 0 0 0 0 0 0 0 0 0

863 14 DocumentSpec * 0 8576 14 DocumentSpec * 14 DocumentSpec * 0 0 799 0 0 0 0 0 0 0 0 0 0

864 20 DocumentSpec const * 0 8576 20 DocumentSpec const * 20 DocumentSpec const * 0 0 865 0 0 0 0 0 0 0 0 0 0

865 18 DocumentSpec const 0 8832 18 DocumentSpec const 18 DocumentSpec const 0 0 799 0 0 0 0 0 0 0 0 0 0

866 19 HTTPChannel const * 0 8576 19 HTTPChannel const * 19 HTTPChannel const * 0 0 867 0 0 0 0 0 0 0 0 0 0

867 17 HTTPChannel const 0 8832 17 HTTPChannel const 17 HTTPChannel const 0 0 802 0 0 0 0 0 0 0 0 0 0

868 10 streamsize 0 2105344 10 streamsize 10 streamsize 0 0 821 0 0 0 0 0 0 0 0 0 0

869 9 Ramfile * 0 8576 9 Ramfile * 9 Ramfile * 0 0 870 0 0 0 0 0 0 0 0 0 0

870 7 Ramfile 0 2048 7 Ramfile 7 Ramfile 0 0 0 0 0 0 0 0 0 0 0 0 271
////////////////////////////////////////////////////////////////////
//       Class : Ramfile
// Description : An in-memory buffer specifically designed for
//               downloading files to memory.
////////////////////////////////////////////////////////////////////

871 10 TypeHandle 0 2048 10 TypeHandle 10 TypeHandle 0 0 0 0 0 0 0 0 0 0 0 0 1098
////////////////////////////////////////////////////////////////////
//       Class : TypeHandle
// Description : TypeHandle is the identifier used to differentiate
//               C++ class types.  Any C++ classes that inherit from
//               some base class, and must be differentiated at run
//               time, should store a static TypeHandle object that
//               can be queried through a static member function
//               named get_class_type().  Most of the time, it is also
//               desirable to inherit from TypedObject, which provides
//               some virtual functions to return the TypeHandle for a
//               particular instance.
//
//               At its essence, a TypeHandle is simply a unique
//               identifier that is assigned by the TypeRegistry.  The
//               TypeRegistry stores a tree of TypeHandles, so that
//               ancestry of a particular type may be queried, and the
//               type name may be retrieved for run-time display.
////////////////////////////////////////////////////////////////////

872 12 TypeHandle * 0 8576 12 TypeHandle * 12 TypeHandle * 0 0 871 0 0 0 0 0 0 0 0 0 0

873 14 Decompressor * 0 8576 14 Decompressor * 14 Decompressor * 0 0 805 0 0 0 0 0 0 0 0 0 0

874 20 Decompressor const * 0 8576 20 Decompressor const * 20 Decompressor const * 0 0 875 0 0 0 0 0 0 0 0 0 0

875 18 Decompressor const 0 8832 18 Decompressor const 18 Decompressor const 0 0 805 0 0 0 0 0 0 0 0 0 0

876 11 PN_stdfloat 0 2105344 11 PN_stdfloat 11 PN_stdfloat 0 0 877 0 0 0 0 0 0 0 0 0 0

877 5 float 0 8194 5 float 5 float 0 2 0 0 0 0 0 0 0 0 0 0 0

878 12 DownloadDb * 0 8576 12 DownloadDb * 12 DownloadDb * 0 0 806 0 0 0 0 0 0 0 0 0 0

879 10 Filename * 0 8576 10 Filename * 10 Filename * 0 0 858 0 0 0 0 0 0 0 0 0 0

880 18 DownloadDb const * 0 8576 18 DownloadDb const * 18 DownloadDb const * 0 0 881 0 0 0 0 0 0 0 0 0 0

881 16 DownloadDb const 0 8832 16 DownloadDb const 16 DownloadDb const 0 0 806 0 0 0 0 0 0 0 0 0 0

882 5 Phase 0 2105344 5 Phase 5 Phase 0 0 876 0 0 0 0 0 0 0 0 0 0

883 7 HashVal 0 2048 7 HashVal 7 HashVal 0 0 0 0 0 0 0 0 0 0 0 0 292
////////////////////////////////////////////////////////////////////
//       Class : HashVal
// Description : Stores a 128-bit value that represents the hashed
//               contents (typically MD5) of a file or buffer.
////////////////////////////////////////////////////////////////////

884 9 HashVal * 0 8576 9 HashVal * 9 HashVal * 0 0 883 0 0 0 0 0 0 0 0 0 0

885 2 Db 0 1312768 14 DownloadDb::Db 14 DownloadDb::Db 806 0 0 0 0 0 0 0 0 0 0 0 0

886 4 Db * 0 8576 16 DownloadDb::Db * 16 DownloadDb::Db * 0 0 885 0 0 0 0 0 0 0 0 0 0

887 15 HashVal const * 0 8576 15 HashVal const * 15 HashVal const * 0 0 888 0 0 0 0 0 0 0 0 0 0

888 13 HashVal const 0 8832 13 HashVal const 13 HashVal const 0 0 883 0 0 0 0 0 0 0 0 0 0

889 11 Extractor * 0 8576 11 Extractor * 11 Extractor * 0 0 808 0 0 0 0 0 0 0 0 0 0

890 17 Extractor const * 0 8576 17 Extractor const * 17 Extractor const * 0 0 891 0 0 0 0 0 0 0 0 0 0

891 15 Extractor const 0 8832 15 Extractor const 15 Extractor const 0 0 808 0 0 0 0 0 0 0 0 0 0

892 17 MultiplexStream * 0 8576 17 MultiplexStream * 17 MultiplexStream * 0 0 809 0 0 0 0 0 0 0 0 0 0

893 6 FILE * 0 8576 6 FILE * 6 FILE * 0 0 894 0 0 0 0 0 0 0 0 0 0

894 4 FILE 0 1024 4 FILE 4 FILE 0 0 0 0 0 0 0 0 0 0 0 0 0

895 22 VirtualFileMountHTTP * 0 8576 22 VirtualFileMountHTTP * 22 VirtualFileMountHTTP * 0 0 812 0 0 0 0 0 0 0 0 0 0

896 28 VirtualFileMountHTTP const * 0 8576 28 VirtualFileMountHTTP const * 28 VirtualFileMountHTTP const * 0 0 897 0 0 0 0 0 0 0 0 0 0

897 26 VirtualFileMountHTTP const 0 8832 26 VirtualFileMountHTTP const 26 VirtualFileMountHTTP const 0 0 812 0 0 0 0 0 0 0 0 0 0

898 9 Patcher * 0 8576 9 Patcher * 9 Patcher * 0 0 814 0 0 0 0 0 0 0 0 0 0

899 8 Buffer * 0 8576 8 Buffer * 8 Buffer * 0 0 900 0 0 0 0 0 0 0 0 0 0

900 6 Buffer 0 2048 6 Buffer 6 Buffer 0 0 0 0 0 0 0 0 0 0 0 0 178
////////////////////////////////////////////////////////////////////
//       Class : Buffer
// Description :
////////////////////////////////////////////////////////////////////

901 15 Patcher const * 0 8576 15 Patcher const * 15 Patcher const * 0 0 902 0 0 0 0 0 0 0 0 0 0

902 13 Patcher const 0 8832 13 Patcher const 13 Patcher const 0 0 814 0 0 0 0 0 0 0 0 0 0

903 14 StringStream * 0 8576 14 StringStream * 14 StringStream * 0 0 815 0 0 0 0 0 0 0 0 0 0

0
0
1
904 0 0 244 18 get_redirect_steps 22 get_num_redirect_steps 17 get_redirect_step 
