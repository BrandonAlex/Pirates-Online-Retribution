1436948134
2 3
10 libp3event 4 _0BP 12 panda3d.core 
230
227 9 get_state 0 4 457 20 AsyncTask::get_state 0 1 1 258
////////////////////////////////////////////////////////////////////
//     Function: AsyncTask::get_state
//       Access: Published
//  Description: Returns the current state of the task.
////////////////////////////////////////////////////////////////////
57
inline AsyncTask::State AsyncTask::get_state(void) const;

228 8 is_alive 0 4 457 19 AsyncTask::is_alive 0 1 2 612
////////////////////////////////////////////////////////////////////
//     Function: AsyncTask::is_alive
//       Access: Published
//  Description: Returns true if the task is currently active or
//               sleeping on some task chain, meaning that it will be
//               executed in its turn, or false if it is not active.
//               If the task has recently been removed while it is in
//               the middle of execution, this will return false,
//               because the task will not run again once it finishes.
////////////////////////////////////////////////////////////////////
44
inline bool AsyncTask::is_alive(void) const;

229 11 get_manager 0 4 457 22 AsyncTask::get_manager 0 1 3 343
////////////////////////////////////////////////////////////////////
//     Function: AsyncTask::get_manager
//       Access: Published
//  Description: Returns the AsyncTaskManager that this task is active
//               on.  This will be NULL if the state is S_inactive.
////////////////////////////////////////////////////////////////////
60
inline AsyncTaskManager *AsyncTask::get_manager(void) const;

230 6 remove 0 4 457 17 AsyncTask::remove 0 1 4 436
////////////////////////////////////////////////////////////////////
//     Function: AsyncTask::remove
//       Access: Published
//  Description: Removes the task from its active manager, if any, and
//               makes the state S_inactive (or possible
//               S_servicing_removed).  This is a no-op if the state
//               is already S_inactive.
////////////////////////////////////////////////////////////////////
29
void AsyncTask::remove(void);

231 9 set_delay 0 4 457 20 AsyncTask::set_delay 0 1 5 1089
////////////////////////////////////////////////////////////////////
//     Function: AsyncTask::set_delay
//       Access: Published
//  Description: Specifies the amount of time, in seconds, by which
//               this task will be delayed after it has been added to
//               the AsyncTaskManager.  At least the specified amount
//               of time (and possibly more) will elapse before the
//               task begins.
//
//               You may specify a delay of 0.0 to guarantee that the
//               task will run in the next epoch following the one in
//               which it is added.
//
//               Setting this value after the task has already been
//               added will not affect the task's wake time; it will
//               only affect the task if it is re-added to the queue
//               in the future, for instance if the task returns
//               DS_again.  However, see recalc_wake_time() if you wish
//               to apply the delay effect immediately.
////////////////////////////////////////////////////////////////////
47
inline void AsyncTask::set_delay(double delay);

232 11 clear_delay 0 4 457 22 AsyncTask::clear_delay 0 1 6 472
////////////////////////////////////////////////////////////////////
//     Function: AsyncTask::clear_delay
//       Access: Published
//  Description: Removes any delay specified for the task.  The next
//               time the task is added to the queue, it will run
//               immediately.  This does not affect the task's wake
//               time if it has already been added to the queue.
////////////////////////////////////////////////////////////////////
41
inline void AsyncTask::clear_delay(void);

233 9 has_delay 0 4 457 20 AsyncTask::has_delay 0 1 7 324
////////////////////////////////////////////////////////////////////
//     Function: AsyncTask::has_delay
//       Access: Published
//  Description: Returns true if a delay has been set for this task
//               via set_delay(), or false otherwise.
////////////////////////////////////////////////////////////////////
45
inline bool AsyncTask::has_delay(void) const;

234 9 get_delay 0 4 457 20 AsyncTask::get_delay 0 1 8 301
////////////////////////////////////////////////////////////////////
//     Function: AsyncTask::get_delay
//       Access: Published
//  Description: Returns the delay value that has been set via
//               set_delay, if any.
////////////////////////////////////////////////////////////////////
47
inline double AsyncTask::get_delay(void) const;

235 13 get_wake_time 0 4 457 24 AsyncTask::get_wake_time 0 1 9 674
////////////////////////////////////////////////////////////////////
//     Function: AsyncTask::get_wake_time
//       Access: Published
//  Description: If this task has been added to an AsyncTaskManager
//               with a delay in effect, this returns the time at
//               which the task is expected to awaken.  It has no
//               meaning if the task has not yet been added to a
//               queue, or if there was no delay in effect at the time
//               the task was added.
//
//               If the task's status is not S_sleeping, this returns
//               0.0.
////////////////////////////////////////////////////////////////////
44
double AsyncTask::get_wake_time(void) const;

236 16 recalc_wake_time 0 4 457 27 AsyncTask::recalc_wake_time 0 1 10 774
////////////////////////////////////////////////////////////////////
//     Function: AsyncTask::recalc_wake_time
//       Access: Published
//  Description: If the task is currently sleeping on a task
//               chain, this resets its wake time to the current time
//               + get_delay().  It is as if the task had suddenly
//               returned DS_again.  The task will sleep for its
//               current delay seconds before running again.  This
//               method may therefore be used to make the task wake up
//               sooner or later than it would have otherwise.
//
//               If the task is not already sleeping, this method has
//               no effect.
////////////////////////////////////////////////////////////////////
39
void AsyncTask::recalc_wake_time(void);

237 14 get_start_time 0 4 457 25 AsyncTask::get_start_time 0 1 11 435
////////////////////////////////////////////////////////////////////
//     Function: AsyncTask::get_start_time
//       Access: Published
//  Description: Returns the time at which the task was started,
//               according to the task manager's clock.
//
//               It is only valid to call this if the task's status is
//               not S_inactive.
////////////////////////////////////////////////////////////////////
52
inline double AsyncTask::get_start_time(void) const;

238 16 get_elapsed_time 0 4 457 27 AsyncTask::get_elapsed_time 0 1 12 478
////////////////////////////////////////////////////////////////////
//     Function: AsyncTask::get_elapsed_time
//       Access: Published
//  Description: Returns the amount of time that has elapsed since
//               the task was started, according to the task manager's
//               clock.
//
//               It is only valid to call this if the task's status is
//               not S_inactive.
////////////////////////////////////////////////////////////////////
47
double AsyncTask::get_elapsed_time(void) const;

239 15 get_start_frame 0 4 457 26 AsyncTask::get_start_frame 0 1 13 444
////////////////////////////////////////////////////////////////////
//     Function: AsyncTask::get_start_frame
//       Access: Published
//  Description: Returns the frame number at which the task was
//               started, according to the task manager's clock.
//
//               It is only valid to call this if the task's status is
//               not S_inactive.
////////////////////////////////////////////////////////////////////
50
inline int AsyncTask::get_start_frame(void) const;

240 18 get_elapsed_frames 0 4 457 29 AsyncTask::get_elapsed_frames 0 1 14 483
////////////////////////////////////////////////////////////////////
//     Function: AsyncTask::get_elapsed_frames
//       Access: Published
//  Description: Returns the number of frames that have elapsed since
//               the task was started, according to the task manager's
//               clock.
//
//               It is only valid to call this if the task's status is
//               not S_inactive.
////////////////////////////////////////////////////////////////////
46
int AsyncTask::get_elapsed_frames(void) const;

241 8 set_name 0 4 457 19 AsyncTask::set_name 0 1 15 218
////////////////////////////////////////////////////////////////////
//     Function: AsyncTask::set_name
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
45
void AsyncTask::set_name(string const &name);

242 10 clear_name 0 4 457 21 AsyncTask::clear_name 0 1 16 250
////////////////////////////////////////////////////////////////////
//     Function: AsyncTask::clear_name
//       Access: Public
//  Description: Resets the task's name to empty.
////////////////////////////////////////////////////////////////////
40
inline void AsyncTask::clear_name(void);

243 15 get_name_prefix 0 4 457 26 AsyncTask::get_name_prefix 0 1 17 375
////////////////////////////////////////////////////////////////////
//     Function: AsyncTask::get_name_prefix
//       Access: Published
//  Description: Returns the initial part of the name, up to but not
//               including any trailing digits following a hyphen or
//               underscore.
////////////////////////////////////////////////////////////////////
46
string AsyncTask::get_name_prefix(void) const;

244 11 get_task_id 0 4 457 22 AsyncTask::get_task_id 0 1 18 329
////////////////////////////////////////////////////////////////////
//     Function: AsyncTask::get_task_id
//       Access: Public
//  Description: Returns a number guaranteed to be unique for each
//               different AsyncTask object in the universe.
////////////////////////////////////////////////////////////////////
64
inline AtomicAdjust::Integer AsyncTask::get_task_id(void) const;

245 14 set_task_chain 0 4 457 25 AsyncTask::set_task_chain 0 1 19 380
////////////////////////////////////////////////////////////////////
//     Function: AsyncTask::set_task_chain
//       Access: Published
//  Description: Specifies the AsyncTaskChain on which this task will
//               be running.  Each task chain runs tasks independently
//               of the others.
////////////////////////////////////////////////////////////////////
57
void AsyncTask::set_task_chain(string const &chain_name);

246 14 get_task_chain 0 4 457 25 AsyncTask::get_task_chain 0 1 20 378
////////////////////////////////////////////////////////////////////
//     Function: AsyncTask::get_task_chain
//       Access: Published
//  Description: Returns the AsyncTaskChain on which this task will
//               be running.  Each task chain runs tasks independently
//               of the others.
////////////////////////////////////////////////////////////////////
59
inline string const &AsyncTask::get_task_chain(void) const;

247 8 set_sort 0 4 457 19 AsyncTask::set_sort 0 1 21 823
////////////////////////////////////////////////////////////////////
//     Function: AsyncTask::set_sort
//       Access: Published
//  Description: Specifies a sort value for this task.  Within a given
//               AsyncTaskManager, all of the tasks with a given sort
//               value are guaranteed to be completed before any tasks
//               with a higher sort value are begun.
//
//               To put it another way, two tasks might execute in
//               parallel with each other only if they both have the
//               same sort value.  Tasks with a lower sort value are
//               executed first.
//
//               This is different from the priority, which makes no
//               such exclusion guarantees.
////////////////////////////////////////////////////////////////////
35
void AsyncTask::set_sort(int sort);

248 8 get_sort 0 4 457 19 AsyncTask::get_sort 0 1 22 291
////////////////////////////////////////////////////////////////////
//     Function: AsyncTask::get_sort
//       Access: Published
//  Description: Returns the task's current sort value.  See
//               set_sort().
////////////////////////////////////////////////////////////////////
43
inline int AsyncTask::get_sort(void) const;

249 12 set_priority 0 4 457 23 AsyncTask::set_priority 0 1 23 1339
////////////////////////////////////////////////////////////////////
//     Function: AsyncTask::set_priority
//       Access: Published
//  Description: Specifies a priority value for this task.  In
//               general, tasks with a higher priority value are
//               executed before tasks with a lower priority value
//               (but only for tasks with the same sort value).
//
//               Unlike the sort value, tasks with different
//               priorities may execute at the same time, if the
//               AsyncTaskManager has more than one thread servicing
//               tasks.
//
//               Also see AsyncTaskChain::set_timeslice_priority(),
//               which changes the meaning of this value.  In the
//               default mode, when the timeslice_priority flag is
//               false, all tasks always run once per epoch,
//               regardless of their priority values (that is, the
//               priority controls the order of the task execution
//               only, not the number of times it runs).  On the other
//               hand, if you set the timeslice_priority flag to true,
//               then changing a task's priority has an effect on the
//               number of times it runs.
////////////////////////////////////////////////////////////////////
43
void AsyncTask::set_priority(int priority);

250 12 get_priority 0 4 457 23 AsyncTask::get_priority 0 1 24 303
////////////////////////////////////////////////////////////////////
//     Function: AsyncTask::get_priority
//       Access: Published
//  Description: Returns the task's current priority value.  See
//               set_priority().
////////////////////////////////////////////////////////////////////
47
inline int AsyncTask::get_priority(void) const;

251 14 set_done_event 0 4 457 25 AsyncTask::set_done_event 0 1 25 529
////////////////////////////////////////////////////////////////////
//     Function: AsyncTask::set_done_event
//       Access: Published
//  Description: Sets the event name that will be triggered
//               when the task finishes.  This should only be called
//               before the task has been started, or after it has
//               finished and before it is about to be restarted
//               (i.e. when get_state() returns S_inactive).
////////////////////////////////////////////////////////////////////
64
inline void AsyncTask::set_done_event(string const &done_event);

252 14 get_done_event 0 4 457 25 AsyncTask::get_done_event 0 1 26 334
////////////////////////////////////////////////////////////////////
//     Function: AsyncTask::get_done_event
//       Access: Published
//  Description: Returns the event name that will be triggered
//               when the task finishes.  See set_done_event().
////////////////////////////////////////////////////////////////////
59
inline string const &AsyncTask::get_done_event(void) const;

253 17 set_python_object 0 4 457 28 AsyncTask::set_python_object 0 1 27 326
////////////////////////////////////////////////////////////////////
//     Function: AsyncTask::set_python_object
//       Access: Published
//  Description: Specifies an arbitrary Python object that will be
//               piggybacked on the task object.
////////////////////////////////////////////////////////////////////
66
inline void AsyncTask::set_python_object(PyObject *python_object);

254 17 get_python_object 0 4 457 28 AsyncTask::get_python_object 0 1 28 374
////////////////////////////////////////////////////////////////////
//     Function: AsyncTask::get_python_object
//       Access: Published
//  Description: Returns the Python object that was specified to
//               set_python_object(), if any, or None if no object was
//               specified.
////////////////////////////////////////////////////////////////////
58
inline PyObject *AsyncTask::get_python_object(void) const;

255 6 get_dt 0 4 457 17 AsyncTask::get_dt 0 1 29 318
////////////////////////////////////////////////////////////////////
//     Function: AsyncTask::get_dt
//       Access: Published
//  Description: Returns the amount of time elapsed during the task's
//               previous run cycle, in seconds.
////////////////////////////////////////////////////////////////////
44
inline double AsyncTask::get_dt(void) const;

256 10 get_max_dt 0 4 457 21 AsyncTask::get_max_dt 0 1 30 342
////////////////////////////////////////////////////////////////////
//     Function: AsyncTask::get_max_dt
//       Access: Published
//  Description: Returns the maximum amount of time elapsed during any
//               one of the task's previous run cycles, in seconds.
////////////////////////////////////////////////////////////////////
48
inline double AsyncTask::get_max_dt(void) const;

257 14 get_average_dt 0 4 457 25 AsyncTask::get_average_dt 0 1 31 343
////////////////////////////////////////////////////////////////////
//     Function: AsyncTask::get_average_dt
//       Access: Published
//  Description: Returns the average amount of time elapsed during
//               each of the task's previous run cycles, in seconds.
////////////////////////////////////////////////////////////////////
52
inline double AsyncTask::get_average_dt(void) const;

258 6 output 0 6 457 17 AsyncTask::output 0 1 32 226
////////////////////////////////////////////////////////////////////
//     Function: AsyncTask::output
//       Access: Published, Virtual
//  Description: 
////////////////////////////////////////////////////////////////////
51
virtual void AsyncTask::output(ostream &out) const;

259 14 get_class_type 0 4 457 25 AsyncTask::get_class_type 0 1 33 0
50
static TypeHandle AsyncTask::get_class_type(void);

260 19 AsyncTaskCollection 0 4 461 40 AsyncTaskCollection::AsyncTaskCollection 0 2 34 35 469
////////////////////////////////////////////////////////////////////
//     Function: AsyncTaskCollection::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: AsyncTaskCollection::Copy Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
122
AsyncTaskCollection::AsyncTaskCollection(void);
AsyncTaskCollection::AsyncTaskCollection(AsyncTaskCollection const &copy);

261 10 operator = 0 4 461 31 AsyncTaskCollection::operator = 0 1 36 0
70
void AsyncTaskCollection::operator =(AsyncTaskCollection const &copy);

262 20 ~AsyncTaskCollection 0 4 461 41 AsyncTaskCollection::~AsyncTaskCollection 0 0 230
////////////////////////////////////////////////////////////////////
//     Function: AsyncTaskCollection::Destructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
55
inline AsyncTaskCollection::~AsyncTaskCollection(void);

263 8 add_task 0 4 461 29 AsyncTaskCollection::add_task 0 1 37 268
////////////////////////////////////////////////////////////////////
//     Function: AsyncTaskCollection::add_task
//       Access: Published
//  Description: Adds a new AsyncTask to the collection.
////////////////////////////////////////////////////////////////////
52
void AsyncTaskCollection::add_task(AsyncTask *task);

264 11 remove_task 0 4 461 32 AsyncTaskCollection::remove_task 0 2 38 39 684
////////////////////////////////////////////////////////////////////
//     Function: AsyncTaskCollection::remove_task
//       Access: Published
//  Description: Removes the indicated AsyncTask from the collection.
//               Returns true if the task was removed, false if it was
//               not a member of the collection.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: AsyncTaskCollection::remove_task
//       Access: Published
//  Description: Removes the nth AsyncTask from the collection.
////////////////////////////////////////////////////////////////////
105
bool AsyncTaskCollection::remove_task(AsyncTask *task);
void AsyncTaskCollection::remove_task(int index);

265 14 add_tasks_from 0 4 461 35 AsyncTaskCollection::add_tasks_from 0 1 40 474
////////////////////////////////////////////////////////////////////
//     Function: AsyncTaskCollection::add_tasks_from
//       Access: Published
//  Description: Adds all the AsyncTasks indicated in the other
//               collection to this task.  The other tasks are simply
//               appended to the end of the tasks in this list;
//               duplicates are not automatically removed.
////////////////////////////////////////////////////////////////////
75
void AsyncTaskCollection::add_tasks_from(AsyncTaskCollection const &other);

266 17 remove_tasks_from 0 4 461 38 AsyncTaskCollection::remove_tasks_from 0 1 41 337
////////////////////////////////////////////////////////////////////
//     Function: AsyncTaskCollection::remove_tasks_from
//       Access: Published
//  Description: Removes from this collection all of the AsyncTasks
//               listed in the other collection.
////////////////////////////////////////////////////////////////////
78
void AsyncTaskCollection::remove_tasks_from(AsyncTaskCollection const &other);

267 22 remove_duplicate_tasks 0 4 461 43 AsyncTaskCollection::remove_duplicate_tasks 0 1 42 476
////////////////////////////////////////////////////////////////////
//     Function: AsyncTaskCollection::remove_duplicate_tasks
//       Access: Published
//  Description: Removes any duplicate entries of the same AsyncTasks
//               on this collection.  If a AsyncTask appears multiple
//               times, the first appearance is retained; subsequent
//               appearances are removed.
////////////////////////////////////////////////////////////////////
55
void AsyncTaskCollection::remove_duplicate_tasks(void);

268 8 has_task 0 4 461 29 AsyncTaskCollection::has_task 0 1 43 330
////////////////////////////////////////////////////////////////////
//     Function: AsyncTaskCollection::has_task
//       Access: Published
//  Description: Returns true if the indicated AsyncTask appears in
//               this collection, false otherwise.
////////////////////////////////////////////////////////////////////
58
bool AsyncTaskCollection::has_task(AsyncTask *task) const;

269 5 clear 0 4 461 26 AsyncTaskCollection::clear 0 1 44 269
////////////////////////////////////////////////////////////////////
//     Function: AsyncTaskCollection::clear
//       Access: Published
//  Description: Removes all AsyncTasks from the collection.
////////////////////////////////////////////////////////////////////
38
void AsyncTaskCollection::clear(void);

270 9 find_task 0 4 461 30 AsyncTaskCollection::find_task 0 1 45 365
////////////////////////////////////////////////////////////////////
//     Function: AsyncTaskCollection::find_task
//       Access: Published
//  Description: Returns the task in the collection with the
//               indicated name, if any, or NULL if no task has
//               that name.
////////////////////////////////////////////////////////////////////
68
AsyncTask *AsyncTaskCollection::find_task(string const &name) const;

271 13 get_num_tasks 0 4 461 34 AsyncTaskCollection::get_num_tasks 0 1 46 285
////////////////////////////////////////////////////////////////////
//     Function: AsyncTaskCollection::get_num_tasks
//       Access: Published
//  Description: Returns the number of AsyncTasks in the collection.
////////////////////////////////////////////////////////////////////
51
int AsyncTaskCollection::get_num_tasks(void) const;

272 8 get_task 0 4 461 29 AsyncTaskCollection::get_task 0 1 47 273
////////////////////////////////////////////////////////////////////
//     Function: AsyncTaskCollection::get_task
//       Access: Published
//  Description: Returns the nth AsyncTask in the collection.
////////////////////////////////////////////////////////////////////
58
AsyncTask *AsyncTaskCollection::get_task(int index) const;

273 11 operator [] 0 4 461 32 AsyncTaskCollection::operator [] 0 1 48 393
////////////////////////////////////////////////////////////////////
//     Function: AsyncTaskCollection::operator []
//       Access: Published
//  Description: Returns the nth AsyncTask in the collection.  This is
//               the same as get_task(), but it may be a more
//               convenient way to access it.
////////////////////////////////////////////////////////////////////
61
AsyncTask *AsyncTaskCollection::operator [](int index) const;

274 4 size 0 4 461 25 AsyncTaskCollection::size 0 1 49 332
////////////////////////////////////////////////////////////////////
//     Function: AsyncTaskCollection::size
//       Access: Published
//  Description: Returns the number of tasks in the collection.  This
//               is the same thing as get_num_tasks().
////////////////////////////////////////////////////////////////////
42
int AsyncTaskCollection::size(void) const;

275 11 operator += 0 4 461 32 AsyncTaskCollection::operator += 0 1 50 0
79
inline void AsyncTaskCollection::operator +=(AsyncTaskCollection const &other);

276 10 operator + 0 4 461 31 AsyncTaskCollection::operator + 0 1 51 0
99
inline AsyncTaskCollection AsyncTaskCollection::operator +(AsyncTaskCollection const &other) const;

277 6 output 0 4 461 27 AsyncTaskCollection::output 0 1 52 338
////////////////////////////////////////////////////////////////////
//     Function: AsyncTaskCollection::output
//       Access: Published
//  Description: Writes a brief one-line description of the
//               AsyncTaskCollection to the indicated output stream.
////////////////////////////////////////////////////////////////////
53
void AsyncTaskCollection::output(ostream &out) const;

278 5 write 0 4 461 26 AsyncTaskCollection::write 0 1 53 342
////////////////////////////////////////////////////////////////////
//     Function: AsyncTaskCollection::write
//       Access: Published
//  Description: Writes a complete multi-line description of the
//               AsyncTaskCollection to the indicated output stream.
////////////////////////////////////////////////////////////////////
74
void AsyncTaskCollection::write(ostream &out, int indent_level = 0) const;

279 29 upcast_to_TypedReferenceCount 0 12 462 45 AsyncTaskChain::upcast_to_TypedReferenceCount 0 1 81 49
upcast from AsyncTaskChain to TypedReferenceCount
73
TypedReferenceCount *AsyncTaskChain::upcast_to_TypedReferenceCount(void);

280 26 downcast_to_AsyncTaskChain 0 12 463 47 TypedReferenceCount::downcast_to_AsyncTaskChain 0 1 82 51
downcast from TypedReferenceCount to AsyncTaskChain
70
AsyncTaskChain *TypedReferenceCount::downcast_to_AsyncTaskChain(void);

281 17 upcast_to_Namable 0 12 462 33 AsyncTaskChain::upcast_to_Namable 0 1 83 37
upcast from AsyncTaskChain to Namable
49
Namable *AsyncTaskChain::upcast_to_Namable(void);

282 26 downcast_to_AsyncTaskChain 0 12 464 35 Namable::downcast_to_AsyncTaskChain 0 1 84 39
downcast from Namable to AsyncTaskChain
58
AsyncTaskChain *Namable::downcast_to_AsyncTaskChain(void);

283 15 ~AsyncTaskChain 0 6 462 31 AsyncTaskChain::~AsyncTaskChain 0 0 234
////////////////////////////////////////////////////////////////////
//     Function: AsyncTaskChain::Destructor
//       Access: Published, Virtual
//  Description:
////////////////////////////////////////////////////////////////////
46
virtual AsyncTaskChain::~AsyncTaskChain(void);

284 14 set_tick_clock 0 4 462 30 AsyncTaskChain::set_tick_clock 0 1 54 405
////////////////////////////////////////////////////////////////////
//     Function: AsyncTaskChain::set_tick_clock
//       Access: Published
//  Description: Sets the tick_clock flag.  When this is true,
//               get_clock()->tick() will be called automatically at
//               each task epoch.  This is false by default.
////////////////////////////////////////////////////////////////////
53
void AsyncTaskChain::set_tick_clock(bool tick_clock);

285 14 get_tick_clock 0 4 462 30 AsyncTaskChain::get_tick_clock 0 1 55 281
////////////////////////////////////////////////////////////////////
//     Function: AsyncTaskChain::get_tick_clock
//       Access: Published
//  Description: Returns the tick_clock flag.  See set_tick_clock().
////////////////////////////////////////////////////////////////////
48
bool AsyncTaskChain::get_tick_clock(void) const;

286 15 set_num_threads 0 4 462 31 AsyncTaskChain::set_num_threads 0 1 56 382
////////////////////////////////////////////////////////////////////
//     Function: AsyncTaskChain::set_num_threads
//       Access: Published
//  Description: Changes the number of threads for this task chain.
//               This may require stopping the threads if they are
//               already running.
////////////////////////////////////////////////////////////////////
54
void AsyncTaskChain::set_num_threads(int num_threads);

287 15 get_num_threads 0 4 462 31 AsyncTaskChain::get_num_threads 0 1 57 376
////////////////////////////////////////////////////////////////////
//     Function: AsyncTaskChain::get_num_threads
//       Access: Published
//  Description: Returns the number of threads that will be servicing
//               tasks for this chain.  Also see
//               get_num_running_threads().
////////////////////////////////////////////////////////////////////
48
int AsyncTaskChain::get_num_threads(void) const;

288 23 get_num_running_threads 0 4 462 39 AsyncTaskChain::get_num_running_threads 0 1 58 484
////////////////////////////////////////////////////////////////////
//     Function: AsyncTaskChain::get_num_running_threads
//       Access: Published
//  Description: Returns the number of threads that have been created
//               and are actively running.  This will return 0 before
//               the threads have been started; it will also return 0
//               if thread support is not available.
////////////////////////////////////////////////////////////////////
56
int AsyncTaskChain::get_num_running_threads(void) const;

289 19 set_thread_priority 0 4 462 35 AsyncTaskChain::set_thread_priority 0 1 59 409
////////////////////////////////////////////////////////////////////
//     Function: AsyncTaskChain::set_thread_priority
//       Access: Published
//  Description: Changes the priority associated with threads that
//               serve this task chain.  This may require stopping the
//               threads if they are already running.
////////////////////////////////////////////////////////////////////
66
void AsyncTaskChain::set_thread_priority(ThreadPriority priority);

290 19 get_thread_priority 0 4 462 35 AsyncTaskChain::get_thread_priority 0 1 60 324
////////////////////////////////////////////////////////////////////
//     Function: AsyncTaskChain::get_thread_priority
//       Access: Published
//  Description: Returns the priority associated with threads that
//               serve this task chain.
////////////////////////////////////////////////////////////////////
63
ThreadPriority AsyncTaskChain::get_thread_priority(void) const;

291 16 set_frame_budget 0 4 462 32 AsyncTaskChain::set_frame_budget 0 1 61 739
////////////////////////////////////////////////////////////////////
//     Function: AsyncTaskChain::set_frame_budget
//       Access: Published
//  Description: Sets the maximum amount of time per frame the tasks
//               on this chain are granted for execution.  If this is
//               less than zero, there is no limit; if it is >= 0, it
//               represents a maximum amount of time (in seconds) that
//               will be used to execute tasks.  If this time is
//               exceeded in any one frame, the task chain will stop
//               executing tasks until the next frame, as defined by
//               the TaskManager's clock.
////////////////////////////////////////////////////////////////////
59
void AsyncTaskChain::set_frame_budget(double frame_budget);

292 16 get_frame_budget 0 4 462 32 AsyncTaskChain::get_frame_budget 0 1 62 386
////////////////////////////////////////////////////////////////////
//     Function: AsyncTaskChain::get_frame_budget
//       Access: Published
//  Description: Returns the maximum amount of time per frame the
//               tasks on this chain are granted for execution.  See
//               set_frame_budget().
////////////////////////////////////////////////////////////////////
52
double AsyncTaskChain::get_frame_budget(void) const;

293 14 set_frame_sync 0 4 462 30 AsyncTaskChain::set_frame_sync 0 1 63 1050
////////////////////////////////////////////////////////////////////
//     Function: AsyncTaskChain::set_frame_sync
//       Access: Published
//  Description: Sets the frame_sync flag.  When this flag is true,
//               this task chain will be forced to sync with the
//               TaskManager's clock.  It will run no faster than one
//               epoch per clock frame.
//
//               When this flag is false, the default, the task chain
//               will finish all of its tasks and then immediately
//               start from the first task again, regardless of the
//               clock frame.  When it is true, the task chain will
//               finish all of its tasks and then wait for the clock
//               to tick to the next frame before resuming the first
//               task.
//
//               This only makes sense for threaded task chains.
//               Non-threaded task chains are automatically
//               synchronous.
////////////////////////////////////////////////////////////////////
53
void AsyncTaskChain::set_frame_sync(bool frame_sync);

294 14 get_frame_sync 0 4 462 30 AsyncTaskChain::get_frame_sync 0 1 64 281
////////////////////////////////////////////////////////////////////
//     Function: AsyncTaskChain::get_frame_sync
//       Access: Published
//  Description: Returns the frame_sync flag.  See set_frame_sync().
////////////////////////////////////////////////////////////////////
48
bool AsyncTaskChain::get_frame_sync(void) const;

295 22 set_timeslice_priority 0 4 462 38 AsyncTaskChain::set_timeslice_priority 0 1 65 1385
////////////////////////////////////////////////////////////////////
//     Function: AsyncTaskChain::set_timeslice_priority
//       Access: Published
//  Description: Sets the timeslice_priority flag.  This changes
//               the interpretation of priority, and the number of
//               times per epoch each task will run.  
//
//               When this flag is true, some tasks might not run in
//               any given epoch.  Instead, tasks with priority higher
//               than 1 will be given precedence, in proportion to the
//               amount of time they have already used.  This gives
//               higher-priority tasks more runtime than
//               lower-priority tasks.  Each task gets the amount of
//               time proportional to its priority value, so a task
//               with priority 100 will get five times as much
//               processing time as a task with priority 20.  For
//               these purposes, priority values less than 1 are
//               deemed to be equal to 1.
//
//               When this flag is false (the default), all tasks are
//               run exactly once each epoch, round-robin style.
//               Priority is only used to determine which task runs
//               first within tasks of the same sort value.
////////////////////////////////////////////////////////////////////
69
void AsyncTaskChain::set_timeslice_priority(bool timeslice_priority);

296 22 get_timeslice_priority 0 4 462 38 AsyncTaskChain::get_timeslice_priority 0 1 66 456
////////////////////////////////////////////////////////////////////
//     Function: AsyncTaskChain::get_timeslice_priority
//       Access: Published
//  Description: Returns the timeslice_priority flag.  This changes
//               the interpretation of priority, and the number of
//               times per epoch each task will run.  See
//               set_timeslice_priority().
////////////////////////////////////////////////////////////////////
56
bool AsyncTaskChain::get_timeslice_priority(void) const;

297 12 stop_threads 0 4 462 28 AsyncTaskChain::stop_threads 0 1 67 477
////////////////////////////////////////////////////////////////////
//     Function: AsyncTaskChain::stop_threads
//       Access: Published
//  Description: Stops any threads that are currently running.  If any
//               tasks are still pending and have not yet been picked
//               up by a thread, they will not be serviced unless
//               poll() or start_threads() is later called.
////////////////////////////////////////////////////////////////////
40
void AsyncTaskChain::stop_threads(void);

298 13 start_threads 0 4 462 29 AsyncTaskChain::start_threads 0 1 68 417
////////////////////////////////////////////////////////////////////
//     Function: AsyncTaskChain::start_threads
//       Access: Published
//  Description: Starts any requested threads to service the tasks on
//               the queue.  This is normally not necessary, since
//               adding a task will start the threads automatically.
////////////////////////////////////////////////////////////////////
41
void AsyncTaskChain::start_threads(void);

299 10 is_started 0 4 462 26 AsyncTaskChain::is_started 0 1 69 472
////////////////////////////////////////////////////////////////////
//     Function: AsyncTaskChain::is_started
//       Access: Published
//  Description: Returns true if the thread(s) have been started and
//               are ready to service requests, false otherwise.  If
//               this is false, the next call to add() or add_and_do()
//               will automatically start the threads.
////////////////////////////////////////////////////////////////////
51
inline bool AsyncTaskChain::is_started(void) const;

300 8 has_task 0 4 462 24 AsyncTaskChain::has_task 0 1 70 331
////////////////////////////////////////////////////////////////////
//     Function: AsyncTaskChain::has_task
//       Access: Published
//  Description: Returns true if the indicated task has been added to
//               this AsyncTaskChain, false otherwise.
////////////////////////////////////////////////////////////////////
53
bool AsyncTaskChain::has_task(AsyncTask *task) const;

301 14 wait_for_tasks 0 4 462 30 AsyncTaskChain::wait_for_tasks 0 1 71 266
////////////////////////////////////////////////////////////////////
//     Function: AsyncTaskChain::wait_for_tasks
//       Access: Published
//  Description: Blocks until the task list is empty.
////////////////////////////////////////////////////////////////////
42
void AsyncTaskChain::wait_for_tasks(void);

302 13 get_num_tasks 0 4 462 29 AsyncTaskChain::get_num_tasks 0 1 72 334
////////////////////////////////////////////////////////////////////
//     Function: AsyncTaskChain::get_num_tasks
//       Access: Published
//  Description: Returns the number of tasks that are currently active
//               or sleeping within the task chain.
////////////////////////////////////////////////////////////////////
46
int AsyncTaskChain::get_num_tasks(void) const;

303 9 get_tasks 0 4 462 25 AsyncTaskChain::get_tasks 0 1 73 338
////////////////////////////////////////////////////////////////////
//     Function: AsyncTaskChain::get_tasks
//       Access: Published
//  Description: Returns the set of tasks that are active or sleeping
//               on the task chain, at the time of the call.
////////////////////////////////////////////////////////////////////
58
AsyncTaskCollection AsyncTaskChain::get_tasks(void) const;

304 16 get_active_tasks 0 4 462 32 AsyncTaskChain::get_active_tasks 0 1 74 369
////////////////////////////////////////////////////////////////////
//     Function: AsyncTaskChain::get_active_tasks
//       Access: Published
//  Description: Returns the set of tasks that are active (and not
//               sleeping) on the task chain, at the time of the
//               call.
////////////////////////////////////////////////////////////////////
65
AsyncTaskCollection AsyncTaskChain::get_active_tasks(void) const;

305 18 get_sleeping_tasks 0 4 462 34 AsyncTaskChain::get_sleeping_tasks 0 1 75 371
////////////////////////////////////////////////////////////////////
//     Function: AsyncTaskChain::get_sleeping_tasks
//       Access: Published
//  Description: Returns the set of tasks that are sleeping (and not
//               active) on the task chain, at the time of the
//               call.
////////////////////////////////////////////////////////////////////
67
AsyncTaskCollection AsyncTaskChain::get_sleeping_tasks(void) const;

306 4 poll 0 4 462 20 AsyncTaskChain::poll 0 1 76 697
////////////////////////////////////////////////////////////////////
//     Function: AsyncTaskChain::poll
//       Access: Published
//  Description: Runs through all the tasks in the task list, once, if
//               the task chain is running in single-threaded mode
//               (no threads available).  This method does nothing in
//               threaded mode, so it may safely be called in either
//               case.
//
//               Normally, you would not call this function directly;
//               instead, call AsyncTaskManager::poll(), which polls
//               all of the task chains in sequence.
////////////////////////////////////////////////////////////////////
32
void AsyncTaskChain::poll(void);

307 18 get_next_wake_time 0 4 462 34 AsyncTaskChain::get_next_wake_time 0 1 77 420
////////////////////////////////////////////////////////////////////
//     Function: AsyncTaskChain::get_next_wake_time
//       Access: Published
//  Description: Returns the scheduled time (on the manager's clock)
//               of the next sleeping task, on any task chain, to
//               awaken.  Returns -1 if there are no sleeping tasks.
////////////////////////////////////////////////////////////////////
54
double AsyncTaskChain::get_next_wake_time(void) const;

308 6 output 0 6 462 22 AsyncTaskChain::output 0 1 78 231
////////////////////////////////////////////////////////////////////
//     Function: AsyncTaskChain::output
//       Access: Published, Virtual
//  Description: 
////////////////////////////////////////////////////////////////////
56
virtual void AsyncTaskChain::output(ostream &out) const;

309 5 write 0 6 462 21 AsyncTaskChain::write 0 1 79 230
////////////////////////////////////////////////////////////////////
//     Function: AsyncTaskChain::write
//       Access: Published, Virtual
//  Description: 
////////////////////////////////////////////////////////////////////
77
virtual void AsyncTaskChain::write(ostream &out, int indent_level = 0) const;

310 14 get_class_type 0 4 462 30 AsyncTaskChain::get_class_type 0 1 80 0
55
static TypeHandle AsyncTaskChain::get_class_type(void);

311 29 upcast_to_TypedReferenceCount 0 12 465 47 AsyncTaskManager::upcast_to_TypedReferenceCount 0 1 114 51
upcast from AsyncTaskManager to TypedReferenceCount
75
TypedReferenceCount *AsyncTaskManager::upcast_to_TypedReferenceCount(void);

312 28 downcast_to_AsyncTaskManager 0 12 463 49 TypedReferenceCount::downcast_to_AsyncTaskManager 0 1 115 53
downcast from TypedReferenceCount to AsyncTaskManager
74
AsyncTaskManager *TypedReferenceCount::downcast_to_AsyncTaskManager(void);

313 17 upcast_to_Namable 0 12 465 35 AsyncTaskManager::upcast_to_Namable 0 1 116 39
upcast from AsyncTaskManager to Namable
51
Namable *AsyncTaskManager::upcast_to_Namable(void);

314 28 downcast_to_AsyncTaskManager 0 12 464 37 Namable::downcast_to_AsyncTaskManager 0 1 117 41
downcast from Namable to AsyncTaskManager
62
AsyncTaskManager *Namable::downcast_to_AsyncTaskManager(void);

315 16 AsyncTaskManager 0 4 465 34 AsyncTaskManager::AsyncTaskManager 0 1 85 228
////////////////////////////////////////////////////////////////////
//     Function: AsyncTaskManager::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
55
AsyncTaskManager::AsyncTaskManager(string const &name);

316 17 ~AsyncTaskManager 0 6 465 35 AsyncTaskManager::~AsyncTaskManager 0 0 236
////////////////////////////////////////////////////////////////////
//     Function: AsyncTaskManager::Destructor
//       Access: Published, Virtual
//  Description:
////////////////////////////////////////////////////////////////////
50
virtual AsyncTaskManager::~AsyncTaskManager(void);

317 7 cleanup 0 4 465 25 AsyncTaskManager::cleanup 0 1 86 345
////////////////////////////////////////////////////////////////////
//     Function: AsyncTaskManager::cleanup
//       Access: Published
//  Description: Stops all threads and messily empties the task list.
//               This is intended to be called on destruction only.
////////////////////////////////////////////////////////////////////
37
void AsyncTaskManager::cleanup(void);

318 9 set_clock 0 4 465 27 AsyncTaskManager::set_clock 0 1 87 578
////////////////////////////////////////////////////////////////////
//     Function: AsyncTaskManager::set_clock
//       Access: Published
//  Description: Replaces the clock pointer used within the
//               AsyncTaskManager.  This is used to control when tasks
//               with a set_delay() specified will be scheduled.  It
//               can also be ticked automatically each epoch, if
//               set_tick_clock() is true.
//
//               The default is the global clock pointer.
////////////////////////////////////////////////////////////////////
60
inline void AsyncTaskManager::set_clock(ClockObject *clock);

319 9 get_clock 0 4 465 27 AsyncTaskManager::get_clock 0 1 88 321
////////////////////////////////////////////////////////////////////
//     Function: AsyncTaskManager::get_clock
//       Access: Published
//  Description: Returns the clock pointer used within the
//               AsyncTaskManager.  See set_clock().
////////////////////////////////////////////////////////////////////
54
inline ClockObject *AsyncTaskManager::get_clock(void);

320 19 get_num_task_chains 0 4 465 37 AsyncTaskManager::get_num_task_chains 0 1 89 281
////////////////////////////////////////////////////////////////////
//     Function: AsyncTaskManager::get_num_task_chains
//       Access: Published
//  Description: Returns the number of different task chains.
////////////////////////////////////////////////////////////////////
54
int AsyncTaskManager::get_num_task_chains(void) const;

321 14 get_task_chain 0 4 465 32 AsyncTaskManager::get_task_chain 0 1 90 259
////////////////////////////////////////////////////////////////////
//     Function: AsyncTaskManager::get_task_chain
//       Access: Published
//  Description: Returns the nth task chain.
////////////////////////////////////////////////////////////////////
62
AsyncTaskChain *AsyncTaskManager::get_task_chain(int n) const;

322 15 make_task_chain 0 4 465 33 AsyncTaskManager::make_task_chain 0 1 91 445
////////////////////////////////////////////////////////////////////
//     Function: AsyncTaskManager::make_task_chain
//       Access: Published
//  Description: Creates a new AsyncTaskChain of the indicated name
//               and stores it within the AsyncTaskManager.  If a task
//               chain with this name already exists, returns it
//               instead.
////////////////////////////////////////////////////////////////////
70
AsyncTaskChain *AsyncTaskManager::make_task_chain(string const &name);

323 15 find_task_chain 0 4 465 33 AsyncTaskManager::find_task_chain 0 1 92 349
////////////////////////////////////////////////////////////////////
//     Function: AsyncTaskManager::find_task_chain
//       Access: Protected
//  Description: Searches a new AsyncTaskChain of the indicated name
//               and returns it if it exists, or NULL otherwise.
////////////////////////////////////////////////////////////////////
70
AsyncTaskChain *AsyncTaskManager::find_task_chain(string const &name);

324 17 remove_task_chain 0 4 465 35 AsyncTaskManager::remove_task_chain 0 1 93 496
////////////////////////////////////////////////////////////////////
//     Function: AsyncTaskManager::remove_task_chain
//       Access: Protected
//  Description: Removes the AsyncTaskChain of the indicated name.
//               If the chain still has tasks, this will block until
//               all tasks are finished.
//
//               Returns true if successful, or false if the chain did
//               not exist.
////////////////////////////////////////////////////////////////////
61
bool AsyncTaskManager::remove_task_chain(string const &name);

325 3 add 0 4 465 21 AsyncTaskManager::add 0 1 94 379
////////////////////////////////////////////////////////////////////
//     Function: AsyncTaskManager::add
//       Access: Published
//  Description: Adds the indicated task to the active queue.  It is
//               an error if the task is already added to this or any
//               other active queue.
////////////////////////////////////////////////////////////////////
44
void AsyncTaskManager::add(AsyncTask *task);

326 8 has_task 0 4 465 26 AsyncTaskManager::has_task 0 1 95 335
////////////////////////////////////////////////////////////////////
//     Function: AsyncTaskManager::has_task
//       Access: Published
//  Description: Returns true if the indicated task has been added to
//               this AsyncTaskManager, false otherwise.
////////////////////////////////////////////////////////////////////
55
bool AsyncTaskManager::has_task(AsyncTask *task) const;

327 9 find_task 0 4 465 27 AsyncTaskManager::find_task 0 1 96 468
////////////////////////////////////////////////////////////////////
//     Function: AsyncTaskManager::find_task
//       Access: Published
//  Description: Returns the first task found with the indicated name,
//               or NULL if there is no task with the indicated name.
//
//               If there are multiple tasks with the same name,
//               returns one of them arbitrarily.
////////////////////////////////////////////////////////////////////
65
AsyncTask *AsyncTaskManager::find_task(string const &name) const;

328 10 find_tasks 0 4 465 28 AsyncTaskManager::find_tasks 0 1 97 301
////////////////////////////////////////////////////////////////////
//     Function: AsyncTaskManager::find_tasks
//       Access: Published
//  Description: Returns the list of tasks found with the indicated
//               name.
////////////////////////////////////////////////////////////////////
75
AsyncTaskCollection AsyncTaskManager::find_tasks(string const &name) const;

329 19 find_tasks_matching 0 4 465 37 AsyncTaskManager::find_tasks_matching 0 1 98 350
////////////////////////////////////////////////////////////////////
//     Function: AsyncTaskManager::find_tasks_matching
//       Access: Published
//  Description: Returns the list of tasks found whose name matches
//               the indicated glob pattern, e.g. "my_task_*".
////////////////////////////////////////////////////////////////////
92
AsyncTaskCollection AsyncTaskManager::find_tasks_matching(GlobPattern const &pattern) const;

330 6 remove 0 4 465 24 AsyncTaskManager::remove 0 2 99 100 718
////////////////////////////////////////////////////////////////////
//     Function: AsyncTaskManager::remove
//       Access: Published
//  Description: Removes the indicated task from the active queue.
//               Returns true if the task is successfully removed, or
//               false if it wasn't there.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: AsyncTaskManager::remove
//       Access: Published
//  Description: Removes all of the tasks in the AsyncTaskCollection.
//               Returns the number of tasks removed.
////////////////////////////////////////////////////////////////////
111
bool AsyncTaskManager::remove(AsyncTask *task);
int AsyncTaskManager::remove(AsyncTaskCollection const &tasks);

331 14 wait_for_tasks 0 4 465 32 AsyncTaskManager::wait_for_tasks 0 1 101 268
////////////////////////////////////////////////////////////////////
//     Function: AsyncTaskManager::wait_for_tasks
//       Access: Published
//  Description: Blocks until the task list is empty.
////////////////////////////////////////////////////////////////////
44
void AsyncTaskManager::wait_for_tasks(void);

332 12 stop_threads 0 4 465 30 AsyncTaskManager::stop_threads 0 1 102 479
////////////////////////////////////////////////////////////////////
//     Function: AsyncTaskManager::stop_threads
//       Access: Published
//  Description: Stops any threads that are currently running.  If any
//               tasks are still pending and have not yet been picked
//               up by a thread, they will not be serviced unless
//               poll() or start_threads() is later called.
////////////////////////////////////////////////////////////////////
42
void AsyncTaskManager::stop_threads(void);

333 13 start_threads 0 4 465 31 AsyncTaskManager::start_threads 0 1 103 419
////////////////////////////////////////////////////////////////////
//     Function: AsyncTaskManager::start_threads
//       Access: Published
//  Description: Starts any requested threads to service the tasks on
//               the queue.  This is normally not necessary, since
//               adding a task will start the threads automatically.
////////////////////////////////////////////////////////////////////
43
void AsyncTaskManager::start_threads(void);

334 13 get_num_tasks 0 4 465 31 AsyncTaskManager::get_num_tasks 0 1 104 338
////////////////////////////////////////////////////////////////////
//     Function: AsyncTaskManager::get_num_tasks
//       Access: Published
//  Description: Returns the number of tasks that are currently active
//               or sleeping within the task manager.
////////////////////////////////////////////////////////////////////
55
inline int AsyncTaskManager::get_num_tasks(void) const;

335 9 get_tasks 0 4 465 27 AsyncTaskManager::get_tasks 0 1 105 342
////////////////////////////////////////////////////////////////////
//     Function: AsyncTaskManager::get_tasks
//       Access: Published
//  Description: Returns the set of tasks that are active or sleeping
//               on the task manager, at the time of the call.
////////////////////////////////////////////////////////////////////
60
AsyncTaskCollection AsyncTaskManager::get_tasks(void) const;

336 16 get_active_tasks 0 4 465 34 AsyncTaskManager::get_active_tasks 0 1 106 373
////////////////////////////////////////////////////////////////////
//     Function: AsyncTaskManager::get_active_tasks
//       Access: Published
//  Description: Returns the set of tasks that are active (and not
//               sleeping) on the task manager, at the time of the
//               call.
////////////////////////////////////////////////////////////////////
67
AsyncTaskCollection AsyncTaskManager::get_active_tasks(void) const;

337 18 get_sleeping_tasks 0 4 465 36 AsyncTaskManager::get_sleeping_tasks 0 1 107 375
////////////////////////////////////////////////////////////////////
//     Function: AsyncTaskManager::get_sleeping_tasks
//       Access: Published
//  Description: Returns the set of tasks that are sleeping (and not
//               active) on the task manager, at the time of the
//               call.
////////////////////////////////////////////////////////////////////
69
AsyncTaskCollection AsyncTaskManager::get_sleeping_tasks(void) const;

338 4 poll 0 4 465 22 AsyncTaskManager::poll 0 1 108 506
////////////////////////////////////////////////////////////////////
//     Function: AsyncTaskManager::poll
//       Access: Published
//  Description: Runs through all the tasks in the task list, once, if
//               the task manager is running in single-threaded mode
//               (no threads available).  This method does nothing in
//               threaded mode, so it may safely be called in either
//               case.
////////////////////////////////////////////////////////////////////
34
void AsyncTaskManager::poll(void);

339 18 get_next_wake_time 0 4 465 36 AsyncTaskManager::get_next_wake_time 0 1 109 422
////////////////////////////////////////////////////////////////////
//     Function: AsyncTaskManager::get_next_wake_time
//       Access: Published
//  Description: Returns the scheduled time (on the manager's clock)
//               of the next sleeping task, on any task chain, to
//               awaken.  Returns -1 if there are no sleeping tasks.
////////////////////////////////////////////////////////////////////
56
double AsyncTaskManager::get_next_wake_time(void) const;

340 6 output 0 6 465 24 AsyncTaskManager::output 0 1 110 233
////////////////////////////////////////////////////////////////////
//     Function: AsyncTaskManager::output
//       Access: Published, Virtual
//  Description: 
////////////////////////////////////////////////////////////////////
58
virtual void AsyncTaskManager::output(ostream &out) const;

341 5 write 0 6 465 23 AsyncTaskManager::write 0 1 111 232
////////////////////////////////////////////////////////////////////
//     Function: AsyncTaskManager::write
//       Access: Published, Virtual
//  Description: 
////////////////////////////////////////////////////////////////////
79
virtual void AsyncTaskManager::write(ostream &out, int indent_level = 0) const;

342 14 get_global_ptr 0 4 465 32 AsyncTaskManager::get_global_ptr 0 1 112 403
////////////////////////////////////////////////////////////////////
//     Function: AsyncTaskManager::get_global_ptr
//       Access: Published
//  Description: Returns a pointer to the global AsyncTaskManager.
//               This is the AsyncTaskManager that most code should
//               use for queueing tasks and suchlike.
////////////////////////////////////////////////////////////////////
71
static inline AsyncTaskManager *AsyncTaskManager::get_global_ptr(void);

343 14 get_class_type 0 4 465 32 AsyncTaskManager::get_class_type 0 1 113 0
57
static TypeHandle AsyncTaskManager::get_class_type(void);

344 14 AsyncTaskPause 0 4 466 30 AsyncTaskPause::AsyncTaskPause 0 1 118 226
////////////////////////////////////////////////////////////////////
//     Function: AsyncTaskPause::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
45
AsyncTaskPause::AsyncTaskPause(double delay);

345 12 operator new 0 4 466 28 AsyncTaskPause::operator new 0 1 119 0
122
inline void *AsyncTaskPause::operator new(size_t size);
inline void *AsyncTaskPause::operator new(size_t size, void *ptr);

346 15 operator delete 0 4 466 31 AsyncTaskPause::operator delete 0 0 0
116
inline void AsyncTaskPause::operator delete(void *ptr);
inline void AsyncTaskPause::operator delete(void *, void *);

347 12 validate_ptr 0 4 466 28 AsyncTaskPause::validate_ptr 0 0 0
65
static inline bool AsyncTaskPause::validate_ptr(void const *ptr);

348 14 get_class_type 0 4 466 30 AsyncTaskPause::get_class_type 0 1 120 0
55
static TypeHandle AsyncTaskPause::get_class_type(void);

349 15 ~AsyncTaskPause 0 4 466 31 AsyncTaskPause::~AsyncTaskPause 0 0 0
38
AsyncTaskPause::~AsyncTaskPause(void);

350 19 upcast_to_AsyncTask 0 12 467 38 AsyncTaskSequence::upcast_to_AsyncTask 0 1 127 42
upcast from AsyncTaskSequence to AsyncTask
56
AsyncTask *AsyncTaskSequence::upcast_to_AsyncTask(void);

351 29 downcast_to_AsyncTaskSequence 0 12 457 40 AsyncTask::downcast_to_AsyncTaskSequence 0 1 128 44
downcast from AsyncTask to AsyncTaskSequence
66
AsyncTaskSequence *AsyncTask::downcast_to_AsyncTaskSequence(void);

352 29 upcast_to_AsyncTaskCollection 0 12 467 48 AsyncTaskSequence::upcast_to_AsyncTaskCollection 0 1 129 52
upcast from AsyncTaskSequence to AsyncTaskCollection
76
AsyncTaskCollection *AsyncTaskSequence::upcast_to_AsyncTaskCollection(void);

353 29 downcast_to_AsyncTaskSequence 0 12 461 50 AsyncTaskCollection::downcast_to_AsyncTaskSequence 0 1 130 54
downcast from AsyncTaskCollection to AsyncTaskSequence
76
AsyncTaskSequence *AsyncTaskCollection::downcast_to_AsyncTaskSequence(void);

354 17 AsyncTaskSequence 0 4 467 36 AsyncTaskSequence::AsyncTaskSequence 0 1 121 229
////////////////////////////////////////////////////////////////////
//     Function: AsyncTaskSequence::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
57
AsyncTaskSequence::AsyncTaskSequence(string const &name);

355 18 ~AsyncTaskSequence 0 6 467 37 AsyncTaskSequence::~AsyncTaskSequence 0 0 237
////////////////////////////////////////////////////////////////////
//     Function: AsyncTaskSequence::Destructor
//       Access: Published, Virtual
//  Description:
////////////////////////////////////////////////////////////////////
52
virtual AsyncTaskSequence::~AsyncTaskSequence(void);

356 12 operator new 0 4 467 31 AsyncTaskSequence::operator new 0 1 122 0
128
inline void *AsyncTaskSequence::operator new(size_t size);
inline void *AsyncTaskSequence::operator new(size_t size, void *ptr);

357 15 operator delete 0 4 467 34 AsyncTaskSequence::operator delete 0 0 0
122
inline void AsyncTaskSequence::operator delete(void *ptr);
inline void AsyncTaskSequence::operator delete(void *, void *);

358 12 validate_ptr 0 4 467 31 AsyncTaskSequence::validate_ptr 0 0 0
68
static inline bool AsyncTaskSequence::validate_ptr(void const *ptr);

359 16 set_repeat_count 0 4 467 35 AsyncTaskSequence::set_repeat_count 0 1 123 533
////////////////////////////////////////////////////////////////////
//     Function: AsyncTaskSequence::set_repeat_count
//       Access: Published
//  Description: Sets the repeat count of the sequence.  If the count
//               is 0 or 1, the sequence will run exactly once.  If it
//               is greater than 0, it will run that number of times.
//               If it is negative, it will run forever until it is
//               explicitly removed.
////////////////////////////////////////////////////////////////////
66
inline void AsyncTaskSequence::set_repeat_count(int repeat_count);

360 16 get_repeat_count 0 4 467 35 AsyncTaskSequence::get_repeat_count 0 1 124 318
////////////////////////////////////////////////////////////////////
//     Function: AsyncTaskSequence::get_repeat_count
//       Access: Published
//  Description: Returns the repeat count of the sequence.  See
//               set_repeat_count().
////////////////////////////////////////////////////////////////////
59
inline int AsyncTaskSequence::get_repeat_count(void) const;

361 22 get_current_task_index 0 4 467 41 AsyncTaskSequence::get_current_task_index 0 1 125 403
////////////////////////////////////////////////////////////////////
//     Function: AsyncTaskSequence::get_current_task_index
//       Access: Published
//  Description: Returns the index of the task within the sequence
//               that is currently being executed (or that will be
//               executed at the next epoch).
////////////////////////////////////////////////////////////////////
65
inline int AsyncTaskSequence::get_current_task_index(void) const;

362 14 get_class_type 0 4 467 33 AsyncTaskSequence::get_class_type 0 1 126 0
58
static TypeHandle AsyncTaskSequence::get_class_type(void);

363 14 EventParameter 0 4 468 30 EventParameter::EventParameter 0 8 131 132 133 134 135 136 137 138 3323
////////////////////////////////////////////////////////////////////
//     Function: EventParameter::Default constructor
//       Access: Published
//  Description: Defines an EventParameter that stores nothing: the
//               "empty" parameter.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EventParameter::Pointer constructor
//       Access: Published
//  Description: Defines an EventParameter that stores a pointer to
//               any kind of TypedWritableReferenceCount object.  This
//               is the most general constructor.
//
//               This accepts a const pointer, even though it stores
//               (and eventually returns) a non-const pointer.  This
//               is just the simplest way to allow both const and
//               non-const pointers to be stored, but it does lose the
//               constness.  Be careful.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EventParameter::Pointer constructor
//       Access: Published
//  Description: Defines an EventParameter that stores a pointer to
//               a TypedReferenceCount object.  Note that a
//               TypedReferenceCount is not the same kind of pointer
//               as a TypedWritableReferenceCount, hence we require
//               both constructors.
//
//               This accepts a const pointer, even though it stores
//               (and eventually returns) a non-const pointer.  This
//               is just the simplest way to allow both const and
//               non-const pointers to be stored, but it does lose the
//               constness.  Be careful.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EventParameter::Integer constructor
//       Access: Published
//  Description: Defines an EventParameter that stores an integer
//               value.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EventParameter::Double constructor
//       Access: Published
//  Description: Defines an EventParameter that stores a
//               floating-point value.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EventParameter::String constructor
//       Access: Published
//  Description: Defines an EventParameter that stores a string value.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EventParameter::Wstring constructor
//       Access: Published
//  Description: Defines an EventParameter that stores a wstring value.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EventParameter::Copy constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
485
inline EventParameter::EventParameter(void);
inline EventParameter::EventParameter(TypedWritableReferenceCount const *ptr);
inline EventParameter::EventParameter(TypedReferenceCount const *ptr);
inline EventParameter::EventParameter(int value);
inline EventParameter::EventParameter(double value);
inline EventParameter::EventParameter(string const &value);
inline EventParameter::EventParameter(wstring const &value);
inline EventParameter::EventParameter(EventParameter const &copy);

364 10 operator = 0 4 468 26 EventParameter::operator = 0 1 139 239
////////////////////////////////////////////////////////////////////
//     Function: EventParameter::Copy assignment operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
78
inline EventParameter &EventParameter::operator =(EventParameter const &copy);

365 15 ~EventParameter 0 4 468 31 EventParameter::~EventParameter 0 0 225
////////////////////////////////////////////////////////////////////
//     Function: EventParameter::Destructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
45
inline EventParameter::~EventParameter(void);

366 8 is_empty 0 4 468 24 EventParameter::is_empty 0 1 140 607
// These functions are conveniences to easily determine if the
// EventParameter is one of the predefined parameter types, and
// retrieve the corresponding value.  Of course, it is possible that
// the EventParameter is some user-defined type, and is none of
// these.

////////////////////////////////////////////////////////////////////
//     Function: EventParameter::is_empty
//       Access: Published
//  Description: Returns true if the EventParameter is the empty
//               parameter, storing nothing, or false otherwise.
////////////////////////////////////////////////////////////////////
49
inline bool EventParameter::is_empty(void) const;

367 6 is_int 0 4 468 22 EventParameter::is_int 0 1 141 315
////////////////////////////////////////////////////////////////////
//     Function: EventParameter::is_int
//       Access: Published
//  Description: Returns true if the EventParameter stores an integer
//               value, false otherwise.
////////////////////////////////////////////////////////////////////
47
inline bool EventParameter::is_int(void) const;

368 13 get_int_value 0 4 468 29 EventParameter::get_int_value 0 1 142 382
////////////////////////////////////////////////////////////////////
//     Function: EventParameter::get_int_value
//       Access: Published
//  Description: Retrieves the value stored in the EventParameter.  It
//               is only valid to call this if is_int() has already
//               returned true.
////////////////////////////////////////////////////////////////////
53
inline int EventParameter::get_int_value(void) const;

369 9 is_double 0 4 468 25 EventParameter::is_double 0 1 143 331
////////////////////////////////////////////////////////////////////
//     Function: EventParameter::is_double
//       Access: Published
//  Description: Returns true if the EventParameter stores a double
//               floating-point value, false otherwise.
////////////////////////////////////////////////////////////////////
50
inline bool EventParameter::is_double(void) const;

370 16 get_double_value 0 4 468 32 EventParameter::get_double_value 0 1 144 388
////////////////////////////////////////////////////////////////////
//     Function: EventParameter::get_double_value
//       Access: Published
//  Description: Retrieves the value stored in the EventParameter.  It
//               is only valid to call this if is_double() has already
//               returned true.
////////////////////////////////////////////////////////////////////
59
inline double EventParameter::get_double_value(void) const;

371 9 is_string 0 4 468 25 EventParameter::is_string 0 1 145 316
////////////////////////////////////////////////////////////////////
//     Function: EventParameter::is_string
//       Access: Published
//  Description: Returns true if the EventParameter stores a string
//               value, false otherwise.
////////////////////////////////////////////////////////////////////
50
inline bool EventParameter::is_string(void) const;

372 16 get_string_value 0 4 468 32 EventParameter::get_string_value 0 1 146 388
////////////////////////////////////////////////////////////////////
//     Function: EventParameter::get_string_value
//       Access: Published
//  Description: Retrieves the value stored in the EventParameter.  It
//               is only valid to call this if is_string() has already
//               returned true.
////////////////////////////////////////////////////////////////////
59
inline string EventParameter::get_string_value(void) const;

373 10 is_wstring 0 4 468 26 EventParameter::is_wstring 0 1 147 318
////////////////////////////////////////////////////////////////////
//     Function: EventParameter::is_wstring
//       Access: Published
//  Description: Returns true if the EventParameter stores a wstring
//               value, false otherwise.
////////////////////////////////////////////////////////////////////
51
inline bool EventParameter::is_wstring(void) const;

374 17 get_wstring_value 0 4 468 33 EventParameter::get_wstring_value 0 1 148 390
////////////////////////////////////////////////////////////////////
//     Function: EventParameter::get_wstring_value
//       Access: Published
//  Description: Retrieves the value stored in the EventParameter.  It
//               is only valid to call this if is_wstring() has already
//               returned true.
////////////////////////////////////////////////////////////////////
61
inline wstring EventParameter::get_wstring_value(void) const;

375 18 is_typed_ref_count 0 4 468 34 EventParameter::is_typed_ref_count 0 1 149 537
////////////////////////////////////////////////////////////////////
//     Function: EventParameter::is_typed_ref_count
//       Access: Published
//  Description: Returns true if the EventParameter stores a
//               TypedReferenceCount pointer, false otherwise.  Note
//               that a TypedReferenceCount is not exactly the same
//               kind of pointer as a TypedWritableReferenceCount,
//               hence the need for this separate call.
////////////////////////////////////////////////////////////////////
59
inline bool EventParameter::is_typed_ref_count(void) const;

376 25 get_typed_ref_count_value 0 4 468 41 EventParameter::get_typed_ref_count_value 0 1 150 406
////////////////////////////////////////////////////////////////////
//     Function: EventParameter::get_typed_ref_count_value
//       Access: Published
//  Description: Retrieves the value stored in the EventParameter.  It
//               is only valid to call this if is_typed_ref_count()
//               has already returned true.
////////////////////////////////////////////////////////////////////
82
inline TypedReferenceCount *EventParameter::get_typed_ref_count_value(void) const;

377 7 get_ptr 0 4 468 23 EventParameter::get_ptr 0 1 151 552
////////////////////////////////////////////////////////////////////
//     Function: EventParameter::get_ptr
//       Access: Published
//  Description: Retrieves a pointer to the actual value stored in the
//               parameter.  The TypeHandle of this pointer may be
//               examined to determine the actual type of parameter it
//               contains.  This is the only way to retrieve the value
//               when it is not one of the above predefined types.
////////////////////////////////////////////////////////////////////
72
inline TypedWritableReferenceCount *EventParameter::get_ptr(void) const;

378 6 output 0 4 468 22 EventParameter::output 0 1 152 221
////////////////////////////////////////////////////////////////////
//     Function: EventParameter::output
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
48
void EventParameter::output(ostream &out) const;

379 5 Event 0 4 469 12 Event::Event 0 2 153 154 435
////////////////////////////////////////////////////////////////////
//     Function: Event::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Event::Copy constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
101
Event::Event(string const &event_name, EventReceiver *receiver = 0);
Event::Event(Event const &copy);

380 10 operator = 0 4 469 17 Event::operator = 0 1 155 0
42
void Event::operator =(Event const &copy);

381 8 set_name 0 4 469 15 Event::set_name 0 1 156 211
////////////////////////////////////////////////////////////////////
//     Function: Event::set_name
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
48
inline void Event::set_name(string const &name);

382 10 clear_name 0 4 469 17 Event::clear_name 0 1 157 247
////////////////////////////////////////////////////////////////////
//     Function: Event::clear_name
//       Access: Public
//  Description: Resets the Event's name to empty.
////////////////////////////////////////////////////////////////////
36
inline void Event::clear_name(void);

383 8 has_name 0 4 469 15 Event::has_name 0 1 158 307
////////////////////////////////////////////////////////////////////
//     Function: Event::has_name
//       Access: Public
//  Description: Returns true if the Event has a nonempty name set,
//               false if the name is empty.
////////////////////////////////////////////////////////////////////
40
inline bool Event::has_name(void) const;

384 8 get_name 0 4 469 15 Event::get_name 0 1 159 211
////////////////////////////////////////////////////////////////////
//     Function: Event::get_name
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
49
inline string const &Event::get_name(void) const;

385 13 add_parameter 0 4 469 20 Event::add_parameter 0 1 160 216
////////////////////////////////////////////////////////////////////
//     Function: Event::add_parameter
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
53
void Event::add_parameter(EventParameter const &obj);

386 18 get_num_parameters 0 4 469 25 Event::get_num_parameters 0 1 161 221
////////////////////////////////////////////////////////////////////
//     Function: Event::get_num_parameters
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
42
int Event::get_num_parameters(void) const;

387 13 get_parameter 0 4 469 20 Event::get_parameter 0 1 162 216
////////////////////////////////////////////////////////////////////
//     Function: Event::get_parameter
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
49
EventParameter Event::get_parameter(int n) const;

388 12 has_receiver 0 4 469 19 Event::has_receiver 0 1 163 215
////////////////////////////////////////////////////////////////////
//     Function: Event::has_receiver
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
37
bool Event::has_receiver(void) const;

389 12 get_receiver 0 4 469 19 Event::get_receiver 0 1 164 215
////////////////////////////////////////////////////////////////////
//     Function: Event::get_receiver
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
47
EventReceiver *Event::get_receiver(void) const;

390 12 set_receiver 0 4 469 19 Event::set_receiver 0 1 165 215
////////////////////////////////////////////////////////////////////
//     Function: Event::set_receiver
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
50
void Event::set_receiver(EventReceiver *receiver);

391 14 clear_receiver 0 4 469 21 Event::clear_receiver 0 1 166 217
////////////////////////////////////////////////////////////////////
//     Function: Event::clear_receiver
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
33
void Event::clear_receiver(void);

392 6 output 0 4 469 13 Event::output 0 1 167 209
////////////////////////////////////////////////////////////////////
//     Function: Event::output
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
39
void Event::output(ostream &out) const;

393 14 get_class_type 0 4 469 21 Event::get_class_type 0 1 168 0
46
static TypeHandle Event::get_class_type(void);

394 12 EventHandler 0 4 470 26 EventHandler::EventHandler 0 1 169 221
////////////////////////////////////////////////////////////////////
//     Function: EventHandler::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
49
EventHandler::EventHandler(EventQueue *ev_queue);

395 14 process_events 0 4 470 28 EventHandler::process_events 0 1 170 447
////////////////////////////////////////////////////////////////////
//     Function: EventHandler::process_events
//       Access: Public
//  Description: The main processing loop of the EventHandler.  This
//               function must be called periodically to service
//               events.  Walks through each pending event and calls
//               its assigned hooks.
////////////////////////////////////////////////////////////////////
40
void EventHandler::process_events(void);

396 14 dispatch_event 0 6 470 28 EventHandler::dispatch_event 0 1 171 306
////////////////////////////////////////////////////////////////////
//     Function: EventHandler::dispatch_event
//       Access: Public, Virtual
//  Description: Calls the hooks assigned to the indicated single
//               event.
////////////////////////////////////////////////////////////////////
57
virtual void EventHandler::dispatch_event(Event const *);

397 5 write 0 4 470 19 EventHandler::write 0 1 172 215
////////////////////////////////////////////////////////////////////
//     Function: EventHandler::write
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
45
void EventHandler::write(ostream &out) const;

398 24 get_global_event_handler 0 4 470 38 EventHandler::get_global_event_handler 0 1 173 392
////////////////////////////////////////////////////////////////////
//     Function: EventQueue::get_global_event_handler
//       Access: Public
//  Description: Returns a pointer to the one global EventHandler
//               object.  If the global object has not yet been
//               created, this will create it.
////////////////////////////////////////////////////////////////////
90
static inline EventHandler *EventHandler::get_global_event_handler(EventQueue *queue = 0);

399 14 get_class_type 0 4 470 28 EventHandler::get_class_type 0 1 174 0
53
static TypeHandle EventHandler::get_class_type(void);

400 13 ~EventHandler 0 4 470 27 EventHandler::~EventHandler 0 0 0
34
EventHandler::~EventHandler(void);

401 10 EventQueue 0 4 472 22 EventQueue::EventQueue 0 1 175 222
////////////////////////////////////////////////////////////////////
//     Function: EventQueue::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
29
EventQueue::EventQueue(void);

402 11 ~EventQueue 0 4 472 23 EventQueue::~EventQueue 0 0 221
////////////////////////////////////////////////////////////////////
//     Function: EventQueue::Destructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
30
EventQueue::~EventQueue(void);

403 11 queue_event 0 4 472 23 EventQueue::queue_event 0 1 176 222
////////////////////////////////////////////////////////////////////
//     Function: EventQueue::queue_event
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
46
void EventQueue::queue_event(CPT_Event event);

404 5 clear 0 4 472 17 EventQueue::clear 0 1 177 294
////////////////////////////////////////////////////////////////////
//     Function: EventQueue::clear
//       Access: Published
//  Description: Empties all events on the queue, throwing them on the
//               floor.
////////////////////////////////////////////////////////////////////
29
void EventQueue::clear(void);

405 14 is_queue_empty 0 4 472 26 EventQueue::is_queue_empty 0 1 178 225
////////////////////////////////////////////////////////////////////
//     Function: EventQueue::is_queue_empty
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
44
bool EventQueue::is_queue_empty(void) const;

406 13 is_queue_full 0 4 472 25 EventQueue::is_queue_full 0 1 179 306
////////////////////////////////////////////////////////////////////
//     Function: EventQueue::is_queue_full
//       Access: Published
//  Description: This function is deprecated--the queue is never full
//               these days.
////////////////////////////////////////////////////////////////////
43
bool EventQueue::is_queue_full(void) const;

407 13 dequeue_event 0 4 472 25 EventQueue::dequeue_event 0 1 180 224
////////////////////////////////////////////////////////////////////
//     Function: EventQueue::dequeue_event
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
42
CPT_Event EventQueue::dequeue_event(void);

408 22 get_global_event_queue 0 4 472 34 EventQueue::get_global_event_queue 0 1 181 388
////////////////////////////////////////////////////////////////////
//     Function: EventQueue::get_global_event_queue
//       Access: Public
//  Description: Returns a pointer to the one global EventQueue
//               object.  If the global object has not yet been
//               created, this will create it.
////////////////////////////////////////////////////////////////////
67
static inline EventQueue *EventQueue::get_global_event_queue(void);

409 16 PointerEventList 0 4 473 34 PointerEventList::PointerEventList 0 1 182 457
////////////////////////////////////////////////////////////////////
//     Function: PointerEventList::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PointerEventList::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
48
inline PointerEventList::PointerEventList(void);

410 14 get_num_events 0 4 473 32 PointerEventList::get_num_events 0 1 183 273
////////////////////////////////////////////////////////////////////
//     Function: PointerEventList::get_num_events
//       Access: Published
//  Description: Returns the number of events in the list.
////////////////////////////////////////////////////////////////////
56
inline int PointerEventList::get_num_events(void) const;

411 13 get_in_window 0 4 473 31 PointerEventList::get_in_window 0 1 184 271
////////////////////////////////////////////////////////////////////
//     Function: PointerEventList::get_in_window
//       Access: Published
//  Description: Get the in-window flag of the nth event.
////////////////////////////////////////////////////////////////////
57
inline bool PointerEventList::get_in_window(int n) const;

412 8 get_xpos 0 4 473 26 PointerEventList::get_xpos 0 1 185 264
////////////////////////////////////////////////////////////////////
//     Function: PointerEventList::get_xpos
//       Access: Published
//  Description: Get the x-coordinate of the nth event.
////////////////////////////////////////////////////////////////////
51
inline int PointerEventList::get_xpos(int n) const;

413 8 get_ypos 0 4 473 26 PointerEventList::get_ypos 0 1 186 264
////////////////////////////////////////////////////////////////////
//     Function: PointerEventList::get_ypos
//       Access: Published
//  Description: Get the y-coordinate of the nth event.
////////////////////////////////////////////////////////////////////
51
inline int PointerEventList::get_ypos(int n) const;

414 6 get_dx 0 4 473 24 PointerEventList::get_dx 0 1 187 262
////////////////////////////////////////////////////////////////////
//     Function: PointerEventList::get_dx
//       Access: Published
//  Description: Get the x-coordinate of the nth event.
////////////////////////////////////////////////////////////////////
49
inline int PointerEventList::get_dx(int n) const;

415 6 get_dy 0 4 473 24 PointerEventList::get_dy 0 1 188 262
////////////////////////////////////////////////////////////////////
//     Function: PointerEventList::get_dy
//       Access: Published
//  Description: Get the y-coordinate of the nth event.
////////////////////////////////////////////////////////////////////
49
inline int PointerEventList::get_dy(int n) const;

416 12 get_sequence 0 4 473 30 PointerEventList::get_sequence 0 1 189 271
////////////////////////////////////////////////////////////////////
//     Function: PointerEventList::get_sequence
//       Access: Published
//  Description: Get the sequence number of the nth event.
////////////////////////////////////////////////////////////////////
55
inline int PointerEventList::get_sequence(int n) const;

417 10 get_length 0 4 473 28 PointerEventList::get_length 0 1 190 260
////////////////////////////////////////////////////////////////////
//     Function: PointerEventList::get_length
//       Access: Published
//  Description: Get the length of the nth event.
////////////////////////////////////////////////////////////////////
56
inline double PointerEventList::get_length(int n) const;

418 13 get_direction 0 4 473 31 PointerEventList::get_direction 0 1 191 266
////////////////////////////////////////////////////////////////////
//     Function: PointerEventList::get_direction
//       Access: Published
//  Description: Get the direction of the nth event.
////////////////////////////////////////////////////////////////////
59
inline double PointerEventList::get_direction(int n) const;

419 12 get_rotation 0 4 473 30 PointerEventList::get_rotation 0 1 192 264
////////////////////////////////////////////////////////////////////
//     Function: PointerEventList::get_rotation
//       Access: Published
//  Description: Get the rotation of the nth event.
////////////////////////////////////////////////////////////////////
58
inline double PointerEventList::get_rotation(int n) const;

420 8 get_time 0 4 473 26 PointerEventList::get_time 0 1 193 261
////////////////////////////////////////////////////////////////////
//     Function: PointerEventList::get_time
//       Access: Published
//  Description: Get the timestamp of the nth event.
////////////////////////////////////////////////////////////////////
54
inline double PointerEventList::get_time(int n) const;

421 5 clear 0 4 473 23 PointerEventList::clear 0 1 194 257
////////////////////////////////////////////////////////////////////
//     Function: PointerEventList::clear
//       Access: Public
//  Description: Empties all the events from the list.
////////////////////////////////////////////////////////////////////
42
inline void PointerEventList::clear(void);

422 9 pop_front 0 4 473 27 PointerEventList::pop_front 0 1 195 261
////////////////////////////////////////////////////////////////////
//     Function: PointerEventList::pop_front
//       Access: Public
//  Description: Discards the first event on the list.
////////////////////////////////////////////////////////////////////
46
inline void PointerEventList::pop_front(void);

423 9 add_event 0 4 473 27 PointerEventList::add_event 0 1 196 399
////////////////////////////////////////////////////////////////////
//     Function: PointerEventList::add_event
//       Access: Published
//  Description: Adds a new event to the end of the list.
//               Automatically calculates the dx, dy, length,
//               direction, and rotation for all but the first event.
////////////////////////////////////////////////////////////////////
88
void PointerEventList::add_event(bool in_win, int xpos, int ypos, int seq, double time);

424 9 encircles 0 4 473 27 PointerEventList::encircles 0 1 197 303
////////////////////////////////////////////////////////////////////
//     Function: PointerEventList::encircles
//       Access: Published
//  Description: Returns true if the trail loops around the
//               specified point.
////////////////////////////////////////////////////////////////////
53
bool PointerEventList::encircles(int x, int y) const;

425 11 total_turns 0 4 473 29 PointerEventList::total_turns 0 1 198 555
////////////////////////////////////////////////////////////////////
//     Function: PointerEventList::total_turns
//       Access: Published
//  Description: returns the total angular deviation that the trail
//               has made in the specified time period.  A small
//               number means that the trail is moving in a relatively
//               straight line, a large number means that the trail
//               is zig-zagging or spinning.  The result is in degrees.
////////////////////////////////////////////////////////////////////
55
double PointerEventList::total_turns(double sec) const;

426 13 match_pattern 0 4 473 31 PointerEventList::match_pattern 0 1 199 912
////////////////////////////////////////////////////////////////////
//     Function: PointerEventList::match_pattern
//       Access: Published
//  Description: This function is not implemented yet.  It is a work
//               in progress.  The intent is as follows:
//
//               Returns a nonzero value if the mouse movements 
//               match the specified pattern.  The higher the value,
//               the better the match.  The pattern is a sequence
//               of compass directions (ie, "E", "NE", etc) separated
//               by spaces.  If rot is nonzero, then the pattern is
//               rotated counterclockwise by the specified amount 
//               before testing.  Seglen is the minimum length a
//               mouse movement needs to be in order to be considered
//               significant.
////////////////////////////////////////////////////////////////////
89
double PointerEventList::match_pattern(string const &pattern, double rot, double seglen);

427 14 get_class_type 0 4 473 32 PointerEventList::get_class_type 0 1 200 0
57
static TypeHandle PointerEventList::get_class_type(void);

428 17 ~PointerEventList 0 4 473 35 PointerEventList::~PointerEventList 0 0 0
42
PointerEventList::~PointerEventList(void);

429 10 PythonTask 0 4 475 22 PythonTask::PythonTask 0 1 201 0
97
PythonTask::PythonTask(PyObject *function = (& ::_Py_NoneStruct), string const &name = string());

430 12 operator new 0 4 475 24 PythonTask::operator new 0 1 202 0
114
inline void *PythonTask::operator new(size_t size);
inline void *PythonTask::operator new(size_t size, void *ptr);

431 15 operator delete 0 4 475 27 PythonTask::operator delete 0 0 0
108
inline void PythonTask::operator delete(void *ptr);
inline void PythonTask::operator delete(void *, void *);

432 12 validate_ptr 0 4 475 24 PythonTask::validate_ptr 0 0 0
61
static inline bool PythonTask::validate_ptr(void const *ptr);

433 12 set_function 0 4 475 24 PythonTask::set_function 0 1 203 0
50
void PythonTask::set_function(PyObject *function);

434 12 get_function 0 4 475 24 PythonTask::get_function 0 1 204 0
41
PyObject *PythonTask::get_function(void);

435 8 set_args 0 4 475 20 PythonTask::set_args 0 1 205 0
60
void PythonTask::set_args(PyObject *args, bool append_task);

436 8 get_args 0 4 475 20 PythonTask::get_args 0 1 206 0
37
PyObject *PythonTask::get_args(void);

437 14 set_upon_death 0 4 475 26 PythonTask::set_upon_death 0 1 207 0
54
void PythonTask::set_upon_death(PyObject *upon_death);

438 14 get_upon_death 0 4 475 26 PythonTask::get_upon_death 0 1 208 0
43
PyObject *PythonTask::get_upon_death(void);

439 9 set_owner 0 4 475 21 PythonTask::set_owner 0 1 209 0
44
void PythonTask::set_owner(PyObject *owner);

440 9 get_owner 0 4 475 21 PythonTask::get_owner 0 1 210 0
38
PyObject *PythonTask::get_owner(void);

441 11 __setattr__ 0 4 475 23 PythonTask::__setattr__ 0 1 211 0
73
int PythonTask::__setattr__(PyObject *self, PyObject *attr, PyObject *v);

442 11 __delattr__ 0 4 475 23 PythonTask::__delattr__ 0 1 212 0
60
int PythonTask::__delattr__(PyObject *self, PyObject *attr);

443 11 __getattr__ 0 4 475 23 PythonTask::__getattr__ 0 1 213 0
56
PyObject *PythonTask::__getattr__(PyObject *attr) const;

444 12 __traverse__ 0 4 475 24 PythonTask::__traverse__ 0 1 214 0
57
int PythonTask::__traverse__(visitproc visit, void *arg);

445 9 __clear__ 0 4 475 21 PythonTask::__clear__ 0 1 215 0
32
int PythonTask::__clear__(void);

446 9 set_delay 0 4 475 21 PythonTask::set_delay 0 1 216 378
////////////////////////////////////////////////////////////////////
//     Function: PythonTask::set_delay
//       Access: Public
//  Description: If None is passed, calls clear_delay, otherwise
//               sets the delay time.  See AsyncTask::set_delay()
//               and AsyncTask::clear_delay().
////////////////////////////////////////////////////////////////////
51
inline void PythonTask::set_delay(PyObject *delay);

447 9 get_delay 0 4 475 21 PythonTask::get_delay 0 1 217 336
////////////////////////////////////////////////////////////////////
//     Function: PythonTask::get_delay
//       Access: Public
//  Description: Returns the delay time if set, None otherwise.
//               See AsyncTask::has_delay() and AsyncTask::get_delay().
////////////////////////////////////////////////////////////////////
51
inline PyObject *PythonTask::get_delay(void) const;

448 8 get_name 0 4 475 20 PythonTask::get_name 0 1 220 0
54
inline string const &PythonTask::get_name(void) const;

449 8 set_name 0 4 475 20 PythonTask::set_name 0 1 219 218
////////////////////////////////////////////////////////////////////
//     Function: AsyncTask::set_name
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
46
void PythonTask::set_name(string const &name);

450 16 get_elapsed_time 0 4 475 28 PythonTask::get_elapsed_time 0 1 221 478
////////////////////////////////////////////////////////////////////
//     Function: AsyncTask::get_elapsed_time
//       Access: Published
//  Description: Returns the amount of time that has elapsed since
//               the task was started, according to the task manager's
//               clock.
//
//               It is only valid to call this if the task's status is
//               not S_inactive.
////////////////////////////////////////////////////////////////////
48
double PythonTask::get_elapsed_time(void) const;

451 13 get_wake_time 0 4 475 25 PythonTask::get_wake_time 0 1 222 674
////////////////////////////////////////////////////////////////////
//     Function: AsyncTask::get_wake_time
//       Access: Published
//  Description: If this task has been added to an AsyncTaskManager
//               with a delay in effect, this returns the time at
//               which the task is expected to awaken.  It has no
//               meaning if the task has not yet been added to a
//               queue, or if there was no delay in effect at the time
//               the task was added.
//
//               If the task's status is not S_sleeping, this returns
//               0.0.
////////////////////////////////////////////////////////////////////
45
double PythonTask::get_wake_time(void) const;

452 18 get_elapsed_frames 0 4 475 30 PythonTask::get_elapsed_frames 0 1 223 483
////////////////////////////////////////////////////////////////////
//     Function: AsyncTask::get_elapsed_frames
//       Access: Published
//  Description: Returns the number of frames that have elapsed since
//               the task was started, according to the task manager's
//               clock.
//
//               It is only valid to call this if the task's status is
//               not S_inactive.
////////////////////////////////////////////////////////////////////
47
int PythonTask::get_elapsed_frames(void) const;

453 11 get_task_id 0 4 475 23 PythonTask::get_task_id 0 1 224 329
////////////////////////////////////////////////////////////////////
//     Function: AsyncTask::get_task_id
//       Access: Public
//  Description: Returns a number guaranteed to be unique for each
//               different AsyncTask object in the universe.
////////////////////////////////////////////////////////////////////
65
inline AtomicAdjust::Integer PythonTask::get_task_id(void) const;

454 8 get_dict 0 20 475 20 PythonTask::get_dict 0 1 226 42
getter for PyObject *PythonTask::__dict__;
43
PyObject *PythonTask::get_dict(void) const;

455 8 set_dict 0 36 475 20 PythonTask::set_dict 0 1 225 42
setter for PyObject *PythonTask::__dict__;
43
void PythonTask::set_dict(PyObject *value);

456 14 get_class_type 0 4 475 26 PythonTask::get_class_type 0 1 218 0
51
static TypeHandle PythonTask::get_class_type(void);

226
1 0 0 6 5 460 0 0 258 ////////////////////////////////////////////////////////////////////
//     Function: AsyncTask::get_state
//       Access: Published
//  Description: Returns the current state of the task.
//////////////////////////////////////////////////////////////////// 1 4 this 3 484  
2 0 0 6 6 486 0 0 612 ////////////////////////////////////////////////////////////////////
//     Function: AsyncTask::is_alive
//       Access: Published
//  Description: Returns true if the task is currently active or
//               sleeping on some task chain, meaning that it will be
//               executed in its turn, or false if it is not active.
//               If the task has recently been removed while it is in
//               the middle of execution, this will return false,
//               because the task will not run again once it finishes.
//////////////////////////////////////////////////////////////////// 1 4 this 3 484  
3 0 0 7 7 487 316 0 343 ////////////////////////////////////////////////////////////////////
//     Function: AsyncTask::get_manager
//       Access: Published
//  Description: Returns the AsyncTaskManager that this task is active
//               on.  This will be NULL if the state is S_inactive.
//////////////////////////////////////////////////////////////////// 1 4 this 3 484  
4 0 0 4 8 489 0 0 436 ////////////////////////////////////////////////////////////////////
//     Function: AsyncTask::remove
//       Access: Published
//  Description: Removes the task from its active manager, if any, and
//               makes the state S_inactive (or possible
//               S_servicing_removed).  This is a no-op if the state
//               is already S_inactive.
//////////////////////////////////////////////////////////////////// 1 4 this 3 488  
5 0 0 4 9 489 0 0 1089 ////////////////////////////////////////////////////////////////////
//     Function: AsyncTask::set_delay
//       Access: Published
//  Description: Specifies the amount of time, in seconds, by which
//               this task will be delayed after it has been added to
//               the AsyncTaskManager.  At least the specified amount
//               of time (and possibly more) will elapse before the
//               task begins.
//
//               You may specify a delay of 0.0 to guarantee that the
//               task will run in the next epoch following the one in
//               which it is added.
//
//               Setting this value after the task has already been
//               added will not affect the task's wake time; it will
//               only affect the task if it is re-added to the queue
//               in the future, for instance if the task returns
//               DS_again.  However, see recalc_wake_time() if you wish
//               to apply the delay effect immediately.
//////////////////////////////////////////////////////////////////// 2 4 this 3 488  5 delay 1 476  
6 0 0 4 10 489 0 0 472 ////////////////////////////////////////////////////////////////////
//     Function: AsyncTask::clear_delay
//       Access: Published
//  Description: Removes any delay specified for the task.  The next
//               time the task is added to the queue, it will run
//               immediately.  This does not affect the task's wake
//               time if it has already been added to the queue.
//////////////////////////////////////////////////////////////////// 1 4 this 3 488  
7 0 0 6 11 486 0 0 324 ////////////////////////////////////////////////////////////////////
//     Function: AsyncTask::has_delay
//       Access: Published
//  Description: Returns true if a delay has been set for this task
//               via set_delay(), or false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 484  
8 0 0 6 12 476 0 0 301 ////////////////////////////////////////////////////////////////////
//     Function: AsyncTask::get_delay
//       Access: Published
//  Description: Returns the delay value that has been set via
//               set_delay, if any.
//////////////////////////////////////////////////////////////////// 1 4 this 3 484  
9 0 0 6 13 476 0 0 674 ////////////////////////////////////////////////////////////////////
//     Function: AsyncTask::get_wake_time
//       Access: Published
//  Description: If this task has been added to an AsyncTaskManager
//               with a delay in effect, this returns the time at
//               which the task is expected to awaken.  It has no
//               meaning if the task has not yet been added to a
//               queue, or if there was no delay in effect at the time
//               the task was added.
//
//               If the task's status is not S_sleeping, this returns
//               0.0.
//////////////////////////////////////////////////////////////////// 1 4 this 3 484  
10 0 0 4 14 489 0 0 774 ////////////////////////////////////////////////////////////////////
//     Function: AsyncTask::recalc_wake_time
//       Access: Published
//  Description: If the task is currently sleeping on a task
//               chain, this resets its wake time to the current time
//               + get_delay().  It is as if the task had suddenly
//               returned DS_again.  The task will sleep for its
//               current delay seconds before running again.  This
//               method may therefore be used to make the task wake up
//               sooner or later than it would have otherwise.
//
//               If the task is not already sleeping, this method has
//               no effect.
//////////////////////////////////////////////////////////////////// 1 4 this 3 488  
11 0 0 6 15 476 0 0 435 ////////////////////////////////////////////////////////////////////
//     Function: AsyncTask::get_start_time
//       Access: Published
//  Description: Returns the time at which the task was started,
//               according to the task manager's clock.
//
//               It is only valid to call this if the task's status is
//               not S_inactive.
//////////////////////////////////////////////////////////////////// 1 4 this 3 484  
12 0 0 6 16 476 0 0 478 ////////////////////////////////////////////////////////////////////
//     Function: AsyncTask::get_elapsed_time
//       Access: Published
//  Description: Returns the amount of time that has elapsed since
//               the task was started, according to the task manager's
//               clock.
//
//               It is only valid to call this if the task's status is
//               not S_inactive.
//////////////////////////////////////////////////////////////////// 1 4 this 3 484  
13 0 0 6 17 480 0 0 444 ////////////////////////////////////////////////////////////////////
//     Function: AsyncTask::get_start_frame
//       Access: Published
//  Description: Returns the frame number at which the task was
//               started, according to the task manager's clock.
//
//               It is only valid to call this if the task's status is
//               not S_inactive.
//////////////////////////////////////////////////////////////////// 1 4 this 3 484  
14 0 0 6 18 480 0 0 483 ////////////////////////////////////////////////////////////////////
//     Function: AsyncTask::get_elapsed_frames
//       Access: Published
//  Description: Returns the number of frames that have elapsed since
//               the task was started, according to the task manager's
//               clock.
//
//               It is only valid to call this if the task's status is
//               not S_inactive.
//////////////////////////////////////////////////////////////////// 1 4 this 3 484  
15 0 0 4 19 489 0 0 218 ////////////////////////////////////////////////////////////////////
//     Function: AsyncTask::set_name
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 488  4 name 1 490  
16 0 0 4 20 489 0 0 250 ////////////////////////////////////////////////////////////////////
//     Function: AsyncTask::clear_name
//       Access: Public
//  Description: Resets the task's name to empty.
//////////////////////////////////////////////////////////////////// 1 4 this 3 488  
17 0 0 6 21 490 0 0 375 ////////////////////////////////////////////////////////////////////
//     Function: AsyncTask::get_name_prefix
//       Access: Published
//  Description: Returns the initial part of the name, up to but not
//               including any trailing digits following a hyphen or
//               underscore.
//////////////////////////////////////////////////////////////////// 1 4 this 3 484  
18 0 0 6 22 481 0 0 329 ////////////////////////////////////////////////////////////////////
//     Function: AsyncTask::get_task_id
//       Access: Public
//  Description: Returns a number guaranteed to be unique for each
//               different AsyncTask object in the universe.
//////////////////////////////////////////////////////////////////// 1 4 this 3 484  
19 0 0 4 23 489 0 0 380 ////////////////////////////////////////////////////////////////////
//     Function: AsyncTask::set_task_chain
//       Access: Published
//  Description: Specifies the AsyncTaskChain on which this task will
//               be running.  Each task chain runs tasks independently
//               of the others.
//////////////////////////////////////////////////////////////////// 2 4 this 3 488  10 chain_name 1 490  
20 0 0 6 24 490 0 0 378 ////////////////////////////////////////////////////////////////////
//     Function: AsyncTask::get_task_chain
//       Access: Published
//  Description: Returns the AsyncTaskChain on which this task will
//               be running.  Each task chain runs tasks independently
//               of the others.
//////////////////////////////////////////////////////////////////// 1 4 this 3 484  
21 0 0 4 25 489 0 0 823 ////////////////////////////////////////////////////////////////////
//     Function: AsyncTask::set_sort
//       Access: Published
//  Description: Specifies a sort value for this task.  Within a given
//               AsyncTaskManager, all of the tasks with a given sort
//               value are guaranteed to be completed before any tasks
//               with a higher sort value are begun.
//
//               To put it another way, two tasks might execute in
//               parallel with each other only if they both have the
//               same sort value.  Tasks with a lower sort value are
//               executed first.
//
//               This is different from the priority, which makes no
//               such exclusion guarantees.
//////////////////////////////////////////////////////////////////// 2 4 this 3 488  4 sort 1 480  
22 0 0 6 26 480 0 0 291 ////////////////////////////////////////////////////////////////////
//     Function: AsyncTask::get_sort
//       Access: Published
//  Description: Returns the task's current sort value.  See
//               set_sort().
//////////////////////////////////////////////////////////////////// 1 4 this 3 484  
23 0 0 4 27 489 0 0 1339 ////////////////////////////////////////////////////////////////////
//     Function: AsyncTask::set_priority
//       Access: Published
//  Description: Specifies a priority value for this task.  In
//               general, tasks with a higher priority value are
//               executed before tasks with a lower priority value
//               (but only for tasks with the same sort value).
//
//               Unlike the sort value, tasks with different
//               priorities may execute at the same time, if the
//               AsyncTaskManager has more than one thread servicing
//               tasks.
//
//               Also see AsyncTaskChain::set_timeslice_priority(),
//               which changes the meaning of this value.  In the
//               default mode, when the timeslice_priority flag is
//               false, all tasks always run once per epoch,
//               regardless of their priority values (that is, the
//               priority controls the order of the task execution
//               only, not the number of times it runs).  On the other
//               hand, if you set the timeslice_priority flag to true,
//               then changing a task's priority has an effect on the
//               number of times it runs.
//////////////////////////////////////////////////////////////////// 2 4 this 3 488  8 priority 1 480  
24 0 0 6 28 480 0 0 303 ////////////////////////////////////////////////////////////////////
//     Function: AsyncTask::get_priority
//       Access: Published
//  Description: Returns the task's current priority value.  See
//               set_priority().
//////////////////////////////////////////////////////////////////// 1 4 this 3 484  
25 0 0 4 29 489 0 0 529 ////////////////////////////////////////////////////////////////////
//     Function: AsyncTask::set_done_event
//       Access: Published
//  Description: Sets the event name that will be triggered
//               when the task finishes.  This should only be called
//               before the task has been started, or after it has
//               finished and before it is about to be restarted
//               (i.e. when get_state() returns S_inactive).
//////////////////////////////////////////////////////////////////// 2 4 this 3 488  10 done_event 1 490  
26 0 0 6 30 490 0 0 334 ////////////////////////////////////////////////////////////////////
//     Function: AsyncTask::get_done_event
//       Access: Published
//  Description: Returns the event name that will be triggered
//               when the task finishes.  See set_done_event().
//////////////////////////////////////////////////////////////////// 1 4 this 3 484  
27 0 0 4 31 489 0 0 326 ////////////////////////////////////////////////////////////////////
//     Function: AsyncTask::set_python_object
//       Access: Published
//  Description: Specifies an arbitrary Python object that will be
//               piggybacked on the task object.
//////////////////////////////////////////////////////////////////// 2 4 this 3 488  13 python_object 1 477  
28 0 0 6 32 477 0 0 374 ////////////////////////////////////////////////////////////////////
//     Function: AsyncTask::get_python_object
//       Access: Published
//  Description: Returns the Python object that was specified to
//               set_python_object(), if any, or None if no object was
//               specified.
//////////////////////////////////////////////////////////////////// 1 4 this 3 484  
29 0 0 6 33 476 0 0 318 ////////////////////////////////////////////////////////////////////
//     Function: AsyncTask::get_dt
//       Access: Published
//  Description: Returns the amount of time elapsed during the task's
//               previous run cycle, in seconds.
//////////////////////////////////////////////////////////////////// 1 4 this 3 484  
30 0 0 6 34 476 0 0 342 ////////////////////////////////////////////////////////////////////
//     Function: AsyncTask::get_max_dt
//       Access: Published
//  Description: Returns the maximum amount of time elapsed during any
//               one of the task's previous run cycles, in seconds.
//////////////////////////////////////////////////////////////////// 1 4 this 3 484  
31 0 0 6 35 476 0 0 343 ////////////////////////////////////////////////////////////////////
//     Function: AsyncTask::get_average_dt
//       Access: Published
//  Description: Returns the average amount of time elapsed during
//               each of the task's previous run cycles, in seconds.
//////////////////////////////////////////////////////////////////// 1 4 this 3 484  
32 0 0 4 36 489 0 0 226 ////////////////////////////////////////////////////////////////////
//     Function: AsyncTask::output
//       Access: Published, Virtual
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 484  3 out 1 491  
33 0 0 7 37 494 0 0 0 0 
34 0 0 7 39 495 262 0 231 ////////////////////////////////////////////////////////////////////
//     Function: AsyncTaskCollection::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
35 0 0 7 39 495 262 0 236 ////////////////////////////////////////////////////////////////////
//     Function: AsyncTaskCollection::Copy Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 496  
36 0 0 6 40 495 0 0 0 2 4 this 3 495  4 copy 1 496  
37 0 0 4 42 489 0 0 268 ////////////////////////////////////////////////////////////////////
//     Function: AsyncTaskCollection::add_task
//       Access: Published
//  Description: Adds a new AsyncTask to the collection.
//////////////////////////////////////////////////////////////////// 2 4 this 3 495  4 task 1 488  
38 0 0 6 43 486 0 0 404 ////////////////////////////////////////////////////////////////////
//     Function: AsyncTaskCollection::remove_task
//       Access: Published
//  Description: Removes the indicated AsyncTask from the collection.
//               Returns true if the task was removed, false if it was
//               not a member of the collection.
//////////////////////////////////////////////////////////////////// 2 4 this 3 495  4 task 1 488  
39 0 0 4 43 489 0 0 278 ////////////////////////////////////////////////////////////////////
//     Function: AsyncTaskCollection::remove_task
//       Access: Published
//  Description: Removes the nth AsyncTask from the collection.
//////////////////////////////////////////////////////////////////// 2 4 this 3 495  5 index 1 480  
40 0 0 4 44 489 0 0 474 ////////////////////////////////////////////////////////////////////
//     Function: AsyncTaskCollection::add_tasks_from
//       Access: Published
//  Description: Adds all the AsyncTasks indicated in the other
//               collection to this task.  The other tasks are simply
//               appended to the end of the tasks in this list;
//               duplicates are not automatically removed.
//////////////////////////////////////////////////////////////////// 2 4 this 3 495  5 other 1 496  
41 0 0 4 45 489 0 0 337 ////////////////////////////////////////////////////////////////////
//     Function: AsyncTaskCollection::remove_tasks_from
//       Access: Published
//  Description: Removes from this collection all of the AsyncTasks
//               listed in the other collection.
//////////////////////////////////////////////////////////////////// 2 4 this 3 495  5 other 1 496  
42 0 0 4 46 489 0 0 476 ////////////////////////////////////////////////////////////////////
//     Function: AsyncTaskCollection::remove_duplicate_tasks
//       Access: Published
//  Description: Removes any duplicate entries of the same AsyncTasks
//               on this collection.  If a AsyncTask appears multiple
//               times, the first appearance is retained; subsequent
//               appearances are removed.
//////////////////////////////////////////////////////////////////// 1 4 this 3 495  
43 0 0 6 47 486 0 0 330 ////////////////////////////////////////////////////////////////////
//     Function: AsyncTaskCollection::has_task
//       Access: Published
//  Description: Returns true if the indicated AsyncTask appears in
//               this collection, false otherwise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 496  4 task 1 488  
44 0 0 4 48 489 0 0 269 ////////////////////////////////////////////////////////////////////
//     Function: AsyncTaskCollection::clear
//       Access: Published
//  Description: Removes all AsyncTasks from the collection.
//////////////////////////////////////////////////////////////////// 1 4 this 3 495  
45 0 0 7 49 488 0 0 365 ////////////////////////////////////////////////////////////////////
//     Function: AsyncTaskCollection::find_task
//       Access: Published
//  Description: Returns the task in the collection with the
//               indicated name, if any, or NULL if no task has
//               that name.
//////////////////////////////////////////////////////////////////// 2 4 this 3 496  4 name 1 490  
46 0 0 6 50 480 0 0 285 ////////////////////////////////////////////////////////////////////
//     Function: AsyncTaskCollection::get_num_tasks
//       Access: Published
//  Description: Returns the number of AsyncTasks in the collection.
//////////////////////////////////////////////////////////////////// 1 4 this 3 496  
47 0 0 7 51 488 0 0 273 ////////////////////////////////////////////////////////////////////
//     Function: AsyncTaskCollection::get_task
//       Access: Published
//  Description: Returns the nth AsyncTask in the collection.
//////////////////////////////////////////////////////////////////// 2 4 this 3 496  5 index 1 480  
48 0 0 7 52 488 0 0 393 ////////////////////////////////////////////////////////////////////
//     Function: AsyncTaskCollection::operator []
//       Access: Published
//  Description: Returns the nth AsyncTask in the collection.  This is
//               the same as get_task(), but it may be a more
//               convenient way to access it.
//////////////////////////////////////////////////////////////////// 2 4 this 3 496  5 index 1 480  
49 0 0 6 53 480 0 0 332 ////////////////////////////////////////////////////////////////////
//     Function: AsyncTaskCollection::size
//       Access: Published
//  Description: Returns the number of tasks in the collection.  This
//               is the same thing as get_num_tasks().
//////////////////////////////////////////////////////////////////// 1 4 this 3 496  
50 0 0 6 54 495 0 0 0 2 4 this 3 495  5 other 1 496  
51 0 0 7 55 495 262 0 0 2 4 this 3 496  5 other 1 496  
52 0 0 4 56 489 0 0 338 ////////////////////////////////////////////////////////////////////
//     Function: AsyncTaskCollection::output
//       Access: Published
//  Description: Writes a brief one-line description of the
//               AsyncTaskCollection to the indicated output stream.
//////////////////////////////////////////////////////////////////// 2 4 this 3 496  3 out 1 491  
53 0 0 4 57 489 0 0 342 ////////////////////////////////////////////////////////////////////
//     Function: AsyncTaskCollection::write
//       Access: Published
//  Description: Writes a complete multi-line description of the
//               AsyncTaskCollection to the indicated output stream.
//////////////////////////////////////////////////////////////////// 3 4 this 3 496  3 out 1 491  12 indent_level 1 480  
54 0 0 4 66 489 0 0 405 ////////////////////////////////////////////////////////////////////
//     Function: AsyncTaskChain::set_tick_clock
//       Access: Published
//  Description: Sets the tick_clock flag.  When this is true,
//               get_clock()->tick() will be called automatically at
//               each task epoch.  This is false by default.
//////////////////////////////////////////////////////////////////// 2 4 this 3 498  10 tick_clock 1 486  
55 0 0 6 67 486 0 0 281 ////////////////////////////////////////////////////////////////////
//     Function: AsyncTaskChain::get_tick_clock
//       Access: Published
//  Description: Returns the tick_clock flag.  See set_tick_clock().
//////////////////////////////////////////////////////////////////// 1 4 this 3 499  
56 0 0 4 68 489 0 0 382 ////////////////////////////////////////////////////////////////////
//     Function: AsyncTaskChain::set_num_threads
//       Access: Published
//  Description: Changes the number of threads for this task chain.
//               This may require stopping the threads if they are
//               already running.
//////////////////////////////////////////////////////////////////// 2 4 this 3 498  11 num_threads 1 480  
57 0 0 6 69 480 0 0 376 ////////////////////////////////////////////////////////////////////
//     Function: AsyncTaskChain::get_num_threads
//       Access: Published
//  Description: Returns the number of threads that will be servicing
//               tasks for this chain.  Also see
//               get_num_running_threads().
//////////////////////////////////////////////////////////////////// 1 4 this 3 499  
58 0 0 6 70 480 0 0 484 ////////////////////////////////////////////////////////////////////
//     Function: AsyncTaskChain::get_num_running_threads
//       Access: Published
//  Description: Returns the number of threads that have been created
//               and are actively running.  This will return 0 before
//               the threads have been started; it will also return 0
//               if thread support is not available.
//////////////////////////////////////////////////////////////////// 1 4 this 3 499  
59 0 0 4 71 489 0 0 409 ////////////////////////////////////////////////////////////////////
//     Function: AsyncTaskChain::set_thread_priority
//       Access: Published
//  Description: Changes the priority associated with threads that
//               serve this task chain.  This may require stopping the
//               threads if they are already running.
//////////////////////////////////////////////////////////////////// 2 4 this 3 498  8 priority 1 501  
60 0 0 6 72 501 0 0 324 ////////////////////////////////////////////////////////////////////
//     Function: AsyncTaskChain::get_thread_priority
//       Access: Published
//  Description: Returns the priority associated with threads that
//               serve this task chain.
//////////////////////////////////////////////////////////////////// 1 4 this 3 499  
61 0 0 4 73 489 0 0 739 ////////////////////////////////////////////////////////////////////
//     Function: AsyncTaskChain::set_frame_budget
//       Access: Published
//  Description: Sets the maximum amount of time per frame the tasks
//               on this chain are granted for execution.  If this is
//               less than zero, there is no limit; if it is >= 0, it
//               represents a maximum amount of time (in seconds) that
//               will be used to execute tasks.  If this time is
//               exceeded in any one frame, the task chain will stop
//               executing tasks until the next frame, as defined by
//               the TaskManager's clock.
//////////////////////////////////////////////////////////////////// 2 4 this 3 498  12 frame_budget 1 476  
62 0 0 6 74 476 0 0 386 ////////////////////////////////////////////////////////////////////
//     Function: AsyncTaskChain::get_frame_budget
//       Access: Published
//  Description: Returns the maximum amount of time per frame the
//               tasks on this chain are granted for execution.  See
//               set_frame_budget().
//////////////////////////////////////////////////////////////////// 1 4 this 3 499  
63 0 0 4 75 489 0 0 1050 ////////////////////////////////////////////////////////////////////
//     Function: AsyncTaskChain::set_frame_sync
//       Access: Published
//  Description: Sets the frame_sync flag.  When this flag is true,
//               this task chain will be forced to sync with the
//               TaskManager's clock.  It will run no faster than one
//               epoch per clock frame.
//
//               When this flag is false, the default, the task chain
//               will finish all of its tasks and then immediately
//               start from the first task again, regardless of the
//               clock frame.  When it is true, the task chain will
//               finish all of its tasks and then wait for the clock
//               to tick to the next frame before resuming the first
//               task.
//
//               This only makes sense for threaded task chains.
//               Non-threaded task chains are automatically
//               synchronous.
//////////////////////////////////////////////////////////////////// 2 4 this 3 498  10 frame_sync 1 486  
64 0 0 6 76 486 0 0 281 ////////////////////////////////////////////////////////////////////
//     Function: AsyncTaskChain::get_frame_sync
//       Access: Published
//  Description: Returns the frame_sync flag.  See set_frame_sync().
//////////////////////////////////////////////////////////////////// 1 4 this 3 499  
65 0 0 4 77 489 0 0 1385 ////////////////////////////////////////////////////////////////////
//     Function: AsyncTaskChain::set_timeslice_priority
//       Access: Published
//  Description: Sets the timeslice_priority flag.  This changes
//               the interpretation of priority, and the number of
//               times per epoch each task will run.  
//
//               When this flag is true, some tasks might not run in
//               any given epoch.  Instead, tasks with priority higher
//               than 1 will be given precedence, in proportion to the
//               amount of time they have already used.  This gives
//               higher-priority tasks more runtime than
//               lower-priority tasks.  Each task gets the amount of
//               time proportional to its priority value, so a task
//               with priority 100 will get five times as much
//               processing time as a task with priority 20.  For
//               these purposes, priority values less than 1 are
//               deemed to be equal to 1.
//
//               When this flag is false (the default), all tasks are
//               run exactly once each epoch, round-robin style.
//               Priority is only used to determine which task runs
//               first within tasks of the same sort value.
//////////////////////////////////////////////////////////////////// 2 4 this 3 498  18 timeslice_priority 1 486  
66 0 0 6 78 486 0 0 456 ////////////////////////////////////////////////////////////////////
//     Function: AsyncTaskChain::get_timeslice_priority
//       Access: Published
//  Description: Returns the timeslice_priority flag.  This changes
//               the interpretation of priority, and the number of
//               times per epoch each task will run.  See
//               set_timeslice_priority().
//////////////////////////////////////////////////////////////////// 1 4 this 3 499  
67 0 0 4 79 489 0 0 477 ////////////////////////////////////////////////////////////////////
//     Function: AsyncTaskChain::stop_threads
//       Access: Published
//  Description: Stops any threads that are currently running.  If any
//               tasks are still pending and have not yet been picked
//               up by a thread, they will not be serviced unless
//               poll() or start_threads() is later called.
//////////////////////////////////////////////////////////////////// 1 4 this 3 498  
68 0 0 4 80 489 0 0 417 ////////////////////////////////////////////////////////////////////
//     Function: AsyncTaskChain::start_threads
//       Access: Published
//  Description: Starts any requested threads to service the tasks on
//               the queue.  This is normally not necessary, since
//               adding a task will start the threads automatically.
//////////////////////////////////////////////////////////////////// 1 4 this 3 498  
69 0 0 6 81 486 0 0 472 ////////////////////////////////////////////////////////////////////
//     Function: AsyncTaskChain::is_started
//       Access: Published
//  Description: Returns true if the thread(s) have been started and
//               are ready to service requests, false otherwise.  If
//               this is false, the next call to add() or add_and_do()
//               will automatically start the threads.
//////////////////////////////////////////////////////////////////// 1 4 this 3 499  
70 0 0 6 82 486 0 0 331 ////////////////////////////////////////////////////////////////////
//     Function: AsyncTaskChain::has_task
//       Access: Published
//  Description: Returns true if the indicated task has been added to
//               this AsyncTaskChain, false otherwise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 499  4 task 1 488  
71 0 0 4 83 489 0 0 266 ////////////////////////////////////////////////////////////////////
//     Function: AsyncTaskChain::wait_for_tasks
//       Access: Published
//  Description: Blocks until the task list is empty.
//////////////////////////////////////////////////////////////////// 1 4 this 3 498  
72 0 0 6 84 480 0 0 334 ////////////////////////////////////////////////////////////////////
//     Function: AsyncTaskChain::get_num_tasks
//       Access: Published
//  Description: Returns the number of tasks that are currently active
//               or sleeping within the task chain.
//////////////////////////////////////////////////////////////////// 1 4 this 3 499  
73 0 0 7 85 495 262 0 338 ////////////////////////////////////////////////////////////////////
//     Function: AsyncTaskChain::get_tasks
//       Access: Published
//  Description: Returns the set of tasks that are active or sleeping
//               on the task chain, at the time of the call.
//////////////////////////////////////////////////////////////////// 1 4 this 3 499  
74 0 0 7 86 495 262 0 369 ////////////////////////////////////////////////////////////////////
//     Function: AsyncTaskChain::get_active_tasks
//       Access: Published
//  Description: Returns the set of tasks that are active (and not
//               sleeping) on the task chain, at the time of the
//               call.
//////////////////////////////////////////////////////////////////// 1 4 this 3 499  
75 0 0 7 87 495 262 0 371 ////////////////////////////////////////////////////////////////////
//     Function: AsyncTaskChain::get_sleeping_tasks
//       Access: Published
//  Description: Returns the set of tasks that are sleeping (and not
//               active) on the task chain, at the time of the
//               call.
//////////////////////////////////////////////////////////////////// 1 4 this 3 499  
76 0 0 4 88 489 0 0 697 ////////////////////////////////////////////////////////////////////
//     Function: AsyncTaskChain::poll
//       Access: Published
//  Description: Runs through all the tasks in the task list, once, if
//               the task chain is running in single-threaded mode
//               (no threads available).  This method does nothing in
//               threaded mode, so it may safely be called in either
//               case.
//
//               Normally, you would not call this function directly;
//               instead, call AsyncTaskManager::poll(), which polls
//               all of the task chains in sequence.
//////////////////////////////////////////////////////////////////// 1 4 this 3 498  
77 0 0 6 89 476 0 0 420 ////////////////////////////////////////////////////////////////////
//     Function: AsyncTaskChain::get_next_wake_time
//       Access: Published
//  Description: Returns the scheduled time (on the manager's clock)
//               of the next sleeping task, on any task chain, to
//               awaken.  Returns -1 if there are no sleeping tasks.
//////////////////////////////////////////////////////////////////// 1 4 this 3 499  
78 0 0 4 90 489 0 0 231 ////////////////////////////////////////////////////////////////////
//     Function: AsyncTaskChain::output
//       Access: Published, Virtual
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 499  3 out 1 491  
79 0 0 4 91 489 0 0 230 ////////////////////////////////////////////////////////////////////
//     Function: AsyncTaskChain::write
//       Access: Published, Virtual
//  Description: 
//////////////////////////////////////////////////////////////////// 3 4 this 3 499  3 out 1 491  12 indent_level 1 480  
80 0 0 7 92 494 0 0 0 0 
81 0 0 7 60 502 0 0 0 1 4 this 3 498  
82 0 0 7 61 498 283 0 0 1 4 this 3 502  
83 0 0 6 63 503 0 0 0 1 4 this 3 498  
84 0 0 7 64 498 283 0 0 1 4 this 3 503  
85 0 0 7 98 487 316 0 228 ////////////////////////////////////////////////////////////////////
//     Function: AsyncTaskManager::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 name 1 490  
86 0 0 4 100 489 0 0 345 ////////////////////////////////////////////////////////////////////
//     Function: AsyncTaskManager::cleanup
//       Access: Published
//  Description: Stops all threads and messily empties the task list.
//               This is intended to be called on destruction only.
//////////////////////////////////////////////////////////////////// 1 4 this 3 487  
87 0 0 4 101 489 0 0 578 ////////////////////////////////////////////////////////////////////
//     Function: AsyncTaskManager::set_clock
//       Access: Published
//  Description: Replaces the clock pointer used within the
//               AsyncTaskManager.  This is used to control when tasks
//               with a set_delay() specified will be scheduled.  It
//               can also be ticked automatically each epoch, if
//               set_tick_clock() is true.
//
//               The default is the global clock pointer.
//////////////////////////////////////////////////////////////////// 2 4 this 3 487  5 clock 1 504  
88 0 0 7 102 504 0 0 321 ////////////////////////////////////////////////////////////////////
//     Function: AsyncTaskManager::get_clock
//       Access: Published
//  Description: Returns the clock pointer used within the
//               AsyncTaskManager.  See set_clock().
//////////////////////////////////////////////////////////////////// 1 4 this 3 487  
89 0 0 6 103 480 0 0 281 ////////////////////////////////////////////////////////////////////
//     Function: AsyncTaskManager::get_num_task_chains
//       Access: Published
//  Description: Returns the number of different task chains.
//////////////////////////////////////////////////////////////////// 1 4 this 3 506  
90 0 0 7 104 498 283 0 259 ////////////////////////////////////////////////////////////////////
//     Function: AsyncTaskManager::get_task_chain
//       Access: Published
//  Description: Returns the nth task chain.
//////////////////////////////////////////////////////////////////// 2 4 this 3 506  1 n 1 480  
91 0 0 7 105 498 283 0 445 ////////////////////////////////////////////////////////////////////
//     Function: AsyncTaskManager::make_task_chain
//       Access: Published
//  Description: Creates a new AsyncTaskChain of the indicated name
//               and stores it within the AsyncTaskManager.  If a task
//               chain with this name already exists, returns it
//               instead.
//////////////////////////////////////////////////////////////////// 2 4 this 3 487  4 name 1 490  
92 0 0 7 106 498 283 0 349 ////////////////////////////////////////////////////////////////////
//     Function: AsyncTaskManager::find_task_chain
//       Access: Protected
//  Description: Searches a new AsyncTaskChain of the indicated name
//               and returns it if it exists, or NULL otherwise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 487  4 name 1 490  
93 0 0 6 107 486 0 0 496 ////////////////////////////////////////////////////////////////////
//     Function: AsyncTaskManager::remove_task_chain
//       Access: Protected
//  Description: Removes the AsyncTaskChain of the indicated name.
//               If the chain still has tasks, this will block until
//               all tasks are finished.
//
//               Returns true if successful, or false if the chain did
//               not exist.
//////////////////////////////////////////////////////////////////// 2 4 this 3 487  4 name 1 490  
94 0 0 4 108 489 0 0 379 ////////////////////////////////////////////////////////////////////
//     Function: AsyncTaskManager::add
//       Access: Published
//  Description: Adds the indicated task to the active queue.  It is
//               an error if the task is already added to this or any
//               other active queue.
//////////////////////////////////////////////////////////////////// 2 4 this 3 487  4 task 1 488  
95 0 0 6 109 486 0 0 335 ////////////////////////////////////////////////////////////////////
//     Function: AsyncTaskManager::has_task
//       Access: Published
//  Description: Returns true if the indicated task has been added to
//               this AsyncTaskManager, false otherwise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 506  4 task 1 488  
96 0 0 7 110 488 0 0 468 ////////////////////////////////////////////////////////////////////
//     Function: AsyncTaskManager::find_task
//       Access: Published
//  Description: Returns the first task found with the indicated name,
//               or NULL if there is no task with the indicated name.
//
//               If there are multiple tasks with the same name,
//               returns one of them arbitrarily.
//////////////////////////////////////////////////////////////////// 2 4 this 3 506  4 name 1 490  
97 0 0 7 111 495 262 0 301 ////////////////////////////////////////////////////////////////////
//     Function: AsyncTaskManager::find_tasks
//       Access: Published
//  Description: Returns the list of tasks found with the indicated
//               name.
//////////////////////////////////////////////////////////////////// 2 4 this 3 506  4 name 1 490  
98 0 0 7 112 495 262 0 350 ////////////////////////////////////////////////////////////////////
//     Function: AsyncTaskManager::find_tasks_matching
//       Access: Published
//  Description: Returns the list of tasks found whose name matches
//               the indicated glob pattern, e.g. "my_task_*".
//////////////////////////////////////////////////////////////////// 2 4 this 3 506  7 pattern 1 508  
99 0 0 6 113 486 0 0 386 ////////////////////////////////////////////////////////////////////
//     Function: AsyncTaskManager::remove
//       Access: Published
//  Description: Removes the indicated task from the active queue.
//               Returns true if the task is successfully removed, or
//               false if it wasn't there.
//////////////////////////////////////////////////////////////////// 2 4 this 3 487  4 task 1 488  
100 0 0 6 113 480 0 0 330 ////////////////////////////////////////////////////////////////////
//     Function: AsyncTaskManager::remove
//       Access: Published
//  Description: Removes all of the tasks in the AsyncTaskCollection.
//               Returns the number of tasks removed.
//////////////////////////////////////////////////////////////////// 2 4 this 3 487  5 tasks 1 496  
101 0 0 4 114 489 0 0 268 ////////////////////////////////////////////////////////////////////
//     Function: AsyncTaskManager::wait_for_tasks
//       Access: Published
//  Description: Blocks until the task list is empty.
//////////////////////////////////////////////////////////////////// 1 4 this 3 487  
102 0 0 4 115 489 0 0 479 ////////////////////////////////////////////////////////////////////
//     Function: AsyncTaskManager::stop_threads
//       Access: Published
//  Description: Stops any threads that are currently running.  If any
//               tasks are still pending and have not yet been picked
//               up by a thread, they will not be serviced unless
//               poll() or start_threads() is later called.
//////////////////////////////////////////////////////////////////// 1 4 this 3 487  
103 0 0 4 116 489 0 0 419 ////////////////////////////////////////////////////////////////////
//     Function: AsyncTaskManager::start_threads
//       Access: Published
//  Description: Starts any requested threads to service the tasks on
//               the queue.  This is normally not necessary, since
//               adding a task will start the threads automatically.
//////////////////////////////////////////////////////////////////// 1 4 this 3 487  
104 0 0 6 117 480 0 0 338 ////////////////////////////////////////////////////////////////////
//     Function: AsyncTaskManager::get_num_tasks
//       Access: Published
//  Description: Returns the number of tasks that are currently active
//               or sleeping within the task manager.
//////////////////////////////////////////////////////////////////// 1 4 this 3 506  
105 0 0 7 118 495 262 0 342 ////////////////////////////////////////////////////////////////////
//     Function: AsyncTaskManager::get_tasks
//       Access: Published
//  Description: Returns the set of tasks that are active or sleeping
//               on the task manager, at the time of the call.
//////////////////////////////////////////////////////////////////// 1 4 this 3 506  
106 0 0 7 119 495 262 0 373 ////////////////////////////////////////////////////////////////////
//     Function: AsyncTaskManager::get_active_tasks
//       Access: Published
//  Description: Returns the set of tasks that are active (and not
//               sleeping) on the task manager, at the time of the
//               call.
//////////////////////////////////////////////////////////////////// 1 4 this 3 506  
107 0 0 7 120 495 262 0 375 ////////////////////////////////////////////////////////////////////
//     Function: AsyncTaskManager::get_sleeping_tasks
//       Access: Published
//  Description: Returns the set of tasks that are sleeping (and not
//               active) on the task manager, at the time of the
//               call.
//////////////////////////////////////////////////////////////////// 1 4 this 3 506  
108 0 0 4 121 489 0 0 506 ////////////////////////////////////////////////////////////////////
//     Function: AsyncTaskManager::poll
//       Access: Published
//  Description: Runs through all the tasks in the task list, once, if
//               the task manager is running in single-threaded mode
//               (no threads available).  This method does nothing in
//               threaded mode, so it may safely be called in either
//               case.
//////////////////////////////////////////////////////////////////// 1 4 this 3 487  
109 0 0 6 122 476 0 0 422 ////////////////////////////////////////////////////////////////////
//     Function: AsyncTaskManager::get_next_wake_time
//       Access: Published
//  Description: Returns the scheduled time (on the manager's clock)
//               of the next sleeping task, on any task chain, to
//               awaken.  Returns -1 if there are no sleeping tasks.
//////////////////////////////////////////////////////////////////// 1 4 this 3 506  
110 0 0 4 123 489 0 0 233 ////////////////////////////////////////////////////////////////////
//     Function: AsyncTaskManager::output
//       Access: Published, Virtual
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 506  3 out 1 491  
111 0 0 4 124 489 0 0 232 ////////////////////////////////////////////////////////////////////
//     Function: AsyncTaskManager::write
//       Access: Published, Virtual
//  Description: 
//////////////////////////////////////////////////////////////////// 3 4 this 3 506  3 out 1 491  12 indent_level 1 480  
112 0 0 7 125 487 316 0 403 ////////////////////////////////////////////////////////////////////
//     Function: AsyncTaskManager::get_global_ptr
//       Access: Published
//  Description: Returns a pointer to the global AsyncTaskManager.
//               This is the AsyncTaskManager that most code should
//               use for queueing tasks and suchlike.
//////////////////////////////////////////////////////////////////// 0 
113 0 0 7 126 494 0 0 0 0 
114 0 0 7 94 502 0 0 0 1 4 this 3 487  
115 0 0 7 95 487 316 0 0 1 4 this 3 502  
116 0 0 6 96 503 0 0 0 1 4 this 3 487  
117 0 0 7 97 487 316 0 0 1 4 this 3 503  
118 0 0 7 128 511 349 0 226 ////////////////////////////////////////////////////////////////////
//     Function: AsyncTaskPause::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 5 delay 1 476  
119 0 0 4 129 489 0 0 0 2 4 this 3 511  4 size 1 512  
120 0 0 7 132 494 0 0 0 0 
121 0 0 7 139 514 355 0 229 ////////////////////////////////////////////////////////////////////
//     Function: AsyncTaskSequence::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 name 1 490  
122 0 0 4 141 489 0 0 0 2 4 this 3 514  4 size 1 512  
123 0 0 4 144 489 0 0 533 ////////////////////////////////////////////////////////////////////
//     Function: AsyncTaskSequence::set_repeat_count
//       Access: Published
//  Description: Sets the repeat count of the sequence.  If the count
//               is 0 or 1, the sequence will run exactly once.  If it
//               is greater than 0, it will run that number of times.
//               If it is negative, it will run forever until it is
//               explicitly removed.
//////////////////////////////////////////////////////////////////// 2 4 this 3 514  12 repeat_count 1 480  
124 0 0 6 145 480 0 0 318 ////////////////////////////////////////////////////////////////////
//     Function: AsyncTaskSequence::get_repeat_count
//       Access: Published
//  Description: Returns the repeat count of the sequence.  See
//               set_repeat_count().
//////////////////////////////////////////////////////////////////// 1 4 this 3 515  
125 0 0 6 146 480 0 0 403 ////////////////////////////////////////////////////////////////////
//     Function: AsyncTaskSequence::get_current_task_index
//       Access: Published
//  Description: Returns the index of the task within the sequence
//               that is currently being executed (or that will be
//               executed at the next epoch).
//////////////////////////////////////////////////////////////////// 1 4 this 3 515  
126 0 0 7 147 494 0 0 0 0 
127 0 0 7 135 488 0 0 0 1 4 this 3 514  
128 0 0 7 136 514 355 0 0 1 4 this 3 488  
129 0 0 6 137 495 0 0 0 1 4 this 3 514  
130 0 0 7 138 514 355 0 0 1 4 this 3 495  
131 0 0 7 149 517 365 0 321 ////////////////////////////////////////////////////////////////////
//     Function: EventParameter::Default constructor
//       Access: Published
//  Description: Defines an EventParameter that stores nothing: the
//               "empty" parameter.
//////////////////////////////////////////////////////////////////// 0 
132 0 0 7 149 517 365 0 231 ////////////////////////////////////////////////////////////////////
//     Function: EventParameter::Copy constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 518  
133 0 0 7 149 517 365 0 837 ////////////////////////////////////////////////////////////////////
//     Function: EventParameter::Pointer constructor
//       Access: Published
//  Description: Defines an EventParameter that stores a pointer to
//               a TypedReferenceCount object.  Note that a
//               TypedReferenceCount is not the same kind of pointer
//               as a TypedWritableReferenceCount, hence we require
//               both constructors.
//
//               This accepts a const pointer, even though it stores
//               (and eventually returns) a non-const pointer.  This
//               is just the simplest way to allow both const and
//               non-const pointers to be stored, but it does lose the
//               constness.  Be careful.
//////////////////////////////////////////////////////////////////// 1 3 ptr 1 520  
134 0 0 7 149 517 365 0 725 ////////////////////////////////////////////////////////////////////
//     Function: EventParameter::Pointer constructor
//       Access: Published
//  Description: Defines an EventParameter that stores a pointer to
//               any kind of TypedWritableReferenceCount object.  This
//               is the most general constructor.
//
//               This accepts a const pointer, even though it stores
//               (and eventually returns) a non-const pointer.  This
//               is just the simplest way to allow both const and
//               non-const pointers to be stored, but it does lose the
//               constness.  Be careful.
//////////////////////////////////////////////////////////////////// 1 3 ptr 1 522  
135 0 0 7 149 517 365 0 312 ////////////////////////////////////////////////////////////////////
//     Function: EventParameter::Double constructor
//       Access: Published
//  Description: Defines an EventParameter that stores a
//               floating-point value.
//////////////////////////////////////////////////////////////////// 1 5 value 1 476  
136 0 0 7 149 517 365 0 307 ////////////////////////////////////////////////////////////////////
//     Function: EventParameter::Integer constructor
//       Access: Published
//  Description: Defines an EventParameter that stores an integer
//               value.
//////////////////////////////////////////////////////////////////// 1 5 value 1 480  
137 0 0 7 149 517 365 0 287 ////////////////////////////////////////////////////////////////////
//     Function: EventParameter::String constructor
//       Access: Published
//  Description: Defines an EventParameter that stores a string value.
//////////////////////////////////////////////////////////////////// 1 5 value 1 490  
138 0 0 7 149 517 365 0 289 ////////////////////////////////////////////////////////////////////
//     Function: EventParameter::Wstring constructor
//       Access: Published
//  Description: Defines an EventParameter that stores a wstring value.
//////////////////////////////////////////////////////////////////// 1 5 value 1 490  
139 0 0 6 150 517 0 0 239 ////////////////////////////////////////////////////////////////////
//     Function: EventParameter::Copy assignment operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 517  4 copy 1 518  
140 0 0 6 152 486 0 0 336 ////////////////////////////////////////////////////////////////////
//     Function: EventParameter::is_empty
//       Access: Published
//  Description: Returns true if the EventParameter is the empty
//               parameter, storing nothing, or false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 518  
141 0 0 6 153 486 0 0 315 ////////////////////////////////////////////////////////////////////
//     Function: EventParameter::is_int
//       Access: Published
//  Description: Returns true if the EventParameter stores an integer
//               value, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 518  
142 0 0 6 154 480 0 0 382 ////////////////////////////////////////////////////////////////////
//     Function: EventParameter::get_int_value
//       Access: Published
//  Description: Retrieves the value stored in the EventParameter.  It
//               is only valid to call this if is_int() has already
//               returned true.
//////////////////////////////////////////////////////////////////// 1 4 this 3 518  
143 0 0 6 155 486 0 0 331 ////////////////////////////////////////////////////////////////////
//     Function: EventParameter::is_double
//       Access: Published
//  Description: Returns true if the EventParameter stores a double
//               floating-point value, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 518  
144 0 0 6 156 476 0 0 388 ////////////////////////////////////////////////////////////////////
//     Function: EventParameter::get_double_value
//       Access: Published
//  Description: Retrieves the value stored in the EventParameter.  It
//               is only valid to call this if is_double() has already
//               returned true.
//////////////////////////////////////////////////////////////////// 1 4 this 3 518  
145 0 0 6 157 486 0 0 316 ////////////////////////////////////////////////////////////////////
//     Function: EventParameter::is_string
//       Access: Published
//  Description: Returns true if the EventParameter stores a string
//               value, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 518  
146 0 0 6 158 490 0 0 388 ////////////////////////////////////////////////////////////////////
//     Function: EventParameter::get_string_value
//       Access: Published
//  Description: Retrieves the value stored in the EventParameter.  It
//               is only valid to call this if is_string() has already
//               returned true.
//////////////////////////////////////////////////////////////////// 1 4 this 3 518  
147 0 0 6 159 486 0 0 318 ////////////////////////////////////////////////////////////////////
//     Function: EventParameter::is_wstring
//       Access: Published
//  Description: Returns true if the EventParameter stores a wstring
//               value, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 518  
148 0 0 6 160 490 0 0 390 ////////////////////////////////////////////////////////////////////
//     Function: EventParameter::get_wstring_value
//       Access: Published
//  Description: Retrieves the value stored in the EventParameter.  It
//               is only valid to call this if is_wstring() has already
//               returned true.
//////////////////////////////////////////////////////////////////// 1 4 this 3 518  
149 0 0 6 161 486 0 0 537 ////////////////////////////////////////////////////////////////////
//     Function: EventParameter::is_typed_ref_count
//       Access: Published
//  Description: Returns true if the EventParameter stores a
//               TypedReferenceCount pointer, false otherwise.  Note
//               that a TypedReferenceCount is not exactly the same
//               kind of pointer as a TypedWritableReferenceCount,
//               hence the need for this separate call.
//////////////////////////////////////////////////////////////////// 1 4 this 3 518  
150 0 0 7 162 502 0 0 406 ////////////////////////////////////////////////////////////////////
//     Function: EventParameter::get_typed_ref_count_value
//       Access: Published
//  Description: Retrieves the value stored in the EventParameter.  It
//               is only valid to call this if is_typed_ref_count()
//               has already returned true.
//////////////////////////////////////////////////////////////////// 1 4 this 3 518  
151 0 0 7 163 525 0 0 552 ////////////////////////////////////////////////////////////////////
//     Function: EventParameter::get_ptr
//       Access: Published
//  Description: Retrieves a pointer to the actual value stored in the
//               parameter.  The TypeHandle of this pointer may be
//               examined to determine the actual type of parameter it
//               contains.  This is the only way to retrieve the value
//               when it is not one of the above predefined types.
//////////////////////////////////////////////////////////////////// 1 4 this 3 518  
152 0 0 4 164 489 0 0 221 ////////////////////////////////////////////////////////////////////
//     Function: EventParameter::output
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 518  3 out 1 491  
153 0 0 7 166 528 0 0 219 ////////////////////////////////////////////////////////////////////
//     Function: Event::Copy constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 526  
154 0 0 7 166 528 0 0 214 ////////////////////////////////////////////////////////////////////
//     Function: Event::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 10 event_name 1 490  8 receiver 1 529  
155 0 0 7 167 528 0 0 0 2 4 this 3 528  4 copy 1 526  
156 0 0 4 168 489 0 0 211 ////////////////////////////////////////////////////////////////////
//     Function: Event::set_name
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 528  4 name 1 490  
157 0 0 4 169 489 0 0 247 ////////////////////////////////////////////////////////////////////
//     Function: Event::clear_name
//       Access: Public
//  Description: Resets the Event's name to empty.
//////////////////////////////////////////////////////////////////// 1 4 this 3 528  
158 0 0 6 170 486 0 0 307 ////////////////////////////////////////////////////////////////////
//     Function: Event::has_name
//       Access: Public
//  Description: Returns true if the Event has a nonempty name set,
//               false if the name is empty.
//////////////////////////////////////////////////////////////////// 1 4 this 3 526  
159 0 0 6 171 490 0 0 211 ////////////////////////////////////////////////////////////////////
//     Function: Event::get_name
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 526  
160 0 0 4 172 489 0 0 216 ////////////////////////////////////////////////////////////////////
//     Function: Event::add_parameter
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 528  3 obj 1 518  
161 0 0 6 173 480 0 0 221 ////////////////////////////////////////////////////////////////////
//     Function: Event::get_num_parameters
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 526  
162 0 0 7 174 517 365 0 216 ////////////////////////////////////////////////////////////////////
//     Function: Event::get_parameter
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 526  1 n 1 480  
163 0 0 6 175 486 0 0 215 ////////////////////////////////////////////////////////////////////
//     Function: Event::has_receiver
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 526  
164 0 0 6 176 529 0 0 215 ////////////////////////////////////////////////////////////////////
//     Function: Event::get_receiver
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 526  
165 0 0 4 177 489 0 0 215 ////////////////////////////////////////////////////////////////////
//     Function: Event::set_receiver
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 528  8 receiver 1 529  
166 0 0 4 178 489 0 0 217 ////////////////////////////////////////////////////////////////////
//     Function: Event::clear_receiver
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 528  
167 0 0 4 179 489 0 0 209 ////////////////////////////////////////////////////////////////////
//     Function: Event::output
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 526  3 out 1 491  
168 0 0 7 180 494 0 0 0 0 
169 0 0 7 183 532 400 0 221 ////////////////////////////////////////////////////////////////////
//     Function: EventHandler::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 8 ev_queue 1 531  
170 0 0 4 184 489 0 0 447 ////////////////////////////////////////////////////////////////////
//     Function: EventHandler::process_events
//       Access: Public
//  Description: The main processing loop of the EventHandler.  This
//               function must be called periodically to service
//               events.  Walks through each pending event and calls
//               its assigned hooks.
//////////////////////////////////////////////////////////////////// 1 4 this 3 532  
171 0 0 4 185 489 0 0 306 ////////////////////////////////////////////////////////////////////
//     Function: EventHandler::dispatch_event
//       Access: Public, Virtual
//  Description: Calls the hooks assigned to the indicated single
//               event.
//////////////////////////////////////////////////////////////////// 2 4 this 3 532  6 param0 0 526  
172 0 0 4 186 489 0 0 215 ////////////////////////////////////////////////////////////////////
//     Function: EventHandler::write
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 533  3 out 1 491  
173 0 0 6 187 532 0 0 392 ////////////////////////////////////////////////////////////////////
//     Function: EventQueue::get_global_event_handler
//       Access: Public
//  Description: Returns a pointer to the one global EventHandler
//               object.  If the global object has not yet been
//               created, this will create it.
//////////////////////////////////////////////////////////////////// 1 5 queue 1 531  
174 0 0 7 188 494 0 0 0 0 
175 0 0 7 191 531 402 0 222 ////////////////////////////////////////////////////////////////////
//     Function: EventQueue::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
176 0 0 4 193 489 0 0 222 ////////////////////////////////////////////////////////////////////
//     Function: EventQueue::queue_event
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 531  5 event 1 526  
177 0 0 4 194 489 0 0 294 ////////////////////////////////////////////////////////////////////
//     Function: EventQueue::clear
//       Access: Published
//  Description: Empties all events on the queue, throwing them on the
//               floor.
//////////////////////////////////////////////////////////////////// 1 4 this 3 531  
178 0 0 6 195 486 0 0 225 ////////////////////////////////////////////////////////////////////
//     Function: EventQueue::is_queue_empty
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 535  
179 0 0 6 196 486 0 0 306 ////////////////////////////////////////////////////////////////////
//     Function: EventQueue::is_queue_full
//       Access: Published
//  Description: This function is deprecated--the queue is never full
//               these days.
//////////////////////////////////////////////////////////////////// 1 4 this 3 535  
180 0 0 7 197 526 0 0 224 ////////////////////////////////////////////////////////////////////
//     Function: EventQueue::dequeue_event
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 531  
181 0 0 6 198 531 0 0 388 ////////////////////////////////////////////////////////////////////
//     Function: EventQueue::get_global_event_queue
//       Access: Public
//  Description: Returns a pointer to the one global EventQueue
//               object.  If the global object has not yet been
//               created, this will create it.
//////////////////////////////////////////////////////////////////// 0 
182 0 0 7 201 537 428 0 225 ////////////////////////////////////////////////////////////////////
//     Function: PointerEventList::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
183 0 0 6 202 480 0 0 273 ////////////////////////////////////////////////////////////////////
//     Function: PointerEventList::get_num_events
//       Access: Published
//  Description: Returns the number of events in the list.
//////////////////////////////////////////////////////////////////// 1 4 this 3 538  
184 0 0 6 203 486 0 0 271 ////////////////////////////////////////////////////////////////////
//     Function: PointerEventList::get_in_window
//       Access: Published
//  Description: Get the in-window flag of the nth event.
//////////////////////////////////////////////////////////////////// 2 4 this 3 538  1 n 1 480  
185 0 0 6 204 480 0 0 264 ////////////////////////////////////////////////////////////////////
//     Function: PointerEventList::get_xpos
//       Access: Published
//  Description: Get the x-coordinate of the nth event.
//////////////////////////////////////////////////////////////////// 2 4 this 3 538  1 n 1 480  
186 0 0 6 205 480 0 0 264 ////////////////////////////////////////////////////////////////////
//     Function: PointerEventList::get_ypos
//       Access: Published
//  Description: Get the y-coordinate of the nth event.
//////////////////////////////////////////////////////////////////// 2 4 this 3 538  1 n 1 480  
187 0 0 6 206 480 0 0 262 ////////////////////////////////////////////////////////////////////
//     Function: PointerEventList::get_dx
//       Access: Published
//  Description: Get the x-coordinate of the nth event.
//////////////////////////////////////////////////////////////////// 2 4 this 3 538  1 n 1 480  
188 0 0 6 207 480 0 0 262 ////////////////////////////////////////////////////////////////////
//     Function: PointerEventList::get_dy
//       Access: Published
//  Description: Get the y-coordinate of the nth event.
//////////////////////////////////////////////////////////////////// 2 4 this 3 538  1 n 1 480  
189 0 0 6 208 480 0 0 271 ////////////////////////////////////////////////////////////////////
//     Function: PointerEventList::get_sequence
//       Access: Published
//  Description: Get the sequence number of the nth event.
//////////////////////////////////////////////////////////////////// 2 4 this 3 538  1 n 1 480  
190 0 0 6 209 476 0 0 260 ////////////////////////////////////////////////////////////////////
//     Function: PointerEventList::get_length
//       Access: Published
//  Description: Get the length of the nth event.
//////////////////////////////////////////////////////////////////// 2 4 this 3 538  1 n 1 480  
191 0 0 6 210 476 0 0 266 ////////////////////////////////////////////////////////////////////
//     Function: PointerEventList::get_direction
//       Access: Published
//  Description: Get the direction of the nth event.
//////////////////////////////////////////////////////////////////// 2 4 this 3 538  1 n 1 480  
192 0 0 6 211 476 0 0 264 ////////////////////////////////////////////////////////////////////
//     Function: PointerEventList::get_rotation
//       Access: Published
//  Description: Get the rotation of the nth event.
//////////////////////////////////////////////////////////////////// 2 4 this 3 538  1 n 1 480  
193 0 0 6 212 476 0 0 261 ////////////////////////////////////////////////////////////////////
//     Function: PointerEventList::get_time
//       Access: Published
//  Description: Get the timestamp of the nth event.
//////////////////////////////////////////////////////////////////// 2 4 this 3 538  1 n 1 480  
194 0 0 4 213 489 0 0 257 ////////////////////////////////////////////////////////////////////
//     Function: PointerEventList::clear
//       Access: Public
//  Description: Empties all the events from the list.
//////////////////////////////////////////////////////////////////// 1 4 this 3 537  
195 0 0 4 214 489 0 0 261 ////////////////////////////////////////////////////////////////////
//     Function: PointerEventList::pop_front
//       Access: Public
//  Description: Discards the first event on the list.
//////////////////////////////////////////////////////////////////// 1 4 this 3 537  
196 0 0 4 215 489 0 0 399 ////////////////////////////////////////////////////////////////////
//     Function: PointerEventList::add_event
//       Access: Published
//  Description: Adds a new event to the end of the list.
//               Automatically calculates the dx, dy, length,
//               direction, and rotation for all but the first event.
//////////////////////////////////////////////////////////////////// 6 4 this 3 537  6 in_win 1 486  4 xpos 1 480  4 ypos 1 480  3 seq 1 480  4 time 1 476  
197 0 0 6 216 486 0 0 303 ////////////////////////////////////////////////////////////////////
//     Function: PointerEventList::encircles
//       Access: Published
//  Description: Returns true if the trail loops around the
//               specified point.
//////////////////////////////////////////////////////////////////// 3 4 this 3 538  1 x 1 480  1 y 1 480  
198 0 0 6 217 476 0 0 555 ////////////////////////////////////////////////////////////////////
//     Function: PointerEventList::total_turns
//       Access: Published
//  Description: returns the total angular deviation that the trail
//               has made in the specified time period.  A small
//               number means that the trail is moving in a relatively
//               straight line, a large number means that the trail
//               is zig-zagging or spinning.  The result is in degrees.
//////////////////////////////////////////////////////////////////// 2 4 this 3 538  3 sec 1 476  
199 0 0 6 218 476 0 0 912 ////////////////////////////////////////////////////////////////////
//     Function: PointerEventList::match_pattern
//       Access: Published
//  Description: This function is not implemented yet.  It is a work
//               in progress.  The intent is as follows:
//
//               Returns a nonzero value if the mouse movements 
//               match the specified pattern.  The higher the value,
//               the better the match.  The pattern is a sequence
//               of compass directions (ie, "E", "NE", etc) separated
//               by spaces.  If rot is nonzero, then the pattern is
//               rotated counterclockwise by the specified amount 
//               before testing.  Seglen is the minimum length a
//               mouse movement needs to be in order to be considered
//               significant.
//////////////////////////////////////////////////////////////////// 4 4 this 3 537  7 pattern 1 490  3 rot 1 476  6 seglen 1 476  
200 0 0 7 219 494 0 0 0 0 
201 0 0 7 222 540 0 0 0 2 8 function 1 477  4 name 1 490  
202 0 0 4 223 489 0 0 0 2 4 this 3 540  4 size 1 512  
203 0 0 4 226 489 0 0 0 2 4 this 3 540  8 function 1 477  
204 0 0 6 227 477 0 0 0 1 4 this 3 540  
205 0 0 4 228 489 0 0 0 3 4 this 3 540  4 args 1 477  11 append_task 1 486  
206 0 0 6 229 477 0 0 0 1 4 this 3 540  
207 0 0 4 230 489 0 0 0 2 4 this 3 540  10 upon_death 1 477  
208 0 0 6 231 477 0 0 0 1 4 this 3 540  
209 0 0 4 232 489 0 0 0 2 4 this 3 540  5 owner 1 477  
210 0 0 6 233 477 0 0 0 1 4 this 3 540  
211 0 0 6 234 480 0 0 0 3 4 this 3 540  4 attr 1 477  1 v 1 477  
212 0 0 6 235 480 0 0 0 2 4 this 3 540  4 attr 1 477  
213 0 0 6 236 477 0 0 0 2 4 this 3 541  4 attr 1 477  
214 0 0 6 237 480 0 0 0 3 4 this 3 540  5 visit 1 543  3 arg 1 544  
215 0 0 6 238 480 0 0 0 1 4 this 3 540  
216 0 0 4 239 489 0 0 378 ////////////////////////////////////////////////////////////////////
//     Function: PythonTask::set_delay
//       Access: Public
//  Description: If None is passed, calls clear_delay, otherwise
//               sets the delay time.  See AsyncTask::set_delay()
//               and AsyncTask::clear_delay().
//////////////////////////////////////////////////////////////////// 2 4 this 3 540  5 delay 1 477  
217 0 0 6 240 477 0 0 336 ////////////////////////////////////////////////////////////////////
//     Function: PythonTask::get_delay
//       Access: Public
//  Description: Returns the delay time if set, None otherwise.
//               See AsyncTask::has_delay() and AsyncTask::get_delay().
//////////////////////////////////////////////////////////////////// 1 4 this 3 541  
218 0 0 7 265 494 0 0 0 0 
219 0 0 4 244 489 0 0 218 ////////////////////////////////////////////////////////////////////
//     Function: AsyncTask::set_name
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 540  4 name 1 490  
220 0 0 6 243 490 0 0 0 1 4 this 3 541  
221 0 0 6 247 476 0 0 478 ////////////////////////////////////////////////////////////////////
//     Function: AsyncTask::get_elapsed_time
//       Access: Published
//  Description: Returns the amount of time that has elapsed since
//               the task was started, according to the task manager's
//               clock.
//
//               It is only valid to call this if the task's status is
//               not S_inactive.
//////////////////////////////////////////////////////////////////// 1 4 this 3 541  
222 0 0 6 249 476 0 0 674 ////////////////////////////////////////////////////////////////////
//     Function: AsyncTask::get_wake_time
//       Access: Published
//  Description: If this task has been added to an AsyncTaskManager
//               with a delay in effect, this returns the time at
//               which the task is expected to awaken.  It has no
//               meaning if the task has not yet been added to a
//               queue, or if there was no delay in effect at the time
//               the task was added.
//
//               If the task's status is not S_sleeping, this returns
//               0.0.
//////////////////////////////////////////////////////////////////// 1 4 this 3 541  
223 0 0 6 256 480 0 0 483 ////////////////////////////////////////////////////////////////////
//     Function: AsyncTask::get_elapsed_frames
//       Access: Published
//  Description: Returns the number of frames that have elapsed since
//               the task was started, according to the task manager's
//               clock.
//
//               It is only valid to call this if the task's status is
//               not S_inactive.
//////////////////////////////////////////////////////////////////// 1 4 this 3 541  
224 0 0 6 261 481 0 0 329 ////////////////////////////////////////////////////////////////////
//     Function: AsyncTask::get_task_id
//       Access: Public
//  Description: Returns a number guaranteed to be unique for each
//               different AsyncTask object in the universe.
//////////////////////////////////////////////////////////////////// 1 4 this 3 541  
225 0 0 4 263 489 0 0 0 2 4 this 3 540  5 value 1 477  
226 0 0 6 262 477 0 0 0 1 4 this 3 541  
88
457 9 AsyncTask 0 75777 9 AsyncTask 9 AsyncTask 0 0 0 0 0 0 33 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 0 0 1 0 458 0 0 0 2 459 460 434
////////////////////////////////////////////////////////////////////
//       Class : AsyncTask
// Description : This class represents a concrete task performed by an
//               AsyncManager.  Normally, you would subclass from this
//               class, and override do_task(), to define the
//               functionality you wish to have the task perform.
////////////////////////////////////////////////////////////////////

458 13 AsyncTaskBase 0 2049 13 AsyncTaskBase 13 AsyncTaskBase 0 0 0 0 0 0 0 0 0 0 0 0 346
////////////////////////////////////////////////////////////////////
//       Class : AsyncTaskBase
// Description : The abstract base class for AsyncTask.  This is
//               defined here only so we can store a pointer to the
//               current task on the Thread.
////////////////////////////////////////////////////////////////////

459 10 DoneStatus 0 794624 21 AsyncTask::DoneStatus 21 AsyncTask::DoneStatus 457 0 0 0 0 0 0 0 0 0 7 7 DS_done 18 AsyncTask::DS_done 25
// normal task completion
0 7 DS_cont 18 AsyncTask::DS_cont 28
// run task again next epoch
1 8 DS_again 19 AsyncTask::DS_again 41
// start the task over from the beginning
2 9 DS_pickup 20 AsyncTask::DS_pickup 52
// run task again this frame, if frame budget allows
3 7 DS_exit 18 AsyncTask::DS_exit 30
// stop the enclosing sequence
4 8 DS_pause 19 AsyncTask::DS_pause 46
// pause, then exit (useful within a sequence)
5 12 DS_interrupt 23 AsyncTask::DS_interrupt 49
// interrupt the task manager, but run task again
6 0 0

460 5 State 0 794624 16 AsyncTask::State 16 AsyncTask::State 457 0 0 0 0 0 0 0 0 0 6 10 S_inactive 21 AsyncTask::S_inactive 0
0 8 S_active 19 AsyncTask::S_active 0
1 11 S_servicing 22 AsyncTask::S_servicing 0
2 19 S_servicing_removed 30 AsyncTask::S_servicing_removed 51
// Still servicing, but wants removal from manager.
3 10 S_sleeping 21 AsyncTask::S_sleeping 0
4 15 S_active_nested 26 AsyncTask::S_active_nested 28
// active within a sequence.
5 0 0

461 19 AsyncTaskCollection 0 26625 19 AsyncTaskCollection 19 AsyncTaskCollection 0 0 0 1 260 262 0 17 261 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 1 552 0 0 0 0 425
////////////////////////////////////////////////////////////////////
//       Class : AsyncTaskCollection
// Description : A list of tasks, for instance as returned by some of
//               the AsyncTaskManager query functions.  This also
//               serves to define an AsyncTaskSequence.
//
//               TODO: None of this is thread-safe yet.
////////////////////////////////////////////////////////////////////

462 14 AsyncTaskChain 0 26625 14 AsyncTaskChain 14 AsyncTaskChain 0 0 0 0 283 0 27 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 0 0 2 3 463 279 280 3 464 281 282 0 0 1464
////////////////////////////////////////////////////////////////////
//       Class : AsyncTaskChain
// Description : The AsyncTaskChain is a subset of the
//               AsyncTaskManager.  Each chain maintains a separate
//               list of tasks, and will execute them with its own set
//               of threads.  Each chain may thereby operate
//               independently of the other chains.
//
//               The AsyncTaskChain will spawn a specified number of
//               threads (possibly 0) to serve the tasks.  If there
//               are no threads, you must call poll() from time to
//               time to serve the tasks in the main thread.  Normally
//               this is done by calling AsyncTaskManager::poll().
//
//               Each task will run exactly once each epoch.  Beyond
//               that, the tasks' sort and priority values control the
//               order in which they are run: tasks are run in
//               increasing order by sort value, and within the same
//               sort value, they are run roughly in decreasing order
//               by priority value, with some exceptions for
//               parallelism.  Tasks with different sort values are
//               never run in parallel together, but tasks with
//               different priority values might be (if there is more
//               than one thread).
////////////////////////////////////////////////////////////////////

463 19 TypedReferenceCount 0 2049 19 TypedReferenceCount 19 TypedReferenceCount 0 0 0 0 0 0 0 0 0 0 0 0 710
////////////////////////////////////////////////////////////////////
//       Class : TypedReferenceCount
// Description : A base class for things which need to inherit from
//               both TypedObject and from ReferenceCount.  It's
//               convenient to define this intermediate base class
//               instead of multiply inheriting from the two classes
//               each time they are needed, so that we can sensibly
//               pass around pointers to things which are both
//               TypedObjects and ReferenceCounters.
//               
//               See also TypedObject for detailed instructions.
////////////////////////////////////////////////////////////////////

464 7 Namable 0 2049 7 Namable 7 Namable 0 0 0 0 0 0 0 0 0 0 0 0 324
////////////////////////////////////////////////////////////////////
//       Class : Namable
// Description : A base class for all things which can have a name.
//               The name is either empty or nonempty, but it is never
//               NULL.
////////////////////////////////////////////////////////////////////

465 16 AsyncTaskManager 0 26625 16 AsyncTaskManager 16 AsyncTaskManager 0 0 0 1 315 316 0 27 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 1 553 0 2 3 463 311 312 3 464 313 314 0 0 1046
////////////////////////////////////////////////////////////////////
//       Class : AsyncTaskManager
// Description : A class to manage a loose queue of isolated tasks,
//               which can be performed either synchronously (in the
//               foreground thread) or asynchronously (by a background
//               thread).
//
//               The AsyncTaskManager is actually a collection of
//               AsyncTaskChains, each of which maintains a list of
//               tasks.  Each chain can be either foreground or
//               background (it may run only in the main thread, or it
//               may be serviced by one or more background threads).
//               See AsyncTaskChain for more information.
//
//               If you do not require background processing, it is
//               perfectly acceptable to create only one
//               AsyncTaskChain, which runs in the main thread.  This
//               is a common configuration.
////////////////////////////////////////////////////////////////////

466 14 AsyncTaskPause 0 141313 14 AsyncTaskPause 14 AsyncTaskPause 0 0 0 1 344 349 0 4 345 346 347 348 0 0 1 0 457 0 0 0 0 405
////////////////////////////////////////////////////////////////////
//       Class : AsyncTaskPause
// Description : A special kind of task that simple returns DS_pause,
//               to pause for a specified number of seconds and then
//               finish.  It's intended to be used within an
//               AsyncTaskSequence.
////////////////////////////////////////////////////////////////////

467 17 AsyncTaskSequence 0 26625 17 AsyncTaskSequence 17 AsyncTaskSequence 0 0 0 1 354 355 0 7 356 357 358 359 360 361 362 0 0 2 3 457 350 351 3 461 352 353 0 0 683
////////////////////////////////////////////////////////////////////
//       Class : AsyncTaskSequence
// Description : A special kind of task that serves as a list of tasks
//               internally.  Each task on the list is executed in
//               sequence, one per epoch.
//
//               This is similar to a Sequence interval, though it has
//               some slightly different abilities.  For instance,
//               although you can't start at any arbitrary point in
//               the sequence, you can construct a task sequence whose
//               duration changes during playback.
////////////////////////////////////////////////////////////////////

468 14 EventParameter 0 26625 14 EventParameter 14 EventParameter 0 0 0 1 363 365 0 14 364 366 367 368 369 370 371 372 373 374 375 376 377 378 0 0 0 0 0 652
////////////////////////////////////////////////////////////////////
//       Class : EventParameter
// Description : An optional parameter associated with an event.  Each
//               event may have zero or more of these.  Each parameter
//               stores a pointer to a TypedWritableReferenceCount
//               object, which of course could be pretty much
//               anything.  To store a simple value like a double or a
//               string, the EventParameter constructors transparently
//               use the ParamValue template class from paramValue.h.
////////////////////////////////////////////////////////////////////

469 5 Event 0 75777 5 Event 5 Event 0 0 0 1 379 0 0 14 380 381 382 383 384 385 386 387 388 389 390 391 392 393 1 554 0 1 0 463 0 0 0 0 645
////////////////////////////////////////////////////////////////////
//       Class : Event
// Description : A named event, possibly with parameters.  Anyone in
//               any thread may throw an event at any time; there will
//               be one process responsible for reading and dispacting
//               on the events (but not necessarily immediately).
//
//               This function use to inherit from Namable, but that
//               makes it too expensive to get its name the Python
//               code.  Now it just copies the Namable interface in.
////////////////////////////////////////////////////////////////////

470 12 EventHandler 0 141313 12 EventHandler 12 EventHandler 0 0 0 1 394 400 0 5 395 396 397 398 399 0 0 1 0 471 0 0 0 0 678
////////////////////////////////////////////////////////////////////
//       Class : EventHandler
// Description : A class to monitor events from the C++ side of
//               things.  It maintains a set of "hooks", function
//               pointers assigned to event names, and calls the
//               appropriate hooks when the matching event is
//               detected.
//
//               This class is not necessary when the hooks are
//               detected and processed entirely by the scripting
//               language, e.g. via Scheme hooks or the messenger
//               in Python.
////////////////////////////////////////////////////////////////////

471 11 TypedObject 0 2049 11 TypedObject 11 TypedObject 0 0 0 0 0 0 0 0 0 0 0 0 3561
////////////////////////////////////////////////////////////////////
//       Class : TypedObject
// Description : This is an abstract class that all classes which
//               use TypeHandle, and also provide virtual functions to
//               support polymorphism, should inherit from.  Each
//               derived class should define get_type(), which should
//               return the specific type of the derived class.
//               Inheriting from this automatically provides support
//               for is_of_type() and is_exact_type().
//
//               All classes that inherit directly or indirectly from
//               TypedObject should redefine get_type() and
//               force_init_type(), as shown below.  Some classes that
//               do not inherit from TypedObject may still declare
//               TypeHandles for themselves by defining methods called
//               get_class_type() and init_type().  Classes such as
//               these may serve as base classes, but the dynamic type
//               identification system will be limited.  Classes that
//               do not inherit from TypedObject need not define the
//               virtual functions get_type() and force_init_type()
//               (or any other virtual functions).
//
//               There is a specific layout for defining the
//               overrides from this class.  Keeping the definitions
//               formatted just like these examples will allow
//               someone in the future to use a sed (or similar)
//               script to make global changes, if necessary.  Avoid
//               rearranging the braces or the order of the functions
//               unless you're ready to change them in every file all
//               at once.
//
//               What follows are some examples that can be used in
//               new classes that you create.
//
//               @par In the class definition (.h file):
//               @code
//               public:
//                 static TypeHandle get_class_type() {
//                   return _type_handle;
//                 }
//                 static void init_type() {
//                   <<<BaseClassOne>>>::init_type();
//                   <<<BaseClassTwo>>>::init_type();
//                   <<<BaseClassN>>>::init_type();
//                   register_type(_type_handle, "<<<ThisClassStringName>>>",
//                                 <<<BaseClassOne>>>::get_class_type(),
//                                 <<<BaseClassTwo>>>::get_class_type(),
//                                 <<<BaseClassN>>>::get_class_type());
//                 }
//                 virtual TypeHandle get_type() const {
//                   return get_class_type();
//                 }
//                 virtual TypeHandle force_init_type() {init_type(); return get_class_type();}
//
//               private:
//                 static TypeHandle _type_handle;
//               @endcode
//
//               @par In the class .cxx file:
//               @code
//               TypeHandle <<<ThisClassStringName>>>::_type_handle;
//               @endcode
//
//               @par In the class config_<<<PackageName>>>.cxx file:
//               @code
//               ConfigureFn(config_<<<PackageName>>>) {
//                 <<<ClassOne>>>::init_type();
//                 <<<ClassTwo>>>::init_type();
//                 <<<ClassN>>>::init_type();
//               }
//               @endcode
////////////////////////////////////////////////////////////////////

472 10 EventQueue 0 26625 10 EventQueue 10 EventQueue 0 0 0 1 401 402 0 6 403 404 405 406 407 408 0 0 0 0 0 392
////////////////////////////////////////////////////////////////////
//       Class : EventQueue
// Description : A queue of pending events.  As events are thrown,
//               they are added to this queue; eventually, they will
//               be extracted out again by an EventHandler and
//               processed.
////////////////////////////////////////////////////////////////////

473 16 PointerEventList 0 141313 16 PointerEventList 16 PointerEventList 0 0 0 1 409 428 0 18 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 0 0 1 0 474 0 0 0 0 468
////////////////////////////////////////////////////////////////////
//       Class : PointerEventList
// Description : Records a set of pointer events that happened
//               recently.  This class is usually used only in the
//               data graph, to transmit the recent pointer presses,
//               but it may be used anywhere a list of PointerEvents
//               is desired.
////////////////////////////////////////////////////////////////////

474 14 ParamValueBase 0 2049 14 ParamValueBase 14 ParamValueBase 0 0 0 0 0 0 0 0 0 0 0 0 348
////////////////////////////////////////////////////////////////////
//       Class : ParamValueBase
// Description : A non-template base class of ParamValue (below),
//               which serves mainly to define the placeholder for the
//               virtual output function.
////////////////////////////////////////////////////////////////////

475 10 PythonTask 0 75777 10 PythonTask 10 PythonTask 0 0 0 1 429 0 7 545 546 547 548 549 550 551 19 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 456 0 0 1 0 457 0 0 0 0 286
////////////////////////////////////////////////////////////////////
//       Class : PythonTask
// Description : This class exists to allow association of a Python
//               function with the AsyncTaskManager.
////////////////////////////////////////////////////////////////////

476 6 double 0 8194 6 double 6 double 0 3 0 0 0 0 0 0 0 0 0 0 0

477 10 PyObject * 0 8576 10 PyObject * 10 PyObject * 0 0 478 0 0 0 0 0 0 0 0 0 0

478 8 PyObject 0 2105344 8 PyObject 8 PyObject 0 0 479 0 0 0 0 0 0 0 0 0 0

479 7 _object 0 1024 7 _object 7 _object 0 0 0 0 0 0 0 0 0 0 0 0 0

480 3 int 0 8194 3 int 3 int 0 1 0 0 0 0 0 0 0 0 0 0 0

481 7 Integer 0 2367488 21 AtomicAdjust::Integer 21 AtomicAdjust::Integer 482 0 483 0 0 0 0 0 0 0 0 0 0

482 12 AtomicAdjust 0 1024 12 AtomicAdjust 12 AtomicAdjust 0 0 0 0 0 0 0 0 0 0 0 0 0

483 8 long int 0 8210 8 long int 8 long int 0 1 0 0 0 0 0 0 0 0 0 0 0

484 17 AsyncTask const * 0 8576 17 AsyncTask const * 17 AsyncTask const * 0 0 485 0 0 0 0 0 0 0 0 0 0

485 15 AsyncTask const 0 8832 15 AsyncTask const 15 AsyncTask const 0 0 457 0 0 0 0 0 0 0 0 0 0

486 4 bool 0 8194 4 bool 4 bool 0 4 0 0 0 0 0 0 0 0 0 0 0

487 18 AsyncTaskManager * 0 8576 18 AsyncTaskManager * 18 AsyncTaskManager * 0 0 465 0 0 0 0 0 0 0 0 0 0

488 11 AsyncTask * 0 8576 11 AsyncTask * 11 AsyncTask * 0 0 457 0 0 0 0 0 0 0 0 0 0

489 4 void 0 8194 4 void 4 void 0 6 0 0 0 0 0 0 0 0 0 0 0

490 13 atomic string 0 2 13 atomic string 13 atomic string 0 7 0 0 0 0 0 0 0 0 0 0 0

491 9 ostream * 0 8576 9 ostream * 9 ostream * 0 0 492 0 0 0 0 0 0 0 0 0 0

492 7 ostream 0 2048 7 ostream 7 ostream 0 0 0 0 0 0 0 0 0 0 0 0 0

493 10 TypeHandle 0 2048 10 TypeHandle 10 TypeHandle 0 0 0 0 0 0 0 0 0 0 0 0 1098
////////////////////////////////////////////////////////////////////
//       Class : TypeHandle
// Description : TypeHandle is the identifier used to differentiate
//               C++ class types.  Any C++ classes that inherit from
//               some base class, and must be differentiated at run
//               time, should store a static TypeHandle object that
//               can be queried through a static member function
//               named get_class_type().  Most of the time, it is also
//               desirable to inherit from TypedObject, which provides
//               some virtual functions to return the TypeHandle for a
//               particular instance.
//
//               At its essence, a TypeHandle is simply a unique
//               identifier that is assigned by the TypeRegistry.  The
//               TypeRegistry stores a tree of TypeHandles, so that
//               ancestry of a particular type may be queried, and the
//               type name may be retrieved for run-time display.
////////////////////////////////////////////////////////////////////

494 12 TypeHandle * 0 8576 12 TypeHandle * 12 TypeHandle * 0 0 493 0 0 0 0 0 0 0 0 0 0

495 21 AsyncTaskCollection * 0 8576 21 AsyncTaskCollection * 21 AsyncTaskCollection * 0 0 461 0 0 0 0 0 0 0 0 0 0

496 27 AsyncTaskCollection const * 0 8576 27 AsyncTaskCollection const * 27 AsyncTaskCollection const * 0 0 497 0 0 0 0 0 0 0 0 0 0

497 25 AsyncTaskCollection const 0 8832 25 AsyncTaskCollection const 25 AsyncTaskCollection const 0 0 461 0 0 0 0 0 0 0 0 0 0

498 16 AsyncTaskChain * 0 8576 16 AsyncTaskChain * 16 AsyncTaskChain * 0 0 462 0 0 0 0 0 0 0 0 0 0

499 22 AsyncTaskChain const * 0 8576 22 AsyncTaskChain const * 22 AsyncTaskChain const * 0 0 500 0 0 0 0 0 0 0 0 0 0

500 20 AsyncTaskChain const 0 8832 20 AsyncTaskChain const 20 AsyncTaskChain const 0 0 462 0 0 0 0 0 0 0 0 0 0

501 14 ThreadPriority 0 532480 14 ThreadPriority 14 ThreadPriority 0 0 0 0 0 0 0 0 0 0 4 6 TP_low 6 TP_low 0
0 9 TP_normal 9 TP_normal 0
1 7 TP_high 7 TP_high 0
2 9 TP_urgent 9 TP_urgent 0
3 0 243
////////////////////////////////////////////////////////////////////
// An enumerated type used by Thread to specify a suggested relative
// priority for a particular thread.
////////////////////////////////////////////////////////////////////

502 21 TypedReferenceCount * 0 8576 21 TypedReferenceCount * 21 TypedReferenceCount * 0 0 463 0 0 0 0 0 0 0 0 0 0

503 9 Namable * 0 8576 9 Namable * 9 Namable * 0 0 464 0 0 0 0 0 0 0 0 0 0

504 13 ClockObject * 0 8576 13 ClockObject * 13 ClockObject * 0 0 505 0 0 0 0 0 0 0 0 0 0

505 11 ClockObject 0 2048 11 ClockObject 11 ClockObject 0 0 0 0 0 0 0 0 0 0 0 0 1457
////////////////////////////////////////////////////////////////////
//       Class : ClockObject
// Description : A ClockObject keeps track of elapsed real time and
//               discrete time.  In normal mode, get_frame_time()
//               returns the time as of the last time tick() was
//               called.  This is the "discrete" time, and is usually
//               used to get the time as of, for instance, the
//               beginning of the current frame.
//
//               In other modes, as set by set_mode() or the
//               clock-mode config variable, get_frame_time() may
//               return other values to simulate different timing
//               effects, for instance to perform non-real-time
//               animation.  See set_mode().
//
//               In all modes, get_real_time() always returns the
//               elapsed real time in seconds since the ClockObject
//               was constructed, or since it was last reset.
//
//               You can create your own ClockObject whenever you want
//               to have your own local timer.  There is also a
//               default, global ClockObject intended to represent
//               global time for the application; this is normally set
//               up to tick every frame so that its get_frame_time()
//               will return the time for the current frame.
////////////////////////////////////////////////////////////////////

506 24 AsyncTaskManager const * 0 8576 24 AsyncTaskManager const * 24 AsyncTaskManager const * 0 0 507 0 0 0 0 0 0 0 0 0 0

507 22 AsyncTaskManager const 0 8832 22 AsyncTaskManager const 22 AsyncTaskManager const 0 0 465 0 0 0 0 0 0 0 0 0 0

508 19 GlobPattern const * 0 8576 19 GlobPattern const * 19 GlobPattern const * 0 0 509 0 0 0 0 0 0 0 0 0 0

509 17 GlobPattern const 0 8832 17 GlobPattern const 17 GlobPattern const 0 0 510 0 0 0 0 0 0 0 0 0 0

510 11 GlobPattern 0 2048 11 GlobPattern 11 GlobPattern 0 0 0 0 0 0 0 0 0 0 0 0 859
////////////////////////////////////////////////////////////////////
//       Class : GlobPattern
// Description : This class can be used to test for string matches
//               against standard Unix-shell filename globbing
//               conventions.  It serves as a portable standin for the
//               Posix fnmatch() call.
//
//               A GlobPattern is given a pattern string, which can
//               contain operators like *, ?, and [].  Then it can be
//               tested against any number of candidate strings; for
//               each candidate, it will indicate whether the string
//               matches the pattern or not.  It can be used, for
//               example, to scan a directory for all files matching a
//               particular pattern.
////////////////////////////////////////////////////////////////////

511 16 AsyncTaskPause * 0 8576 16 AsyncTaskPause * 16 AsyncTaskPause * 0 0 466 0 0 0 0 0 0 0 0 0 0

512 6 size_t 0 2105344 6 size_t 6 size_t 0 0 513 0 0 0 0 0 0 0 0 0 0

513 17 unsigned long int 0 8214 17 unsigned long int 17 unsigned long int 0 1 0 0 0 0 0 0 0 0 0 0 0

514 19 AsyncTaskSequence * 0 8576 19 AsyncTaskSequence * 19 AsyncTaskSequence * 0 0 467 0 0 0 0 0 0 0 0 0 0

515 25 AsyncTaskSequence const * 0 8576 25 AsyncTaskSequence const * 25 AsyncTaskSequence const * 0 0 516 0 0 0 0 0 0 0 0 0 0

516 23 AsyncTaskSequence const 0 8832 23 AsyncTaskSequence const 23 AsyncTaskSequence const 0 0 467 0 0 0 0 0 0 0 0 0 0

517 16 EventParameter * 0 8576 16 EventParameter * 16 EventParameter * 0 0 468 0 0 0 0 0 0 0 0 0 0

518 22 EventParameter const * 0 8576 22 EventParameter const * 22 EventParameter const * 0 0 519 0 0 0 0 0 0 0 0 0 0

519 20 EventParameter const 0 8832 20 EventParameter const 20 EventParameter const 0 0 468 0 0 0 0 0 0 0 0 0 0

520 27 TypedReferenceCount const * 0 8576 27 TypedReferenceCount const * 27 TypedReferenceCount const * 0 0 521 0 0 0 0 0 0 0 0 0 0

521 25 TypedReferenceCount const 0 8832 25 TypedReferenceCount const 25 TypedReferenceCount const 0 0 463 0 0 0 0 0 0 0 0 0 0

522 35 TypedWritableReferenceCount const * 0 8576 35 TypedWritableReferenceCount const * 35 TypedWritableReferenceCount const * 0 0 523 0 0 0 0 0 0 0 0 0 0

523 33 TypedWritableReferenceCount const 0 8832 33 TypedWritableReferenceCount const 33 TypedWritableReferenceCount const 0 0 524 0 0 0 0 0 0 0 0 0 0

524 27 TypedWritableReferenceCount 0 2048 27 TypedWritableReferenceCount 27 TypedWritableReferenceCount 0 0 0 0 0 0 0 0 0 0 0 0 722
////////////////////////////////////////////////////////////////////
//       Class : TypedWritableReferenceCount
// Description : A base class for things which need to inherit from
//               both TypedWritable and from ReferenceCount.  It's
//               convenient to define this intermediate base class
//               instead of multiply inheriting from the two classes
//               each time they are needed, so that we can sensibly
//               pass around pointers to things which are both
//               TypedWritables and ReferenceCounters.
//               
//               See also TypedObject for detailed instructions.
////////////////////////////////////////////////////////////////////

525 29 TypedWritableReferenceCount * 0 8576 29 TypedWritableReferenceCount * 29 TypedWritableReferenceCount * 0 0 524 0 0 0 0 0 0 0 0 0 0

526 13 Event const * 0 8576 13 Event const * 13 Event const * 0 0 527 0 0 0 0 0 0 0 0 0 0

527 11 Event const 0 8832 11 Event const 11 Event const 0 0 469 0 0 0 0 0 0 0 0 0 0

528 7 Event * 0 8576 7 Event * 7 Event * 0 0 469 0 0 0 0 0 0 0 0 0 0

529 15 EventReceiver * 0 8576 15 EventReceiver * 15 EventReceiver * 0 0 530 0 0 0 0 0 0 0 0 0 0

530 13 EventReceiver 0 2048 13 EventReceiver 13 EventReceiver 0 0 0 0 0 0 0 0 0 0 0 0 0

531 12 EventQueue * 0 8576 12 EventQueue * 12 EventQueue * 0 0 472 0 0 0 0 0 0 0 0 0 0

532 14 EventHandler * 0 8576 14 EventHandler * 14 EventHandler * 0 0 470 0 0 0 0 0 0 0 0 0 0

533 20 EventHandler const * 0 8576 20 EventHandler const * 20 EventHandler const * 0 0 534 0 0 0 0 0 0 0 0 0 0

534 18 EventHandler const 0 8832 18 EventHandler const 18 EventHandler const 0 0 470 0 0 0 0 0 0 0 0 0 0

535 18 EventQueue const * 0 8576 18 EventQueue const * 18 EventQueue const * 0 0 536 0 0 0 0 0 0 0 0 0 0

536 16 EventQueue const 0 8832 16 EventQueue const 16 EventQueue const 0 0 472 0 0 0 0 0 0 0 0 0 0

537 18 PointerEventList * 0 8576 18 PointerEventList * 18 PointerEventList * 0 0 473 0 0 0 0 0 0 0 0 0 0

538 24 PointerEventList const * 0 8576 24 PointerEventList const * 24 PointerEventList const * 0 0 539 0 0 0 0 0 0 0 0 0 0

539 22 PointerEventList const 0 8832 22 PointerEventList const 22 PointerEventList const 0 0 473 0 0 0 0 0 0 0 0 0 0

540 12 PythonTask * 0 8576 12 PythonTask * 12 PythonTask * 0 0 475 0 0 0 0 0 0 0 0 0 0

541 18 PythonTask const * 0 8576 18 PythonTask const * 18 PythonTask const * 0 0 542 0 0 0 0 0 0 0 0 0 0

542 16 PythonTask const 0 8832 16 PythonTask const 16 PythonTask const 0 0 475 0 0 0 0 0 0 0 0 0 0

543 9 visitproc 0 2105344 9 visitproc 9 visitproc 0 0 544 0 0 0 0 0 0 0 0 0 0

544 6 void * 0 8576 6 void * 6 void * 0 0 489 0 0 0 0 0 0 0 0 0 0

0
7
545 4 name 0 6 0 448 449 16 PythonTask::name 25
// The name of this task.

546 4 time 0 2 476 450 0 16 PythonTask::time 112
// The amount of seconds that have elapsed since the task was
// started, according to the task manager's clock.

547 9 wake_time 0 2 476 451 0 21 PythonTask::wake_time 351
// If this task has been added to an AsyncTaskManager with a delay
// in effect, this contains the time at which the task is expected
// to awaken.  It has no meaning of the task has not yet been added
// to a queue, or if there was no delay in effect at the time the
// task was added.
//
// If the task's status is not S_sleeping, this contains 0.0.

548 10 delay_time 0 6 477 447 446 22 PythonTask::delay_time 67
// The delay value that has been set on this task, if any, or None.

549 5 frame 0 2 480 452 0 17 PythonTask::frame 111
// The number of frames that have elapsed since the task was
// started, according to the task manager's clock.

550 2 id 0 2 481 453 0 14 PythonTask::id 99
// This is a number guaranteed to be unique for each different
// AsyncTask object in the universe.

551 8 __dict__ 0 6 477 454 455 20 PythonTask::__dict__ 105
// This is a special variable to hold the instance dictionary in
// which custom variables may be stored.

3
552 0 0 38 9 get_tasks 13 get_num_tasks 8 get_task 
553 0 0 93 15 get_task_chains 19 get_num_task_chains 14 get_task_chain 
554 0 0 165 14 get_parameters 18 get_num_parameters 13 get_parameter 
