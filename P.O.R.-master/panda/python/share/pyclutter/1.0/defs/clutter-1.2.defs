(include "clutter-1.2-types.defs")

;; From clutter-actor.h

(define-virtual queue_relayout
  (of-object "ClutterActor")
  (return-type "none")
)

(define-method set_request_mode
  (of-object "ClutterActor")
  (c-name "clutter_actor_set_request_mode")
  (docstring
  "Sets the geometry request mode of self. The mode determines the order\n"
  "for invoking clutter.Actor.get_preferred_width() and\n"
  "clutter.Actor.get_preferred_height()\n"
  )
  (return-type "none")
  (parameters
    '("ClutterRequestMode" "mode")
  )
)

(define-method get_request_mode
  (of-object "ClutterActor")
  (c-name "clutter_actor_get_request_mode")
  (docstring
  "Retrieves the geometry request mode of self\n"
  )
  (return-type "ClutterRequestMode")
)

(define-method has_pointer
  (of-object "ClutterActor")
  (c-name "clutter_actor_has_pointer")
  (docstring
  "Checks whether an actor contains the the pointer of a\n"
  "clutter.InputDevice FALSE otherwise\n"
  )
  (return-type "gboolean")
)

(define-method set_text_direction
  (of-object "ClutterActor")
  (c-name "clutter_actor_set_text_direction")
  (docstring
  "Sets the clutter.TextDirection for an actor The passed text direction\n"
  "must not be CLUTTER_TEXT_DIRECTION_DEFAULT If self implements\n"
  "clutter.Container then this function will recurse inside all the\n"
  "children of self (including the internal ones). Composite actors not\n"
  "implementing clutter.Container, or actors requiring special handling\n"
  "when the text direction changes, should connect to the GObject::notify\n"
  "signal for the clutter.Actor:text-direction property\n"
  )
  (return-type "none")
  (parameters
    '("ClutterTextDirection" "text_dir")
  )
)

(define-method get_text_direction
  (of-object "ClutterActor")
  (c-name "clutter_actor_get_text_direction")
  (docstring
  "Retrieves the value set using clutter.Actor.set_text_direction() If no\n"
  "text direction has been previously set, the default text direction, as\n"
  "returned by clutter_get_default_text_direction(), will be returned\n"
  "instead\n"
  )
  (return-type "ClutterTextDirection")
)

(define-method push_internal
  (of-object "ClutterActor")
  (c-name "clutter_actor_push_internal")
  (docstring
  "Should be used by actors implementing the clutter.Container and with\n"
  "internal children added through clutter.Actor.set_parent(), for\n"
  "instance: |[ static void my_actor_init (MyActor *self) { self->priv =\n"
  "SELF_ACTOR_GET_PRIVATE (self); clutter.Actor.push_internal\n"
  "(CLUTTER_ACTOR (self)); /&ast; calling clutter.Actor.set_parent() now\n"
  "will result in &ast; the internal flag being set on a child of MyActor\n"
  "&ast;/ self->priv->background_tex = clutter_texture_new ();\n"
  "clutter.Actor.set_parent (self->priv->background_tex, CLUTTER_ACTOR\n"
  "(self)); self->priv->label = clutter_text_new ();\n"
  "clutter.Actor.set_parent (self->priv->label, CLUTTER_ACTOR (self));\n"
  "clutter.Actor.pop_internal (CLUTTER_ACTOR (self)); /&ast; calling\n"
  "clutter.Actor.set_parent() now will not result in &ast; the internal\n"
  "flag being set on a child of MyActor &ast;/ } ]| This function will be\n"
  "used by clutter. to toggle an internal child flag whenever\n"
  "clutter.Actor.set_parent() is called; internal children are handled\n"
  "differently by clutter., specifically when destroying their parent.\n"
  "Call clutter.Actor.pop_internal() when you finished adding internal\n"
  "children. Nested calls to clutter.Actor.push_internal() are allowed,\n"
  "but each one must by followed by a clutter.Actor.pop_internal() call.\n"
  )
  (return-type "none")
)

(define-method pop_internal
  (of-object "ClutterActor")
  (c-name "clutter_actor_pop_internal")
  (docstring
  "Disables the effects of clutter.Actor.pop_internal()\n"
  )
  (return-type "none")
)



;; From clutter-alpha.h



;; From clutter-animatable.h



;; From clutter-animation.h

(define-method update
  (of-object "ClutterAnimation")
  (c-name "clutter_animation_update")
  (docstring
  "Updates the final value of the interval for property_name\n"
  )
  (return-type "ClutterAnimation*")
  (parameters
    '("const-gchar*" "property_name")
    '("const-GValue*" "final")
  )
)



;; From clutter-animator.h

(define-function animator_get_type
  (c-name "clutter_animator_get_type")
  (return-type "GType")
)

(define-function animator_new
  (c-name "clutter_animator_new")
  (is-constructor-of "ClutterAnimator")
  (return-type "ClutterAnimator*")
)

(define-method set_key
  (of-object "ClutterAnimator")
  (c-name "clutter_animator_set_key")
  (docstring
  "value applies Sets a single key in the clutter.Animator for the\n"
  "property_name of\n"
  )
  (return-type "ClutterAnimator*")
  (parameters
    '("GObject*" "object")
    '("const-gchar*" "property_name")
    '("guint" "mode")
    '("gdouble" "progress")
    '("const-GValue*" "value")
  )
)

(define-method set
  (of-object "ClutterAnimator")
  (c-name "clutter_animator_set")
  (return-type "none")
  (parameters
    '("gpointer" "first_object")
    '("const-gchar*" "first_property_name")
    '("guint" "first_mode")
    '("gdouble" "first_progress")
  )
  (varargs #t)
)

(define-method get_keys
  (of-object "ClutterAnimator")
  (c-name "clutter_animator_get_keys")
  (docstring
  "or NULL for all properties progresses Returns a list of pointers to\n"
  "opaque structures with accessor functions that describe the keys added\n"
  "to an animator. list of clutter.AnimatorKey<!-- -->s; the contents of\n"
  "the list are owned by the clutter.Animator, but you should free the\n"
  "returned list when done, using g_list_free()\n"
  )
  (return-type "GList*")
  (parameters
    '("GObject*" "object")
    '("const-gchar*" "property_name")
    '("gdouble" "progress")
  )
)

(define-method remove_key
  (of-object "ClutterAnimator")
  (c-name "clutter_animator_remove_key")
  (docstring
  "or NULL for all for all Removes all keys matching the conditions\n"
  "specificed in the arguments.\n"
  )
  (return-type "none")
  (parameters
    '("GObject*" "object")
    '("const-gchar*" "property_name")
    '("gdouble" "progress")
  )
)

(define-method start
  (of-object "ClutterAnimator")
  (c-name "clutter_animator_start")
  (docstring
  "Start the clutter.Animator, this is a thin wrapper that rewinds and\n"
  "starts the animators current timeline.\n"
  )
  (return-type "ClutterTimeline*")
)

(define-method compute_value
  (of-object "ClutterAnimator")
  (c-name "clutter_animator_compute_value")
  (docstring
  "Compute the value for a managed property at a given progress. If the\n"
  "property is an ease-in property, the current value of the property on\n"
  "the object will be used as the starting point for computation. an\n"
  "error occurs or the progress is before any of the keys) FALSE is\n"
  "returned and the GValue is left untouched\n"
  )
  (return-type "gboolean")
  (parameters
    '("GObject*" "object")
    '("const-gchar*" "property_name")
    '("gdouble" "progress")
    '("GValue*" "value")
  )
)

(define-method get_timeline
  (of-object "ClutterAnimator")
  (c-name "clutter_animator_get_timeline")
  (docstring
  "Get the timeline hooked up for driving the clutter.Animator\n"
  )
  (return-type "ClutterTimeline*")
)

(define-method set_timeline
  (of-object "ClutterAnimator")
  (c-name "clutter_animator_set_timeline")
  (docstring
  "Sets an external timeline that will be used for driving the animation\n"
  )
  (return-type "none")
  (parameters
    '("ClutterTimeline*" "timeline")
  )
)

(define-method get_duration
  (of-object "ClutterAnimator")
  (c-name "clutter_animator_get_duration")
  (docstring
  "Retrieves the current duration of an animator\n"
  )
  (return-type "guint")
)

(define-method set_duration
  (of-object "ClutterAnimator")
  (c-name "clutter_animator_set_duration")
  (docstring
  "Runs the timeline of the clutter.Animator with a duration in msecs as\n"
  "specified.\n"
  )
  (return-type "none")
  (parameters
    '("guint" "duration")
  )
)

(define-method property_get_ease_in
  (of-object "ClutterAnimator")
  (c-name "clutter_animator_property_get_ease_in")
  (docstring
  "Checks if a property value is to be eased into the animation.\n"
  )
  (return-type "gboolean")
  (parameters
    '("GObject*" "object")
    '("const-gchar*" "property_name")
  )
)

(define-method property_set_ease_in
  (of-object "ClutterAnimator")
  (c-name "clutter_animator_property_set_ease_in")
  (docstring
  "Sets whether a property value is to be eased into the animation.\n"
  )
  (return-type "none")
  (parameters
    '("GObject*" "object")
    '("const-gchar*" "property_name")
    '("gboolean" "ease_in")
  )
)

(define-method property_get_interpolation
  (of-object "ClutterAnimator")
  (c-name "clutter_animator_property_get_interpolation")
  (docstring
  "Get the interpolation used by animator for a property on a particular\n"
  "object.\n"
  )
  (return-type "ClutterInterpolation")
  (parameters
    '("GObject*" "object")
    '("const-gchar*" "property_name")
  )
)

(define-method property_set_interpolation
  (of-object "ClutterAnimator")
  (c-name "clutter_animator_property_set_interpolation")
  (docstring
  "Set the interpolation method to use, CLUTTER_INTERPOLATION_LINEAR\n"
  "causes the values to linearly change between the values, and\n"
  "CLUTTER_INTERPOLATION_CUBIC causes the values to smoothly change\n"
  "between the values.\n"
  )
  (return-type "none")
  (parameters
    '("GObject*" "object")
    '("const-gchar*" "property_name")
    '("ClutterInterpolation" "interpolation")
  )
)

(define-function animator_key_get_type
  (c-name "clutter_animator_key_get_type")
  (return-type "GType")
)

(define-method get_object
  (of-object "ClutterAnimatorKey")
  (c-name "clutter_animator_key_get_object")
  (return-type "GObject*")
)

(define-method get_property_name
  (of-object "ClutterAnimatorKey")
  (c-name "clutter_animator_key_get_property_name")
  (return-type "const-gchar*")
)

(define-method get_property_type
  (of-object "ClutterAnimatorKey")
  (c-name "clutter_animator_key_get_property_type")
  (return-type "GType")
)

(define-method get_mode
  (of-object "ClutterAnimatorKey")
  (c-name "clutter_animator_key_get_mode")
  (return-type "gulong")
)

(define-method get_progress
  (of-object "ClutterAnimatorKey")
  (c-name "clutter_animator_key_get_progress")
  (return-type "gdouble")
)

(define-method get_value
  (of-object "ClutterAnimatorKey")
  (c-name "clutter_animator_key_get_value")
  (return-type "gboolean")
  (parameters
    '("GValue*" "value")
  )
)



;; From clutter-backend.h



;; From clutter-behaviour-depth.h



;; From clutter-behaviour-ellipse.h



;; From clutter-behaviour.h



;; From clutter-behaviour-opacity.h



;; From clutter-behaviour-path.h



;; From clutter-behaviour-rotate.h



;; From clutter-behaviour-scale.h



;; From clutter-binding-pool.h



;; From clutter-bin-layout.h

(define-function bin_layout_get_type
  (c-name "clutter_bin_layout_get_type")
  (return-type "GType")
)

(define-function bin_layout_new
  (c-name "clutter_bin_layout_new")
  (is-constructor-of "ClutterBinLayout")
  (return-type "ClutterLayoutManager*")
  (properties
    '("x_align")
    '("y_align")
  )
)

(define-method set_alignment
  (of-object "ClutterBinLayout")
  (c-name "clutter_bin_layout_set_alignment")
  (docstring
  "inside container inside container Sets the horizontal and vertical\n"
  "alignment policies to be applied to a child of self If child is NULL\n"
  "then the x_align and y_align values will be set as the default\n"
  "alignment policies\n"
  )
  (return-type "none")
  (parameters
    '("ClutterActor*" "child")
    '("ClutterBinAlignment" "x_align")
    '("ClutterBinAlignment" "y_align")
  )
)

(define-method get_alignment
  (of-object "ClutterBinLayout")
  (c-name "clutter_bin_layout_get_alignment")
  (docstring
  "alignment policy alignment policy Retrieves the horizontal and\n"
  "vertical alignment policies for a child of self If child is NULL the\n"
  "default alignment policies will be returned instead\n"
  )
  (return-type "none")
  (parameters
    '("ClutterActor*" "child")
    '("ClutterBinAlignment*" "x_align")
    '("ClutterBinAlignment*" "y_align")
  )
)

(define-method add
  (of-object "ClutterBinLayout")
  (c-name "clutter_bin_layout_add")
  (docstring
  "Adds a clutter.Actor to the container using self and sets the\n"
  "alignment policies for it This function is equivalent to\n"
  "clutter.Container.add_actor() and\n"
  "clutter_layout_manager_child_set_property() but it does not require a\n"
  "pointer to the clutter.Container associated to the clutter.BinLayout\n"
  )
  (return-type "none")
  (parameters
    '("ClutterActor*" "child")
    '("ClutterBinAlignment" "x_align")
    '("ClutterBinAlignment" "y_align")
  )
)



;; From clutter-box.h

(define-function box_get_type
  (c-name "clutter_box_get_type")
  (return-type "GType")
)

(define-function box_new
  (c-name "clutter_box_new")
  (is-constructor-of "ClutterBox")
  (return-type "ClutterActor*")
  (properties
    '("layout-manager")
  )
)

(define-method set_layout_manager
  (of-object "ClutterBox")
  (c-name "clutter_box_set_layout_manager")
  (docstring
  "Sets the clutter.LayoutManager for box A clutter.LayoutManager is a\n"
  "delegate object that controls the layout of the children of box\n"
  )
  (return-type "none")
  (parameters
    '("ClutterLayoutManager*" "manager")
  )
)

(define-method get_layout_manager
  (of-object "ClutterBox")
  (c-name "clutter_box_get_layout_manager")
  (docstring
  "Retrieves the clutter.LayoutManager instance used by box\n"
  )
  (return-type "ClutterLayoutManager*")
)

(define-method set_color
  (of-object "ClutterBox")
  (c-name "clutter_box_set_color")
  (docstring
  "Sets (or unsets) the background color for box\n"
  )
  (return-type "none")
  (parameters
    '("const-ClutterColor*" "color")
  )
)

(define-method get_color
  (of-object "ClutterBox")
  (c-name "clutter_box_get_color")
  (docstring
  "Retrieves the background color of box If the clutter.Box:color-set\n"
  "property is set to FALSE the returned clutter.Color is undefined\n"
  )
  (return-type "none")
  (parameters
    '("ClutterColor*" "color")
  )
)

(define-method pack
  (of-object "ClutterBox")
  (c-name "clutter_box_pack")
  (docstring
  "Adds actor to box and sets layout properties at the same time, if the\n"
  "clutter.LayoutManager used by box has them This function is a wrapper\n"
  "around clutter.Container.add_actor() and\n"
  "clutter_layout_manager_child_set() Language bindings should use the\n"
  "vector-based clutter_box_addv() variant instead\n"
  )
  (return-type "none")
  (parameters
    '("ClutterActor*" "actor")
    '("const-gchar*" "first_property")
  )
  (varargs #t)
)

(define-method packv
  (of-object "ClutterBox")
  (c-name "clutter_box_packv")
  (docstring
  "containing the property names to set values to set Vector-based\n"
  "variant of clutter.Box.pack(), intended for language bindings to use\n"
  )
  (return-type "none")
  (parameters
    '("ClutterActor*" "actor")
    '("guint" "n_properties")
    '("const-gchar*-const[]" "properties")
    '("const-GValue*" "values")
  )
)

(define-method pack_after
  (of-object "ClutterBox")
  (c-name "clutter_box_pack_after")
  (docstring
  "Adds actor to box, placing it after sibling, and sets layout\n"
  "properties at the same time, if the clutter.LayoutManager used by If\n"
  "sibling is NULL then actor is placed at the end of the list of\n"
  "children, to be allocated and painted after every other child This\n"
  "function is a wrapper around clutter.Container.add_actor(),\n"
  "clutter.Container.raise_child() and clutter_layout_manager_child_set()\n"
  )
  (return-type "none")
  (parameters
    '("ClutterActor*" "actor")
    '("ClutterActor*" "sibling")
    '("const-gchar*" "first_property")
  )
  (varargs #t)
)

(define-method pack_before
  (of-object "ClutterBox")
  (c-name "clutter_box_pack_before")
  (docstring
  "Adds actor to box, placing it before sibling, and sets layout\n"
  "properties at the same time, if the clutter.LayoutManager used by If\n"
  "sibling is NULL then actor is placed at the beginning of the list of\n"
  "children, to be allocated and painted below every other child This\n"
  "function is a wrapper around clutter.Container.add_actor(),\n"
  "clutter.Container.lower_child() and clutter_layout_manager_child_set()\n"
  )
  (return-type "none")
  (parameters
    '("ClutterActor*" "actor")
    '("ClutterActor*" "sibling")
    '("const-gchar*" "first_property")
  )
  (varargs #t)
)

(define-method pack_at
  (of-object "ClutterBox")
  (c-name "clutter_box_pack_at")
  (docstring
  "Adds actor to box, placing it at position, and sets layout properties\n"
  "at the same time, if the clutter.LayoutManager used by If position is\n"
  "a negative number, or is larger than the number of children of box,\n"
  "the new child is added at the end of the list of children\n"
  )
  (return-type "none")
  (parameters
    '("ClutterActor*" "actor")
    '("gint" "position")
    '("const-gchar*" "first_property")
  )
  (varargs #t)
)



;; From clutter-box-layout.h

(define-function box_layout_get_type
  (c-name "clutter_box_layout_get_type")
  (return-type "GType")
)

(define-function box_layout_new
  (c-name "clutter_box_layout_new")
  (is-constructor-of "ClutterBoxLayout")
  (return-type "ClutterLayoutManager*")
)

(define-method set_spacing
  (of-object "ClutterBoxLayout")
  (c-name "clutter_box_layout_set_spacing")
  (docstring
  "Sets the spacing between children of layout\n"
  )
  (return-type "none")
  (parameters
    '("guint" "spacing")
  )
)

(define-method get_spacing
  (of-object "ClutterBoxLayout")
  (c-name "clutter_box_layout_get_spacing")
  (docstring
  "Retrieves the spacing set using clutter.Box.layout_set_spacing()\n"
  )
  (return-type "guint")
)

(define-method set_vertical
  (of-object "ClutterBoxLayout")
  (c-name "clutter_box_layout_set_vertical")
  (docstring
  "Sets whether layout should arrange its children vertically alongside\n"
  "the Y axis, instead of horizontally alongside the X axis\n"
  )
  (return-type "none")
  (parameters
    '("gboolean" "vertical")
  )
)

(define-method get_vertical
  (of-object "ClutterBoxLayout")
  (c-name "clutter_box_layout_get_vertical")
  (docstring
  "Retrieves the orientation of the layout as set using the\n"
  "clutter.Box.layout_set_vertical() function vertically, and FALSE\n"
  "otherwise\n"
  )
  (return-type "gboolean")
)

(define-method set_pack_start
  (of-object "ClutterBoxLayout")
  (c-name "clutter_box_layout_set_pack_start")
  (docstring
  "beginning of the layout Sets whether children of layout should be\n"
  "layed out by appending them or by prepending them\n"
  )
  (return-type "none")
  (parameters
    '("gboolean" "pack_start")
  )
)

(define-method get_pack_start
  (of-object "ClutterBoxLayout")
  (c-name "clutter_box_layout_get_pack_start")
  (docstring
  "Retrieves the value set using clutter.Box.layout_set_pack_start() at\n"
  "the beginning of the layout, and FALSE otherwise\n"
  )
  (return-type "gboolean")
)

(define-method pack
  (of-object "ClutterBoxLayout")
  (c-name "clutter_box_layout_pack")
  (docstring
  "Packs actor inside the clutter.Container associated to layout and sets\n"
  "the layout properties\n"
  )
  (return-type "none")
  (parameters
    '("ClutterActor*" "actor")
    '("gboolean" "expand")
    '("gboolean" "x_fill")
    '("gboolean" "y_fill")
    '("ClutterBoxAlignment" "x_align")
    '("ClutterBoxAlignment" "y_align")
  )
)

(define-method set_alignment
  (of-object "ClutterBoxLayout")
  (c-name "clutter_box_layout_set_alignment")
  (docstring
  "Sets the horizontal and vertical alignment policies for actor inside\n"
  "layout\n"
  )
  (return-type "none")
  (parameters
    '("ClutterActor*" "actor")
    '("ClutterBoxAlignment" "x_align")
    '("ClutterBoxAlignment" "y_align")
  )
)

(define-method get_alignment
  (of-object "ClutterBoxLayout")
  (c-name "clutter_box_layout_get_alignment")
  (docstring
  "Retrieves the horizontal and vertical alignment policies for actor as\n"
  "set using clutter.Box.layout_pack() or\n"
  "clutter.Box.layout_set_alignment()\n"
  )
  (return-type "none")
  (parameters
    '("ClutterActor*" "actor")
    '("ClutterBoxAlignment*" "x_align")
    '("ClutterBoxAlignment*" "y_align")
  )
)

(define-method set_fill
  (of-object "ClutterBoxLayout")
  (c-name "clutter_box_layout_set_fill")
  (docstring
  "Sets the horizontal and vertical fill policies for actor inside layout\n"
  )
  (return-type "none")
  (parameters
    '("ClutterActor*" "actor")
    '("gboolean" "x_fill")
    '("gboolean" "y_fill")
  )
)

(define-method get_fill
  (of-object "ClutterBoxLayout")
  (c-name "clutter_box_layout_get_fill")
  (docstring
  "Retrieves the horizontal and vertical fill policies for actor as set\n"
  "using clutter.Box.layout_pack() or clutter.Box.layout_set_fill()\n"
  )
  (return-type "none")
  (parameters
    '("ClutterActor*" "actor")
    '("gboolean*" "x_fill")
    '("gboolean*" "y_fill")
  )
)

(define-method set_expand
  (of-object "ClutterBoxLayout")
  (c-name "clutter_box_layout_set_expand")
  (docstring
  "Sets whether actor should expand inside layout\n"
  )
  (return-type "none")
  (parameters
    '("ClutterActor*" "actor")
    '("gboolean" "expand")
  )
)

(define-method get_expand
  (of-object "ClutterBoxLayout")
  (c-name "clutter_box_layout_get_expand")
  (docstring
  "Retrieves whether actor should expand inside layout\n"
  )
  (return-type "gboolean")
  (parameters
    '("ClutterActor*" "actor")
  )
)

(define-method set_use_animations
  (of-object "ClutterBoxLayout")
  (c-name "clutter_box_layout_set_use_animations")
  (docstring
  "Sets whether layout should animate changes in the layout properties\n"
  "The duration of the animations is controlled by\n"
  "clutter.Box.layout_set_easing_duration(); the easing mode to be used\n"
  "by the animations is controlled by\n"
  "clutter.Box.layout_set_easing_mode()\n"
  )
  (return-type "none")
  (parameters
    '("gboolean" "animate")
  )
)

(define-method get_use_animations
  (of-object "ClutterBoxLayout")
  (c-name "clutter_box_layout_get_use_animations")
  (docstring
  "Retrieves whether layout should animate changes in the layout\n"
  "properties Since clutter.Box.layout_set_use_animations()\n"
  )
  (return-type "gboolean")
)

(define-method set_easing_mode
  (of-object "ClutterBoxLayout")
  (c-name "clutter_box_layout_set_easing_mode")
  (docstring
  "from clutter.Alpha.register_func() Sets the easing mode to be used by\n"
  "layout when animating changes in layout properties Use\n"
  "clutter_box_layout_set_use_animations() to enable and disable the\n"
  "animations\n"
  )
  (return-type "none")
  (parameters
    '("gulong" "mode")
  )
)

(define-method get_easing_mode
  (of-object "ClutterBoxLayout")
  (c-name "clutter_box_layout_get_easing_mode")
  (docstring
  "Retrieves the easing mode set using\n"
  "clutter.Box.layout_set_easing_mode()\n"
  )
  (return-type "gulong")
)

(define-method set_easing_duration
  (of-object "ClutterBoxLayout")
  (c-name "clutter_box_layout_set_easing_duration")
  (docstring
  "Sets the duration of the animations used by layout when animating\n"
  "changes in the layout properties Use\n"
  "clutter.Box.layout_set_use_animations() to enable and disable the\n"
  "animations\n"
  )
  (return-type "none")
  (parameters
    '("guint" "msecs")
  )
)

(define-method get_easing_duration
  (of-object "ClutterBoxLayout")
  (c-name "clutter_box_layout_get_easing_duration")
  (docstring
  "Retrieves the duration set using\n"
  "clutter.Box.layout_set_easing_duration()\n"
  )
  (return-type "guint")
)



;; From clutter-cairo-texture.h



;; From clutter-child-meta.h



;; From clutter-clone.h



;; From clutter-color.h



;; From clutter-container.h

(define-method create_child_meta
  (of-object "ClutterContainer")
  (c-name "clutter_container_create_child_meta")
  (return-type "none")
  (parameters
    '("ClutterActor*" "actor")
  )
)

(define-method destroy_child_meta
  (of-object "ClutterContainer")
  (c-name "clutter_container_destroy_child_meta")
  (return-type "none")
  (parameters
    '("ClutterActor*" "actor")
  )
)



;; From clutter-deprecated.h



;; From clutter-device-manager.h

(define-function device_manager_get_type
  (c-name "clutter_device_manager_get_type")
  (return-type "GType")
)

(define-function device_manager_get_default
  (c-name "clutter_device_manager_get_default")
  (return-type "ClutterDeviceManager*")
)

(define-method list_devices
  (of-object "ClutterDeviceManager")
  (c-name "clutter_device_manager_list_devices")
  (docstring
  "Lists all currently registered input devices a newly allocated list of\n"
  "clutter.InputDevice objects. Use g_slist_free() to deallocate it when\n"
  "done\n"
  )
  (return-type "GSList*")
)

(define-method peek_devices
  (of-object "ClutterDeviceManager")
  (c-name "clutter_device_manager_peek_devices")
  (docstring
  "Lists all currently registered input devices a pointer to the internal\n"
  "list of clutter.InputDevice objects. The returned list is owned by the\n"
  "clutter.DeviceManager and should never be modified or freed\n"
  )
  (return-type "const-GSList*")
)

(define-method get_device
  (of-object "ClutterDeviceManager")
  (c-name "clutter_device_manager_get_device")
  (docstring
  "Retrieves the clutter.InputDevice with the given device_id returned\n"
  "device is owned by the clutter.DeviceManager and should never be\n"
  "modified or freed\n"
  )
  (return-type "ClutterInputDevice*")
  (parameters
    '("gint" "device_id")
  )
)

(define-method get_core_device
  (of-object "ClutterDeviceManager")
  (c-name "clutter_device_manager_get_core_device")
  (docstring
  "Retrieves the core clutter.InputDevice of type device_type Core\n"
  "devices are devices created automatically by the default clutter.\n"
  "backend returned device is owned by the clutter.DeviceManager and\n"
  "should not be modified or freed\n"
  )
  (return-type "ClutterInputDevice*")
  (parameters
    '("ClutterInputDeviceType" "device_type")
  )
)



;; From clutter-enum-types.h

(define-function redraw_flags_get_type
  (c-name "clutter_redraw_flags_get_type")
  (return-type "GType")
)

(define-function interpolation_get_type
  (c-name "clutter_interpolation_get_type")
  (return-type "GType")
)

(define-function bin_alignment_get_type
  (c-name "clutter_bin_alignment_get_type")
  (return-type "GType")
)

(define-function box_alignment_get_type
  (c-name "clutter_box_alignment_get_type")
  (return-type "GType")
)

(define-function flow_orientation_get_type
  (c-name "clutter_flow_orientation_get_type")
  (return-type "GType")
)

(define-function text_direction_get_type
  (c-name "clutter_text_direction_get_type")
  (return-type "GType")
)



;; From clutter-event.h

(define-function get_current_event
  (c-name "clutter_get_current_event")
  (docstring
  "If an event is currently being processed, return that event. This\n"
  "function is intended to be used to access event state that might not\n"
  "be exposed by higher-level widgets.  For example, to get the key\n"
  "modifier state from a Button 'clicked' event.\n"
  )
  (return-type "const-ClutterEvent*")
)



;; From clutter-feature.h



;; From clutter-fixed.h



;; From clutter-fixed-layout.h

(define-function fixed_layout_get_type
  (c-name "clutter_fixed_layout_get_type")
  (return-type "GType")
)

(define-function fixed_layout_new
  (c-name "clutter_fixed_layout_new")
  (is-constructor-of "ClutterFixedLayout")
  (return-type "ClutterLayoutManager*")
)



;; From clutter-flow-layout.h

(define-function flow_layout_get_type
  (c-name "clutter_flow_layout_get_type")
  (return-type "GType")
)

(define-function flow_layout_new
  (c-name "clutter_flow_layout_new")
  (is-constructor-of "ClutterFlowLayout")
  (return-type "ClutterLayoutManager*")
  (properties
    '("orientation")
  )
)

(define-method set_orientation
  (of-object "ClutterFlowLayout")
  (c-name "clutter_flow_layout_set_orientation")
  (docstring
  "Sets the orientation of the flow layout The orientation controls the\n"
  "direction used to allocate orientation also controls the direction of\n"
  "the overflowing\n"
  )
  (return-type "none")
  (parameters
    '("ClutterFlowOrientation" "orientation")
  )
)

(define-method get_orientation
  (of-object "ClutterFlowLayout")
  (c-name "clutter_flow_layout_get_orientation")
  (docstring
  "Retrieves the orientation of the layout\n"
  )
  (return-type "ClutterFlowOrientation")
)

(define-method set_homogeneous
  (of-object "ClutterFlowLayout")
  (c-name "clutter_flow_layout_set_homogeneous")
  (docstring
  "Sets whether the layout should allocate the same space for each child\n"
  )
  (return-type "none")
  (parameters
    '("gboolean" "homogeneous")
  )
)

(define-method get_homogeneous
  (of-object "ClutterFlowLayout")
  (c-name "clutter_flow_layout_get_homogeneous")
  (docstring
  "Retrieves whether the layout is homogeneous\n"
  )
  (return-type "gboolean")
)

(define-method set_column_spacing
  (of-object "ClutterFlowLayout")
  (c-name "clutter_flow_layout_set_column_spacing")
  (docstring
  "Sets the space between columns, in pixels\n"
  )
  (return-type "none")
  (parameters
    '("gfloat" "spacing")
  )
)

(define-method get_column_spacing
  (of-object "ClutterFlowLayout")
  (c-name "clutter_flow_layout_get_column_spacing")
  (docstring
  "Retrieves the spacing between columns in pixels\n"
  )
  (return-type "gfloat")
)

(define-method set_row_spacing
  (of-object "ClutterFlowLayout")
  (c-name "clutter_flow_layout_set_row_spacing")
  (docstring
  "Sets the spacing between rows, in pixels\n"
  )
  (return-type "none")
  (parameters
    '("gfloat" "spacing")
  )
)

(define-method get_row_spacing
  (of-object "ClutterFlowLayout")
  (c-name "clutter_flow_layout_get_row_spacing")
  (docstring
  "Retrieves the spacing between rows in pixels\n"
  )
  (return-type "gfloat")
)

(define-method set_column_width
  (of-object "ClutterFlowLayout")
  (c-name "clutter_flow_layout_set_column_width")
  (docstring
  "Sets the minimum and maximum widths that a column can have\n"
  )
  (return-type "none")
  (parameters
    '("gfloat" "min_width")
    '("gfloat" "max_width")
  )
)

(define-method get_column_width
  (of-object "ClutterFlowLayout")
  (c-name "clutter_flow_layout_get_column_width")
  (docstring
  "Retrieves the minimum and maximum column widths\n"
  )
  (return-type "none")
  (parameters
    '("gfloat*" "min_width")
    '("gfloat*" "max_width")
  )
)

(define-method set_row_height
  (of-object "ClutterFlowLayout")
  (c-name "clutter_flow_layout_set_row_height")
  (docstring
  "Sets the minimum and maximum heights that a row can have\n"
  )
  (return-type "none")
  (parameters
    '("gfloat" "min_height")
    '("gfloat" "max_height")
  )
)

(define-method get_row_height
  (of-object "ClutterFlowLayout")
  (c-name "clutter_flow_layout_get_row_height")
  (docstring
  "Retrieves the minimum and maximum row heights\n"
  )
  (return-type "none")
  (parameters
    '("gfloat*" "min_height")
    '("gfloat*" "max_height")
  )
)



;; From clutter-frame-source.h



;; From clutter-group.h



;; From clutter.h



;; From clutter-input-device.h

(define-function input_device_get_type
  (c-name "clutter_input_device_get_type")
  (return-type "GType")
)

(define-method get_device_coords
  (of-object "ClutterInputDevice")
  (c-name "clutter_input_device_get_device_coords")
  (return-type "none")
  (parameters
    '("gint*" "x")
    '("gint*" "y")
  )
)

(define-method get_pointer_actor
  (of-object "ClutterInputDevice")
  (c-name "clutter_input_device_get_pointer_actor")
  (return-type "ClutterActor*")
)

(define-method get_pointer_stage
  (of-object "ClutterInputDevice")
  (c-name "clutter_input_device_get_pointer_stage")
  (return-type "ClutterStage*")
)

(define-method get_device_name
  (of-object "ClutterInputDevice")
  (c-name "clutter_input_device_get_device_name")
  (return-type "const-gchar*")
)

(define-method update_from_event
  (of-object "ClutterInputDevice")
  (c-name "clutter_input_device_update_from_event")
  (return-type "none")
  (parameters
    '("ClutterEvent*" "event")
    '("gboolean" "update_stage")
  )
)



;; From clutter-interval.h



;; From clutter-json.h



;; From clutter-keysyms.h



;; From clutter-layout-manager.h

(define-function layout_manager_get_type
  (c-name "clutter_layout_manager_get_type")
  (return-type "GType")
)

(define-method get_preferred_width
  (of-object "ClutterLayoutManager")
  (c-name "clutter_layout_manager_get_preferred_width")
  (docstring
  "of the layout, or NULL of the layout, or NULL Computes the minimum and\n"
  "natural widths of the container according to manager. See also\n"
  "clutter.Actor.get_preferred_width()\n"
  )
  (return-type "none")
  (parameters
    '("ClutterContainer*" "container")
    '("gfloat" "for_height")
    '("gfloat*" "min_width_p")
    '("gfloat*" "nat_width_p")
  )
)

(define-virtual get_preferred_width
  (of-object "ClutterLayoutManager")
  (return-type "none")
  (parameters
    '("ClutterContainer*" "container")
    '("gfloat" "for_height")
    '("gfloat*" "min_width_p")
    '("gfloat*" "nat_width_p")
  )
)

(define-method get_preferred_height
  (of-object "ClutterLayoutManager")
  (c-name "clutter_layout_manager_get_preferred_height")
  (docstring
  "of the layout, or NULL of the layout, or NULL Computes the minimum and\n"
  "natural heights of the container according to manager. See also\n"
  "clutter.Actor.get_preferred_height()\n"
  )
  (return-type "none")
  (parameters
    '("ClutterContainer*" "container")
    '("gfloat" "for_width")
    '("gfloat*" "min_height_p")
    '("gfloat*" "nat_height_p")
  )
)

(define-virtual get_preferred_height
  (of-object "ClutterLayoutManager")
  (return-type "none")
  (parameters
    '("ClutterContainer*" "container")
    '("gfloat" "for_width")
    '("gfloat*" "min_height_p")
    '("gfloat*" "nat_height_p")
  )
)

(define-method allocate
  (of-object "ClutterLayoutManager")
  (c-name "clutter_layout_manager_allocate")
  (docstring
  "of container Allocates the children of container given an area See\n"
  "also clutter.Actor.allocate()\n"
  )
  (return-type "none")
  (parameters
    '("ClutterContainer*" "container")
    '("const-ClutterActorBox*" "allocation")
    '("ClutterAllocationFlags" "flags")
  )
)

(define-virtual allocate
  (of-object "ClutterLayoutManager")
  (return-type "none")
  (parameters
    '("ClutterContainer*" "container")
    '("const-ClutterActorBox*" "allocation")
    '("ClutterAllocationFlags" "flags")
  )
)

(define-method set_container
  (of-object "ClutterLayoutManager")
  (c-name "clutter_layout_manager_set_container")
  (docstring
  "If the clutter.LayoutManager sub-class allows it, allow adding a weak\n"
  "reference of the container using manager from within the layout\n"
  "manager The layout manager should not increase the reference count of\n"
  "the container\n"
  )
  (return-type "none")
  (parameters
    '("ClutterContainer*" "container")
  )
)

(define-virtual set_container
  (of-object "ClutterLayoutManager")
  (return-type "none")
  (parameters
    '("ClutterContainer*" "container")
  )
)

(define-method layout_changed
  (of-object "ClutterLayoutManager")
  (c-name "clutter_layout_manager_layout_changed")
  (docstring
  "Emits the clutter.LayoutManager::layout-changed signal on manager This\n"
  "function should only be called by implementations of the\n"
  "clutter.LayoutManager class\n"
  )
  (return-type "none")
)

(define-method find_child_property
  (of-object "ClutterLayoutManager")
  (c-name "clutter_layout_manager_find_child_property")
  (docstring
  "Retrieves the GParamSpec for the layout property name inside the\n"
  "clutter.LayoutMeta sub-class used by manager or NULL if no property\n"
  "with that name exists. The returned GParamSpec is owned by the layout\n"
  "manager and should not be modified or freed\n"
  )
  (return-type "GParamSpec*")
  (parameters
    '("const-gchar*" "name")
  )
)

(define-method list_child_properties
  (of-object "ClutterLayoutManager")
  (c-name "clutter_layout_manager_list_child_properties")
  (docstring
  "GParamSpec<!-- -->s Retrieves all the GParamSpec<!-- -->s for the\n"
  "layout properties stored inside the clutter.LayoutMeta sub-class used\n"
  "by manager array of GParamSpec<!-- -->s. Use g_free() to free the\n"
  "resources allocated for the array\n"
  )
  (return-type "GParamSpec**")
  (parameters
    '("guint*" "n_pspecs")
  )
)

(define-method get_child_meta
  (of-object "ClutterLayoutManager")
  (c-name "clutter_layout_manager_get_child_meta")
  (docstring
  "Retrieves the clutter.LayoutMeta that the layout manager associated to\n"
  "the actor child of container, eventually by creating one if the\n"
  "clutter.LayoutManager supports layout properties does not have layout\n"
  "properties\n"
  )
  (return-type "ClutterLayoutMeta*")
  (parameters
    '("ClutterContainer*" "container")
    '("ClutterActor*" "actor")
  )
)

(define-method child_set
  (of-object "ClutterLayoutManager")
  (c-name "clutter_layout_manager_child_set")
  (docstring
  "Sets a list of properties and their values on the clutter.LayoutMeta\n"
  "associated by manager to a child of container Languages bindings\n"
  "should use clutter.Layout.manager_child_set_property() instead\n"
  )
  (return-type "none")
  (parameters
    '("ClutterContainer*" "container")
    '("ClutterActor*" "actor")
    '("const-gchar*" "first_property")
  )
  (varargs #t)
)

(define-method child_get
  (of-object "ClutterLayoutManager")
  (c-name "clutter_layout_manager_child_get")
  (docstring
  "Retrieves the values for a list of properties out of the\n"
  "clutter.LayoutMeta created by manager and attached to the child of a\n"
  "container\n"
  )
  (return-type "none")
  (parameters
    '("ClutterContainer*" "container")
    '("ClutterActor*" "actor")
    '("const-gchar*" "first_property")
  )
  (varargs #t)
)

(define-method child_set_property
  (of-object "ClutterLayoutManager")
  (c-name "clutter_layout_manager_child_set_property")
  (docstring
  "Sets a property on the clutter.LayoutMeta created by manager and\n"
  "attached to a child of container\n"
  )
  (return-type "none")
  (parameters
    '("ClutterContainer*" "container")
    '("ClutterActor*" "actor")
    '("const-gchar*" "property_name")
    '("const-GValue*" "value")
  )
)

(define-method child_get_property
  (of-object "ClutterLayoutManager")
  (c-name "clutter_layout_manager_child_get_property")
  (docstring
  "Gets a property on the clutter.LayoutMeta created by manager and\n"
  "attached to a child of container The GValue must already be\n"
  "initialized to the type of the property and has to be unset with\n"
  "g_value_unset() after extracting the real value out of it\n"
  )
  (return-type "none")
  (parameters
    '("ClutterContainer*" "container")
    '("ClutterActor*" "actor")
    '("const-gchar*" "property_name")
    '("GValue*" "value")
  )
)

(define-method begin_animation
  (of-object "ClutterLayoutManager")
  (c-name "clutter_layout_manager_begin_animation")
  (docstring
  "Begins an animation of duration milliseconds, using the provided\n"
  "easing mode The easing mode can be specified either as a\n"
  "clutter.AnimationMode or as a logical id returned by\n"
  "clutter.Alpha.register_func() The result of this function depends on\n"
  "the manager implementation layout manager; the returned instance is\n"
  "owned by the layout manager and should not be unreferenced\n"
  )
  (return-type "ClutterAlpha*")
  (parameters
    '("guint" "duration")
    '("gulong" "mode")
  )
)

(define-virtual begin_animation
  (of-object "ClutterLayoutManager")
  (return-type "ClutterAlpha*")
  (parameters
    '("guint" "duration")
    '("gulong" "mode")
  )
)

(define-method end_animation
  (of-object "ClutterLayoutManager")
  (c-name "clutter_layout_manager_end_animation")
  (docstring
  "Ends an animation started by clutter.Layout.manager_begin_animation()\n"
  "The result of this call depends on the manager implementation\n"
  )
  (return-type "none")
)

(define-virtual end_animation
  (of-object "ClutterLayoutManager")
  (return-type "none")
)

(define-method get_animation_progress
  (of-object "ClutterLayoutManager")
  (c-name "clutter_layout_manager_get_animation_progress")
  (docstring
  "Retrieves the progress of the animation, if one has been started by\n"
  "clutter.Layout.manager_begin_animation() The returned value has the\n"
  "same semantics of the clutter.Alpha:alpha value\n"
  )
  (return-type "gdouble")
)

(define-virtual get_animation_progress
  (of-object "ClutterLayoutManager")
  (return-type "gdouble")
)

(define-virtual get_child_meta_type
  (of-object "ClutterLayoutManager")
  (return-type "GType")
)

(define-virtual create_child_meta
  (of-object "ClutterLayoutManager")
  (return-type "ClutterLayoutMeta*")
  (parameters
    '("ClutterContainer*" "container")
    '("ClutterActor*" "actor")
  )
)



;; From clutter-layout-meta.h

(define-function layout_meta_get_type
  (c-name "clutter_layout_meta_get_type")
  (return-type "GType")
)

(define-method get_manager
  (of-object "ClutterLayoutMeta")
  (c-name "clutter_layout_meta_get_manager")
  (docstring
  "Retrieves the actor wrapped by data\n"
  )
  (return-type "ClutterLayoutManager*")
)



;; From clutter-list-model.h



;; From clutter-main.h

(define-function get_default_text_direction
  (c-name "clutter_get_default_text_direction")
  (docstring
  "Retrieves the default direction for the text. The text direction is\n"
  "determined by the locale and/or by the CLUTTER_TEXT_DIRECTION\n"
  "environment variable The default text direction can be overridden on a\n"
  "per-actor basis by using clutter.Actor.set_text_direction()\n"
  )
  (return-type "ClutterTextDirection")
)



;; From clutter-media.h

(define-method set_subtitle_uri
  (of-object "ClutterMedia")
  (c-name "clutter_media_set_subtitle_uri")
  (return-type "none")
  (parameters
    '("const-gchar*" "uri")
  )
)

(define-method get_subtitle_uri
  (of-object "ClutterMedia")
  (c-name "clutter_media_get_subtitle_uri")
  (return-type "gchar*")
)

(define-method set_subtitle_font_name
  (of-object "ClutterMedia")
  (c-name "clutter_media_set_subtitle_font_name")
  (return-type "none")
  (parameters
    '("const-char*" "font_name")
  )
)

(define-method get_subtitle_font_name
  (of-object "ClutterMedia")
  (c-name "clutter_media_get_subtitle_font_name")
  (return-type "gchar*")
)



;; From clutter-model.h



;; From clutter-path.h



;; From clutter-rectangle.h



;; From clutter-score.h



;; From clutter-scriptable.h



;; From clutter-script.h



;; From clutter-shader.h



;; From clutter-shader-types.h



;; From clutter-stage.h

(define-method set_use_alpha
  (of-object "ClutterStage")
  (c-name "clutter_stage_set_use_alpha")
  (docstring
  "alpha channel of the stage color Sets whether the stage should honour\n"
  "the clutter.Actor:opacity and the alpha channel of the\n"
  "clutter.Stage:color\n"
  )
  (return-type "none")
  (parameters
    '("gboolean" "use_alpha")
  )
)

(define-method get_use_alpha
  (of-object "ClutterStage")
  (c-name "clutter_stage_get_use_alpha")
  (docstring
  "Retrieves the value set using clutter.Stage.set_use_alpha() alpha\n"
  "channel of the stage color\n"
  )
  (return-type "gboolean")
)

(define-method set_minimum_size
  (of-object "ClutterStage")
  (c-name "clutter_stage_set_minimum_size")
  (docstring
  "Sets the minimum size for a stage window, if the default backend uses\n"
  "clutter.Stage inside a window This is a convenience function, and it\n"
  "is equivalent to setting the clutter.Actor:min-width and clutter.Actor\n"
  ":min-height on stage If the current size of stage is smaller than the\n"
  "minimum size, the This function has no effect if stage is fullscreen\n"
  )
  (return-type "none")
  (parameters
    '("guint" "width")
    '("guint" "height")
  )
)

(define-method get_minimum_size
  (of-object "ClutterStage")
  (c-name "clutter_stage_get_minimum_size")
  (docstring
  "or NULL or NULL Retrieves the minimum size for a stage window as set\n"
  "using clutter.Stage.set_minimum_size(). The returned size may not\n"
  "correspond to the actual minimum size and it is specific to the\n"
  "clutter.Stage implementation inside the clutter. backend\n"
  )
  (return-type "none")
  (parameters
    '("guint*" "width")
    '("guint*" "height")
  )
)



;; From clutter-stage-manager.h



;; From clutter-stage-window.h

(define-function stage_window_get_type
  (c-name "clutter_stage_window_get_type")
  (return-type "GType")
)



;; From clutter-text.h

(define-method set_font_description
  (of-object "ClutterText")
  (c-name "clutter_text_set_font_description")
  (docstring
  "Sets font_desc as the font description for a clutter.Text The\n"
  "PangoFontDescription is copied by the clutter.Text actor so you can\n"
  "safely call pango_font_description_free() on it after calling this\n"
  "function.\n"
  )
  (return-type "none")
  (parameters
    '("PangoFontDescription*" "font_desc")
  )
)

(define-method get_font_description
  (of-object "ClutterText")
  (c-name "clutter_text_get_font_description")
  (docstring
  "Retrieves the PangoFontDescription used by self by the clutter.Text\n"
  "actor and it should not be modified or freed\n"
  )
  (return-type "PangoFontDescription*")
)



;; From clutter-texture.h



;; From clutter-timeline.h



;; From clutter-timeout-pool.h



;; From clutter-types.h

(define-method interpolate
  (of-object "ClutterActorBox")
  (c-name "clutter_actor_box_interpolate")
  (return-type "none")
  (parameters
    '("const-ClutterActorBox*" "final")
    '("gdouble" "progress")
    '("ClutterActorBox*" "result")
  )
)

(define-method clamp_to_pixel
  (of-object "ClutterActorBox")
  (c-name "clutter_actor_box_clamp_to_pixel")
  (return-type "none")
)



;; From clutter-units.h

(define-method from_cm
  (of-object "ClutterUnits")
  (c-name "clutter_units_from_cm")
  (return-type "none")
  (parameters
    '("gfloat" "cm")
  )
)



;; From clutter-util.h



;; From clutter-version.h

(define-function check_version
  (c-name "clutter_check_version")
  (docstring
  "Run-time version check, to check the version the clutter. library that\n"
  "an application is currently linked against This is the run-time\n"
  "equivalent of the compile-time CLUTTER_CHECK_VERSION pre-processor\n"
  "macro greater than (major, minor, micro), and FALSE otherwise\n"
  )
  (return-type "gboolean")
  (parameters
    '("guint" "major")
    '("guint" "minor")
    '("guint" "micro")
  )
)
