1436948731
2 3
10 libpandaai 4 s1eG 10 panda3d.ai 
51
50 12 ~AIBehaviors 0 4 101 25 AIBehaviors::~AIBehaviors 0 0 0
32
AIBehaviors::~AIBehaviors(void);

51 4 seek 0 4 101 17 AIBehaviors::seek 0 2 1 2 0
128
void AIBehaviors::seek(NodePath target_object, float seek_wt = 1.0);
void AIBehaviors::seek(LVecBase3 pos, float seek_wt = 1.0);

52 4 flee 0 4 101 17 AIBehaviors::flee 0 2 3 4 0
248
void AIBehaviors::flee(NodePath target_object, double panic_distance = 10.0, double relax_distance = 10.0, float flee_wt = 1.0);
void AIBehaviors::flee(LVecBase3 pos, double panic_distance = 10.0, double relax_distance = 10.0, float flee_wt = 1.0);

53 6 pursue 0 4 101 19 AIBehaviors::pursue 0 1 5 0
72
void AIBehaviors::pursue(NodePath target_object, float pursue_wt = 1.0);

54 5 evade 0 4 101 18 AIBehaviors::evade 0 1 6 0
130
void AIBehaviors::evade(NodePath target_object, double panic_distance = 10.0, double relax_distance = 10.0, float evade_wt = 1.0);

55 7 arrival 0 4 101 20 AIBehaviors::arrival 0 1 7 0
50
void AIBehaviors::arrival(double distance = 10.0);

56 5 flock 0 4 101 18 AIBehaviors::flock 0 1 8 0
40
void AIBehaviors::flock(float flock_wt);

57 6 wander 0 4 101 19 AIBehaviors::wander 0 1 9 0
112
void AIBehaviors::wander(double wander_radius = 5.0, int flag = 0, double aoe = 0.0, float wander_weight = 1.0);

58 18 obstacle_avoidance 0 4 101 31 AIBehaviors::obstacle_avoidance 0 1 10 0
64
void AIBehaviors::obstacle_avoidance(float feeler_length = 1.0);

59 11 path_follow 0 4 101 24 AIBehaviors::path_follow 0 1 11 0
47
void AIBehaviors::path_follow(float follow_wt);

60 11 add_to_path 0 4 101 24 AIBehaviors::add_to_path 0 1 12 0
45
void AIBehaviors::add_to_path(LVecBase3 pos);

61 12 start_follow 0 4 101 25 AIBehaviors::start_follow 0 1 13 0
55
void AIBehaviors::start_follow(string type = "normal");

62 14 init_path_find 0 4 101 27 AIBehaviors::init_path_find 0 1 14 40
// should have different function names.
63
void AIBehaviors::init_path_find(char const *navmesh_filename);

63 12 path_find_to 0 4 101 25 AIBehaviors::path_find_to 0 2 15 16 0
143
void AIBehaviors::path_find_to(LVecBase3 pos, string type = "normal");
void AIBehaviors::path_find_to(NodePath target, string type = "normal");

64 19 add_static_obstacle 0 4 101 32 AIBehaviors::add_static_obstacle 0 1 17 0
57
void AIBehaviors::add_static_obstacle(NodePath obstacle);

65 20 add_dynamic_obstacle 0 4 101 33 AIBehaviors::add_dynamic_obstacle 0 1 18 0
58
void AIBehaviors::add_dynamic_obstacle(NodePath obstacle);

66 9 remove_ai 0 4 101 22 AIBehaviors::remove_ai 0 1 19 21
//add for path follow
44
void AIBehaviors::remove_ai(string ai_type);

67 8 pause_ai 0 4 101 21 AIBehaviors::pause_ai 0 1 20 21
//add for path follow
43
void AIBehaviors::pause_ai(string ai_type);

68 9 resume_ai 0 4 101 22 AIBehaviors::resume_ai 0 1 21 0
44
void AIBehaviors::resume_ai(string ai_type);

69 15 behavior_status 0 4 101 28 AIBehaviors::behavior_status 0 1 22 0
52
string AIBehaviors::behavior_status(string ai_type);

70 8 get_mass 0 4 102 21 AICharacter::get_mass 0 1 24 0
35
double AICharacter::get_mass(void);

71 8 set_mass 0 4 102 21 AICharacter::set_mass 0 1 25 0
37
void AICharacter::set_mass(double m);

72 12 get_velocity 0 4 102 25 AICharacter::get_velocity 0 1 26 0
42
LVecBase3 AICharacter::get_velocity(void);

73 13 get_max_force 0 4 102 26 AICharacter::get_max_force 0 1 27 0
40
double AICharacter::get_max_force(void);

74 13 set_max_force 0 4 102 26 AICharacter::set_max_force 0 1 28 0
50
void AICharacter::set_max_force(double max_force);

75 13 get_node_path 0 4 102 26 AICharacter::get_node_path 0 1 29 0
42
NodePath AICharacter::get_node_path(void);

76 13 set_node_path 0 4 102 26 AICharacter::set_node_path 0 1 30 0
45
void AICharacter::set_node_path(NodePath np);

77 16 get_ai_behaviors 0 4 102 29 AICharacter::get_ai_behaviors 0 1 31 0
49
AIBehaviors *AICharacter::get_ai_behaviors(void);

78 12 set_pf_guide 0 4 102 25 AICharacter::set_pf_guide 0 1 32 74
// This function is used to enable or disable the guides for path finding.
46
void AICharacter::set_pf_guide(bool pf_guide);

79 11 AICharacter 0 4 102 24 AICharacter::AICharacter 0 1 23 0
113
AICharacter::AICharacter(string model_name, NodePath model_np, double mass, double movt_force, double max_force);

80 12 ~AICharacter 0 4 102 25 AICharacter::~AICharacter 0 0 0
32
AICharacter::~AICharacter(void);

81 6 AINode 0 4 103 14 AINode::AINode 0 1 33 0
81
AINode::AINode(int grid_x, int grid_y, LVecBase3 pos, float w, float l, float h);

82 7 ~AINode 0 4 103 15 AINode::~AINode 0 0 0
22
AINode::~AINode(void);

83 8 contains 0 4 103 16 AINode::contains 0 1 34 297
////////////////////////////////////////////////////////////////////
//     Function: contains
//  Description: This is a handy function which returns true if the
//               passed position is within the node's dimensions.
////////////////////////////////////////////////////////////////////
40
bool AINode::contains(float x, float y);

84 5 Flock 0 4 104 12 Flock::Flock 0 1 35 0
170
Flock::Flock(unsigned int flock_id, double vcone_angle, double vcone_radius, unsigned int separation_wt = 2, unsigned int cohesion_wt = 4, unsigned int alignment_wt = 1);

85 6 ~Flock 0 4 104 13 Flock::~Flock 0 0 0
20
Flock::~Flock(void);

86 11 add_ai_char 0 4 104 18 Flock::add_ai_char 0 1 36 54
// Function to add the ai characters to _ai_char_list.
46
void Flock::add_ai_char(AICharacter *ai_char);

87 6 get_id 0 4 104 13 Flock::get_id 0 1 37 50
// Function to access the private member flock_id.
33
unsigned int Flock::get_id(void);

88 7 AIWorld 0 4 105 16 AIWorld::AIWorld 0 1 38 0
34
AIWorld::AIWorld(NodePath render);

89 8 ~AIWorld 0 4 105 17 AIWorld::~AIWorld 0 0 0
24
AIWorld::~AIWorld(void);

90 11 add_ai_char 0 4 105 20 AIWorld::add_ai_char 0 1 39 0
46
void AIWorld::add_ai_char(AICharacter *ai_ch);

91 14 remove_ai_char 0 4 105 23 AIWorld::remove_ai_char 0 1 40 0
42
void AIWorld::remove_ai_char(string name);

92 9 add_flock 0 4 105 18 AIWorld::add_flock 0 1 41 0
38
void AIWorld::add_flock(Flock *flock);

93 9 flock_off 0 4 105 18 AIWorld::flock_off 0 1 42 0
47
void AIWorld::flock_off(unsigned int flock_id);

94 8 flock_on 0 4 105 17 AIWorld::flock_on 0 1 43 0
46
void AIWorld::flock_on(unsigned int flock_id);

95 12 remove_flock 0 4 105 21 AIWorld::remove_flock 0 1 44 0
50
void AIWorld::remove_flock(unsigned int flock_id);

96 9 get_flock 0 4 105 18 AIWorld::get_flock 0 1 45 0
48
Flock AIWorld::get_flock(unsigned int flock_id);

97 12 add_obstacle 0 4 105 21 AIWorld::add_obstacle 0 1 46 0
46
void AIWorld::add_obstacle(NodePath obstacle);

98 15 remove_obstacle 0 4 105 24 AIWorld::remove_obstacle 0 1 47 0
49
void AIWorld::remove_obstacle(NodePath obstacle);

99 10 print_list 0 4 105 19 AIWorld::print_list 0 1 48 0
31
void AIWorld::print_list(void);

100 6 update 0 4 105 15 AIWorld::update 0 1 49 0
27
void AIWorld::update(void);

49
1 0 0 4 3 111 0 0 0 3 4 this 3 106  3 pos 1 107  7 seek_wt 1 110  
2 0 0 4 3 111 0 0 0 3 4 this 3 106  13 target_object 1 112  7 seek_wt 1 110  
3 0 0 4 4 111 0 0 0 5 4 this 3 106  3 pos 1 107  14 panic_distance 1 114  14 relax_distance 1 114  7 flee_wt 1 110  
4 0 0 4 4 111 0 0 0 5 4 this 3 106  13 target_object 1 112  14 panic_distance 1 114  14 relax_distance 1 114  7 flee_wt 1 110  
5 0 0 4 5 111 0 0 0 3 4 this 3 106  13 target_object 1 112  9 pursue_wt 1 110  
6 0 0 4 6 111 0 0 0 5 4 this 3 106  13 target_object 1 112  14 panic_distance 1 114  14 relax_distance 1 114  8 evade_wt 1 110  
7 0 0 4 7 111 0 0 0 2 4 this 3 106  8 distance 1 114  
8 0 0 4 8 111 0 0 0 2 4 this 3 106  8 flock_wt 1 110  
9 0 0 4 9 111 0 0 0 5 4 this 3 106  13 wander_radius 1 114  4 flag 1 115  3 aoe 1 114  13 wander_weight 1 110  
10 0 0 4 10 111 0 0 0 2 4 this 3 106  13 feeler_length 1 110  
11 0 0 4 11 111 0 0 0 2 4 this 3 106  9 follow_wt 1 110  
12 0 0 4 12 111 0 0 0 2 4 this 3 106  3 pos 1 107  
13 0 0 4 13 111 0 0 0 2 4 this 3 106  4 type 1 116  
14 0 0 4 14 111 0 0 40 // should have different function names. 2 4 this 3 106  16 navmesh_filename 1 116  
15 0 0 4 15 111 0 0 0 3 4 this 3 106  3 pos 1 107  4 type 1 116  
16 0 0 4 15 111 0 0 0 3 4 this 3 106  6 target 1 112  4 type 1 116  
17 0 0 4 16 111 0 0 0 2 4 this 3 106  8 obstacle 1 112  
18 0 0 4 17 111 0 0 0 2 4 this 3 106  8 obstacle 1 112  
19 0 0 4 18 111 0 0 21 //add for path follow 2 4 this 3 106  7 ai_type 1 116  
20 0 0 4 19 111 0 0 21 //add for path follow 2 4 this 3 106  7 ai_type 1 116  
21 0 0 4 20 111 0 0 0 2 4 this 3 106  7 ai_type 1 116  
22 0 0 6 21 116 0 0 0 2 4 this 3 106  7 ai_type 1 116  
23 0 0 7 32 117 80 0 0 5 10 model_name 1 116  8 model_np 1 112  4 mass 1 114  10 movt_force 1 114  9 max_force 1 114  
24 0 0 6 23 114 0 0 0 1 4 this 3 117  
25 0 0 4 24 111 0 0 0 2 4 this 3 117  1 m 1 114  
26 0 0 7 25 107 0 0 0 1 4 this 3 117  
27 0 0 6 26 114 0 0 0 1 4 this 3 117  
28 0 0 4 27 111 0 0 0 2 4 this 3 117  9 max_force 1 114  
29 0 0 7 28 112 0 0 0 1 4 this 3 117  
30 0 0 4 29 111 0 0 0 2 4 this 3 117  2 np 1 112  
31 0 0 6 30 106 0 0 0 1 4 this 3 117  
32 0 0 4 31 111 0 0 74 // This function is used to enable or disable the guides for path finding. 2 4 this 3 117  8 pf_guide 1 118  
33 0 0 7 35 119 82 0 0 6 6 grid_x 1 115  6 grid_y 1 115  3 pos 1 107  1 w 1 110  1 l 1 110  1 h 1 110  
34 0 0 6 37 118 0 0 297 ////////////////////////////////////////////////////////////////////
//     Function: contains
//  Description: This is a handy function which returns true if the
//               passed position is within the node's dimensions.
//////////////////////////////////////////////////////////////////// 3 4 this 3 119  1 x 1 110  1 y 1 110  
35 0 0 7 39 121 85 0 0 6 8 flock_id 1 120  11 vcone_angle 1 114  12 vcone_radius 1 114  13 separation_wt 1 120  11 cohesion_wt 1 120  12 alignment_wt 1 120  
36 0 0 4 41 111 0 0 54 // Function to add the ai characters to _ai_char_list. 2 4 this 3 121  7 ai_char 1 117  
37 0 0 6 42 120 0 0 50 // Function to access the private member flock_id. 1 4 this 3 121  
38 0 0 7 44 122 89 0 0 1 6 render 1 112  
39 0 0 4 46 111 0 0 0 2 4 this 3 122  5 ai_ch 1 117  
40 0 0 4 47 111 0 0 0 2 4 this 3 122  4 name 1 116  
41 0 0 4 48 111 0 0 0 2 4 this 3 122  5 flock 1 121  
42 0 0 4 49 111 0 0 0 2 4 this 3 122  8 flock_id 1 120  
43 0 0 4 50 111 0 0 0 2 4 this 3 122  8 flock_id 1 120  
44 0 0 4 51 111 0 0 0 2 4 this 3 122  8 flock_id 1 120  
45 0 0 7 52 121 85 0 0 2 4 this 3 122  8 flock_id 1 120  
46 0 0 4 53 111 0 0 0 2 4 this 3 122  8 obstacle 1 112  
47 0 0 4 54 111 0 0 0 2 4 this 3 122  8 obstacle 1 112  
48 0 0 4 55 111 0 0 0 1 4 this 3 122  
49 0 0 4 56 111 0 0 0 1 4 this 3 122  
22
101 11 AIBehaviors 0 26625 11 AIBehaviors 11 AIBehaviors 0 0 0 0 50 0 19 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 0 0 0 0 0 0

102 11 AICharacter 0 26625 11 AICharacter 11 AICharacter 0 0 0 1 79 80 0 9 70 71 72 73 74 75 76 77 78 0 0 0 0 0 0

103 6 AINode 0 26625 6 AINode 6 AINode 0 0 0 1 81 82 0 1 83 0 0 0 0 0 637
////////////////////////////////////////////////////////////////////
//       Class : AINode
// Description : This class is used to assign the nodes on the mesh.
//               It holds all the data necessary to compute A*
//               algorithm. It also maintains a lot of vital
//               information such as the neighbor nodes of each
//               node and also its position on the mesh.
//               Note: The Mesh Generator which is a standalone
//               tool makes use of this class to generate the nodes
//               on the mesh.
////////////////////////////////////////////////////////////////////

104 5 Flock 0 26625 5 Flock 5 Flock 0 0 0 1 84 85 0 2 86 87 0 0 0 0 0 0

105 7 AIWorld 0 26625 7 AIWorld 7 AIWorld 0 0 0 1 88 89 0 11 90 91 92 93 94 95 96 97 98 99 100 0 0 0 0 0 0

106 13 AIBehaviors * 0 8576 13 AIBehaviors * 13 AIBehaviors * 0 0 101 0 0 0 0 0 0 0 0 0 0

107 11 LVecBase3 * 0 8576 11 LVecBase3 * 11 LVecBase3 * 0 0 108 0 0 0 0 0 0 0 0 0 0

108 9 LVecBase3 0 2105344 9 LVecBase3 9 LVecBase3 0 0 109 0 0 0 0 0 0 0 0 0 0

109 10 LVecBase3f 0 2048 10 LVecBase3f 10 LVecBase3f 0 0 0 0 0 0 0 0 0 0 0 0 265
////////////////////////////////////////////////////////////////////
//       Class : LVecBase3
// Description : This is the base class for all three-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

110 5 float 0 8194 5 float 5 float 0 2 0 0 0 0 0 0 0 0 0 0 0

111 4 void 0 8194 4 void 4 void 0 6 0 0 0 0 0 0 0 0 0 0 0

112 10 NodePath * 0 8576 10 NodePath * 10 NodePath * 0 0 113 0 0 0 0 0 0 0 0 0 0

113 8 NodePath 0 2048 8 NodePath 8 NodePath 0 0 0 0 0 0 0 2 123 124 0 0 0 0 1139
////////////////////////////////////////////////////////////////////
//       Class : NodePath
// Description : NodePath is the fundamental system for disambiguating
//               instances, and also provides a higher-level interface
//               for manipulating the scene graph.
//
//               A NodePath is a list of connected nodes from the root
//               of the graph to any sub-node.  Each NodePath
//               therefore uniquely describes one instance of a node.
//
//               NodePaths themselves are lightweight objects that may
//               easily be copied and passed by value.  Their data is
//               stored as a series of NodePathComponents that are
//               stored on the nodes.  Holding a NodePath will keep a
//               reference count to all the nodes in the path.
//               However, if any node in the path is removed or
//               reparented (perhaps through a different NodePath),
//               the NodePath will automatically be updated to reflect
//               the changes.
////////////////////////////////////////////////////////////////////

114 6 double 0 8194 6 double 6 double 0 3 0 0 0 0 0 0 0 0 0 0 0

115 3 int 0 8194 3 int 3 int 0 1 0 0 0 0 0 0 0 0 0 0 0

116 13 atomic string 0 2 13 atomic string 13 atomic string 0 7 0 0 0 0 0 0 0 0 0 0 0

117 13 AICharacter * 0 8576 13 AICharacter * 13 AICharacter * 0 0 102 0 0 0 0 0 0 0 0 0 0

118 4 bool 0 8194 4 bool 4 bool 0 4 0 0 0 0 0 0 0 0 0 0 0

119 8 AINode * 0 8576 8 AINode * 8 AINode * 0 0 103 0 0 0 0 0 0 0 0 0 0

120 12 unsigned int 0 8198 12 unsigned int 12 unsigned int 0 1 0 0 0 0 0 0 0 0 0 0 0

121 7 Flock * 0 8576 7 Flock * 7 Flock * 0 0 104 0 0 0 0 0 0 0 0 0 0

122 9 AIWorld * 0 8576 9 AIWorld * 9 AIWorld * 0 0 105 0 0 0 0 0 0 0 0 0 0

0
0
2
123 0 0 66 9 get_nodes 13 get_num_nodes 8 get_node 
124 0 0 66 13 get_ancestors 13 get_num_nodes 12 get_ancestor 
